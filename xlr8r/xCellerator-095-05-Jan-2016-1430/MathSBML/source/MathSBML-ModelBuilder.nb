(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    461245,      11107]
NotebookOptionsPosition[    452013,      10799]
NotebookOutlinePosition[    452454,      10816]
CellTagsIndexPosition[    452411,      10813]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["MathSBML-ModelBuilder", "Title",
 CellChangeTimes->{{3.506218555724552*^9, 3.5062185629941654`*^9}}],

Cell[TextData[{
 StyleBox["Private functions used by the MathSBML Model Builder Module for ",
  FontSize->18],
 StyleBox["Mathematica",
  FontSize->18,
  FontSlant->"Italic"],
 StyleBox[" 8; \npublic functions are defined in MathSBML-Public.nb\n",
  FontSize->18],
 "\n2.24.201l - original build extracted from MathSBML 2.9.0"
}], "Text",
 CellChangeTimes->{{3.5049749139353447`*^9, 3.504974953152588*^9}, {
  3.506218567424573*^9, 3.5062185960194235`*^9}}],

Cell[CellGroupData[{

Cell["File Description", "Section",
 CellChangeTimes->{{3.395408039119268*^9, 3.395408049088715*^9}, {
  3.5062180912805367`*^9, 3.5062181026997566`*^9}}],

Cell[TextData[{
 StyleBox[" ",
  FontSize->16],
 StyleBox["Filename:\tMathSBML-ModelBuilder.nb\n Description:\tMathSBML is an \
SBML reader for ",
  FontSize->12],
 StyleBox["Mathematica \n \t\t",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox["This is part of the MathSBML Package\n Organization: \tCaltech \
Biological Network Modeling Center\n License:\tLGPL \n \n ",
  FontSize->12],
 "    This file is part of MathSBML.\n \n    MathSBML is free software: you \
can redistribute it and/or modify\n    it under the terms of the GNU Lesser \
General Public License as published by\n    the Free Software Foundation, \
either version 3 of the License, or\n    (at your option) any later version.\n\
\n    This program is distributed in the hope that it will be useful,\n    \
but WITHOUT ANY WARRANTY; without even the implied warranty of\n    \
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU \
General Public License for more details.\n\n    You should have received a \
copy of the GNU Lesser General Public License\n    along with this program.  \
If not, see <http://www.gnu.org/licenses/>."
}], "Text",
 CellChangeTimes->{{3.388248302205469*^9, 3.388248304035112*^9}, 
   3.388264681197356*^9, {3.3882668683761797`*^9, 3.388266875242931*^9}, 
   3.388353386077384*^9, {3.388363325911048*^9, 3.3883633263870773`*^9}, 
   3.3883996477410192`*^9, {3.388761163736053*^9, 3.38876116441009*^9}, {
   3.389125922604425*^9, 3.389125923136166*^9}, {3.390045172241888*^9, 
   3.39004517571679*^9}, {3.39019850450497*^9, 3.3901985115655603`*^9}, {
   3.392748682342765*^9, 3.392748683344193*^9}, {3.3954080212118177`*^9, 
   3.395408027048024*^9}, {3.395690507776781*^9, 3.3956905087487507`*^9}, {
   3.3973955266739798`*^9, 3.397395527497595*^9}, {3.401465824219963*^9, 
   3.401465836954739*^9}, 3.506217737019514*^9, {3.5062177764407835`*^9, 
   3.506217778375187*^9}, 3.506217826938072*^9, {3.5062180797833166`*^9, 
   3.506218242226402*^9}, {3.50621853733212*^9, 3.5062185392197237`*^9}, {
   3.537137189078252*^9, 3.5371371948694696`*^9}},
 FontSize->10,
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Model Builder ", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading: Model Builder\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["MathML <--> Infix conversion", "Subsection"],

Cell[CellGroupData[{

Cell["MathMLToInfix", "Subsubsection"],

Cell[TextData[{
 "2.5.17\n6/12/06\nDue to a bug in MathMLToExpressons, MathML with embedded \
<cn type=\"e-notation\">a<sep/>b</cn> will sometimes generate an error:\n\n\t\
System`Convert`MathMLDump`$Falied\n\t\nThis error has been reported to \
Wolfram, including the mispelling of Failed.\nWolfram Technical Support \
Response \"",
 StyleBox["[TS 18453]--Re:E-notation error in XML support?",
  FontFamily->"Helvetica",
  FontWeight->"Bold"],
 "\" August 2, 2004.\nThis modification has been made to replace the \
e-notation with an expression of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Times]", 
    SuperscriptBox["10", "b"], " "}], TraditionalForm]]],
 "as in \n",
 "<math xmlns='http://www.w3.org/1998/Math/MathML'>\n <apply>\n  <times/>\n  \
<apply>\n   <power/>\n   <cn type='integer'>10</cn>\n   <ci>b</ci>\n  \
</apply>\n  <ci>a</ci>\n </apply>\n</math>",
 "\n\t"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"MathMLToInfix", "[", "mathml_", "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"s", " ", "=", 
         RowBox[{"XML`MathML`MathMLToExpression", "[", "mathml", "]"}]}], ";",
         " ", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"MathMLToInfix", "[", "mathml_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s", ",", "xmlelment", ",", "xmlobj"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"xmlelement", "[", 
         RowBox[{"\"\<cn\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<type\>\"", "\[Rule]", "\"\<e-notation\>\""}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"m_", ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<sep\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", "exp_"}], "}"}]}], "]"}], ":=",
         " ", "\[IndentingNewLine]", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<apply\>\"", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<times\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<apply\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"XMLElement", "[", 
                 RowBox[{"\"\<power\>\"", ",", 
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}]}], "]"}], ",", 
                RowBox[{"XMLElement", "[", 
                 RowBox[{"\"\<cn\>\"", ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<type\>\"", "\[Rule]", "\"\<integer\>\""}], 
                   "}"}], ",", 
                  RowBox[{"{", "\"\<10\>\"", "}"}]}], "]"}], ",", 
                RowBox[{"XMLElement", "[", 
                 RowBox[{"\"\<ci\>\"", ",", 
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "exp", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "m", "}"}]}], "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"xmlelement", "[", "x___", "]"}], ":=", " ", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"xmlobj", "[", "\"\<Document\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"XMLElement", "[", "u___", "]"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], ":=", " ", 
        RowBox[{"XMLElement", "[", "u", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"s", "=", 
        RowBox[{"ImportString", "[", 
         RowBox[{"mathml", ",", " ", "\"\<SymbolicXML\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"s", "=", " ", 
        RowBox[{"s", "/.", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "\[Rule]", " ", "xmlelement"}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"s", "=", 
        RowBox[{"s", "/.", 
         RowBox[{"{", 
          RowBox[{"XMLObject", "\[Rule]", " ", "xmlobj"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", 
        RowBox[{"XML`MathML`SymbolicMathMLToExpression", "[", "s", "]"}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["InfixToMathML", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InfixToMathML", "[", "infix_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"XML`MathML`ExpressionToMathML", "[", 
        RowBox[{"infix", ",", " ", 
         RowBox[{"\"\<Formats\>\"", "\[Rule]", " ", 
          RowBox[{"{", "\"\<ContentMathML\>\"", "}"}]}]}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["validIdentifier", "Subsection"],

Cell["\<\
returns True if x is a valid identifier, False otherwise. 
This function was replaced with SIDQ. 5/18/04 andn is no longer used\
\>", "Text"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"validIdentifier", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"s", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringQ", "[", "x", "]"}], ",", " ", "x", ",", " ", 
          RowBox[{"ToString", "[", "x", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{"Characters", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "s", "]"}], "<", "1"}], ",", 
         RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"LetterQ", "[", 
             RowBox[{"s", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", "\[Or]", 
            RowBox[{
             RowBox[{"s", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "==", "\"\<_\>\""}]}], ")"}]}], 
         ",", " ", 
         RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"s", ",", " ", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"DigitQ", "[", "#", "]"}], "\[Or]", " ", 
              RowBox[{"LetterQ", "[", "#", "]"}], "\[Or]", 
              RowBox[{"(", 
               RowBox[{"#", "==", "\"\<_\>\""}], ")"}]}], ")"}]}], "&"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "s", "]"}], "<", "1"}], ",", " ", 
         RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "False", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "*)"}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["sbmlBoolean", "Subsection"],

Cell["returns a \"true\" or \"false\" based on the value of x", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sbmlBoolean", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "y", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"x", ",", " ", 
        RowBox[{"Return", "[", "\"\<true\>\"", "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"y", "=", 
       RowBox[{"ToUpperCase", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringQ", "[", "x", "]"}], ",", " ", "x", ",", " ", 
          RowBox[{"ToString", "[", "x", "]"}]}], "]"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"y", "==", "\"\<TRUE\>\""}], ",", " ", "\"\<true\>\"", ",", 
         " ", "\"\<false\>\""}], "]"}], "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["expression2SBML", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expression2SBML", "[", "x__", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"expression2SymbolicSBML", "[", "x", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"ExportXMLString", "[", "s", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389722331824696*^9, 3.389722335238739*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["reactionToSymbolicSBML", "Subsection"],

Cell["\<\
revise 2.7.2b 11 Feb 08 to 
(a) not allow specification of timeUnits or substanceUnits in l2V3 kinetic laws
(b) not write them out by default in l2v3
(c) signal error when either is present in l2v3 kinetic laws\
\>", "Text",
 CellChangeTimes->{{3.411758534213511*^9, 3.4117585955478354`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"reactionToSymbolicSBML", "[", 
     RowBox[{"opts___", "?", "RuleQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "id", ",", " ", "name", ",", " ", "reactants", ",", " ", 
        "reactantStoichiometry", ",", " ", "products", ",", " ", 
        "productStoichiometry", ",", " ", "modifiers", ",", " ", "kineticLaw",
         ",", "parameters", ",", " ", "reversible", ",", " ", "fast", ",", 
        " ", "timeUnits", ",", " ", "substanceUnits", ",", " ", "reaction", 
        ",", " ", "getrp", ",", " ", 
        RowBox[{"dbg", "=", "True"}], ",", " ", "i", ",", " ", "plus", ",", 
        "opt", ",", "ann", ",", "notes", ",", "mann", ",", "pann", ",", 
        "rann", ",", "metaid", ",", "mnotes", ",", "pnotes", ",", "rnotes", 
        ",", "mmetaids", ",", "rmetaids", ",", "pmetaids", ",", "rsbos", ",", 
        " ", "msbos", ",", " ", "psbos", ",", " ", "sboTerm", ",", " ", "n", 
        ",", "ksbo", ",", "klawmetaid", ",", " ", 
        StyleBox["padNull",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox[",",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox[" ",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox["getListData",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox[",",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox[" ",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox["getStringData",
         FontColor->RGBColor[0, 0, 1]]}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         StyleBox["padNull",
          FontColor->RGBColor[0, 0, 1]], "[", 
         RowBox[{"list_", ",", " ", "n_"}], "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "modifiedList", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"modifiedList", " ", "=", " ", "list"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "modifiedList", "]"}], "<", "n"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"modifiedList", " ", "=", " ", 
               RowBox[{"Append", "[", 
                RowBox[{"modifiedList", ",", 
                 RowBox[{"{", "}"}]}], "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "modifiedList", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "of", " ", 
         StyleBox["padNull",
          FontColor->RGBColor[0, 0, 1]]}], 
        StyleBox[" ",
         FontColor->RGBColor[0, 0, 1]], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"opt", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opts", "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "the", " ", "reaction", " ", "could", " ", "be", " ", "the", " ", 
         "first", " ", "option", " ", "and", " ", "need", " ", "to", " ", 
         "filter", " ", "this", " ", "out", " ", "before", " ", "checking"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"checkOptions", "[", 
          RowBox[{
          "reactionToSymbolicSBML", ",", " ", "opt", ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<annotation\>\"", ",", "\"\<fast\>\"", ",", "\"\<id\>\"", 
             ",", "\"\<kineticLaw\>\"", ",", "\"\<kineticLawmetaid\>\"", ",", 
             " ", "\"\<kineticLawSBOTerm\>\"", ",", "\"\<metaid\>\"", ",", 
             "\"\<modifiers\>\"", ",", "\"\<modifierSBOTerms\>\"", ",", 
             "\"\<name\>\"", ",", "\"\<notes\>\"", ",", "\"\<parameters\>\"", 
             ",", "\"\<productmetaids\>\"", ",", "\"\<products\>\"", ",", 
             "\"\<productSBOTerms\>\"", ",", "\"\<productStoichiometry\>\"", 
             ",", "\"\<reactantmetaids\>\"", ",", "\"\<reactants\>\"", ",", 
             "\"\<reactantSBOTerms\>\"", ",", "\"\<reactantStoichiometry\>\"",
              ",", "\"\<reaction\>\"", ",", "\"\<reversible\>\"", ",", 
             "\"\<sboTerm\>\"", ",", "\"\<substanceUnits\>\"", ",", 
             "\"\<timeUnits\>\""}], "}"}]}], " ", "]"}], ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"dbg", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`debug", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`debug", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", "opt"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "optionToAnnotation"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`notes", "/.", "opt"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`notes", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "stringToNotes"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", "\"\<reactionToSymbolicSBML: annotations \>\"", ",", 
         "ann"}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["getrp",
          FontColor->RGBColor[0, 0, 1]], "[", 
         RowBox[{
          RowBox[{"Plus", "[", "r__", "]"}], "\[Rule]", " ", 
          RowBox[{"Plus", "[", "p__", "]"}]}], "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "rlist", ",", " ", "plist", ",", " ", "rstoic", ",", " ", "pstoic",
             ",", " ", "getstoic", ",", " ", "stoichiometry"}], "}"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             StyleBox["stoichiometry",
              FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", 
            RowBox[{"(", " ", 
             RowBox[{"x", "/.", 
              RowBox[{"{", 
               RowBox[{"Plus", "\[Rule]", " ", "plus"}], "}"}]}], ")"}]}], 
           ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             StyleBox["getstoic",
              FontColor->RGBColor[0, 0, 1]], "[", 
             RowBox[{"s_", "*", " ", 
              RowBox[{"(", 
               RowBox[{"x_", "?", "SIDQ"}], ")"}]}], " ", "]"}], ":=", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", 
              RowBox[{"s", "/.", 
               RowBox[{"{", 
                RowBox[{"plus", "\[Rule]", " ", "Plus"}], "}"}]}]}], "}"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             StyleBox["getstoic",
              FontColor->RGBColor[0, 0, 1]], "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x_", "?", "SIDQ"}], " ", ")"}], "*", " ", "s_"}], 
             "]"}], ":=", " ", 
            RowBox[{"{", 
             RowBox[{"x", ",", " ", 
              RowBox[{"s", "/.", 
               RowBox[{"{", 
                RowBox[{"plus", "\[Rule]", " ", "Plus"}], "}"}]}]}], "}"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             StyleBox["getstoic",
              FontColor->RGBColor[0, 0, 1]], "[", 
             RowBox[{"x_", "*", "y_"}], "]"}], ":=", " ", 
            RowBox[{"(", " ", 
             RowBox[{
              RowBox[{"printWarning", "[", 
               RowBox[{
               "\"\<Unable to distinguish stoichiometry from identifier in \>\
\"", "<>", 
                RowBox[{"ToString", "[", 
                 RowBox[{"InputForm", "[", 
                  RowBox[{"x", "*", "y"}], "]"}], "]"}]}], "]"}], ";", " ", 
              RowBox[{"Abort", "[", "]"}], ";"}], ")"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             StyleBox["getstoic",
              FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
            RowBox[{"If", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"ToString", "[", 
                RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
               "\"\<Symbol\>\""}], ",", " ", "\[IndentingNewLine]", 
              RowBox[{"Return", "[", 
               RowBox[{"{", 
                RowBox[{"x", ",", " ", "1"}], "}"}], "]"}], ",", " ", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{
                 "\"\<Warning: reactionToSymbolicSBML:\>\"", "//", 
                  "boldRed"}], ",", " ", 
                 RowBox[{
                 "\"\<Unable to determine stoichiometry or identifier of \
reactant \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{
                  RowBox[{"ToString", "[", 
                   RowBox[{"InputForm", "[", "x", "]"}], "]"}], "//", 
                  "boldBlue"}], ",", " ", 
                 RowBox[{"\"\< in the reaction \>\"", "//", "boldBlack"}], 
                 ",", " ", 
                 RowBox[{
                  RowBox[{"Plus", "[", "r", "]"}], "//", "boldBlue"}], ",", 
                 RowBox[{"\"\<\[Rule]\>\"", "//", "boldBlue"}], ",", " ", 
                 RowBox[{
                  RowBox[{"Plus", "[", "p", "]"}], "//", "boldBlue"}]}], " ", 
                "]"}], ";", " ", "\[IndentingNewLine]", 
               RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}]}], ";", " ", 
           RowBox[{"(*", " ", 
            RowBox[{"end", " ", "of", " ", 
             StyleBox["getstoic",
              FontColor->RGBColor[0, 0, 1]]}], " ", "*)"}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"rlist", " ", "=", " ", 
            RowBox[{
             RowBox[{"{", "r", "}"}], "/.", 
             RowBox[{"{", 
              RowBox[{
              "Global`Stoichiometry", "\[Rule]", " ", "stoichiometry"}], 
              "}"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"rlist", " ", "=", " ", 
            RowBox[{
             RowBox[{"rlist", "/.", 
              RowBox[{"{", 
               RowBox[{"Plus", "\[Rule]", " ", "List"}], "}"}]}], "//", 
             "Flatten"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"plist", " ", "=", " ", 
            RowBox[{
             RowBox[{"{", "p", "}"}], "/.", 
             RowBox[{"{", 
              RowBox[{
              "Global`Stoichiometry", "\[Rule]", " ", "stoichiometry"}], 
              "}"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"plist", " ", "=", " ", 
            RowBox[{
             RowBox[{"plist", "/.", 
              RowBox[{"{", 
               RowBox[{"Plus", "\[Rule]", " ", "List"}], "}"}]}], "//", 
             "Flatten"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"rlist", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{"getstoic", ",", " ", "rlist"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"plist", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{"getstoic", ",", " ", "plist"}], "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"rlist", ",", " ", "rstoic"}], "}"}], " ", "=", " ", 
            RowBox[{
             RowBox[{"Transpose", "[", "rlist", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
              "Global`Stoichiometry", "\[Rule]", " ", "stoichiometry"}], 
              "}"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"plist", ",", " ", "pstoic"}], "}"}], " ", "=", " ", 
            RowBox[{
             RowBox[{"Transpose", "[", "plist", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{
              "Global`Stoichiometry", "\[Rule]", " ", "stoichiometry"}], 
              "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"debugPrint", "[", 
            RowBox[{
            "dbg", ",", " ", "\"\<getRP: {rlist, rstoic,plist, pstoic}\>\"", 
             ",", " ", 
             RowBox[{"{", 
              RowBox[{
              "rlist", ",", " ", "rstoic", " ", ",", " ", "plist", ",", " ", 
               "pstoic"}], "}"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"{", 
             RowBox[{
             "rlist", ",", "rstoic", ",", " ", "plist", ",", " ", "pstoic"}], 
             "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "of", " ", 
         StyleBox["getrp",
          FontColor->RGBColor[0, 0, 1]]}], 
        StyleBox[" ",
         FontColor->RGBColor[0, 0, 1]], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"getrp", "[", "x___", "]"}], ":=", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Failed\>\"", ",", " ", "\"\<Failed\>\"", ",", "\"\<Failed\>\"", 
          ",", " ", "\"\<Failed\>\""}], "}"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"id", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "Global`id", ")"}], "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\< \>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", "==", "\"\< \>\""}], ",", 
         RowBox[{
          RowBox[{"id", " ", "=", " ", 
           RowBox[{"\"\<reaction\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"MB$reactioncounter", "++"}], "]"}]}]}], ";"}]}], " ", 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"name", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`name", ")"}], "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`name", "\[Rule]", " ", "id"}], "}"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"metaid", "=", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"sboTerm", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`sboTerm", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`sboTerm", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"sboTerm", " ", "=", " ", 
        RowBox[{"stringer", "[", "sboTerm", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<reactionTOSymbolicSBML opt: id, name:\>\"", ",",
          " ", 
         RowBox[{"{", 
          RowBox[{"id", ",", " ", "name"}], "}"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"reaction", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`reaction", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`reaction", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<reactionToSymbolicSBML opt: reaction:\>\"", ",",
          " ", "reaction"}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "reactants", ",", " ", "reactantStoichiometry", ",", " ", "products",
           ",", " ", "productStoichiometry"}], "}"}], "=", " ", 
        RowBox[{"getrp", "[", "reaction", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"ListQ", "[", "reactants", "]"}], "&&", 
            RowBox[{"ListQ", "[", "products", "]"}]}], ")"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", "\"\<reactionToSymbolicSBML: !List: \>\"", ",", " ", 
            "True"}], "]"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"reactants", " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", "Global`reactants", ")"}], "/.", "opt"}], "/.", 
              RowBox[{"{", 
               RowBox[{"Global`reactants", "\[Rule]", " ", 
                RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"products", " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", "Global`products", ")"}], "/.", "opt"}], "/.", 
              RowBox[{"{", 
               RowBox[{"Global`products", "\[Rule]", " ", 
                RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"reactantStoichiometry", " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", "Global`reactantStoichiometry", ")"}], "/.", 
               "opt"}], "/.", 
              RowBox[{"{", 
               RowBox[{"Global`reactantStoichiometry", "\[Rule]", " ", 
                RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"reactantStoichiometry", " ", "=", " ", 
           RowBox[{"PadRight", "[", 
            RowBox[{"reactantStoichiometry", ",", " ", 
             RowBox[{"Length", "[", "reactants", "]"}], ",", "1"}], "]"}]}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"productStoichiometry", " ", "=", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"(", "Global`productStoichiometry", ")"}], "/.", 
               "opt"}], "/.", 
              RowBox[{"{", 
               RowBox[{"Global`productStoichiometry", "\[Rule]", " ", 
                RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"productStoichiometry", " ", "=", " ", 
           RowBox[{"PadRight", "[", 
            RowBox[{"productStoichiometry", ",", " ", 
             RowBox[{"Length", "[", "products", "]"}], ",", " ", "1"}], 
            "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "reactants", "]"}], "\[Equal]", "0"}], 
             " ", "\[And]", " ", 
             RowBox[{
              RowBox[{"Length", "[", "products", "]"}], "\[Equal]", "0"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"reaction", " ", "=", 
              RowBox[{"First", "[", "opt", "]"}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "reactants", ",", " ", "reactantStoichiometry", ",", " ", 
                "products", ",", " ", "productStoichiometry"}], "}"}], "=", 
              " ", 
              RowBox[{"getrp", "[", "reaction", "]"}]}], ";"}]}], " ", 
           "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", 
         "\"\<reactionToSymbolicSBML opt: {reactants, products, \
reactantStoichimetry, productStoichiometry}\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "reactants", ",", " ", "products", ",", "reactantStoichiometry", 
           ",", " ", "productStoichiometry"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"modifiers", " ", "=", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"(", "Global`modifiers", ")"}], "/.", "opt"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`modifiers", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"kineticLaw", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`kineticLaw", ")"}], "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`kineticLaw", "\[Rule]", "Indeterminate"}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<reactionToSymbolicSBML opt: kineticLaw: \>\"", 
         ",", " ", "kineticLaw"}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"timeUnits", " ", "=", 
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "Global`timeUnits", ")"}], "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`timeUnits", "\[Rule]", "\"\<time\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"substanceUnits", " ", "=", 
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "Global`substanceUnits", " ", ")"}], "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{
           "Global`substanceUnits", " ", "\[Rule]", "\"\<substance\>\""}], 
           "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"klawmetaid", " ", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`kineticLawmetaid", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`kineticLawmetaid", "\[Rule]", " ", "\"\<\>\""}], 
           "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"ksbo", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`kineticLawSBOTerm", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`kineticLawSBOTerm", "\[Rule]", " ", "\"\<\>\""}], 
           "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"parameters", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`parameters", ")"}], "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`parameters", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"ListQ", "[", "parameters", "]"}]}], ",", " ", 
         RowBox[{"parameters", "=", 
          RowBox[{"{", "parameters", "}"}]}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"reversible", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`reversible", ")"}], "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`reversible", "\[Rule]", " ", "True"}], "}"}]}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"reversible", " ", "=", " ", 
        RowBox[{"sbmlBoolean", "[", "reversible", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"fast", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`fast", ")"}], "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`fast", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"fast", " ", "=", " ", 
        RowBox[{"sbmlBoolean", "[", "fast", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["getListData",
          FontColor->RGBColor[0, 0, 1]], "[", 
         RowBox[{"tag_", ",", " ", "n_"}], "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "listData", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"listData", " ", "=", 
            RowBox[{
             RowBox[{"tag", "/.", "opt"}], "/.", 
             RowBox[{"{", 
              RowBox[{"tag", "\[Rule]", " ", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", " ", 
                 RowBox[{"{", "n", "}"}]}], "]"}]}], "}"}]}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"listData", " ", "=", " ", 
            RowBox[{"padNull", "[", 
             RowBox[{"listData", ",", "n"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"listData", " ", "=", " ", 
            RowBox[{"Take", "[", 
             RowBox[{"listData", ",", "n"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "listData", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["getStringData",
          FontColor->RGBColor[0, 0, 1]], "[", 
         RowBox[{"tag_", ",", " ", "n_"}], "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "listData", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"listData", " ", "=", 
            RowBox[{
             RowBox[{"tag", "/.", "opt"}], "/.", 
             RowBox[{"{", 
              RowBox[{"tag", "\[Rule]", " ", 
               RowBox[{"Table", "[", 
                RowBox[{"\"\<\>\"", ",", " ", 
                 RowBox[{"{", "n", "}"}]}], "]"}]}], "}"}]}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"listData", "=", 
            RowBox[{"PadRight", "[", 
             RowBox[{"listData", ",", "n", ",", "\"\<\>\""}], "]"}]}], ";", 
           " ", "\[IndentingNewLine]", 
           RowBox[{"listData", " ", "=", " ", 
            RowBox[{"Take", "[", 
             RowBox[{"listData", ",", "n"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "listData", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"rann", " ", "=", " ", 
        RowBox[{"getListData", "[", 
         RowBox[{"Global`reactantannotations", ",", " ", 
          RowBox[{"Length", "[", "reactants", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"pann", " ", "=", " ", 
        RowBox[{"getListData", "[", 
         RowBox[{"Global`productannotations", ",", " ", 
          RowBox[{"Length", "[", "products", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"mann", " ", "=", " ", 
        RowBox[{"getListData", "[", 
         RowBox[{"Global`modifierannotations", ",", " ", 
          RowBox[{"Length", "[", "modifiers", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rnotes", " ", "=", " ", 
        RowBox[{"getListData", "[", 
         RowBox[{"Global`reactantnotes", ",", " ", 
          RowBox[{"Length", "[", "reactants", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"pnotes", " ", "=", " ", 
        RowBox[{"getListData", "[", 
         RowBox[{"Global`productnotes", ",", " ", 
          RowBox[{"Length", "[", "products", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"mnotes", " ", "=", " ", 
        RowBox[{"getListData", "[", 
         RowBox[{"Global`modifiernotes", ",", " ", 
          RowBox[{"Length", "[", "modifiers", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rmetaids", " ", "=", " ", 
        RowBox[{"getStringData", "[", 
         RowBox[{"Global`reactantmetaids", ",", " ", 
          RowBox[{"Length", "[", "reactants", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"pmetaids", "=", " ", 
        RowBox[{"getStringData", "[", 
         RowBox[{"Global`productmetaids", ",", 
          RowBox[{"Length", "[", "products", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"mmetaids", "=", " ", 
        RowBox[{"getStringData", "[", 
         RowBox[{"Global`modifiermetaids", ",", 
          RowBox[{"Length", "[", "modifiers", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rsbos", " ", "=", " ", 
        RowBox[{"getStringData", "[", 
         RowBox[{"Global`reactantSBOTerms", ",", " ", 
          RowBox[{"Length", "[", "reactants", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"psbos", "=", " ", 
        RowBox[{"getStringData", "[", 
         RowBox[{"Global`productSBOTerms", ",", 
          RowBox[{"Length", "[", "products", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"msbos", "=", " ", 
        RowBox[{"getStringData", "[", 
         RowBox[{"Global`modifierSBOTerms", ",", 
          RowBox[{"Length", "[", "modifiers", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"reactionToSymbolicSBML", "[", 
         RowBox[{
         "id", ",", " ", "name", ",", "metaid", ",", " ", "reactants", ",", 
          "reactantStoichiometry", ",", "  ", "products", ",", " ", 
          "productStoichiometry", ",", " ", "modifiers", ",", " ", 
          "kineticLaw", ",", "klawmetaid", ",", "  ", "parameters", ",", 
          "timeUnits", ",", " ", "substanceUnits", ",", " ", "reversible", 
          ",", " ", "fast", ",", "rann", ",", "pann", ",", "mann", ",", "ann",
           ",", "rmetaids", ",", "pmetaids", ",", "mmetaids", ",", " ", 
          "notes", ",", "rnotes", ",", "pnotes", ",", "mnotes", ",", " ", 
          "sboTerm", ",", " ", "rsbos", ",", " ", "psbos", ",", " ", "msbos", 
          ",", " ", "ksbo"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"reactionToSymbolicSBML", "[", 
     RowBox[{"{", 
      RowBox[{"r_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "}"}], "]"}], ":=", " ", 
    RowBox[{"reactionToSymbolicSBML", "[", 
     RowBox[{
      RowBox[{"Global`reaction", "\[Rule]", " ", "r"}], ",", " ", "opt"}], 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"reactionToSymbolicSBML", "[", 
    RowBox[{
    "rid_", ",", " ", "rname_", ",", "rmetaid_", ",", "  ", "rreactants_", 
     ",", " ", "rreactantStoichiometry_", ",", " ", "rproducts_", ",", 
     "rproductStoichiometry_", ",", " ", "rmodifiers_", ",", " ", 
     "rkineticLaw_", ",", "rklawmetaid_", ",", " ", "rparameters_", ",", " ", 
     "timeUnits_", ",", " ", "substanceUnits_", ",", " ", "rreversible_", ",",
      " ", "rfast_", ",", "rann_", ",", " ", "pann_", ",", " ", "mann_", ",", 
     "annotation_", ",", "rmetaids_", ",", "pmetaids_", ",", "mmetaids_", ",",
      "notes_", ",", "rnotes_", ",", " ", "pnotes_", ",", " ", "mnotes_", ",",
      " ", "sboTerm_", ",", " ", "rsbos_", ",", " ", "psbos_", ",", " ", 
     "msbos_", ",", " ", "ksbo_"}], "]"}], ":=", " ", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "id", ",", " ", "name", ",", " ", "reactants", ",", " ", "metaid", ",", 
       "reactantStoichiometry", ",", " ", "products", ",", " ", 
       "productStoichiometry", ",", " ", "modifiers", ",", 
       "modifierStoichiometry", ",", " ", "kineticLaw", ",", " ", 
       "reversible", ",", " ", "fast", ",", " ", 
       StyleBox["speciesReference",
        FontColor->RGBColor[0, 0, 1]], ",", " ", "SBML", ",", "data", ",", 
       " ", 
       RowBox[{"dbg", "=", "False"}], ",", " ", "getpar", ",", "pars", ",", 
       "klawann", ",", "klawnotes", ",", " ", "klawopts", ",", "klawdata", 
       ",", "  ", 
       StyleBox["modifierSpeciesReference",
        FontColor->RGBColor[0, 0, 1]]}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<reactionToSymbolicSBML: {rreactants, rproducts}\>\"", 
        ",", " ", 
        RowBox[{"{", 
         RowBox[{"rreactants", ",", " ", "rproducts"}], "}"}]}], "]"}], ";", 
      " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", 
        "\"\<reactionToSymbolicSBML: {rreactantStoichiometry, \
rproductStoichiometry}\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "rreactantStoichiometry", ",", " ", "rproductStoichiometry"}], 
         "}"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<reactionToSymbolicSBML: reactant annotations\>\"", 
        ",", " ", "rann"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<reactionToSymbolicSBML: product annotations\>\"", ",",
         " ", "pann"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<reactionToSymbolicSBML: modifier annotations\>\"", 
        ",", " ", "mann"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["modifierSpeciesReference",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{
        "sp_", ",", " ", "st_", ",", " ", "ann_", ",", "Notes_", ",", 
         "metaid_", ",", " ", 
         RowBox[{"sbo_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
       RowBox[{
        RowBox[{"speciesReference", "[", 
         RowBox[{
         "sp", ",", "st", ",", "ann", ",", "Notes", ",", "metaid", ",", " ", 
          "sbo"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
         "\"\<speciesReference\>\"", "\[Rule]", " ", 
          "\"\<modifierSpeciesReference\>\""}], "}"}]}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["speciesReference",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{
        "species_", ",", " ", "stoichiometry_", ",", " ", "ann_", ",", 
         "Notes_", ",", " ", "metaid_", ",", " ", 
         RowBox[{"sbo_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s", ",", " ", "data", ",", " ", "sp", ",", "m", ",", "u"}],
           "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sp", " ", "=", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"StringQ", "[", "species", "]"}], ",", " ", "species", 
             ",", " ", 
             RowBox[{"ToString", "[", "species", "]"}]}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"SIDQ", "[", "sp", "]"}]}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{
               "\"\<Warning: reactionToSymbolicSBML:\>\"", "//", 
                "boldOrange"}], ",", "\[IndentingNewLine]", 
               RowBox[{"\"\<Invalid species id = \>\"", "//", "boldBlack"}], 
               ",", 
               RowBox[{"sp", "//", "boldRed"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"explainSIDError", "[", "sp", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"u", "=", 
           RowBox[{"{", 
            RowBox[{"\"\<species\>\"", "\[Rule]", " ", "sp"}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"m", "=", 
           RowBox[{"stringer", "[", "metaid", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"m", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
            RowBox[{"u", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"u", ",", 
               RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "m"}]}], "]"}]}]}], 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"StringLength", "[", 
              RowBox[{"stringer", "[", "sbo", "]"}], "]"}], ">", "0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
               "2.15"}], ",", " ", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"u", ",", " ", 
                RowBox[{"\"\<sboTerm\>\"", "\[Rule]", " ", 
                 RowBox[{"stringer", "[", "sbo", "]"}]}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                RowBox[{
                "\"\<reactionToSBML: speciesReference: \>\"", "//", 
                 "boldBlack"}], ",", " ", "\[IndentingNewLine]", 
                RowBox[{"\"\< reaction: \>\"", "//", "boldBlack"}], ",", " ", 
                RowBox[{"id", "//", "boldBlue"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\< species: \>\"", "//", "boldBlack"}], ",", " ", 
                RowBox[{"species", "//", "boldBlue"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                "\"\< SBOTerms are not permitted in \>\"", "//", 
                 "boldBlack"}], ",", " ", 
                RowBox[{"\"\<SBML Level \>\"", "//", "boldBlue"}], ",", 
                RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
                RowBox[{"\"\< Version \>\"", "//", "boldBlue"}], ",", " ", 
                RowBox[{"MB$Version", "//", "boldBlue"}]}], "]"}]}], 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "Revised", " ", "2.3", ".24", " ", "to", " ", "put", " ", 
              "integer", " ", "stoichiometry", " ", "inline"}], ";", " ", 
             RowBox[{
             "revised", " ", "2.3", ".31", " ", "to", " ", "allow", " ", 
              "any", " ", "flotaing", " ", "point", " ", "value", " ", "as", 
              " ", "well"}]}], " ", "*)"}],
           FontWeight->"Plain"], 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain"], 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"NumberQ", "[", "stoichiometry", "]"}], " ", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"stoichiometry", " ", "\[NotEqual]", "  ", "1"}], ",", 
               " ", 
               RowBox[{
                RowBox[{"u", " ", "=", " ", 
                 RowBox[{"Append", "[", 
                  RowBox[{"u", ",", 
                   RowBox[{"\"\<stoichiometry\>\"", "\[Rule]", " ", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"InputForm", "[", "stoichiometry", "]"}], 
                    "]"}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"data", "=", 
              RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"data", " ", "=", " ", 
              RowBox[{"{", 
               RowBox[{"expression2SymbolicSBML", "[", "stoichiometry", "]"}],
                "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"modified", " ", "5"}], "-", "24", "-", 
               RowBox[{
               "04", " ", "to", " ", "add", " ", "the", " ", "following"}]}], 
              " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"data", " ", "=", " ", 
              RowBox[{"{", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\"\<stoichiometryMath\>\"", ",", " ", 
                 RowBox[{"{", "}"}], ",", " ", "data"}], "]"}], "}"}]}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"data", " ", "=", " ", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"Notes", ",", " ", "ann", ",", " ", "data"}], "]"}], "//",
             "Flatten"}]}], ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"s", " ", "=", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{
            "\"\<speciesReference\>\"", ",", " ", "u", ",", " ", "data"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "s", "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "of", " ", 
        StyleBox["speciesReferece",
         FontColor->RGBColor[0, 0, 1]]}], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], "*)"}], " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"id", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "[", "rid", "]"}], ",", " ", "rid", ",", " ", 
         RowBox[{"ToString", "[", "rid", "]"}]}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"SIDQ", "[", "id", "]"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"data", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{"\"\<id\>\"", "\[Rule]", " ", "id"}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<speciesToSymbolicSBML: reaction id \>\"", "//", "boldBlack"}],
            ",", " ", 
           RowBox[{"id", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"name", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "[", "rname", "]"}], ",", "rname", ",", " ", 
         RowBox[{"ToString", "[", "rname", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "name", "]"}], ">", "0"}], ",", " ", 
        RowBox[{"data", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"data", ",", " ", 
           RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}]}], "]"}]}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"metaid", "=", " ", 
       RowBox[{"stringer", "[", "rmetaid", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"data", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"data", ",", 
           RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"reactants", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", "rreactants", "}"}], "//", "Flatten"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reactantStoichiometry", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", "rreactantStoichiometry", "}"}], "//", "Flatten"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"reactantStoichiometry", "=", 
       RowBox[{"PadRight", "[", 
        RowBox[{"reactantStoichiometry", ",", " ", 
         RowBox[{"Length", "[", "reactants", "]"}], ",", " ", "1"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"reactants", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{"speciesReference", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "reactants", ",", " ", "reactantStoichiometry", ",", "rann", ",", 
           "rnotes", ",", "rmetaids", ",", " ", "rsbos"}], "}"}]}], " ", 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"reactants", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfReactants\>\"", ",", " ", 
         RowBox[{"{", "}"}], ",", " ", "reactants"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"products", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", "rproducts", "}"}], "//", "Flatten"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"productStoichiometry", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", "rproductStoichiometry", "}"}], "//", "Flatten"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"productStoichiometry", " ", "=", " ", 
       RowBox[{"PadRight", "[", 
        RowBox[{"productStoichiometry", ",", " ", 
         RowBox[{"Length", "[", "products", "]"}], ",", " ", "1"}], "]"}]}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"products", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{"speciesReference", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "products", ",", " ", "productStoichiometry", ",", " ", "pann", ",",
            "pnotes", ",", "pmetaids", ",", " ", "psbos"}], "}"}]}], " ", 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"products", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfProducts\>\"", ",", " ", 
         RowBox[{"{", "}"}], ",", " ", "products"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"modifiers", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", "rmodifiers", "}"}], "//", "Flatten"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"modifierStoichiometry", " ", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", " ", 
         RowBox[{"{", 
          RowBox[{"Length", "[", "modifiers", "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"modifiers", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{"modifierSpeciesReference", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "modifiers", ",", "modifierStoichiometry", ",", " ", "mann", ",", 
           "mnotes", ",", "  ", "mmetaids", ",", "msbos"}], "}"}]}], " ", 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"modifiers", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfModifiers\>\"", ",", " ", 
         RowBox[{"{", "}"}], ",", " ", "modifiers"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getpar",
         FontColor->RGBColor[0, 0, 1]], "[", "pinput_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "n", ",", "opts", ",", "  ", "p", ",", "ann", ",", "parnotes", ",", 
           "pin"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"pin", " ", "=", " ", "pinput"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"ToString", "[", 
                RowBox[{"Head", "[", "pin", "]"}], "]"}], "==", " ", 
               "\"\<Rule\>\""}], ")"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"pin", " ", "=", " ", 
              RowBox[{"Rule", "[", 
               RowBox[{"pin", ",", 
                RowBox[{"{", "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]",
            "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"First", "[", "pin", "]"}]}], ";", " ", 
          RowBox[{"opts", "=", 
           RowBox[{"Last", "[", "pin", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", 
              RowBox[{"Head", "[", "opts", "]"}], "]"}], "\[NotEqual]", " ", 
             "\"\<List\>\""}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"opts", " ", "=", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<value\>\"", "\[Rule]", " ", "opts"}], "}"}]}], 
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"SameQ", "[", 
             RowBox[{
              RowBox[{"Head", "[", "pinput", "]"}], ",", " ", "Rule"}], "]"}],
             ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Block", "[", 
              RowBox[{
               RowBox[{"{", "o", "}"}], ",", " ", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"o", "=", 
                 RowBox[{"Last", "[", "pinput", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"o", "=", 
                 RowBox[{"Flatten", "[", 
                  RowBox[{"{", "o", "}"}], "]"}]}], ";", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"OptionQ", "[", "o", "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"checkOptions", "[", 
                   RowBox[{
                   "reactionToSymbolicSBML`kineticLaw`parameter", ",", " ", 
                    "o", ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<annotation\>\"", ",", "\"\<id\>\"", ",", 
                    "\"\<metaid\>\"", ",", "\"\<name\>\"", ",", " ", 
                    "\"\<notes\>\"", ",", " ", "\"\<sboTerm\>\"", ",", 
                    "\"\<value\>\""}], "}"}]}], " ", "]"}]}], 
                 "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]",
               "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"opts", " ", "=", " ", 
           RowBox[{"stringrule", "/@", "opts"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ann", " ", "=", " ", 
           RowBox[{"\"\<annotation\>\"", "/.", "opts"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", "ann", "]"}], "==", 
             "\"\<annotation\>\""}], ",", " ", 
            RowBox[{"ann", "=", 
             RowBox[{"{", "}"}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"parnotes", " ", "=", 
           RowBox[{"\"\<notes\>\"", "/.", "opts"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", "parnotes", "]"}], "==", 
             "\"\<notes\>\""}], ",", 
            RowBox[{"parnotes", "=", 
             RowBox[{"{", "}"}]}], ",", 
            RowBox[{"parnotes", "=", 
             RowBox[{"stringToNotes", "[", "parnotes", "]"}]}]}], "]"}], ";", 
          "  ", "\[IndentingNewLine]", 
          RowBox[{"opts", " ", "=", " ", 
           RowBox[{"Select", "[", 
            RowBox[{"opts", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"(", " ", 
                RowBox[{
                 RowBox[{"First", "[", "#", "]"}], "\[NotEqual]", " ", 
                 "\"\<annotation\>\""}], ")"}], "\[And]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"First", "[", "#", "]"}], "\[NotEqual]", " ", 
                 "\"\<notes\>\""}], ")"}]}], "&"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
          RowBox[{"opts", " ", "=", 
           RowBox[{"stringrule", "/@", "opts"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"opts", " ", "=", " ", 
           RowBox[{"Select", "[", 
            RowBox[{"opts", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"First", "[", "#", "]"}], "\[NotEqual]", " ", 
               "\"\<id\>\""}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"opts", " ", "=", " ", 
           RowBox[{"Prepend", "[", 
            RowBox[{"opts", ",", 
             RowBox[{"\"\<id\>\"", "\[Rule]", " ", 
              RowBox[{"stringer", "[", "n", "]"}]}]}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"p", "=", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<parameter\>\"", ",", " ", "opts", ",", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"parnotes", ",", "ann"}], "}"}], "//", "Flatten"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "p", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "of", " ", 
        StyleBox["getpar",
         FontColor->RGBColor[0, 0, 1]]}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", "rkineticLaw", "]"}], "\[NotEqual]", " ", 
         "\"\<Indeterminate\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"figure", " ", "out", " ", "parameters"}], " ", "*)"}], 
        "\[IndentingNewLine]", " ", 
        RowBox[{
         RowBox[{"pars", "=", 
          RowBox[{"getpar", "/@", "rparameters"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"pars", " ", "=", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<listOfParameters\>\"", ",", 
            RowBox[{"{", "}"}], ",", "pars"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OptionQ", "[", "rkineticLaw", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"klawann", " ", "=", " ", 
             RowBox[{"\"\<annotation\>\"", "/.", "rkineticLaw"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ToString", "[", "klawann", "]"}], "==", 
               "\"\<annotation\>\""}], ",", 
              RowBox[{"klawann", "=", 
               RowBox[{"{", "}"}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"kineticLaw", "=", 
             RowBox[{"\"\<math\>\"", "/.", "rkineticLaw"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"klawnotes", " ", "=", " ", 
             RowBox[{"\"\<notes\>\"", "/.", "rkineticLaw"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ToString", "[", "klawnotes", "]"}], "==", 
               "\"\<notes\>\""}], ",", 
              RowBox[{"klawnotes", "=", 
               RowBox[{"{", "}"}]}]}], "]"}], ";"}], " ", 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"kineticLaw", "=", "rkineticLaw"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"klawann", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"klawnotes", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", " ", "\"\<reactionToSymbolicSBML: kineticLaw:\>\"", ",",
            " ", "kineticLaw"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"kineticLaw", " ", "=", " ", 
          RowBox[{"expression2SymbolicSBML", "[", "kineticLaw", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", " ", "\"\<reactionToSymbolicSBML: kineticLaw:\>\"", ",",
            " ", "kineticLaw"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
            "2.25"}], ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"timeUnits", " ", "&"}], " ", "substanceUnits", " ", 
             "outlawed", " ", "in", " ", "L2V3"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"klawopts", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"stringer", "[", "timeUnits", "]"}], " ", 
               "\[NotEqual]", " ", "\"\<time\>\""}], ",", 
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", " ", 
                RowBox[{
                "\"\<reactionToSymbolicSBML:\>\"", "//", "boldBlack"}], ",", 
                " ", 
                RowBox[{"\"\< reaction: \>\"", "//", "boldBlack"}], ",", " ", 
                RowBox[{"id", "//", "boldBlue"}], ",", " ", 
                RowBox[{"\"\< - \\\"timeUnits\\\" \>\"", "//", "boldBlue"}], 
                ",", " ", 
                RowBox[{"\"\<(requested value: \>\"", "//", "boldBlack"}], 
                ",", 
                RowBox[{"timeUnits", "//", "boldBlue"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                "\"\<) is not a permitted option for  a kineticLaw in \>\"", "//",
                  "boldBlack"}], ",", " ", 
                RowBox[{"\"\<SBML Level \>\"", "//", "boldBlue"}], ",", 
                RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
                RowBox[{"\"\< Version \>\"", "//", "boldBlue"}], ",", " ", 
                RowBox[{"MB$Version", "//", "boldBlue"}]}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"stringer", "[", "substanceUnits", "]"}], " ", 
               "\[NotEqual]", " ", "\"\<substance\>\""}], ",", " ", 
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", " ", 
                RowBox[{
                "\"\<reactionToSymbolicSBML:\>\"", "//", "boldBlack"}], ",", 
                " ", 
                RowBox[{"\"\< reaction: \>\"", "//", "boldBlack"}], ",", " ", 
                RowBox[{"id", "//", "boldBlue"}], ",", " ", 
                RowBox[{
                "\"\< - \\\"substanceUnits\\\" \>\"", "//", "boldBlue"}], ",",
                 " ", "\[IndentingNewLine]", 
                RowBox[{"\"\<(requested value: \>\"", "//", "boldBlack"}], 
                ",", 
                RowBox[{"substanceUnits", "//", "boldBlue"}], ",", "  ", 
                RowBox[{
                "\"\<) is not a permitted option for  a kineticLaw in \>\"", "//",
                  "boldBlack"}], ",", " ", 
                RowBox[{"\"\<SBML Level \>\"", "//", "boldBlue"}], ",", 
                RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
                RowBox[{"\"\< Version \>\"", "//", "boldBlue"}], ",", " ", 
                RowBox[{"MB$Version", "//", "boldBlue"}]}], "]"}]}], "]"}], 
            ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"klawopts", "=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<timeUnits\>\"", "\[Rule]", " ", "timeUnits"}], ",",
               " ", 
              RowBox[{
              "\"\<substanceUnits\>\"", "\[Rule]", " ", "substanceUnits"}]}], 
             "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"rklawmetaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
           RowBox[{"klawopts", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{"klawopts", ",", 
              RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "rklawmetaid"}]}], 
             "]"}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"stringer", "[", "ksbo", "]"}], "\[NotEqual]", " ", 
            "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
              "2.15"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"klawopts", ",", " ", 
               RowBox[{"\"\<sboTerm\>\"", "\[Rule]", " ", "ksbo"}]}], "]"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
               RowBox[{
               "\"\<reactionToSymbolicSBML: \>\"", "//", "boldBlack"}], ",", 
               " ", 
               RowBox[{"\"\< reaction: \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"id", "//", "boldBlue"}], ",", " ", 
               RowBox[{"\"\<kineticLawSBOTerm \>\"", "//", "boldBlue"}], ",", 
               " ", "\[IndentingNewLine]", 
               RowBox[{"\"\< is not permitted in \>\"", "//", "boldBlack"}], 
               ",", " ", 
               RowBox[{"\"\<SBML Level \>\"", "//", "boldBlue"}], ",", 
               RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
               RowBox[{"\"\< Version \>\"", "//", "boldBlue"}], ",", " ", 
               RowBox[{"MB$Version", "//", "boldBlue"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"klawdata", "=", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "klawnotes", "}"}], ",", 
             RowBox[{"{", "klawann", "}"}], ",", 
             RowBox[{"{", "kineticLaw", "}"}], ",", " ", 
             RowBox[{"{", "pars", "}"}]}], "]"}], "//", "Flatten"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"kineticLaw", " ", "=", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{
           "\"\<kineticLaw\>\"", ",", " ", "klawopts", ",", " ", "klawdata"}],
            "]"}]}], ";"}], ",", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"kineticLaw", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<kineticLaw\>\"", ",", " ", 
           RowBox[{"{", "}"}], ",", " ", 
           RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";",
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"reversible", " ", "=", " ", 
       RowBox[{"sbmlBoolean", "[", "rreversible", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{"data", ",", " ", 
         RowBox[{"\"\<reversible\>\"", "\[Rule]", " ", "reversible"}]}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"fast", " ", "=", 
       RowBox[{"sbmlBoolean", "[", "rfast", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{"data", ",", " ", 
         RowBox[{"\"\<fast\>\"", "\[Rule]", " ", "fast"}]}], "]"}]}], ";", 
      " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", 
          RowBox[{"stringer", "[", "sboTerm", "]"}], "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
           "2.15"}], ",", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"data", ",", " ", 
            RowBox[{"\"\<sboTerm\>\"", "\[Rule]", " ", "sboTerm"}]}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\<reactionToSymbolicSBML: \>\"", "//", "boldBlack"}], 
            ",", 
            RowBox[{"\"\<reaction: \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\<sboTerm \>\"", "//", "boldBlue"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\< is not permitted in \>\"", "//", "boldBlack"}], ",",
             " ", 
            RowBox[{"\"\<SBML Level \>\"", "//", "boldBlue"}], ",", 
            RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< Version \>\"", "//", "boldBlue"}], ",", " ", 
            RowBox[{"MB$Version", "//", "boldBlue"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<reaction\>\"", ",", " ", "data", ",", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{"notes", ",", " ", "annotation", ",", 
            RowBox[{"{", 
             RowBox[{
             "reactants", ",", " ", "products", ",", " ", "modifiers", ",", 
              " ", "kineticLaw"}], "}"}]}], "]"}], "//", "Flatten"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388351636157864*^9, 3.388351685881856*^9}, {
  3.388351729790318*^9, 3.388351776278261*^9}, {3.388352129017496*^9, 
  3.388352130078516*^9}, {3.41175776884114*^9, 3.411757818496304*^9}, {
  3.411757947954224*^9, 3.411757988104499*^9}, {3.411758018955756*^9, 
  3.4117583075380783`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["speciesToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesToSymbolicSBML", "[", 
     RowBox[{"opts___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "SBML", ",", " ", "id", ",", " ", "name", ",", " ", "compartment", ",",
         " ", "initialAmount", ",", " ", "initialConcentration", ",", " ", 
        "units", ",", " ", "boundaryCondition", ",", " ", "charge", ",", " ", 
        "constant", ",", " ", "icset", ",", "booleanate", ",", "opt", ",", 
        "pia", ",", "pic", ",", " ", "amount", ",", "concentration", ",", " ",
         "ann", ",", "notes", ",", " ", "metaid", ",", " ", "arrayDimensions",
         ",", "\[IndentingNewLine]", "substanceUnits", ",", 
        "spatialSizeUnits", ",", " ", "hasOnlySubstanceUnits", ",", "  ", 
        "stype", ",", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opt", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opts", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", "2.3"}],
          ",", " ", "\[IndentingNewLine]", 
         RowBox[{"checkOptions", "[", 
          RowBox[{"speciesToSymbolicSBML", ",", " ", "opt", ",", " ", 
           RowBox[{"{", 
            RowBox[{
            "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", " ", 
             "\"\<speciesType\>\"", ",", " ", "\"\<compartment\>\"", ",", 
             " ", "\"\<initialAmount\>\"", ",", " ", 
             "\"\<initialConcentration\>\"", ",", " ", 
             "\"\<substanceUnits\>\"", ",", " ", "\"\<spatialSizeUnits\>\"", 
             ",", " ", "\"\<hasOnlySubstanceUnits\>\"", ",", 
             "\"\<boundaryCondition\>\"", ",", " ", "\"\<charge\>\"", ",", 
             " ", "\"\<constant\>\"", ",", " ", "\"\<metaid\>\"", ",", " ", 
             "\"\<annotation\>\"", ",", " ", "\"\<notes\>\""}], "}"}]}], 
          "]"}], "\[IndentingNewLine]", ",", " ", "\[IndentingNewLine]", 
         RowBox[{"checkOptions", "[", 
          RowBox[{"speciesToSymbolicSBML", ",", " ", "opt", ",", " ", 
           RowBox[{"{", 
            RowBox[{
            "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", " ", 
             "\"\<speciesType\>\"", ",", " ", "\"\<compartment\>\"", ",", 
             " ", "\"\<initialAmount\>\"", ",", " ", 
             "\"\<initialConcentration\>\"", ",", " ", 
             "\"\<substanceUnits\>\"", ",", " ", 
             "\"\<hasOnlySubstanceUnits\>\"", ",", 
             "\"\<boundaryCondition\>\"", ",", " ", "\"\<charge\>\"", ",", 
             " ", "\"\<constant\>\"", ",", " ", "\"\<metaid\>\"", ",", " ", 
             "\"\<annotation\>\"", ",", " ", "\"\<notes\>\""}], "}"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "opt", "]"}], ">", "0"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"First", "/@", "opt"}], ",", " ", "\"\<charge\>\""}], 
            "]"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
              "2.1"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", " ", 
               RowBox[{
               "\"\<The charge field has been deprecated in SBML Level \>\"", 
                "//", "boldBlack"}], ",", " ", 
               RowBox[{"MB$Level", "//", "boldBlack"}], ",", " ", 
               RowBox[{"\"\< Version \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"MB$Version", "//", "boldBlack"}]}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"booleanate", "[", "x_", "]"}], ":=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToUpperCase", "[", 
            RowBox[{"stringer", "[", "x", "]"}], "]"}], "==", 
           "\"\<TRUE\>\""}], ",", "\"\<true\>\"", ",", "\"\<false\>\""}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"id", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`id", "/.", "opt"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}],
          "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"id", " ", "=", " ", 
           RowBox[{"\"\<species\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"MB$speciescounter", "++"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<speciesToSymbolicSBML: species id not specified. A value of \
\>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< was used.\>\"", "//", "boldBlack"}]}], " ", "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"name", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`name", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`name", "\[Rule]", " ", "id"}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"SIDQ", "[", "id", "]"}]}], " ", ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<speciesToSymbolicSBML: Species \>\"", "//", "boldBlack"}], 
            ",", 
            RowBox[{"id", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
           " ", "]"}], ";", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", "opt"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "optionToAnnotation"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`notes", "/.", "opt"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`notes", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "stringToNotes"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"arrayDimensions", " ", "=", " ", 
        RowBox[{"getArrayDimensions", "[", 
         RowBox[{"id", ",", "opt"}], "]"}]}], ";", " ", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"constant", "=", 
        RowBox[{"booleanate", "[", 
         RowBox[{
          RowBox[{"Global`constant", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`constant", "\[Rule]", " ", "\"\<false\>\""}], 
           "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"boundaryCondition", "=", 
        RowBox[{"booleanate", "[", 
         RowBox[{
          RowBox[{"Global`boundaryCondition", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{
           "Global`boundaryCondition", "\[Rule]", " ", "\"\<false\>\""}], 
           "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"compartment", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`compartment", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`compartment", "\[Rule]", " ", "\"\<\>\""}], 
           "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"compartment", "==", "\"\<\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"compartment", "=", 
           RowBox[{"\"\<compartment\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"MB$compartmentcounter", "++"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<speciesToSBML: compartment not specified for species \>\"", "//",
              "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldBlue"}], ",", " ", 
            RowBox[{
            "\"\<\\nThis is a required field. A value of \>\"", "//", 
             "boldBlack"}], ",", 
            RowBox[{"compartment", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< was used instead.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"stype", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`speciesType", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`speciesType", "\[Rule]", " ", "\"\<\>\""}], 
           "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<id\>\"", "\[Rule]", " ", "id"}], ",", " ", 
          RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}], ",", " ", 
          RowBox[{"\"\<compartment\>\"", "\[Rule]", " ", "compartment"}], ",",
           " ", 
          RowBox[{
          "\"\<boundaryCondition\>\"", "\[Rule]", " ", "boundaryCondition"}], 
          ",", " ", 
          RowBox[{"\"\<constant\>\"", "\[Rule]", " ", "constant"}]}], "}"}]}],
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"stype", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
             "2.1"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"SBML", "=", 
              RowBox[{"Append", "[", 
               RowBox[{"SBML", ",", 
                RowBox[{"\"\<speciesType\>\"", "\[Rule]", " ", "stype"}]}], 
               "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Warning:\>\"", "//", "boldOrange"}], ",", 
               RowBox[{
               "\"\< speciesType is not allowed in version\>\"", "//", 
                "boldBlack"}], ",", " ", 
               RowBox[{"MB$LevelVersion", "//", "boldBlack"}], ",", " ", 
               RowBox[{
               "\"\< but was used for species\>\"", "//", "boldBlack"}], ",", 
               " ", 
               RowBox[{"id", "//", "boldBlack"}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
        "]"}], ";", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"metaid", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"metaid", "=", 
        RowBox[{"stringer", "[", "metaid", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}],
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "allow", " ", "initial", " ", "Amount", " ", "and", " ", 
          "concentration", " ", "to", " ", "be", " ", "given", " ", "either", 
          " ", "as", " ", "a", " ", "number", " ", "or", " ", "as", " ", "a", 
          " ", "string", " ", "containing", " ", "a", " ", "number"}], " ", 
         "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"initialAmount", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`initialAmount", "/.", "opt"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`initialAmount", "\[Rule]", " ", "Indeterminate"}],
             "}"}]}], ")"}], "//", "deFortranize"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"amount", " ", "=", " ", 
        RowBox[{"NumberQ", "[", "initialAmount", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"initialConcentration", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`initialConcentration", "/.", "opt"}], "/.", 
           RowBox[{"{", 
            RowBox[{
            "Global`initialConcentration", "\[Rule]", " ", 
             "\"\<Indeterminate\>\""}], "}"}]}], ")"}], "//", 
         "deFortranize"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"concentration", " ", "=", " ", 
        RowBox[{"NumberQ", "[", "initialConcentration", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"amount", " ", "\[And]", " ", "concentration"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"determine", " ", "which", " ", "is", " ", "first"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"pia", " ", "=", " ", 
           RowBox[{"Position", "[", 
            RowBox[{"opt", ",", "Global`initialAmount"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{"ListQ", "[", "pia", "]"}], ",", " ", 
            RowBox[{"pia", " ", "=", " ", 
             RowBox[{"First", "[", "pia", "]"}]}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"pic", " ", "=", " ", 
           RowBox[{"Position", "[", 
            RowBox[{"opt", ",", "Global`initialConcentration"}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{"ListQ", "[", "pic", "]"}], ",", " ", 
            RowBox[{"pic", " ", "=", " ", 
             RowBox[{"First", "[", "pic", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"pia", "<", "pic"}], ",", " ", 
            RowBox[{"amount", "=", "True"}], ",", " ", 
            RowBox[{"amount", "=", "False"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"concentration", " ", "=", " ", 
           RowBox[{"Not", "[", "amount", "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"icset", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"amount", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"initialAmount", "=", 
           RowBox[{"ToString", "[", 
            RowBox[{"FortranForm", "[", "initialAmount", "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"SBML", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"SBML", ",", " ", 
             RowBox[{
             "\"\<initialAmount\>\"", "\[Rule]", " ", "initialAmount"}]}], 
            "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"concentration", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"initialConcentration", " ", "=", " ", 
           RowBox[{"ToString", "[", 
            RowBox[{"FortranForm", "[", "initialConcentration", "]"}], 
            "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"SBML", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"SBML", ",", " ", 
             RowBox[{
             "\"\<initialConcentration\>\"", "\[Rule]", " ", 
              "initialConcentration"}]}], "]"}]}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{
         "figure", " ", "out", " ", "and", " ", "debug", " ", "units"}],
         FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"version", " ", "1", " ", "emulation"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"units", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`units", "/.", "opt"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`units", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
           "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"units", "\[NotEqual]", " ", "\"\<Indeterminate\>\""}], ",", 
         " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", " ", 
            RowBox[{"\"\<units\>\"", "\[Rule]", " ", "units"}]}], "]"}]}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"version", " ", "2", " ", "unit", " ", "specifiers"}], " ", 
         "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"substanceUnits", "=", 
        RowBox[{
         RowBox[{"Global`substanceUnits", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{
          "Global`substanceUnits", "\[Rule]", " ", "\"\<substance\>\""}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"SBML", ",", " ", 
          RowBox[{
          "\"\<substanceUnits\>\"", "\[Rule]", " ", "substanceUnits"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"hasOnlySubstanceUnits", "=", 
        RowBox[{
         RowBox[{"Global`hasOnlySubstanceUnits", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`hasOnlySubstanceUnits", "\[Rule]", "False"}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"SBML", ",", " ", 
          RowBox[{"\"\<hasOnlySubstanceUnits\>\"", "\[Rule]", " ", 
           RowBox[{"booleanate", "[", "hasOnlySubstanceUnits", "]"}]}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"spatialSizeUnits", "=", 
        RowBox[{
         RowBox[{"Global`spatialSizeUnits", "/.", "opt"}], "/.", 
         RowBox[{"{", 
          RowBox[{
          "Global`spatialSizeUnits", "\[Rule]", "\"\<Indeterminate\>\""}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"spatialSizeUnits", "=", 
        RowBox[{"stringer", "[", "spatialSizeUnits", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<speciesToSymbolicSBML: speciesToSymbolicSBML: \
spatialSizeUnits: \>\"", ",", " ", "spatialSizeUnits"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
         "spatialSizeUnits", "\[NotEqual]", " ", "\"\<Indeterminate\>\""}], 
         ",", " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", " ", 
            RowBox[{
            "\"\<spatialSizeUnits\>\"", "\[Rule]", " ", 
             "spatialSizeUnits"}]}], "]"}]}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<speciesToSymbolicSBML: speciesToSymbolicSBML: SBML: \>\"", ",",
            " ", "SBML"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{
          RowBox[{"d", 
           RowBox[{"on", "'"}], "t", " ", "do", " ", "any", " ", "checking", 
           " ", "with", " ", "global", " ", "compartments"}], " ", "-", " ", 
          RowBox[{
          "that", " ", "has", " ", "to", " ", "be", " ", "done", " ", "in", 
           " ", "addCompartment"}], " ", "-", " ", 
          RowBox[{
          "because", " ", "this", " ", "function", " ", "may", " ", "be", " ",
            "used", " ", "as", " ", "stand"}], "-", "alone"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"charge", "=", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Global`charge", "/.", "opt"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`charge", "\[Rule]", " ", "Indeterminate"}], 
            "}"}]}], "//", "deFortranize"}], "//", "Round"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumberQ", "[", "charge", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"SBML", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"SBML", ",", " ", 
             RowBox[{"\"\<charge\>\"", "\[Rule]", " ", 
              RowBox[{"ToString", "[", "charge", "]"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"IntegerQ", "[", "charge", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
              RowBox[{"\"\<charge \>\"", "//", "boldBlue"}], ",", 
              RowBox[{
              "\"\< is set to a non integer value for species \>\"", "//", 
               "boldBlack"}], ",", " ", 
              RowBox[{"id", "//", "boldBlue"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", ",", 
         " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"stringer", "[", "charge", "]"}], "\[NotEqual]", " ", 
             "\"\<Indeterminate\>\""}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
               RowBox[{
                RowBox[{"\"\<charge \[Rule] \>\"", "<>", 
                 RowBox[{"stringer", "[", 
                  RowBox[{"InputForm", "[", "charge", "]"}], "]"}]}], "//", 
                "boldBlue"}], ",", 
               RowBox[{
               "\"\< is not a numeric quantity for species \>\"", "//", 
                "boldBlack"}], ",", " ", 
               RowBox[{"id", "//", "boldBlue"}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<species\>\"", ",", " ", "SBML", ",", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"notes", ",", "ann", ",", " ", "arrayDimensions"}], "]"}],
            "//", "Flatten"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"speciesToSymbolicSBML", "[", 
    RowBox[{"id_", ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"speciesToSymbolicSBML", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.390212303636407*^9, 3.390212357147829*^9}, {
  3.39021355835585*^9, 3.3902135657486*^9}, {3.390213665655075*^9, 
  3.390213679413575*^9}, {3.390214215797757*^9, 3.390214253062578*^9}, {
  3.390214301170823*^9, 3.390214307326419*^9}, {3.390214369405609*^9, 
  3.390214379421208*^9}, {3.39021444092688*^9, 3.390214441457736*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["compartmentTypeToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compartmentTypeToSymbolicSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "opts", ",", " ", "id", ",", " ", "name", ",", " ", "value", ",", " ", 
        "units", ",", " ", "constant", ",", " ", "SBML", ",", "ann", ",", " ",
         "notes", ",", "metaid", ",", "fixnotes", ",", " ", "arrayDimensions",
         ",", "foreach"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", 
          "2.15"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<compartmentTypeToSymbolicSBML: compartmentType is not \
defined in \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"\"\< SBML Level \>\"", "//", "boldBlue"}], ",", " ", 
            RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< version \>\"", "//", "boldBlue"}], ",", " ", 
            RowBox[{"MB$Version", "//", "boldBlue"}]}], " ", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"checkOptions", "[", 
        RowBox[{"compartmentTypeToSymbolicSBML", ",", " ", "opts", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", " ", "\"\<metaid\>\"", 
           ",", " ", "\"\<annotation\>\"", ",", " ", "\"\<notes\>\""}], 
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"id", " ", "=", 
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", "==", "\"\<\>\""}], ",", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<compartmentTypeToSymbolicSBML: A compartmentType id must be \
specified.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"SIDQ", "[", "id", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<compartmentTypeToSymbolicSBML: compartmentType id \>\"", "//",
              "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<id\>\"", "\[Rule]", " ", "id"}], "}"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"name", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`name", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`name", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"name", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"SBML", " ", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}]}], "]"}]}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"metaid", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"metaid", "=", 
        RowBox[{"stringer", "[", "metaid", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}],
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "optionToAnnotation"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`notes", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`notes", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "stringToNotes"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<compartmentType\>\"", ",", " ", "SBML", ",", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"notes", ",", "ann"}], "]"}], "//", "Flatten"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compartmentTypeToSymbolicSBML", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"compartmentTypeToSymbolicSBML", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["speciesTypeToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesTypeToSymbolicSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "opts", ",", " ", "id", ",", " ", "name", ",", " ", "value", ",", " ", 
        "units", ",", " ", "constant", ",", " ", "SBML", ",", "ann", ",", " ",
         "notes", ",", "metaid", ",", "fixnotes", ",", " ", "arrayDimensions",
         ",", "foreach"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", 
          "2.15"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<speciesTypeToSymbolicSBML: speciesType is not defined in \
\>\"", "//", "boldBlack"}], ",", 
            RowBox[{"\"\< SBML Level \>\"", "//", "boldBlue"}], ",", " ", 
            RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< version \>\"", "//", "boldBlue"}], ",", " ", 
            RowBox[{"MB$Version", "//", "boldBlue"}]}], " ", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"checkOptions", "[", 
        RowBox[{"speciesTypeToSymbolicSBML", ",", " ", "opts", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", " ", "\"\<metaid\>\"", 
           ",", " ", "\"\<annotation\>\"", ",", " ", "\"\<notes\>\""}], 
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"id", " ", "=", 
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", "==", "\"\<\>\""}], ",", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<speciesTypeToSymbolicSBML: A speciesType id must be \
specified.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"SIDQ", "[", "id", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<speciesTypeToSymbolicSBML: speciesType id \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<id\>\"", "\[Rule]", " ", "id"}], "}"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"name", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`name", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`name", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"name", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"SBML", " ", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}]}], "]"}]}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"metaid", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"metaid", "=", 
        RowBox[{"stringer", "[", "metaid", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}],
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "optionToAnnotation"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`notes", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`notes", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "stringToNotes"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<speciesType\>\"", ",", " ", "SBML", ",", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"notes", ",", "ann"}], "]"}], "//", "Flatten"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"speciesTypeToSymbolicSBML", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"speciesTypeToSymbolicSBML", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["functionToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"functionToSymbolicSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "SBML", ",", " ", "name", ",", " ", "id", ",", "opts", ",", 
        "arguments", ",", "math", ",", "f", ",", "x", ",", "sx", ",", " ", 
        "ann", ",", "notes", ",", " ", "metaid", ",", "sboTerm", ",", "  ", 
        RowBox[{"debug", "=", " ", "False"}]}], "}"}], ",", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"sx", " ", "=", "  ", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"ToString", "[", "x", "]"}], ",", 
           RowBox[{"\"\<$\>\"", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], 
        ";"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sx", " ", "=", " ", "\"\<UnusedDummyVariable\>\""}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
          "2.15"}], ",", "\[IndentingNewLine]", 
         RowBox[{"checkOptions", "[", 
          RowBox[{"functionToSymbolicSBML", ",", " ", "opts", ",", " ", 
           RowBox[{"{", 
            RowBox[{
            "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", "\"\<math\>\"", ",", 
             " ", "\"\<arguments\>\"", ",", " ", "\"\<sboTerm\>\"", ",", " ", 
             "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
             "\"\<notes\>\""}], "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"checkOptions", "[", 
           RowBox[{"functionToSymbolicSBML", ",", " ", "opts", ",", " ", 
            RowBox[{"{", 
             RowBox[{
             "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", "\"\<math\>\"", 
              ",", "\"\<arguments\>\"", ",", " ", "\"\<metaid\>\"", ",", " ", 
              "\"\<annotation\>\"", ",", " ", "\"\<notes\>\""}], "}"}]}], 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"id", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{"Global`id", "/.", "opts"}], ")"}], "/.", 
          RowBox[{"{", " ", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", " ", "\[Equal]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"id", " ", "=", " ", 
          RowBox[{"\"\<function\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"MB$functioncounter", "++"}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"SIDQ", "[", "id", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<functionToSymbolicSBML: function id \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"name", " ", "=", " ", 
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{"Global`name", "/.", "opts"}], "/.", 
          RowBox[{"{", " ", 
           RowBox[{"Global`name", "\[Rule]", " ", "id"}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"arguments", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Global`arguments", "/.", "opts"}], "/.", 
          RowBox[{"{", " ", 
           RowBox[{"Global`arguments", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], "}"}]}], "//", "expressionate"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"arguments", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "arguments", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"arguments", " ", "=", " ", 
        RowBox[{"destring", "/@", "arguments"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "arguments", "]"}], "<", "1"}], ",", " ", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "An", " ", "argument", " ", "is", " ", "required", " ", "because", 
            " ", "otherwise", " ", "Mathematica", "\[IndentingNewLine]", 
            "will", " ", "not", " ", "create", " ", "a", " ", "lambda", " ", 
            "definition"}], " ", "*)"}],
          FontWeight->"Plain"], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"arguments", "=", 
           RowBox[{"{", "x", "}"}]}], ";"}]}], " ", "\[IndentingNewLine]", 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"math", " ", "=", "  ", 
        RowBox[{
         RowBox[{"Global`math", "/.", "opts"}], "/.", 
         RowBox[{"{", " ", 
          RowBox[{"Global`math", "\[Rule]", " ", "\"\<NONE\>\""}], "}"}]}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"stringer", "[", "math", "]"}], "==", "\"\<NONE\>\""}], ",",
          " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"boldRed", "[", "\"\<Warning: \>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "boldBlack", "[", 
             "\"\<functionToSymbolicSBML: No function definition was \
specified for the function \>\"", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"boldRed", "[", "id", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
            "boldBlack", "[", "\"\<\\nA value of 1 will be returned.\>\"", 
             "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"math", "=", "1"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
       RowBox[{"math", " ", "=", " ", 
        RowBox[{"destring", "[", "math", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "optionToAnnotation"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"metaid", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", "\"\<\>\""}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"metaid", "=", 
        RowBox[{"stringer", "[", "metaid", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"sboTerm", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`sboTerm", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`sboTerm", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", 
        RowBox[{
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"Global`notes", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`notes", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", " ", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<functionToSymbolicSBML: notes:\>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"notes", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", 
        RowBox[{"stringToNotes", "[", "notes", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", " ", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<functionToSymbolicSBML: notes:\>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"notes", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"expression2SymbolicSBML", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"arguments", ",", " ", "math"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{"f", "\[Rule]", " ", "Function"}], "}"}]}], ",", " ", 
          "id", ",", " ", "name", ",", "metaid", ",", "ann", ",", "notes", 
          ",", "sboTerm"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"SBML", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ToString", "[", "x", "]"}], "\[Rule]", " ", "sx"}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"functionToSymbolicSBML", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"functionToSymbolicSBML", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["parameterToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"parameterToSymbolicSBML", "[", 
     RowBox[{
      RowBox[{"pid_", "\[Rule]", " ", 
       RowBox[{"(", 
        RowBox[{"nvalue_", "?", "numericalFormQ"}], ")"}]}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"parameterToSymbolicSBML", "[", 
     RowBox[{
      RowBox[{"Global`id", "\[Rule]", " ", "pid"}], ",", " ", 
      RowBox[{"Global`value", "\[Rule]", " ", "nvalue"}], ",", "opt"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"parameterToSymbolicSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "opts", ",", " ", "id", ",", " ", "name", ",", " ", "value", ",", " ", 
        "units", ",", " ", "constant", ",", " ", "sbo", ",", " ", "SBML", ",",
         "ann", ",", " ", "notes", ",", "metaid", ",", "fixnotes", ",", " ", 
        "arrayDimensions", ",", "foreach"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
          "2.15"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{"checkOptions", "[", 
          RowBox[{
          "parameterToSymbolicSBML", ",", " ", "opts", ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", " ", 
             "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
             "\"\<notes\>\"", ",", " ", "\"\<value\>\"", ",", " ", 
             "\"\<units\>\"", ",", " ", "\"\<constant\>\"", ",", 
             "\"\<sboTerm\>\""}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"checkOptions", "[", 
          RowBox[{
          "parameterToSymbolicSBML", ",", " ", "opts", ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", " ", 
             "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
             "\"\<notes\>\"", ",", " ", "\"\<value\>\"", ",", " ", 
             "\"\<units\>\"", ",", " ", "\"\<constant\>\""}], "}"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"id", " ", "=", 
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", "==", "\"\<\>\""}], ",", 
         RowBox[{"id", " ", "=", " ", 
          RowBox[{"\"\<parameter\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"MB$parametercounter", "++"}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"SIDQ", "[", 
           RowBox[{"decontextify", "[", "id", "]"}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<parameterToSymbolicSBML: parameter id \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\< is not a valid SID, input options: \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{
             RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"name", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`name", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`name", "\[Rule]", " ", "id"}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<id\>\"", "\[Rule]", " ", "id"}], ",", " ", 
          RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}]}], "}"}]}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"metaid", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"metaid", "=", 
        RowBox[{"stringer", "[", "metaid", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}],
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "optionToAnnotation"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`notes", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`notes", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "stringToNotes"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"arrayDimensions", " ", "=", " ", 
        RowBox[{"getArrayDimensions", "[", 
         RowBox[{"id", ",", "opts"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"value", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Global`value", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`value", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
           "}"}]}], "//", "deFortranize"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumberQ", "[", "value", "]"}], ",", " ", 
         "\[IndentingNewLine]", " ", 
         RowBox[{
          RowBox[{"SBML", " ", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"SBML", ",", " ", 
             RowBox[{"\"\<value\>\"", "\[Rule]", " ", 
              RowBox[{"stringer", "[", 
               RowBox[{"FortranForm", "[", "value", "]"}], "]"}]}]}], "]"}]}],
           ";"}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"foreach", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`foreach", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`foreach", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
          ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"foreach", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ifArrays", "[", "]"}], ",", 
            RowBox[{"SBML", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"SBML", ",", 
               RowBox[{"\"\<foreach\>\"", "\[Rule]", " ", "foreach"}]}], 
              "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"units", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`units", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`units", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"units", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", " ", 
            RowBox[{"\"\<units\>\"", "\[Rule]", " ", "units"}]}], "]"}]}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"sbo", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`sboTerm", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`sboTerm", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringLength", "[", "sbo", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
             "2.15"}], ",", "\[IndentingNewLine]", 
            RowBox[{"SBML", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"SBML", ",", 
               RowBox[{"\"\<sboTerm\>\"", "\[Rule]", " ", "sbo"}]}], "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{
              "\"\<parameterToSymbolicSBML: \>\"", "//", "boldBlack"}], " ", 
              ",", " ", 
              RowBox[{"\"\<sboTerm\>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{"\"\< is not defined in SBML \>\"", "//", "boldBlack"}],
               ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<Level \>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
              RowBox[{"\"\< Version \>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{"MB$Version", "//", "boldBlue"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"constant", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`constant", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`constant", "\[Rule]", " ", "\"\<true\>\""}], 
           "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToUpperCase", "[", "constant", "]"}], "\[NotEqual]", " ", 
          "\"\<TRUE\>\""}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"constant", "==", "\"\<false\>\""}], " ", "\[Or]", " ", 
             RowBox[{
              RowBox[{"ToUpperCase", "[", "constant", "]"}], "==", 
              "\"\<FALSE\>\""}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"SBML", " ", "=", " ", 
              RowBox[{"Append", "[", 
               RowBox[{"SBML", ",", " ", 
                RowBox[{
                "\"\<constant\>\"", "\[Rule]", " ", "\"\<false\>\""}]}], 
               "]"}]}], ";"}], " ", "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
               RowBox[{"\"\<constant = \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"constant", "//", "boldRed"}], ",", " ", 
               RowBox[{"\"\< for parameter \>\"", "//", "boldBlack"}], ",", 
               " ", 
               RowBox[{"id", "//", "boldRed"}], ",", 
               "\"\< The constant field must be either \\\"true\\\" or \
\\\"false\\\"\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        " ", "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<parameter\>\"", ",", " ", "SBML", ",", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"notes", ",", "ann", ",", " ", "arrayDimensions"}], "]"}],
            "//", "Flatten"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"parameterToSymbolicSBML", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dbg", "=", "False"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<parameterToSymbolicSBML: id=\>\"", ",", " ", "id", ",", " ", 
          "\"\< {opt}=\>\"", ",", " ", 
          RowBox[{"{", "opt", "}"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"parameterToSymbolicSBML", "[", 
        RowBox[{
         RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
        "]"}], "]"}]}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.396981781658882*^9, 3.3969817870371943`*^9}, {
  3.396981851724032*^9, 3.396981877889543*^9}, {3.396982026709263*^9, 
  3.396982097691432*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["unitToSymbolicSBML", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["checkUnitKind",
      FontColor->RGBColor[0, 0, 1]], "[", 
     RowBox[{"id_", ",", " ", "kind_"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"allowedKinds", "=", 
         RowBox[{"{", 
          RowBox[{
          "\"\<ampere\>\"", ",", "\"\<becquerel\>\"", ",", "\"\<candela\>\"", 
           ",", "\"\<Celsius\>\"", ",", "\"\<coulomb\>\"", ",", 
           "\"\<dimensionless\>\"", ",", "\"\<farad\>\"", ",", "\"\<gram\>\"",
            ",", "\"\<gray\>\"", ",", "\"\<henry\>\"", ",", "\"\<hertz\>\"", 
           ",", "\"\<item\>\"", ",", "\"\<joule\>\"", ",", "\"\<katal\>\"", 
           ",", "\"\<kelvin\>\"", ",", "\"\<kilogram\>\"", ",", 
           "\"\<litre\>\"", ",", "\"\<lumen\>\"", ",", "\"\<lux\>\"", ",", 
           "\"\<metre\>\"", ",", "\"\<mole\>\"", ",", "\"\<newton\>\"", ",", 
           "\"\<ohm\>\"", ",", "\"\<pascal\>\"", ",", "\"\<radian\>\"", ",", 
           "\"\<second\>\"", ",", "\"\<siemens\>\"", ",", "\"\<sievert\>\"", 
           ",", "\"\<steradian\>\"", ",", "\"\<tesla\>\"", ",", 
           "\"\<volt\>\"", ",", "\"\<watt\>\"", ",", "\"\<weber\>\"", ",", 
           " ", "\"\<substance\>\"", ",", "\"\<volume\>\"", ",", 
           "\"\<time\>\"", ",", "\"\<area\>\"", ",", " ", "\"\<length\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", "nestmsg", ",", "ispredefined",
         ",", " ", "isdefined"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nestmsg", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
       RowBox[{"ispredefined", "=", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"allowedKinds", ",", " ", 
          RowBox[{"stringer", "[", "kind", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"isdefined", "=", 
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"First", "/@", "MB$Units"}], ",", " ", 
          RowBox[{"stringer", "[", "kind", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", 
           StyleBox["MB$LevelVersion",
            FontWeight->"Plain"], "]"}], ">", "2.1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Equal", "[", 
             RowBox[{
              RowBox[{"stringer", "[", "kind", "]"}], ",", 
              RowBox[{"stringer", "[", "id", "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", 
               RowBox[{"\"\< Unit definition \>\"", "//", "boldBlack"}], ",", 
               RowBox[{"id", "//", "boldOrange"}], ",", 
               RowBox[{"\"\< self refers.\>\"", "//", "boldBlack"}]}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"isdefined", " ", "\[Or]", " ", "ispredefined"}], ",", 
            " ", 
            RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"ispredefined", ",", " ", 
            RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"isdefined", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"nestmsg", "=", 
              RowBox[{"boldBlack", "[", 
               RowBox[{
               "\"\< --- Nested unit definitions are not allowed in Level \
\>\"", "<>", "MB$Level", "<>", "\"\< Version \>\"", "<>", "MB$Version"}], 
               "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<Invalid \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{"\"\<kind\>\"", "//", "boldBlue"}], ",", " ", 
         RowBox[{"\"\< = \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{
          RowBox[{"stringer", "[", "kind", "]"}], "//", "boldBlue"}], ",", 
         " ", 
         RowBox[{
         "\"\< specified in listOfUnits for unit \>\"", "//", "boldBlack"}], 
         ",", " ", 
         RowBox[{"id", "//", "boldBlue"}], ",", "nestmsg", ",", " ", 
         RowBox[{"\"\<\\nThe allowed values of \>\"", "//", "boldBlack"}], 
         ",", " ", 
         RowBox[{"\"\<kind\>\"", "//", "boldBlue"}], ",", " ", 
         RowBox[{"\"\< are \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{"allowedKinds", "//", "boldBlue"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "False", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"unitToSymbolicSBML", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "SBML", ",", " ", "name", ",", " ", "id", ",", "opts", ",", "ann", ",", 
       "metaid", ",", "s", ",", "\[IndentingNewLine]", "unit", ",", "x", ",", 
       " ", "getkind", ",", " ", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<unitToSymbolicSBML: {opt}:\>\"", "//", "boldRed"}], 
          ",", 
          RowBox[{
           RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"checkOptions", "[", 
       RowBox[{"unitToSymbolicSBML", ",", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<id\>\"", ",", " ", "\"\<name\>\"", ",", "\"\<unit\>\"", ",", 
          " ", "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
          "\"\<notes\>\""}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getkind",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"kind_", "\[Rule]", " ", 
         RowBox[{"(", 
          RowBox[{"optin___", "?", "OptionQ"}], ")"}]}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "opts", ",", "exponent", ",", "scale", ",", "multiplier", ",", 
           "offset", ",", "unit", ",", "ann", ",", " ", "metaid"}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"opts", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "optin", "}"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"checkOptions", "[", 
           RowBox[{
           "unitToSymbolicSBML`unit", ",", " ", "opts", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<exponent\>\"", ",", "\"\<scale\>\"", ",", 
              "\"\<multiplier\>\"", ",", " ", "\"\<offset\>\"", ",", 
              "\"\<kind\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
              "\"\<notes\>\"", ",", "\"\<metaid\>\""}], "}"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"exponent", "=", 
           RowBox[{
            RowBox[{"Global`exponent", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`exponent", "\[Rule]", " ", "1"}], "}"}]}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"scale", " ", "=", " ", 
           RowBox[{
            RowBox[{"Global`scale", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`scale", "\[Rule]", " ", "0"}], "}"}]}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"multiplier", "=", 
           RowBox[{
            RowBox[{"Global`multiplier", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`multiplier", "\[Rule]", " ", "1"}], "}"}]}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"offset", "=", 
           RowBox[{
            RowBox[{"Global`offset", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`offset", "\[Rule]", " ", "0"}], "}"}]}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"ann", " ", "=", " ", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ann", " ", "=", " ", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"{", "ann", "}"}], "]"}], "//", "optionToAnnotation"}]}],
           ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"metaid", "=", 
           RowBox[{"stringer", "[", 
            RowBox[{
             RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
            "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"unit", "=", 
           RowBox[{"{", 
            RowBox[{"\"\<kind\>\"", "\[Rule]", " ", 
             RowBox[{"stringer", "[", "kind", "]"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
            RowBox[{"unit", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"unit", ",", 
               RowBox[{"\"\<metaid\>\"", "\[Rule]", "metaid"}]}], "]"}]}]}], 
           "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"exponent", "\[NotEqual]", " ", "1"}], ",", " ", 
            RowBox[{"unit", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"unit", ",", 
               RowBox[{"\"\<exponent\>\"", "\[Rule]", " ", 
                RowBox[{"ToString", "[", 
                 RowBox[{"FortranForm", "[", "exponent", "]"}], "]"}]}]}], 
              "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"scale", "\[NotEqual]", " ", "0"}], ",", " ", 
            RowBox[{"unit", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"unit", ",", 
               RowBox[{"\"\<scale\>\"", "\[Rule]", 
                RowBox[{"ToString", "[", 
                 RowBox[{"FortranForm", "[", " ", "scale", "]"}], "]"}]}]}], 
              "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"multiplier", "\[NotEqual]", " ", "1"}], ",", " ", 
            RowBox[{"unit", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"unit", ",", 
               RowBox[{"\"\<multiplier\>\"", "\[Rule]", " ", 
                RowBox[{"ToString", "[", 
                 RowBox[{"FortranForm", "[", "multiplier", "]"}], "]"}]}]}], 
              "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"offset", "\[NotEqual]", " ", "0"}], ",", " ", 
            RowBox[{"unit", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"unit", ",", 
               RowBox[{"\"\<offset\>\"", "\[Rule]", " ", 
                RowBox[{"ToString", "[", 
                 RowBox[{"FortranForm", "[", "offset", "]"}], "]"}]}]}], 
              "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"checkUnitKind", "[", 
              RowBox[{"id", ",", " ", "kind"}], "]"}]}], ",", 
            RowBox[{"Abort", "[", "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"unit", "=", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<unit\>\"", ",", "unit", ",", "ann"}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "unit", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getkind",
         FontColor->RGBColor[0, 0, 1]], "[", "kind_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"checkUnitKind", "[", 
              RowBox[{"id", ",", " ", "kind"}], "]"}]}], ",", 
            RowBox[{"Abort", "[", "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<unit\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"\"\<kind\>\"", "\[Rule]", " ", 
               RowBox[{"stringer", "[", "kind", "]"}]}], "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getkind",
         FontColor->RGBColor[0, 0, 1]], "[", "kind___", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning:\>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\<Invalid unit kind for \>\"", "//", "boldBlack"}], 
            ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{"\"\< kind = \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{"kind", "//", "boldRed"}], ",", 
            RowBox[{"\"\< assumed dimensionless.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<unit\>\"", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<kind\>\"", "\[Rule]", " ", "\"\<dimensionless\>\""}], 
              "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"opts", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"id", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"(", " ", 
          RowBox[{"Global`id", "/.", "opts"}], ")"}], "/.", 
         RowBox[{"{", " ", 
          RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", " ", "\[Equal]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"id", " ", "=", " ", 
         RowBox[{"\"\<unit\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"MB$unitcounter", "++"}], "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"SIDQ", "[", "id", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", " ", 
           RowBox[{
           "\"\<unitToSymbolicSBML: unit id \>\"", "//", "boldBlack"}], ",", 
           " ", 
           RowBox[{"id", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"name", " ", "=", " ", 
       RowBox[{"stringer", "[", " ", 
        RowBox[{
         RowBox[{"Global`name", "/.", "opts"}], "/.", 
         RowBox[{"{", " ", 
          RowBox[{"Global`name", "\[Rule]", " ", "id"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"unit", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`unit", "/.", "opts"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`unit", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<dimensionless\>\"", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], "}"}]}], "}"}]}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"ann", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`annotation", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
        "optionToAnnotation"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "unit", "]"}], "<", "1"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
           RowBox[{
           "\"\<No <unit kind=.../> specified for \>\"", "//", "boldBlack"}], 
           ",", 
           RowBox[{"id", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<. At least one unit must be specified.\>\"", "//", 
            "boldBlack"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<unitToSymbolicSBML: unit(1):\>\"", "//", "boldRed"}], 
          ",", 
          RowBox[{"unit", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"unit", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"getkind", ",", " ", "unit"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<unitToSymbolicSBML: unit(2):\>\"", "//", "boldRed"}], 
          ",", 
          RowBox[{"unit", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"ann", ",", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<listOfUnits\>\"", ",", 
            RowBox[{"{", "}"}], ",", "unit"}], "]"}], "}"}]}], "]"}]}], ";", 
      " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<id\>\"", "\[Rule]", 
          RowBox[{"stringer", "[", " ", "id", "]"}]}], ",", 
         RowBox[{"\"\<name\>\"", "\[Rule]", " ", 
          RowBox[{"stringer", "[", "name", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"metaid", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"metaid", "=", 
       RowBox[{"stringer", "[", "metaid", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"s", ",", 
           RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"SBML", "=", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<unitDefinition\>\"", ",", "s", " ", ",", "SBML"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["compartmentToSymbolicSBML", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"compartmentToSymbolicSBML", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "opts", ",", " ", "id", ",", " ", "name", ",", " ", "spatialDimensions",
        ",", " ", "size", ",", " ", "units", ",", " ", "outside", ",", " ", 
       "constant", ",", " ", "SBML", ",", "ann", ",", "notes", ",", " ", 
       "metaid", ",", " ", "arrayDimensions", ",", "allowedOpts", ",", 
       "ctype"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allowedOpts", "=", 
       RowBox[{"{", 
        RowBox[{
        "Global`id", ",", "Global`name", ",", "Global`spatialDimensions", ",",
          " ", "Global`size", ",", "Global`units", ",", "Global`outside", ",",
          "Global`constant", ",", "Global`notes", ",", "Global`annotation", 
         ",", "Global`metaid"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", "2.1"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"allowedOpts", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"allowedOpts", ",", "Global`compartmentType"}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"opts", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "opt", "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"checkOptions", "[", 
       RowBox[{
       "compartmentToSymbolicSBML", ",", " ", "opts", ",", " ", 
        "allowedOpts"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"id", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"(", " ", 
          RowBox[{"Global`id", "/.", "opts"}], ")"}], "/.", 
         RowBox[{"{", " ", 
          RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", " ", "\[Equal]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"id", " ", "=", " ", 
         RowBox[{"\"\<compartment\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"MB$compartmentcounter", "++"}], "]"}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"SIDQ", "[", "id", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<compartmentToSymbolicSBML: compartment id \>\"", "//", 
            "boldBlack"}], ",", " ", 
           RowBox[{"id", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"name", " ", "=", " ", 
       RowBox[{"stringer", "[", " ", 
        RowBox[{
         RowBox[{"Global`name", "/.", "opts"}], "/.", 
         RowBox[{"{", " ", 
          RowBox[{"Global`name", "\[Rule]", " ", "id"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<id\>\"", "\[Rule]", " ", "id"}], ",", " ", 
         RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"metaid", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"metaid", "=", 
       RowBox[{"stringer", "[", "metaid", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"SBML", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"SBML", ",", 
           RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ann", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`annotation", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
        "optionToAnnotation"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"notes", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`notes", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`notes", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
        "stringToNotes"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"spatialDimensions", "=", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`spatialDimensions", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`spatialDimensions", "\[Rule]", " ", "3"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"spatialDimensions", "\[NotEqual]", " ", "\"\<3\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<0\>\"", ",", "\"\<1\>\"", ",", "\"\<2\>\""}], 
              "}"}], ",", " ", "spatialDimensions"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"SBML", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"SBML", ",", 
              RowBox[{
              "\"\<spatialDimensions\>\"", "\[Rule]", " ", 
               "spatialDimensions"}]}], "]"}]}], "\[IndentingNewLine]", ",", 
           " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
              RowBox[{
              "\"\< compartmentToSymbolicSBML: Invalid \>\"", "//", 
               "boldBlack"}], ",", " ", 
              RowBox[{
              "\"\< spatialDimensions \[Rule] \>\"", "//", "boldBlue"}], ",", 
              " ", 
              RowBox[{"spatialDimensions", "//", "boldBlue"}], ",", " ", 
              RowBox[{"\"\< for compartment \>\"", "//", "boldBlack"}], ",", 
              RowBox[{"id", "//", "boldBlue"}], ",", 
              RowBox[{
              "\"\< Allowed values of spatialDimensions are: 0, 1, 2, or 3.\>\
\"", "//", "boldBlack"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SBML", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{
            "\"\<spatialDimensions\>\"", "\[Rule]", " ", 
             "spatialDimensions"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"units", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`units", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`units", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"units", "==", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{
          "spatialDimensions", ",", "\[IndentingNewLine]", "\"\<3\>\"", ",", 
           RowBox[{"units", "=", "\"\<volume\>\""}], ",", 
           "\[IndentingNewLine]", "\"\<2\>\"", ",", 
           RowBox[{"units", "=", "\"\<area\>\""}], ",", 
           "\[IndentingNewLine]", "\"\<1\>\"", ",", 
           RowBox[{"units", "=", "\"\<length\>\""}], ",", 
           "\[IndentingNewLine]", "\"\<0\>\"", ",", 
           RowBox[{"units", "=", "\"\<dimensionless\>\""}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"units", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"SBML", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"SBML", ",", 
           RowBox[{"\"\<units\>\"", "\[Rule]", " ", "units"}]}], "]"}]}], ",",
         "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\< compartmentToSymbolicSBML: Unable to determine units for \
compartment \>\"", "//", "boldBlack"}], ",", " ", 
          RowBox[{"name", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"size", " ", "=", " ", 
       RowBox[{"deFortranize", "[", 
        RowBox[{
         RowBox[{"Global`size", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`size", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "size", "]"}], ",", 
        RowBox[{"SBML", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"SBML", ",", 
           RowBox[{"\"\<size\>\"", "\[Rule]", " ", 
            RowBox[{"stringer", "[", 
             RowBox[{"FortranForm", "[", "size", "]"}], "]"}]}]}], "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"constant", " ", "=", 
       RowBox[{
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{"Global`constant", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`constant", "\[Rule]", " ", "\"\<true\>\""}], 
           "}"}]}], "]"}], "//", "ToUpperCase"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"constant", "==", "\"\<FALSE\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", " ", 
            RowBox[{"\"\<constant\>\"", "\[Rule]", " ", "\"\<false\>\""}]}], 
           "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"constant", "\[NotEqual]", " ", "\"\<TRUE\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
             RowBox[{
             "\"\<allowed values for constant are true and false, not \>\"", "//",
               "boldBlack"}], ",", " ", 
             RowBox[{"constant", "//", "boldBlue"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"SBML", " ", "=", " ", 
            RowBox[{"Append", "[", 
             RowBox[{"SBML", ",", " ", 
              RowBox[{"\"\<constant\>\"", "\[Rule]", " ", "\"\<true\>\""}]}], 
             "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"outside", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`outside", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`outside", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"outside", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
        RowBox[{"SBML", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"SBML", ",", 
           RowBox[{"\"\<outside\>\"", "\[Rule]", " ", "outside"}]}], 
          "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", "2.1"}], 
        ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ctype", "=", 
          RowBox[{"stringer", "[", 
           RowBox[{
            RowBox[{"Global`compartmentType", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`compartmentType", "\[Rule]", " ", "\"\<\>\""}], 
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ctype", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
           RowBox[{"SBML", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"SBML", ",", 
              RowBox[{"\"\<compartmentType\>\"", "\[Rule]", " ", "ctype"}]}], 
             "]"}]}]}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"If", " ", "Arrays", " ", "are", " ", "allowed"}], ",", " ", 
         RowBox[{"check", " ", "for", " ", 
          RowBox[{"dimensions", ":", " ", 
           RowBox[{
           "note", " ", "that", " ", "getArrayDimensions", " ", "always", " ",
             "returns", " ", "a", " ", 
            RowBox[{"list", ":", " ", 
             RowBox[{
             "with", " ", "an", " ", "XMLElment", " ", "if", " ", "arrays", 
              " ", "are", " ", "allowed"}]}]}]}]}], ",", " ", 
         RowBox[{"and", " ", "an", " ", "empty", " ", "list", " ", "if", " ", 
          RowBox[{"not", "!"}]}]}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"arrayDimensions", " ", "=", " ", 
       RowBox[{"getArrayDimensions", "[", 
        RowBox[{"id", ",", "opts"}], "]"}]}], ";", " ", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<compartment\>\"", ",", "SBML", ",", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{"notes", ",", "ann", ",", "arrayDimensions"}], "]"}], "//",
           "Flatten"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["initialAssignmentToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"initialAssignmentToSymbolicSBML", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"allowedOptions", "=", 
        RowBox[{"{", 
         RowBox[{
         "Global`symbol", ",", " ", "Global`math", ",", " ", "Global`sboTerm",
           ",", " ", "Global`notes", ",", " ", "Global`annotation", ",", " ", 
          "Global`metaid"}], "}"}]}], ",", " ", "opts", ",", "meta", ",", " ",
        "sbo", ",", " ", "s", ",", " ", "expr", ",", " ", "ann", ",", " ", 
       "notes"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "=", " ", 
       RowBox[{
        RowBox[{"Global`symbol", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`symbol", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"expr", "=", 
       RowBox[{
        RowBox[{"Global`math", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`math", "\[Rule]", " ", "\"\<?\>\""}], "}"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"sbo", "=", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`sboTerm", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`sboTerm", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"meta", "=", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"stringer", "[", "s", "]"}], "==", "\"\<\>\""}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<initialAssignmentToSymbolicSBML: no symbol.\>\"", "//", 
            "boldBlack"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"stringer", "[", "expr", "]"}], "==", "\"\<?\>\""}], ",", 
        " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<initialAssignmentToSymbolicSBML: no math.\>\"", "//", 
            "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"expr", "=", "1"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ann", " ", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Global`annotation", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`annotation", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], "}"}]}], "}"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ann", "]"}], ">", "0"}], ",", " ", 
        RowBox[{"ann", "=", 
         RowBox[{"{", 
          RowBox[{"annotationToSymbolicSBML", "@@", "ann"}], "}"}]}]}], "]"}],
       ";", " ", "\[IndentingNewLine]", 
      RowBox[{"notes", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`notes", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`notes", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
        "stringToNotes"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"checkOptions", "[", 
       RowBox[{"initialAssignmentToSymbolicSBML", ",", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<symbol\>\"", ",", "\"\<math\>\"", ",", " ", "\"\<sboTerm\>\"", 
          ",", " ", "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", 
          " ", "\"\<notes\>\""}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"opts", " ", "=", 
         RowBox[{"First", "/@", 
          RowBox[{"{", "opt", "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"opts", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"opts", ",", " ", "allowedOptions"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<initialAssignmentToSymbolicSBML: invalid Option: \>\"", "//",
              "boldBlack"}], ",", " ", 
            RowBox[{
             RowBox[{"quote", "[", "#", "]"}], "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< valid options are: \>\"", "//", "boldBlack"}], ",", 
            " ", 
            RowBox[{"allowedOptions", "//", "boldBlack"}]}], "]"}], "&"}], "/@",
          "opts"}], ";"}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"initialAssignmentToSymbolicSBML", "[", 
        RowBox[{
        "s", ",", " ", "expr", ",", "ann", ",", " ", "notes", ",", " ", 
         "meta", ",", "sbo"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"initialAssignmentToSymbolicSBML", "[", 
    RowBox[{
    "symbol_", ",", " ", "math_", ",", "ann_", ",", " ", "notes_", ",", 
     "metaid_", ",", "  ", 
     RowBox[{"SBOTerm_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "mathml", ",", " ", "opts", ",", "sub", ",", " ", "sbo", ",", "ia", ",",
        " ", "meta"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"First", "/@", "$SBML$IDTable"}], ",", 
           RowBox[{"stringer", "[", "symbol", "]"}]}], "]"}]}], ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{
          "\"\<initialAssignmentToSymbolicSBML: \>\"", "//", "boldBlack"}], 
          ",", " ", "\[IndentingNewLine]", 
          RowBox[{"\"\< Unknown symbol\[Rule]\>\"", "//", "boldBlack"}], ",", 
          " ", 
          RowBox[{"symbol", "//", "boldBlue"}], ",", " ", 
          RowBox[{
          "\"\< not previously defined specified in initialAssignment.\>\"", "//",
            "boldBlack"}]}], "\[IndentingNewLine]", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"mathml", " ", "=", 
       RowBox[{"{", " ", 
        RowBox[{"expression2SymbolicSBML", "[", "math", "]"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"opts", "=", 
       RowBox[{"{", 
        RowBox[{"\"\<symbol\>\"", "\[Rule]", " ", 
         RowBox[{"stringer", "[", "symbol", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sbo", " ", "=", " ", 
       RowBox[{"stringer", "[", "SBOTerm", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "sbo", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"opts", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"opts", ",", " ", 
            RowBox[{"\"\<SBOTerm\>\"", "\[Rule]", " ", "sbo"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"meta", "=", 
       RowBox[{"stringer", "[", "metaid", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "meta", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"opts", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"opts", ",", " ", 
            RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "meta"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sub", "=", "mathml"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "notes", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"sub", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"{", "sub", "}"}], ",", "notes"}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ann", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"sub", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"{", "sub", "}"}], ",", "ann"}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ia", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{
        "\"\<initialAssignment\>\"", ",", " ", "opts", ",", " ", "sub"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "ia", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["ruleToSymbolicSBML ", "Subsection"],

Cell["\<\
options added for computable plant arrays proposal:
\tindices ->{i,j,k,7,..}
\tconnection->name of a connectionRule
\t
\tconnectionRule, fields from, to\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ruleToSymbolicSBML", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "SBML", ",", "type", ",", " ", "TYPE", ",", "opts", ",", "math", ",", 
       "variable", ",", "varname", ",", "data", ",", "subdata", ",", " ", 
       "id", ",", "  ", "metaid", ",", " ", "ann", ",", " ", "notes", ",", 
       " ", "arrayDimensions", ",", "variableLink", ",", "setAnnotation", ",",
        "matrixresult", ",", "fromindices", ",", " ", "toindices", ",", " ", 
       "sboTerm", ",", "fromcompartment", ",", " ", "tocompartment", ",", " ", 
       RowBox[{"debug", "=", "False"}], ",", " ", "connection", ",", " ", 
       "indices", ",", "mathinput", ",", " ", "inputType"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["varname",
         FontColor->RGBColor[0, 0, 1]], "[", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"v", " ", "=", " ", 
           RowBox[{"stringer", "[", 
            RowBox[{
             RowBox[{"Global`variable", "/.", "opts"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`variable", "\[Rule]", " ", "\"\<\>\""}], 
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"v", "==", "\"\<\>\""}], ",", 
              RowBox[{
               RowBox[{"v", "=", 
                RowBox[{"\"\<variable\>\"", "<>", 
                 RowBox[{"ToString", "[", 
                  RowBox[{"MB$variablecounter", "++"}], "]"}]}]}], ";"}]}], 
             " ", "]"}], ";"}], "*)"}], " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"v", "==", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
               RowBox[{"\"\<ruleToSymbolicSBML: \>\"", "//", "boldBlack"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{
               "\"\<A variable is required for an \>\"", "//", "boldBlack"}], 
               ",", 
               RowBox[{"type", "//", "boldBlue"}], ",", "\[IndentingNewLine]", 
               RowBox[{
               "\"\< --- No variable was specified for the rule (type=\>\"", "//",
                 "boldBlack"}], ",", 
               RowBox[{"inputType", "//", "boldBlue"}], ",", 
               RowBox[{"\"\<) with math \>\"", "//", "boldBlack"}], ",", 
               RowBox[{"mathinput", "//", "boldRed"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"First", "/@", "$SBML$IDTable"}], ",", "v"}], "]"}]}], 
            ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{"\"\<ruleToSymbolicSBML: \>\"", "//", "boldBlack"}], 
              ",", " ", "\[IndentingNewLine]", 
              RowBox[{"\"\< Unknown \>\"", "//", "boldBlack"}], ",", " ", 
              RowBox[{"\"\< variable\[Rule]\>\"", "//", "boldBlue"}], ",", 
              " ", 
              RowBox[{"v", "//", "boldBlue"}], ",", " ", 
              RowBox[{
              "\"\< not previously defined in model specified in rule  (\>\"",
                "//", "boldBlack"}], ",", 
              RowBox[{"\"\<type\[Rule]\>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{"inputType", "//", "boldBlue"}], ",", 
              RowBox[{"\"\<).\>\"", "//", "boldBlack"}]}], 
             "\[IndentingNewLine]", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "v", "]"}], ";"}]}], "  ", 
        "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"opts", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", "2.15"}],
         ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "\"\<id\>\"", " ", "is", " ", "translated", " ", "to", " ", 
          "\"\<metaid\>\"", " ", "later", " ", "in", " ", "the", " ", 
          "program"}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"checkOptions", "[", 
         RowBox[{
         "ruleToSymbolicSBML", ",", " ", "opts", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"{", " ", 
           RowBox[{
           "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
            "\"\<notes\>\"", ",", "\"\<math\>\"", ",", "\"\<variable\>\"", 
            ",", "\"\<id\>\"", ",", "\"\<type\>\"", ",", "\"\<sboTerm\>\""}], 
           "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"checkOptions", "[", 
         RowBox[{
         "ruleToSymbolicSBML", ",", " ", "opts", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"{", " ", 
           RowBox[{
           "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
            "\"\<notes\>\"", ",", "\"\<math\>\"", ",", "\"\<variable\>\"", 
            ",", "\"\<id\>\"", ",", " ", "\"\<type\>\""}], "}"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"type", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`type", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`type", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"inputType", "=", "type"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"TYPE", " ", "=", " ", 
       RowBox[{"ToUpperCase", "[", "type", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"math", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`math", "/.", "opts"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`math", "\[Rule]", " ", "Indeterminate"}], "}"}]}]}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"SameQ", "[", 
          RowBox[{"math", ",", "Indeterminate"}], "]"}], " ", "\[And]", " ", 
         RowBox[{
         "TYPE", " ", "\[NotEqual]", " ", "\"\<INITIALASSIGNMENTRULE\>\""}]}],
         ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<The \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"\"\<math \>\"", "//", "boldBlue"}], ",", 
           RowBox[{
           "\"\< option is required for any rule. Options found: \>\"", "//", 
            "boldBlack"}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"{", "opt", "}"}], ")"}], "//", "boldBlue"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<ruleToSymbolicSBML: math:\>\"", "//", "boldRed"}], 
           ",", 
           RowBox[{"math", "//", "boldBlue"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<ruleToSymbolicSBML: StringQ[math]:\>\"", "//", "boldRed"}], 
           ",", 
           RowBox[{
            RowBox[{"StringQ", "[", "math", "]"}], "//", "boldBlue"}]}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringQ", "[", "math", "]"}], ",", " ", 
        RowBox[{"math", "=", 
         RowBox[{"ToExpression", "[", "math", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"debug", ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<ruleToSymbolicSBML: math:\>\"", "//", "boldRed"}], 
           ",", 
           RowBox[{"math", "//", "boldBlue"}]}], "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"mathinput", "=", "math"}], ";", "\[IndentingNewLine]", 
      RowBox[{"math", " ", "=", 
       RowBox[{"{", " ", 
        RowBox[{"expression2SymbolicSBML", "[", "math", "]"}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ann", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`annotation", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
        "optionToAnnotation"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"notes", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`notes", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`notes", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
        "stringToNotes"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"arrayDimensions", " ", "=", " ", 
       RowBox[{"getArrayDimensions", "[", 
        RowBox[{"id", ",", "opts"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"variableLink", "=", 
       RowBox[{"getObjectLink", "[", 
        RowBox[{"Global`variableLink", ",", "opt"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"matrixresult", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"ifArrays", "[", "]"}], "\[And]", "Global`matrixResult"}], "/.",
          "opts"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`matrixrResult", "\[Rule]", " ", "False"}], "}"}]}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ifArrays", "[", "]"}], ",", 
        RowBox[{
         RowBox[{"connection", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Global`connection", "/.", "opts"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`connection", "\[Rule]", " ", "\"\<\>\""}], 
              "}"}]}], ")"}], "//", "stringer"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"indices", " ", "=", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Global`indices", "/.", "opts"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`indices", "\[Rule]", " ", 
               RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"connection", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
         RowBox[{"indices", "=", 
          RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"If", " ", "id", " ", "is", " ", "given"}], ",", " ", 
         RowBox[{
         "add", " ", "metaid", " ", "since", " ", "there", " ", "is", " ", 
          "no", " ", "id", " ", "field", " ", "in", " ", "SBML", " ", "for", 
          " ", "rules"}]}], "*)"}],
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      RowBox[{"metaid", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", 
      RowBox[{"id", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`id", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"metaid", "==", "\"\<\>\""}], " ", "\[And]", " ", 
         RowBox[{"id", "\[NotEqual]", " ", "\"\<\>\""}]}], ",", " ", 
        RowBox[{"metaid", "=", "id"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"SIDQ", "[", "metaid", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{
              "\"\<ruleToSymbolicSBML: rule metaid \>\"", "//", "boldBlack"}],
               ",", " ", 
              RowBox[{"metaid", "//", "boldBlue"}], ",", " ", 
              RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sboTerm", " ", "=", " ", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`sboTerm", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`sboTerm", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"setAnnotation", "=", "False"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "TYPE", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\"\<ALGEBRAICRULE\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"type", " ", "=", " ", "\"\<algebraicRule\>\""}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"data", " ", "=", " ", 
          RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
            "notes", ",", " ", "ann", ",", "arrayDimensions", ",", " ", 
             "math"}], "]"}], "//", "Flatten"}]}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\"\<ASSIGNMENTRULE\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"type", " ", "=", " ", "\"\<assignmentRule\>\""}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"variable", "=", 
          RowBox[{"varname", "[", "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "variableLink", "]"}], "<", "1"}], ",", 
           RowBox[{"data", " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<variable\>\"", "\[Rule]", " ", "variable"}], 
             "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
            "notes", ",", " ", "ann", ",", "arrayDimensions", ",", 
             "variableLink", ",", " ", "math"}], "]"}], "//", "Flatten"}]}], 
         ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\"\<CONSTRAINTRULE\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
           RowBox[{
           "\"\<constraintRules were proposed in an eralier draft of the SBML \
Level 2 Version 2 specification but were not adopted, in lieu of the \
constraint object. Please revise your model accordingly\>\"", "//", 
            "boldBlack"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"type", " ", "=", " ", "\"\<constraintRule\>\""}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
            "notes", ",", " ", "ann", ",", "arrayDimensions", ",", 
             "variableLink", ",", " ", "math"}], "]"}], "//", "Flatten"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\"\<RATERULE\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"type", "=", "\"\<rateRule\>\""}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"variable", "=", 
          RowBox[{"varname", "[", "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "variableLink", "]"}], "<", "1"}], ",", 
           RowBox[{"data", " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<variable\>\"", "\[Rule]", " ", "variable"}], 
             "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
            "notes", ",", " ", "ann", ",", "arrayDimensions", ",", 
             "variableLink", ",", " ", "math"}], "]"}], "//", "Flatten"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        "\"\<CONNECTIONRULE\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"debug", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<ruleToSymbolicSBML: connectionRule:\>\"", "//", "boldRed"}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"ifArrays", "[", "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Return", "[", 
             RowBox[{
             "stringToNotes", "[", 
              "\"\<Connection Rule inhibited because Arrays->False.\>\"", 
              "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"type", "=", "\"\<connectionRule\>\""}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"fromcompartment", "=", 
          RowBox[{"stringer", "[", " ", 
           RowBox[{
            RowBox[{"Global`from", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`from", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"tocompartment", "=", 
          RowBox[{"stringer", "[", " ", 
           RowBox[{
            RowBox[{"Global`to", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`to", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"fromcompartment", "==", "\"\<\>\""}], " ", "\[Or]", " ", 
            RowBox[{"tocompartment", "==", "\"\<\>\""}]}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", 
              RowBox[{
              "\"\< connectionRule: both from and to fields must be \
specified.\>\"", "//", "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Return", "[", 
             RowBox[{
             "stringToNotes", "[", 
              "\"\<Connection Rule inhibited because either from or to field \
is missing\>\"", "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"from", "/", "to"}], " ", "indices", " ", "added", " ", 
           "in", " ", "2.5", ".5", " ", 
           RowBox[{
            RowBox[{"11", "/", "9"}], "/", "05"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"fromindices", "=", 
          RowBox[{
           RowBox[{"Global`listOfIndicesFrom", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`listOfIndicesFrom", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"toindices", "=", 
          RowBox[{
           RowBox[{"Global`listOfIndicesTo", "/.", "opts"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`listOfIndicesTo", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"fromindices", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"stringer", "[", "#", "]"}], "}"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "fromindices", "}"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"toindices", " ", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"stringer", "[", "#", "]"}], "}"}]}], "]"}], "&"}], "/@",
            " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "toindices", "}"}], "]"}]}]}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"fromindices", "=", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<listOfIndicesFrom\>\"", ",", 
             RowBox[{"{", "}"}], ",", "fromindices"}], "]"}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"toindices", "=", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<listOfIndicesTo\>\"", ",", 
             RowBox[{"{", "}"}], ",", "toindices"}], "]"}], "}"}]}], ";", " ",
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
            "notes", ",", " ", "ann", ",", "arrayDimensions", ",", " ", 
             "fromindices", ",", " ", "toindices", ",", " ", "math"}], "]"}], 
           "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"data", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<from\>\"", "\[Rule]", " ", "fromcompartment"}], ",", 
            " ", 
            RowBox[{"\"\<to\>\"", "\[Rule]", " ", "tocompartment"}]}], 
           "}"}]}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        "\"\<INITIALASSIGNMENTRULE\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"debug", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<ruleToSymbolicSBML: InitialAssignmentRule:\>\"", "//", 
             "boldRed"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"ifArrays", "[", "]"}]}], ",", 
           RowBox[{"Return", "[", 
            RowBox[{
            "stringToNotes", "[", 
             "\"\<Initial Assignment Rule inhibited because \
Arrays->False.\>\"", "]"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"variable", "=", 
          RowBox[{"varname", "[", "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"type", "=", "\"\<initialAssignmentRule\>\""}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"data", " ", "=", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Global`data", "/.", "opts"}], "/.", 
            RowBox[{"Global`data", "\[Rule]", " ", "Indeterminate"}]}], 
           ")"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"VectorQ", "[", "data", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"data", "=", 
            RowBox[{"{", 
             RowBox[{"vectorToSymbolicSBML", "[", "data", "]"}], "}"}]}], ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MatrixQ", "[", "data", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"data", "=", 
               RowBox[{"{", 
                RowBox[{"matrixToSymbolicSBML", "[", "data", "]"}], "}"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"stringer", "[", "data", "]"}], "\[NotEqual]", " ", 
                  "\"\<Indeterminate\>\""}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"data", "=", " ", 
                  RowBox[{"{", 
                   RowBox[{"expression2SymbolicSBML", "[", "data", "]"}], 
                   "}"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"data", " ", "=", " ", "math"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"arrayDimensions", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{"arrayDimensions", ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<listOfDimensions\>\"", ",", "___"}], "]"}], ",", 
            "Infinity"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{
           "notes", ",", "ann", ",", "arrayDimensions", ",", "variableLink", 
            ",", "data"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "variableLink", "]"}], "<", "1"}], ",", 
           RowBox[{"data", " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<variable\>\"", "\[Rule]", " ", "variable"}], 
             "}"}]}], ",", " ", 
           RowBox[{"data", "=", 
            RowBox[{"{", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ifArraysAreAnnotations", "[", "]"}], ",", " ", 
           RowBox[{"setAnnotation", "=", "True"}]}], "]"}], ";"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"MISSING", " ", "TYPE"}], " ", "*)"}], " ", 
        "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
           RowBox[{"\"\<No type specified for rule \>\"", "//", "boldBlack"}],
            ",", 
           RowBox[{"metaid", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< Valid types are \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{
           "\"\<algebraicRule, assignmentRule, rateRule\>\"", "//", 
            "boldBlue"}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"type", " ", "=", " ", "\"\<algebraicRule\>\""}], ";", " ", 
         RowBox[{"data", "=", 
          RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"math", " ", "=", 
          RowBox[{"{", " ", 
           RowBox[{"expression2SymbolicSBML", "[", "0", "]"}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
            "notes", ",", " ", "ann", ",", "arrayDimensions", ",", 
             "variableLink", ",", " ", "math"}], "]"}], "//", "Flatten"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"UNKNOWN", " ", "TYPE"}], " ", "*)"}], " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
           RowBox[{"\"\<Unknown type\[Rule]\>\"", "//", "boldBlack"}], ",", 
           RowBox[{"type", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< for rule \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"metaid", "//", "boldBlue"}], ",", 
           RowBox[{
           "\"\< Valid types are algebraicRule, assignmentRule, or \
rateRule.\>\"", "//", "boldBlack"}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Abort", "[", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"math", " ", "=", 
          RowBox[{"{", " ", 
           RowBox[{"expression2SymbolicSBML", "[", "0", "]"}], "}"}]}], ";", 
         " ", 
         RowBox[{"type", " ", "=", " ", "\"\<algebraicRule\>\""}], ";", " ", 
         RowBox[{"data", "=", 
          RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
            "notes", ",", " ", "ann", ",", "arrayDimensions", ",", 
             "variableLink", ",", " ", "math"}], "]"}], "//", "Flatten"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"data", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"data", ",", 
           RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"sboTerm", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", 
            "2.15"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"data", ",", " ", 
             RowBox[{"\"\<sboTerm\>\"", "\[Rule]", " ", "sboTerm"}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{"\"\<ruleToSymbolicSBML: \>\"", "//", "boldBlack"}], 
              ",", " ", 
              RowBox[{"\"\<sboTerm\>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{"\"\< is not permitted in \>\"", "//", "boldBlack"}], 
              ",", " ", 
              RowBox[{"\"\<SBML Level \>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{"MB$Level", "//", "boldBlue"}], ",", " ", 
              RowBox[{"\"\< Version \>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{"MB$Version", "//", "boldBlue"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"matrixresult", ",", " ", 
        RowBox[{"data", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"data", ",", " ", 
           RowBox[{"\"\<matrixResult\>\"", "\[Rule]", " ", "\"\<true\>\""}]}],
           "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ifArrays", "[", "]"}], "\[And]", " ", 
         RowBox[{"connection", "\[NotEqual]", " ", "\"\<\>\""}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"data", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"data", ",", " ", 
            RowBox[{"\"\<connection\>\"", "\[Rule]", " ", "connection"}]}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ifArrays", "[", "]"}], " ", "\[And]", " ", 
         RowBox[{
          RowBox[{"Length", "[", "indices", "]"}], ">", "0"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"indices", "=", 
          RowBox[{"indicesToSymbolicSBML", "[", "indices", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"subdata", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"subdata", ",", " ", "indices"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"SBML", "=", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"type", ",", "data", ",", "subdata"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"setAnnotation", ",", 
        RowBox[{"SBML", "=", 
         RowBox[{"annotationToSymbolicSBML", "[", "SBML", " ", "]"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"debug", ",", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
          "\"\<ruleToSymbolicSBML: InitialAssignmentRule:\>\"", "//", 
           "boldRed"}], ",", " ", 
          RowBox[{"SBML", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["constraintToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"constraintToSymbolicSBML", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{
      "msg", ",", " ", "opts", ",", "meta", ",", " ", "sbo", ",", " ", "s", 
       ",", " ", "expr", ",", " ", "ann", ",", " ", "notes", ",", " ", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"checkOptions", "[", 
       RowBox[{"constraintToSymbolicSBML", ",", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"{", " ", 
         RowBox[{
         "\"\<metaid\>\"", ",", " ", "\"\<annotation\>\"", ",", " ", 
          "\"\<notes\>\"", ",", "\"\<math\>\"", ",", "\"\<message\>\"", ",", 
          "\"\<sboTerm\>\""}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{
        "Print", "[", "\"\<constraintToSymbolicSBML: options:ok\>\"", "]"}]}],
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"msg", "=", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`message", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`message", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"expr", "=", 
       RowBox[{
        RowBox[{"Global`math", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`math", "\[Rule]", " ", "\"\<?\>\""}], "}"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"sbo", "=", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`sboTerm", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`sboTerm", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"meta", "=", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`metaid", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"stringer", "[", "expr", "]"}], "==", "\"\<?\>\""}], ",", 
        " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<constraintToSymbolicSBML: no math.\>\"", "//", 
            "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"expr", "=", "True"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ann", " ", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Global`annotation", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`annotation", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], "}"}]}], "}"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ann", "]"}], ">", "0"}], ",", " ", 
        RowBox[{"ann", "=", 
         RowBox[{"{", 
          RowBox[{"annotationToSymbolicSBML", "@@", "ann"}], "}"}]}]}], "]"}],
       ";", " ", "\[IndentingNewLine]", 
      RowBox[{"notes", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`notes", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`notes", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
        "stringToNotes"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"opts", " ", "=", 
       RowBox[{"First", "/@", 
        RowBox[{"{", "opt", "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraintToSymbolicSBML: opts:\>\"", ",", "opts"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"constraintToSymbolicSBML", "[", 
        RowBox[{
        "expr", ",", "msg", ",", " ", "ann", ",", " ", "notes", ",", " ", 
         "meta", ",", "sbo"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"constraintToSymbolicSBML", "[", 
    RowBox[{
    "math_", ",", "message_", ",", " ", "ann_", ",", " ", "notes_", ",", 
     "metaid_", ",", "  ", 
     RowBox[{"SBOTerm_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "mathml", ",", " ", "opts", ",", "sub", ",", " ", "sbo", ",", "ia", ",",
        " ", "meta", ",", "m", ",", "newmath", ",", "  ", 
       RowBox[{"dbg", "=", "False"}], ",", "MYANGLE"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"MYANGLE", "[", 
        RowBox[{"x_", ",", " ", "\"\<time\>\""}], "]"}], ":=", " ", "x"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"MYANGLE", "[", 
        RowBox[{"x_", ",", " ", "\"\<delay\>\""}], "]"}], ":=", " ", "x"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraintToSymbolicSBML:\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "math", ",", "message", ",", " ", "ann", ",", "notes", ",", " ", 
            "metaid", ",", " ", "SBOTerm"}], "}"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"mathml", " ", "=", 
       RowBox[{"{", " ", 
        RowBox[{"expression2SymbolicSBML", "[", "math", "]"}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<constraintToSymbolicSBML: mathml: \>\"", ",", "mathml"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"opts", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sbo", " ", "=", " ", 
       RowBox[{"stringer", "[", "SBOTerm", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "sbo", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"opts", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"opts", ",", " ", 
            RowBox[{"\"\<sboTerm\>\"", "\[Rule]", " ", "sbo"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"meta", "=", 
       RowBox[{"stringer", "[", "metaid", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "meta", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"opts", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"opts", ",", " ", 
            RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "meta"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraintToSymbolicSBML: opts: \>\"", ",", "opts"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"sub", "=", "mathml"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraintToSymbolicSBML: sub(1): \>\"", ",", "sub"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<constraintToSymbolicSBML: message: \>\"", ",", " ", "message"}],
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "message", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"m", "=", " ", 
          RowBox[{"stringToNotes", "[", "message", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<constraintToSymbolicSBML: m(1): \>\"", ",", "m"}], 
            "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newmath", "=", 
          RowBox[{"math", "//.", 
           RowBox[{"{", 
            RowBox[{"MyAngleBracket", "\[Rule]", " ", "MYANGLE"}], "}"}]}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<constraintToSymbolicSBML: newmath: \>\"", ",", " ", 
             "newmath"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"newmath", "=", 
          RowBox[{"StringReplace", "[", 
           RowBox[{
            RowBox[{"stringer", "[", "newmath", "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<>\>\"", "\[Rule]", " ", "\"\<.gt.\>\""}], ",", 
              RowBox[{"\"\<<\>\"", "\[Rule]", " ", "\"\<.lt.\>\""}]}], " ", 
             "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"newmath", "=", 
          RowBox[{"\"\<constraint violation: \>\"", "<>", "newmath"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<constraintToSymbolicSBML: newmath: \>\"", ",", " ", 
             "newmath"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"m", "=", 
          RowBox[{"stringToNotes", "[", "newmath", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<constraintToSymbolicSBML: m(2): \>\"", ",", "m"}], 
            "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"m", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"m", "/.", 
         RowBox[{"{", 
          RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "\"\<message\>\""}], 
          "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraintToSymbolicSBML: m(3): \>\"", ",", "m"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"sub", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"{", "sub", "}"}], ",", " ", "m"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "notes", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"sub", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"{", "sub", "}"}], ",", "notes"}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ann", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"sub", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"{", "sub", "}"}], ",", "ann"}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraintToSymbolicSBML: sub(2): \>\"", ",", "sub"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ia", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<constraint\>\"", ",", " ", "opts", ",", " ", "sub"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraintToSymbolicSBML: ia: \>\"", ",", "ia"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "ia", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388319079273345*^9, 3.388319081249531*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["eventToSymbolicSBML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"eventToSymbolicSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "SBML", ",", "opts", ",", "id", ",", " ", "name", ",", " ", "trigger", 
        ",", " ", "delay", ",", " ", "timeUnits", ",", " ", "eventAssignment",
         ",", " ", "data", ",", " ", "eventVariables", ",", "okevent", ",", 
        "metaid", ",", " ", "ann", ",", " ", "notes", ",", 
        "eventAssignmentNotes", ",", "eventAssignmentMetaids", ",", "nasg", 
        ",", "eventAssignmentSBOTerms", ",", "eventAssignmentAnnotations", 
        ",", "eventAssignmentStuff", ",", " ", "easbos", ",", " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", "2.3"}],
          ",", " ", "\[IndentingNewLine]", 
         RowBox[{"checkOptions", "[", 
          RowBox[{
          "eventToSymbolicSBML", ",", " ", "opts", ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<annotation\>\"", ",", "\"\<delay\>\"", ",", 
             "\"\<eventAssignment\>\"", ",", 
             "\"\<eventAssignmentAnnotations\>\"", ",", 
             "\"\<eventAssignmentMetaids\>\"", ",", 
             "\"\<eventAssignmentNotes\>\"", ",", 
             "\"\<eventAssignmentSBOTerms\>\"", ",", "\"\<id\>\"", ",", 
             "\"\<metaid\>\"", ",", "\"\<name\>\"", ",", " ", "\"\<notes\>\"",
              ",", "\"\<sboTerm\>\"", ",", "\"\<timeUnits\>\"", ",", 
             "\"\<trigger\>\""}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"checkOptions", "[", 
          RowBox[{
          "eventToSymbolicSBML", ",", " ", "opts", ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<annotation\>\"", ",", "\"\<delay\>\"", ",", 
             "\"\<eventAssignment\>\"", ",", 
             "\"\<eventAssignmentAnnotations\>\"", ",", 
             "\"\<eventAssignmentMetaids\>\"", ",", 
             "\"\<eventAssignmentNotes\>\"", ",", 
             "\"\<eventAssignmentSBOTerms\>\"", ",", "\"\<id\>\"", ",", 
             "\"\<metaid\>\"", ",", "\"\<name\>\"", ",", " ", "\"\<notes\>\"",
              ",", "\"\<sboTerm\>\"", ",", "\"\<trigger\>\""}], "}"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{
         "Print", "[", "\"\<eventToSymbolicSBML: options checked.\>\"", 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"id", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{"Global`id", "/.", "opts"}], ")"}], "/.", 
          RowBox[{"{", " ", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", " ", "\[Equal]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"id", " ", "=", " ", 
          RowBox[{"\"\<event\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"MB$eventcounter", "++"}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"SIDQ", "[", "id", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", " ", 
            RowBox[{
            "\"\<eventToSymbolicSBML: event id \>\"", "//", "boldBlack"}], 
            ",", " ", 
            RowBox[{"id", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\< is not a valid SID.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<eventToSymbolicSBML: id=\>\"", ",", "id"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"name", " ", "=", " ", 
        RowBox[{"stringer", "[", " ", 
         RowBox[{
          RowBox[{"Global`name", "/.", "opts"}], "/.", 
          RowBox[{"{", " ", 
           RowBox[{"Global`name", "\[Rule]", " ", "id"}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<id\>\"", "\[Rule]", " ", "id"}], ",", " ", 
          RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}]}], "}"}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"metaid", " ", "=", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`metaid", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"metaid", "=", 
        RowBox[{"stringer", "[", "metaid", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringLength", "[", "metaid", "]"}], ">", "0"}], ",", " ", 
         RowBox[{"SBML", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"SBML", ",", 
            RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}],
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<eventToSymbolicSBML: metaid=\>\"", ",", "metaid", ",", " ", 
           "\"\< name=\>\"", ",", " ", "name", ",", " ", "\"\< SBML=\>\"", 
           ",", " ", "SBML"}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<metaid=\>\"", ",", "metaid"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBML=\>\"", ",", "SBML"}], "]"}], ";"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", "2.3"}],
          ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"timeUnits", " ", "=", " ", 
           RowBox[{"stringer", "[", 
            RowBox[{
             RowBox[{"Global`timeUnits", "/.", "opts"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`timeUnits", "\[Rule]", " ", "\"\<\>\""}], 
              "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"timeUnits", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
            RowBox[{"SBML", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"SBML", ",", 
               RowBox[{"\"\<timeUnits\>\"", "\[Rule]", " ", "timeUnits"}]}], 
              "]"}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: timeUnits=\>\"", ",", "timeUnits", ",",
               "  ", "\"\< SBML=\>\"", ",", " ", "SBML"}], "]"}]}], "]"}], 
          ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"trigger", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`trigger", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`trigger", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<eventToSymbolicSBML: trigger(1)=\>\"", ",", "trigger"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"stringer", "[", "trigger", "]"}], "==", "\"\<\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"trigger", "=", "False"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<The event \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldBlue"}], ",", " ", 
            RowBox[{
            "\"\< does not have a trigger.\>\"", "//", "boldBlack"}]}], 
           "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<eventToSymbolicSBML: trigger(2)=\>\"", ",", "trigger"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "trigger", "]"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\<The event \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{"id", "//", "boldBlue"}], ",", " ", 
            RowBox[{
            "\"\< has an invalid trigger: trigger must be a boolean \
expression and not a list: \>\"", "//", "boldBlack"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"trigger", "//", "boldBlue"}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<eventToSymbolicSBML: trigger(3)=\>\"", ",", "trigger"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"trigger", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<trigger\>\"", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", " ", 
           RowBox[{"expression2SymbolicSBML", "[", "trigger", "]"}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<eventToSymbolicSBML: trigger(4)=\>\"", ",", "trigger"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"data", " ", "=", " ", 
        RowBox[{"{", "trigger", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"delay", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`delay", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`delay", "\[Rule]", " ", "0"}], "}"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"stringer", "[", "delay", "]"}], "\[NotEqual]", " ", 
          "\"\<0\>\""}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"delay", " ", "=", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<delay\>\"", ",", " ", 
             RowBox[{"{", "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"expression2SymbolicSBML", "[", "delay", "]"}], "}"}]}],
             "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"data", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"data", ",", " ", "delay"}], "]"}]}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"eventAssignment", "=", 
        RowBox[{
         RowBox[{"Global`eventAssignment", "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`eventAssignment", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<eventToSymbolicSBML: eventAssignment(1)=\>\"", ",", 
           "eventAssignment"}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"eventAssignment", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "eventAssignment", "}"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "eventAssignment", "]"}], ">", "0"}], ",", 
         " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"okevent", " ", "=", 
           RowBox[{"Apply", "[", 
            RowBox[{"And", ",", " ", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"ToString", "[", 
                  RowBox[{"Head", "[", "#", "]"}], "]"}], "==", 
                 "\"\<Rule\>\""}], "&"}], ",", " ", "eventAssignment"}], 
              "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", "okevent"}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
               RowBox[{
               "\"\<eventAssignment for event \>\"", "//", "boldBlack"}], ",",
                "\[IndentingNewLine]", 
               RowBox[{"id", "//", "boldRed"}], ",", 
               RowBox[{
               "\"\< is not a list of rules. Requested eventAssignment -> \
\>\"", "//", "boldBlack"}], ",", 
               RowBox[{"eventAssignment", "//", "boldRed"}], ",", 
               RowBox[{
               "\"\< eventAssignment must have the form \
{variable->expression, variable->expression,...}\>\"", "//", "boldBlack"}]}], 
              "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignment(2)=\>\"", ",", 
              "eventAssignment"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignment", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "eventAssignment", "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"eventVariables", "=", 
           RowBox[{"stringer", "/@", 
            RowBox[{"(", " ", 
             RowBox[{"First", "/@", "eventAssignment"}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignment(3)=\>\"", ",", 
              "eventAssignment"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignment", "=", 
           RowBox[{"Last", "/@", "eventAssignment"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"eventAssignment", " ", "=", " ", 
           RowBox[{"expression2SymbolicSBML", "/@", "eventAssignment"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignment(4)=\>\"", ",", 
              "eventAssignment"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"nasg", " ", "=", " ", 
           RowBox[{"Length", "[", "eventVariables", "]"}]}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentNotes", "=", 
           RowBox[{
            RowBox[{"Global`eventAssignmentNotes", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`eventAssignmentNotes", "\[Rule]", 
              RowBox[{"{", "}"}]}], " ", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentNotes", "=", 
           RowBox[{"stringer", "/@", "eventAssignmentNotes"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "eventAssignmentNotes", "]"}], "<", 
             "nasg"}], ",", " ", 
            RowBox[{"eventAssignmentNotes", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"eventAssignmentNotes", ",", 
               RowBox[{"{", "}"}]}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentNotes", "=", 
           RowBox[{"Take", "[", 
            RowBox[{"eventAssignmentNotes", ",", "nasg"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignmentNotes(1)=\>\"", ",", 
              "eventAssignmentNotes"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentMetaids", "=", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Global`eventAssignmentMetaids", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`eventAssignmentMetaids", "\[Rule]", 
              RowBox[{"{", "}"}]}], " ", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentMetaids", "=", 
           RowBox[{"stringer", "/@", "eventAssignmentMetaids"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "eventAssignmentMetaids", "]"}], "<", 
             "nasg"}], ",", 
            RowBox[{"eventAssignmentMetaids", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"eventAssignmentMetaids", ",", "\"\<\>\""}], "]"}]}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentMetaids", "=", " ", 
           RowBox[{"Take", "[", 
            RowBox[{"eventAssignmentMetaids", ",", "nasg"}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignmentMetaids(1)=\>\"", ",", 
              "eventAssignmentMetaids"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentSBOTerms", "=", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Global`eventAssignmentSBOTerms", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`eventAssignmentSBOTerms", "\[Rule]", 
              RowBox[{"{", "}"}]}], " ", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentSBOTerms", "=", 
           RowBox[{"stringer", "/@", "eventAssignmentSBOTerms"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "eventAssignmentSBOTerms", "]"}], "<", 
             "nasg"}], ",", 
            RowBox[{"eventAssignmentSBOTerms", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"eventAssignmentSBOTerms", ",", "\"\<\>\""}], "]"}]}]}],
            "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentSBOTerms", "=", " ", 
           RowBox[{"Take", "[", 
            RowBox[{"eventAssignmentSBOTerms", ",", "nasg"}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignmentSBOTerms(1)=\>\"", ",", 
              "eventAssignmentSBOTerms"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentAnnotations", "=", 
           RowBox[{
            RowBox[{"Global`eventAssignmentAnnotations", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`eventAssignmentAnnotations", "\[Rule]", 
              RowBox[{"{", "}"}]}], " ", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignmentAnnotations(1)=\>\"", 
              ",", "eventAssignmentAnnotations", ",", " ", "\"\< nasg: \>\"", 
              ",", " ", "nasg"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "eventAssignmentAnnotations", "]"}], "<", 
             "nasg"}], ",", " ", 
            RowBox[{"eventAssignmentAnnotations", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"eventAssignmentAnnotations", ",", 
               RowBox[{"{", "}"}]}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentAnnotations", "=", 
           RowBox[{"Take", "[", 
            RowBox[{"eventAssignmentAnnotations", ",", "nasg"}], "]"}]}], ";",
           " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignmentAnnotations(2)=\>\"", 
              ",", "eventAssignmentAnnotations"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventVariables", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Rule", "[", 
               RowBox[{"\"\<variable\>\"", ",", "#"}], "]"}], "&"}], ",", 
             "eventVariables"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"eventAssignmentMetaids", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"StringLength", "[", "#", "]"}], ">", "0"}], ",", 
                RowBox[{"Rule", "[", 
                 RowBox[{"\"\<metaid\>\"", ",", "#"}], "]"}], ",", 
                RowBox[{"{", "}"}]}], "]"}], "&"}], ",", 
             "eventAssignmentMetaids"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"eventVariables", " ", "=", " ", 
           RowBox[{"Flatten", "/@", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"eventVariables", ",", "eventAssignmentMetaids"}], 
               "}"}], "//", "Transpose"}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventVariables(1)=\>\"", ",", 
              "eventVariables"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignment", " ", "=", " ", 
           RowBox[{"MapThread", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<eventAssignment\>\"", ",", " ", "#1", ",", " ", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#2", ",", "#3", ",", "#4"}], "}"}], "//", 
                 "Flatten"}]}], "]"}], "&"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{
              "eventVariables", ",", " ", "eventAssignment", ",", 
               "eventAssignmentNotes", ",", "eventAssignmentAnnotations"}], 
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignment=\>\"", ",", 
              "eventAssignment"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventAssignment", " ", "=", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<listOfEventAssignments\>\"", ",", 
             RowBox[{"{", "}"}], ",", " ", "eventAssignment"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<eventToSymbolicSBML: eventAssignment=\>\"", ",", 
              "eventAssignment"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"data", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"data", ",", " ", "eventAssignment"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<eventToSymbolicSBML: data=\>\"", ",", "data"}], 
             "]"}]}], "]"}], ";"}], " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<The event \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< does not contain an eventAssignment.\>\"", "//", 
             "boldBlack"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"notes", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`notes", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`notes", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "stringToNotes"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
         "optionToAnnotation"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<eventToSymbolicSBML: notes=\>\"", ",", "notes"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<eventToSymbolicSBML: ann=\>\"", ",", "ann"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"data", " ", "=", " ", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{"notes", ",", " ", "ann", ",", " ", "data"}], "]"}], "//", 
         "Flatten"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<eventToSymbolicSBML: data=\>\"", ",", "data"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<event\>\"", ",", "SBML", ",", "data"}], "]"}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<eventToSymbolicSBML: SBML=\>\"", ",", "SBML"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"eventToSymbolicSBML", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"eventToSymbolicSBML", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389966919625543*^9, 3.389966944907373*^9}, {
   3.389966982781247*^9, 3.3899671617797823`*^9}, {3.389967220405428*^9, 
   3.38996741158667*^9}, 3.389967474800618*^9, {3.389967513917251*^9, 
   3.3899675334489527`*^9}, {3.38996758930094*^9, 3.389967616253367*^9}, {
   3.389967713057415*^9, 3.389967713997671*^9}, {3.39021897004184*^9, 
   3.390219022436459*^9}, {3.390219175688693*^9, 3.3902191917569036`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLfield, getSBMLid", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"getSBMLid", "[", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"tag_", ",", " ", 
        RowBox[{"{", 
         RowBox[{"opt___", "?", "OptionQ"}], "}"}], ",", " ", "stuff_"}], 
       "]"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "id", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"id", " ", "=", " ", 
         RowBox[{
          RowBox[{"\"\<id\>\"", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"\"\<id\>\"", "\[Rule]", " ", "\"\<*NONE*\>\""}], 
           "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"id", " ", "=", " ", 
         RowBox[{"stringer", "[", "id", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"id", "==", "\"\<*NONE*\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
             RowBox[{"\"\<There is no \>\"", "//", "boldBlack"}], ",", 
             RowBox[{"\"\<id\>\"", "//", "boldRed"}], ",", 
             RowBox[{
             "\"\< field in the following symbolic SBML: \>\"", "//", 
              "boldBlack"}], ",", " ", 
             RowBox[{
              RowBox[{"XMLElement", "[", 
               RowBox[{"tag", ",", 
                RowBox[{"{", "opt", "}"}], ",", "stuff"}], "]"}], "//", 
              "boldRed"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "id", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSBMLfield", "[", 
      RowBox[{"field_", ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<annotation\>\"", ",", 
         RowBox[{"{", "z___", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "[", "u___", "]"}], "}"}]}], "]"}]}], "]"}], ":=",
      " ", 
     RowBox[{"getSBMLfield", "[", 
      RowBox[{"field", ",", 
       RowBox[{"XMLElement", "[", "u", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSBMLfield", "[", 
      RowBox[{"field_", ",", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"tag_", ",", " ", 
         RowBox[{"{", 
          RowBox[{"opt___", "?", "OptionQ"}], "}"}], ",", " ", "stuff_"}], 
        "]"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"value", ",", " ", "r", ",", "identityRule", ",", " ", 
         RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<getSBMLfield: field: \>\"", ",", " ", "field"}], 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Off", "[", 
         RowBox[{"Rule", "::", "rhs"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"identityRule", "[", 
          RowBox[{"Rule", "[", 
           RowBox[{"b_", ",", " ", "b_"}], "]"}], "]"}], ":=", " ", "True"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"identityRule", "[", "b___", "]"}], ":=", " ", "False"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<getSBMLfield: {opt}:\>\"", ",", 
            RowBox[{"{", "opt", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<getSBMLfield: field:\>\"", ",", "field"}], "]"}], 
          ";"}], "  ", "*)"}], " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"value", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"stringer", "[", "field", "]"}], "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"stringer", "[", "field", "]"}], "\[Rule]", " ", 
            "\"\<\>\""}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<getSBMLfield: value:\>\"", ",", " ", "value"}], "]"}],
           ";"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"value", " ", "=", " ", 
         RowBox[{"stringer", "[", "value", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"value", "==", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           StyleBox[
            RowBox[{
             RowBox[{"check", " ", "for", " ", "field"}], " ", "\[Rule]", " ",
              "field"}],
            FontColor->RGBColor[1, 0, 0]], 
           StyleBox[" ",
            FontColor->RGBColor[1, 0, 0]], "*)"}], " ", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"r", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", "opt", "}"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"First", "[", "#", "]"}], "\[Equal]", 
                 RowBox[{"stringer", "[", "field", "]"}]}], ")"}], "&"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "r", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"r", "=", 
               RowBox[{"First", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"identityRule", "[", "r", "]"}], ",", " ", 
                RowBox[{"value", "=", 
                 RowBox[{"stringer", "[", "field", "]"}]}]}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<getSBMLfield: value: \>\"", ",", " ", "value"}], 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "value", "]"}], ";"}]}], "\[IndentingNewLine]",
       "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getSBMLfield", "[", 
     RowBox[{"field_", ",", " ", 
      RowBox[{"XMLElement", "[", "x___", "]"}], ",", 
      RowBox[{"opt__", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"defaultValue", ",", "value"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"defaultValue", "=", 
        RowBox[{
         RowBox[{"default", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"default", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"value", "=", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"field", ",", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"value", "==", "\"\<\>\""}], ",", " ", 
         RowBox[{"value", "=", "defaultValue"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "value", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389968958464837*^9, 3.389968998316759*^9}, {
  3.3899690484874067`*^9, 3.389969049394287*^9}}],

Cell[BoxData[
 SuperscriptBox["Null", "4"]], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["definedUnits[], unitExists[]", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Default$Units", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<ampere\>\"", ",", "\"\<becquerel\>\"", ",", "\"\<candela\>\"", ",", 
     "\"\<Celsius\>\"", ",", "\"\<coulomb\>\"", ",", "\"\<dimensionless\>\"", 
     ",", "\"\<farad\>\"", ",", "\"\<gram\>\"", ",", "\"\<gray\>\"", ",", 
     "\"\<henry\>\"", ",", "\"\<hertz\>\"", ",", "\"\<item\>\"", ",", 
     "\"\<joule\>\"", ",", "\"\<katal\>\"", ",", "\"\<kelvin\>\"", ",", 
     "\"\<kilogram\>\"", ",", "\"\<litre\>\"", ",", "\"\<lumen\>\"", ",", 
     "\"\<lux\>\"", ",", "\"\<metre\>\"", ",", "\"\<mole\>\"", ",", 
     "\"\<newton\>\"", ",", "\"\<ohm\>\"", ",", "\"\<pascal\>\"", ",", 
     "\"\<radian\>\"", ",", "\"\<second\>\"", ",", "\"\<siemens\>\"", ",", 
     "\"\<sievert\>\"", ",", "\"\<steradian\>\"", ",", "\"\<tesla\>\"", ",", 
     "\"\<volt\>\"", ",", "\"\<watt\>\"", ",", "\"\<weber\>\"", ",", " ", 
     "\"\<substance\>\"", ",", "\"\<volume\>\"", ",", "\"\<time\>\"", ",", 
     "\"\<area\>\"", ",", " ", "\"\<length\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Built$In$Units", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<substance\>\"", ",", "\"\<volume\>\"", ",", "\"\<time\>\"", ",", 
     "\"\<area\>\"", ",", " ", "\"\<length\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetDefaultUnits", "[", "]"}], ":=", " ", 
   RowBox[{"(", 
    RowBox[{"default$Units", " ", "=", " ", "Default$Units"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetDefaultUnits", "[", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"defaultUnit", "[", "unit_", "]"}], ":=", " ", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"default$Units", ",", 
     RowBox[{"stringer", "[", "unit", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"builtInUnit", "[", "unit_", "]"}], ":=", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"Built$In$Units", ",", " ", 
     RowBox[{"stringer", "[", "unit", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeDefaultUnit", "[", "unit_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"defaultUnit", "[", "unit", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"default$Units", " ", "=", " ", 
           RowBox[{"Complement", "[", 
            RowBox[{"default$Units", ",", 
             RowBox[{"{", 
              RowBox[{"stringer", "[", "unit", "]"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"builtInUnit", "[", "unit", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Built-in unit: \>\"", "//", "boldGreen"}], ",", 
                RowBox[{"unit", "//", "boldBlue"}], ",", 
                RowBox[{"\"\< redefined. \>\"", "//", "boldGreen"}]}], "]"}], 
              ";"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Return", "[", "True", "]"}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
               RowBox[{
               "\"\<Illegal redefinition of default unit \>\"", "//", 
                "boldBlack"}], ",", 
               RowBox[{"unit", "//", "boldBlue"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "True", "]"}], ";"}]}], " ", 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"definedUnits", "[", "]"}], ":=", 
   RowBox[{"Union", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"First", "/@", " ", "MB$Units"}], ",", " ", 
       "\[IndentingNewLine]", "default$Units"}], "}"}], "\[IndentingNewLine]",
      "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unitExists", "[", "unit_", "]"}], ":=", " ", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"definedUnits", "[", "]"}], ",", "unit"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["expression2SymbolicSBML[Function[x...]...]", "Subsection"],

Cell["\<\
This version treats array references x[[i]] as function references \
selector[x, i] which is generates an MathML function selector[x,i] rather \
than directly applying the MathML tag <selector/> - it leads to 
\t<apply>
\t<ci>selector</ci>
\t<ci>x</ci>
\t<ci>i</ci>
\t</apply> 
instead of 
\t<apply>
\t<selector/>
\t<ci>x</ci>
\t<ci>i</ci>
\t</apply> 
which is correct MathML. 
Same caution for Dot --> <apply><ci>scalarproduct<... instead of \
<apply><scalarproduct />

revised 2.3.19 - add piecewiseIf
revised 2.3.21 - change how Dot is handled.
revised 2.4.8 - correct implementation of Piecewise ... Piece ... with post \
processor to (a) eliminate <apply/> and (b) reverse order of arguments : \
value goes first then test in piece; other way around in If.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"expression2SymbolicSBML", "[", 
     RowBox[{"Function", "[", "x___", "]"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "id", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"id", " ", "=", " ", 
        RowBox[{"\"\<function\>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"MB$functioncounter", "++"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"expression2SymbolicSBML", "[", 
         RowBox[{
          RowBox[{"Function", "[", "x", "]"}], ",", " ", "id"}], "]"}], "]"}],
        ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"expression2SymbolicSBML", "[", 
     RowBox[{
      RowBox[{"Function", "[", "x__", "]"}], ",", " ", "id_"}], "]"}], ":=", 
    " ", 
    RowBox[{"expression2SymbolicSBML", "[", 
     RowBox[{
      RowBox[{"Function", "[", "x", "]"}], ",", " ", "id", ",", " ", "id"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"expression2SymbolicSBML", "[", 
    RowBox[{
     RowBox[{"Function", "[", "x__", "]"}], ",", " ", "id_", ",", " ", 
     "name_", ",", "metaid_", ",", "  ", "annotation_", ",", " ", "notes_", 
     ",", " ", 
     RowBox[{"sboTerm_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "args", ",", " ", "sid", ",", " ", "sname"}], "}"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringQ", "[", "id", "]"}], ",", " ", 
        RowBox[{"sid", " ", "=", " ", "id"}], ",", " ", 
        RowBox[{"sid", "=", 
         RowBox[{"ToString", "[", "id", "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringQ", "[", "name", "]"}], ",", " ", 
        RowBox[{"sname", "=", "name"}], ",", " ", 
        RowBox[{"sname", "=", 
         RowBox[{"ToString", "[", "name", "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"Xpression2SymbolicMathML", "[", 
        RowBox[{
         RowBox[{"Function", "[", "x", "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"System`Part", "\[Rule]", " ", "Global`selector"}], ",", 
           RowBox[{"System`Dot", "\[Rule]", " ", "Global`scalarproduct"}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", "*)"}], ",", 
           RowBox[{"System`If", "\[Rule]", " ", "piecewiseIf"}]}], 
          RowBox[{"(*", "*)"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "s", "}"}], ",", " ", "annotation", ",", " ", 
          "notes"}], "]"}], "//", "Flatten"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"args", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<id\>\"", "\[Rule]", " ", "sid"}], "}"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "sname", "]"}], ">", "0"}], ",", " ", 
        RowBox[{"args", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"args", ",", " ", 
           RowBox[{"\"\<name\>\"", "\[Rule]", " ", "sname"}]}], "]"}]}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "metaid", "]"}], ">", "0"}], ",", " ", 
        RowBox[{"args", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"args", ",", " ", 
           RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], ">", "2.15"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringLength", "[", "sboTerm", "]"}], ">", "0"}], ",", 
          " ", 
          RowBox[{"args", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"args", ",", " ", 
             RowBox[{"\"\<sboTerm\>\"", "\[Rule]", " ", "sboTerm"}]}], 
            "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<functionDefinition\>\"", ",", "args", ",", "s"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"encodePiecewise", "[", "s", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"encodeCsymbols", "[", "s", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{"s", "/.", 
           RowBox[{"XMLElement", "\[Rule]", " ", "myx"}]}], ")"}]}], ";"}], 
       " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.388341561838545*^9, {3.388351242383333*^9, 3.388351243493546*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["expression2SymbolicSBML[general expression ]", "Subsection"],

Cell["\<\
revised 2.3.19 - add piecewiseIf;
revised 2.4.8 - correct implementation of Piecewise ... Piece ... with post \
processor to (a) eliminate <apply/> and (b) reverse order of arguments : \
value goes first then test in piece; other way around in If.
2.4.25 - moved piecewise handling to encodePiecewise\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"expression2SymbolicSBML", "[", "infix_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "myx"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"Xpression2SymbolicMathML", "[", 
        RowBox[{"infix", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"System`Part", "\[Rule]", " ", "Global`selector"}], ",", 
           " ", 
           RowBox[{"System`Dot", "\[Rule]", " ", "Global`scalarproduct"}], 
           " ", ",", 
           RowBox[{"System`If", "\[Rule]", " ", "piecewiseIf"}]}], "  ", 
          "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"encodePiecewise", "[", "s", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"encodeCsymbols", "[", "s", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.3883415876206093`*^9, {3.388351874145917*^9, 3.388351914866482*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["encodePiecewise", "Subsection"],

Cell["create 2.4.25 to avoid code duplication", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"encodePiecewise", "[", "xml_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "myx"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<XML`MathML`Symbols`Piece\>\"", "}"}]}], "]"}], 
           ",", "a_", ",", "b_"}], "}"}]}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<piece\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"b", ",", "a"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<XML`MathML`Symbols`Otherwise\>\"", "}"}]}], 
            "]"}], ",", "a___"}], "}"}]}], "]"}], ":=", "\[IndentingNewLine]", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<otherwise\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "a", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<XML`MathML`Symbols`Piecewise\>\"", "}"}]}], 
            "]"}], ",", "a___"}], "}"}]}], "]"}], ":=", "\[IndentingNewLine]", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<piecewise\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "a", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", "x___", "]"}], ":=", " ", 
       RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"xml", "/.", 
         RowBox[{"XMLElement", "\[Rule]", " ", "myx"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["encodeCsymbols", "Subsection"],

Cell["2.4.25 created to handle csymbols", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"encodeCsymbols", "[", "xml_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "myx"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"csymbol", " ", "time"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "if", " ", "it", " ", "is", " ", "enclosed", " ", "in", " ", 
        "quotes"}], ",", " ", 
       RowBox[{
       "it", " ", "will", " ", "be", " ", "encoded", " ", "as", " ", "an", 
        " ", "\"\<ms\>\"", " ", "element"}], ",", " ", "otherwise", ",", " ", 
       RowBox[{"as", " ", "a", " ", "\"\<ci\>\"", " ", "element"}]}], " ", 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"myx", "[", 
         RowBox[{"\"\<apply\>\"", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\"\<time\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=",
         " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<csymbol\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
            RowBox[{"\"\<definitionURL\>\"", "\[Rule]", "csymbolTimeURL"}]}], 
           "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"myx", "[", 
         RowBox[{"\"\<apply\>\"", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ms\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "\"\<time\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=",
         " ", "\[IndentingNewLine]", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<csymbol\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
            RowBox[{"\"\<definitionURL\>\"", "\[Rule]", "csymbolTimeURL"}]}], 
           "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}], "}"}]}], 
         "]"}]}], ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<time\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=",
        " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<csymbol\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
           RowBox[{"\"\<definitionURL\>\"", "\[Rule]", "csymbolTimeURL"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ms\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<time\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=",
        " ", "\[IndentingNewLine]", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<csymbol\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
           RowBox[{"\"\<definitionURL\>\"", "\[Rule]", "csymbolTimeURL"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"csymbol", " ", "delay"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "it", " ", "is", " ", "enclosed", " ", "in", " ", 
         "quotes"}], ",", " ", 
        RowBox[{
        "it", " ", "will", " ", "be", " ", "encoded", " ", "as", " ", "an", 
         " ", "\"\<ms\>\"", " ", "element"}], ",", " ", "otherwise", ",", " ", 
        RowBox[{"as", " ", "a", " ", "\"\<ci\>\"", " ", "element"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"myx", "[", 
          RowBox[{"\"\<apply\>\"", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "\"\<delay\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}],
          ":=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<csymbol\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
             RowBox[{
             "\"\<definitionURL\>\"", "\[Rule]", "csymbolDelayURL"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}], "}"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"myx", "[", 
          RowBox[{"\"\<apply\>\"", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ms\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "\"\<delay\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}],
          ":=", " ", "\[IndentingNewLine]", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<csymbol\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
             RowBox[{
             "\"\<definitionURL\>\"", "\[Rule]", "csymbolDelayURL"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}], "}"}]}], 
          "]"}]}], ";"}], "\[IndentingNewLine]", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<delay\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=",
        " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<csymbol\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
           RowBox[{"\"\<definitionURL\>\"", "\[Rule]", "csymbolDelayURL"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ms\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<delay\>\"", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=",
        " ", "\[IndentingNewLine]", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<csymbol\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
           RowBox[{"\"\<definitionURL\>\"", "\[Rule]", "csymbolDelayURL"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"unknown", " ", "csymbol"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "if", " ", "it", " ", "is", " ", "enclosed", " ", "in", " ", 
         "quotes"}], ",", " ", 
        RowBox[{
        "it", " ", "will", " ", "be", " ", "encoded", " ", "as", " ", "an", 
         " ", "\"\<ms\>\"", " ", "element"}], ",", " ", "otherwise", ",", " ", 
        RowBox[{"as", " ", "a", " ", "\"\<ci\>\"", " ", "element"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "someURL_", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=", 
       " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<csymbol\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
           RowBox[{"\"\<definitionURL\>\"", "\[Rule]", 
            RowBox[{"stringer", "[", "someURL", "]"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "x_", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ms\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "someURL_", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<csymbol\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
           RowBox[{"\"\<definitionURL\>\"", "\[Rule]", 
            RowBox[{"stringer", "[", "someURL", "]"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"unspecified", " ", "URL"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", 
        RowBox[{"\"\<apply\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "x_", "}"}]}], "]"}]}], "}"}]}], "]"}], ":=", " ", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"r", "=", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<csymbol\>\"", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<encoding\>\"", "\[Rule]", "\"\<text\>\""}], ",", 
               RowBox[{
               "\"\<definitionURL\>\"", "\[Rule]", 
                "\"\<the-definition-URL-was-not-specified\>\""}]}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"stringer", "[", "x", "]"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<expression2SymbolicSBML: no definitionURL supplied for \
csymbol \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{
             RowBox[{
             "\"\<\[LeftAngleBracket]\>\"", "<>", "x", "<>", 
              "\"\<\[RightAngleBracket]\>\""}], "//", "boldBlue"}], ",", 
            RowBox[{"\"\< in the expression \>\"", "//", "boldBlack"}], " ", 
            ",", " ", 
            RowBox[{"infix", "//", "boldBlue"}], ",", " ", 
            RowBox[{
            "\"\< The expected syntax for a csymbol is \
\[LeftAngleBracket]variable, definitionURL\[RightAngleBracket],\
\[LeftAngleBracket]variable, \\\"time\\\"\[RightAngleBracket], or \
\[LeftAngleBracket]variable, \\\"delay\\\"\[RightAngleBracket].\\nIt has been \
encoded as:\\n\>\"", "//", "boldBlack"}], ",", "\[IndentingNewLine]", 
            RowBox[{"XMLPrintForm", "[", 
             RowBox[{"r", ",", "Purple"}], "]"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myx", "[", "x___", "]"}], ":=", " ", 
       RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"xml", "/.", 
         RowBox[{"XMLElement", "\[Rule]", " ", "myx"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["simpleSymbolicXML, simpleXML", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"simpleSymbolicXML", "[", 
    RowBox[{"tag_", ",", " ", "value_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "string", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"string", "[", 
        RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", "x"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"string", "[", "x_", "]"}], ":=", " ", 
       RowBox[{"ToString", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"XMLElement", "[", 
        RowBox[{
         RowBox[{"string", "[", "tag", "]"}], ",", 
         RowBox[{"{", "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"string", "[", "value", "]"}], "}"}]}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"simpleXML", "[", 
   RowBox[{"tag_", ",", "value_"}], "]"}], ":=", " ", 
  RowBox[{"XMLOut", "[", 
   RowBox[{"simpleSymbolicXML", "[", 
    RowBox[{"tag", ",", "value"}], "]"}], "]"}]}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["annotation and note support ", "Subsection"],

Cell[CellGroupData[{

Cell["optionToAnnotation", "Subsubsection",
 CellMargins->{{72.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"optionToAnnotation", "[", 
    RowBox[{"{", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "}"}], "]"}], ":=", " ", 
   RowBox[{"{", 
    RowBox[{"XMLElement", "[", "x", "]"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"optionToAnnotation", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"input", ",", "outpt", ",", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<optionToAnnotation: input:\>\"", ",", "x"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"input", "=", 
       RowBox[{
        RowBox[{"{", "x", "}"}], "//", "Flatten"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "input", "]"}], "<", "1"}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionQ", "[", "x", "]"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"outpt", "=", 
          RowBox[{"{", 
           RowBox[{"Apply", "[", 
            RowBox[{"annotationToSymbolicSBML", ",", " ", "x"}], "]"}], 
           "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<optionToAnnotation: return value:\>\"", ",", 
           "outpt"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "outpt", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "\"\<optionToAnnotation: invalid argument: \>\"", "//", "boldBlack"}],
         ",", 
        RowBox[{"x", "//", "boldBlue"}], ",", 
        RowBox[{
        "\"\< An annotation should have the form string\[Rule]string or \
string\[Rule]list.\>\"", "//", "boldBlack"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"annotationToSymbolicSBML", "[", "input", "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getAnnotations", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getAnnotations", "[", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"z", ",", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<annotation\>\"", ",", "___"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getAnnotations", "[", 
    RowBox[{"id_", "\[Rule]", 
     RowBox[{"XMLElement", "[", "x___", "]"}]}], "]"}], ":=", 
   RowBox[{"getAnnotations", "[", 
    RowBox[{"XMLElement", "[", "x", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getAnnotations", "[", 
     RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", 
    RowBox[{"getAnnotations", "/@", "x"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getAnnotations", "[", 
     RowBox[{"tag_", ",", "xx_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"xx", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"tag", ",", "___"}], "]"}], ",", "Infinity"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"getAnnotations", "[", "m", "]"}], "]"}], ";"}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isAnnotated", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"getAnnotations", "[", "x", "]"}], "]"}], ">", "0"}]}], 
  ";"}]}], "Input",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getNotes", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getNotes", "[", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"x_", ",", " ", "y_", ",", " ", "z_"}], "]"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<notes\>\"", ",", "___"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNotes", "[", 
    RowBox[{"id_", "\[Rule]", " ", 
     RowBox[{"XMLElement", "[", "x___", "]"}]}], "]"}], ":=", " ", 
   RowBox[{"getNotes", "[", 
    RowBox[{"XMLElement", "[", "x", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNotes", "[", 
     RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
    RowBox[{"getNotes", "/@", "x"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNotes", "[", 
     RowBox[{"tag_", ",", "xx_"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"xx", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"tag", ",", "___"}], "]"}], ",", " ", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"getNotes", "[", "m", "]"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isNoted", "[", "x_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"getNotes", "[", "x", "]"}], "]"}], ">", "0"}]}], 
  ";"}]}], "Input",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["updateNotes, stringToNotes", "Subsubsection",
 CellChangeTimes->{{3.388318017371941*^9, 3.388318021950329*^9}}],

Cell["\<\
updateNotes will extract notes from XMLElement[z] on level 1 and merge them \
with any notes given in the option list. The return value is a list with a \
single XMLElement as {XMLElement[\"notes\",{},{merged notes}] where merged \
notes is a string containing the merged set of notes.\
\>", "Text",
 CellChangeTimes->{{3.388317963222683*^9, 3.388317966713172*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"stringToNotes", "[", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<notes\>\"", ",", " ", "x_", ",", "y_"}], "]"}], "]"}], ":=",
     " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<notes\>\"", ",", "x", ",", "y"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"rev", " ", "5"}], "-", "31", "-", 
    RowBox[{
    "04", " ", "to", " ", "force", " ", "XHTML", " ", "format", " ", "on", 
     " ", "notes"}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"rev", " ", "2.3", ".24", " ", "7"}], "-", "5", "-", 
       RowBox[{"04", " ", "to", " ", "not", " ", "force"}]}], " ", "<", 
      "body"}], ".."}], ">", " ", 
    RowBox[{"on", " ", "null", " ", 
     RowBox[{"notes", ":", " ", 
      RowBox[{
      "this", " ", "should", " ", "encourage", " ", "the", " ", 
       "postprocessor", " ", "to", " ", "remove", " ", "all", " ", "notes", 
       " ", "statements", " ", "that", " ", "are", " ", "empty"}]}]}]}], " ", 
   "*)"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stringToNotes", "[", "\"\<\>\"", "]"}], ":=", " ", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<notes\>\"", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"stringToNotes", "[", 
     RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<notes\>\"", ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"Cases", "[", 
       RowBox[{
        RowBox[{"ImportString", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "\"\<<body xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\>\"", "<>", 
           "x", "<>", "\"\<</body>\>\""}], ",", " ", "\"\<XML\>\""}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"XMLElement", "[", "___", "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<notes\>\"", ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "x", "}"}]}], "]"}], ";"}], " ", "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stringToNotes", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"stringToNotes", "/@", "x"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"stringToNotes", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Print", "[", 
     RowBox[{
      RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
      RowBox[{"\"\<stringToNotes: \>\"", "//", "boldBlue"}], ",", 
      RowBox[{
      "\"\< argument must be a string, XMLElement, or list of XMLElements of \
notes. Input given: \>\"", "//", "boldBlack"}], ",", " ", "x"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"updateNotes", "[", 
     RowBox[{
      RowBox[{"XMLElement", "[", "z___", "]"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"oldnotes", ",", "newnotes", ",", "x", ",", 
        StyleBox["formatNotes",
         FontColor->RGBColor[0, 0, 1]]}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         StyleBox["formatNotes",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox["[",
          FontColor->RGBColor[0, 0, 1]], 
         RowBox[{"w_", "?", "StringQ"}], "]"}], ":=", 
        RowBox[{"{", "w", "}"}]}], ";", 
       RowBox[{
        RowBox[{
         StyleBox["formatNotes",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox["[",
          FontColor->RGBColor[0, 0, 1]], 
         RowBox[{"XMLElement", "[", 
          RowBox[{"w1_", ",", "w2_", ",", "w3_"}], "]"}], "]"}], ":=", "w3"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["formatNotes",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox["[",
          FontColor->RGBColor[0, 0, 1]], 
         RowBox[{"w_", "?", "ListQ"}], "]"}], ":=", 
        RowBox[{"formatNotes", "/@", "w"}]}], ";", 
       RowBox[{
        RowBox[{
         StyleBox["formatNotes",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox["[",
          FontColor->RGBColor[0, 0, 1]], "w___", "]"}], ":=", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"boldOrange", "[", "\"\<Error: \>\"", "]"}], ",", 
          RowBox[{"boldRed", "[", "\"\<updateNotes: \>\"", "]"}], ",", 
          RowBox[{"boldBlank", "[", "\"\<invalid call to \>\"", "]"}], ",", 
          RowBox[{"boldRed", "[", "\"\<formatNotes\>\"", "]"}], ",", 
          RowBox[{"boldBlack", "[", "\"\< arguments: \>\"", "]"}], ",", "x"}],
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"XMLElement", "[", "z", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"oldnotes", "=", 
        RowBox[{"formatNotes", "[", 
         RowBox[{"getNotes", "[", "x", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"newnotes", "=", 
        RowBox[{
         RowBox[{"Global`notes", "/.", "\[InvisibleSpace]", 
          RowBox[{"{", "opt", "}"}]}], "/.", "\[InvisibleSpace]", 
         RowBox[{"{", 
          RowBox[{"Global`notes", "\[Rule]", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"newnotes", "=", 
        RowBox[{"formatNotes", "[", "newnotes", "]"}]}], ";", 
       RowBox[{"newnotes", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"oldnotes", ",", "newnotes"}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"newnotes", "=", 
        RowBox[{"StringJoin", "@@", "newnotes"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"newnotes", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"newnotes", "=", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<notes\>\"", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", "newnotes", "}"}]}], "]"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"newnotes", "=", 
          RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "newnotes", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"updateNotes", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"updateNotes", "[", "x___", "]"}], ":=", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"boldOrange", "[", "\"\<Error: \>\"", "]"}], ",", 
     RowBox[{"boldRed", "[", "\"\<updateNotes \>\"", "]"}], ",", 
     RowBox[{"boldBlack", "[", "\"\<called with invalid argment: \>\"", "]"}],
      ",", 
     RowBox[{"boldRed", "[", 
      RowBox[{"ToString", "[", "x", "]"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["updateAnnotations", "Subsubsection",
 CellMargins->{{72.6875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"updateAnnotations", "[", 
      RowBox[{
       RowBox[{"XMLElement", "[", "z__", "]"}], ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "x", ",", " ", "old", ",", " ", "new", ",", " ", "ann", ",", " ", 
         "checkAnn"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"checkAnn", "[", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<annotation\>\"", ",", "u___"}], "]"}], "]"}], ":=", 
         " ", "True"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"checkAnn", "[", 
          RowBox[{"u_", "?", "ListQ"}], "]"}], ":=", " ", 
         RowBox[{"And", "@@", 
          RowBox[{"(", 
           RowBox[{"checkAnn", "/@", "u"}], ")"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"checkAnn", "[", "u___", "]"}], ":=", " ", "False"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"x", " ", "=", " ", 
         RowBox[{"XMLElement", "[", "z", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"old", " ", "=", "  ", 
         RowBox[{
          RowBox[{"getAnnotations", "[", "x", "]"}], "//", "Flatten"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"new", " ", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"(", "Global`annotation", ")"}], "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"checkAnn", "[", "new", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ann", " ", "=", " ", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{"new", ",", " ", "old"}], "]"}], "//", "Flatten"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ann", " ", "=", " ", "old"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", 
             RowBox[{
             "\"\<updateAnnotations: checkAnn:\>\"", "//", "boldRed"}], ",", 
             RowBox[{
             "\"\< annotations must be Symbolic XML or a list of Symbolic \
XML: input ignored: \>\"", "//", "boldBlack"}], ",", "new"}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "ann", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"updateAnnotations", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"updateAnnotations", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
       RowBox[{
       "\"\< udpateAnnotations: invalid argument list: \>\"", "//", 
        "boldBlack"}], ",", "\[IndentingNewLine]", 
       RowBox[{"boldBlue", "/@", 
        RowBox[{"{", "x", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 CellMargins->{{73.5625, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["createSymbolicAnnotation -- not currently used for anything", \
"Subsubsection",
 CellMargins->{{72.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"createSymbolicAnnotation", "[", 
     RowBox[{"package_", ",", " ", "ns_", ",", "tag_", ",", " ", 
      RowBox[{"{", 
       RowBox[{"data___", "?", "OptionQ"}], "}"}], ",", " ", "sub_"}], "]"}], 
    ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "string", " ", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"string", "[", 
         RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", "x"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"string", "[", 
         RowBox[{"x_", "\[Rule]", " ", "y_"}], "]"}], ":=", " ", 
        RowBox[{
         RowBox[{"string", "[", "x", "]"}], "\[Rule]", " ", 
         RowBox[{"string", "[", "y", "]"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"string", "[", 
         RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
        RowBox[{"string", "/@", "x"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"string", "[", "x_", "]"}], ":=", " ", 
        RowBox[{"ToString", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<annotation\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<xmlns:\>\"", "<>", 
            RowBox[{"string", "[", "package", "]"}]}], "\[Rule]", " ", 
           RowBox[{"string", "[", "ns", "]"}]}], "}"}], ",", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"XMLElement", "[", 
           RowBox[{
            RowBox[{"string", "[", "tag", "]"}], ",", 
            RowBox[{"string", "[", 
             RowBox[{"{", "data", "}"}], "]"}], ",", 
            RowBox[{
             RowBox[{"{", "sub", "}"}], "//", "Flatten"}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["annotationToSymbolicSBML", "Subsubsection",
 CellMargins->{{72.75, Inherited}, {Inherited, Inherited}}],

Cell["\<\
annotationToSymbolicSBML encapsulates some symbolic XML in an annotation \
package\
\>", "Text",
 CellMargins->{{72.75, Inherited}, {Inherited, Inherited}}],

Cell["\<\
1/26/05 - add anotation package as <a:b=c> instead of just <b= c> (inside of \
annotations)
6/6/06 completely rewrite to allow more flexibility in heirarchy, both inline \
tags & trees at any level; 
removes dependendence on on symbolicXMLForm
6/6/06 change setAnnotationURL to setAnnotationURI;
\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{
    "Print", "[", "\"\<Loading: Model Builder: annotations\>\"", "]"}]}], 
   "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setAnnotationNamespace", "[", "arg_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"MB$CurrentAnnotationNamespace", " ", "=", " ", 
        RowBox[{"stringer", "[", "arg", "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setAnnotationURI", "[", "arg_", "]"}], ":=", " ", 
   RowBox[{"setAnnotationNamespace", "[", "arg", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setAnnotationURL", "[", "arg_", "]"}], ":=", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Warning:\>\"", "//", "boldRed"}], ",", 
         RowBox[{
         "\"\< setAnnotationURL has been disparaged in favor of \
setAnnotationURI and will be discontinued in a future version of \
MathSBML.\>\"", "//", "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"setAnnotationURI", "[", "arg", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setAnnotationPackage", "[", "arg_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"MB$CurrentAnnotationPackage", "=", 
        RowBox[{"stringer", "[", "arg", "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"$$LoadBug", ",", " ", 
     RowBox[{
     "Print", "[", 
      "\"\<Loading: Model Builder: annotationToSymbolicSBML \>\"", "]"}]}], 
    "]"}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"annotationToSymbolicSBML", "[", 
     RowBox[{
      RowBox[{"a_", "?", "StringQ"}], "\[Rule]", " ", "ann_"}], "]"}], ":=", 
    " ", 
    RowBox[{"annotationToSymbolicSBML", "[", 
     RowBox[{
      RowBox[{"a", "\[Rule]", " ", "ann"}], ",", " ", 
      "MB$CurrentAnnotationPackage", ",", " ", 
      "MB$CurrentAnnotationNamespace"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"annotationToSymbolicSBML", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"topLevel_", "?", "StringQ"}], "\[Rule]", "ann_"}], ",", 
      RowBox[{"pkg_:", "StringQ"}], ",", 
      RowBox[{"URI_", "?", "StringQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", 
        RowBox[{"inline", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"tree", "=", 
         RowBox[{"{", "}"}]}], ",", "inlineElements", ",", "package", ",", 
        " ", "URL", ",", "treeElements", ",", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"package", "=", "pkg"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"package", "==", "\"\<\>\""}], ",", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<annotationToSymbolicSBML: annotation package has not been \
defined. Use setAnnotationPackage[package-name] to define the name of the \
package. \>\"", "//", "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"package", "=", "\"\<Indeterminate-resource\>\""}], ";"}]}],
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"URL", "=", "URI"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"URL", "==", "\"\<http://\>\""}], ",", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<annotationToSymbolicSBML: annotation URI has not been \
defined. Use setAnnotationURI[URI] to define the annotation namespace URI. \>\
\"", "//", "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{
          "URL", "=", "\"\<http://sbml.org/Indeterminate-resource-URI/\>\""}],
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"inlineElements", "[", 
         RowBox[{"tool_", ",", "data_"}], "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"r", "=", 
             RowBox[{"{", "}"}]}], ",", "in"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"in", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{"data", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"(", " ", 
                 RowBox[{
                  RowBox[{"Head", "[", "#", "]"}], "===", "Rule"}], ")"}], 
                "\[And]", 
                RowBox[{"StringQ", "[", 
                 RowBox[{"Last", "[", "#", "]"}], "]"}]}], "&"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"r", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"Rule", "[", 
               RowBox[{
                RowBox[{"tool", "<>", "\"\<:\>\"", "<>", 
                 RowBox[{"First", "[", "#", "]"}]}], ",", 
                RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
             "in"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "r", "]"}]}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", "of", " ", "inlineElements"}], " ", "*)"}],
        Background->RGBColor[1, 1, 0]], 
       StyleBox["\[IndentingNewLine]",
        Background->RGBColor[1, 1, 0]], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"treeElements", "[", 
         RowBox[{"tool_", ",", "data_"}], "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"r", "=", 
             RowBox[{"{", "}"}]}], ",", "out", ",", "in", ",", "ok", ",", 
            "notok", ",", " ", "nextlevel"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"in", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{"data", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"(", " ", 
                 RowBox[{
                  RowBox[{"Head", "[", "#", "]"}], "===", "Rule"}], ")"}], 
                "\[And]", 
                RowBox[{"StringQ", "[", 
                 RowBox[{"Last", "[", "#", "]"}], "]"}]}], "&"}]}], "]"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"out", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"data", ",", "in"}], "]"}]}], ";", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<treeElements: tree:\>\"", ",", "out"}], "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "first", " ", "check", " ", "to", " ", "make", " ", "sure", " ", 
             "only", " ", "rules", " ", "are", " ", "found"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"ok", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{"out", ",", 
              RowBox[{
               RowBox[{"(", " ", 
                RowBox[{
                 RowBox[{"Head", "[", "#", "]"}], "===", "Rule"}], ")"}], 
               "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"notok", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"out", ",", "ok"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "MathSBML`Private`boldRed"}], 
               ",", 
               RowBox[{
               "\"\<annotationToSymbolicSBML: invalid format for annotation \
data: \>\"", "//", "MathSBML`Private`boldBlack"}], ",", 
               RowBox[{"MathSBML`Private`boldBlue", "[", "#", "]"}], ",", 
               RowBox[{
               "\"\< is not a rule.\>\"", "//", 
                "MathSBML`Private`boldBlack"}]}], "]"}], "&"}], "/@", 
            "notok"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "reject", " ", "any", " ", "rules", " ", "that", " ", "are", " ", 
             "not", " ", "heirarchies", " ", "of", " ", "lists"}], "  ", 
            "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"out", "=", "ok"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", " ", "=", " ", 
            RowBox[{"Select", "[", 
             RowBox[{"out", ",", " ", 
              RowBox[{
               RowBox[{"ListQ", "[", 
                RowBox[{"Last", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], ";",
            " ", "\[IndentingNewLine]", 
           RowBox[{"notok", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"out", ",", "ok"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<treeElements: really ok:\>\"", ",", "ok"}], "]"}],
               ";", "\[IndentingNewLine]", 
              RowBox[{"Print", "[", 
               RowBox[{"\"\<treeElements: notok:\>\"", ",", "notok"}], "]"}], 
              ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{
               "\"\<Error: annotationToSymbolicSBML: \>\"", "//", 
                "MathSBML`Private`boldRed"}], ",", "\[IndentingNewLine]", 
               RowBox[{"MathSBML`Private`boldBlue", "[", "#", "]"}], ",", " ", 
               RowBox[{
               "\"\< does not have the form string\[Rule]string or string\
\[Rule]list and will be ignored.\>\"", "//", "MathSBML`Private`boldBlack"}]}],
               "\[IndentingNewLine]", "]"}], "&"}], "/@", "notok"}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"nextlevel", "[", 
             RowBox[{
              RowBox[{"u_", "?", "StringQ"}], "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{"v_", "?", "StringQ"}], "}"}]}], "]"}], ":=", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{
              RowBox[{"tool", "<>", "\"\<:\>\"", "<>", "u"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "v", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"nextlevel", "[", 
             RowBox[{
              RowBox[{"u_", "?", "StringQ"}], "\[Rule]", " ", 
              RowBox[{"v_", "?", "ListQ"}]}], "]"}], ":=", " ", 
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"in", ",", "out"}], "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"in", "=", 
                RowBox[{"inlineElements", "[", 
                 RowBox[{"tool", ",", "v"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"out", "=", 
                RowBox[{"treeElements", "[", 
                 RowBox[{"tool", ",", "v"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"XMLElement", "[", 
                RowBox[{
                 RowBox[{"tool", "<>", "\"\<:\>\"", "<>", "u"}], ",", "in", 
                 ",", "out"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"nextlevel", "[", "u___", "]"}], ":=", " ", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", 
            RowBox[{"nextlevel", "/@", "ok"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "ok", "]"}]}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", "of", " ", "treeElements"}], " ", "*)"}],
        Background->RGBColor[1, 1, 0]], 
       StyleBox["\[IndentingNewLine]",
        Background->RGBColor[1, 1, 0]], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"\"\<a\>\"", "\[Rule]", " ", "\"\<b\>\""}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "normally", " ", "this", " ", "would", " ", "be", " ", "inline", " ", 
         "but", " ", "not", " ", "at", " ", "the", " ", "top", " ", "level"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "[", "ann", "]"}], ",", "\[IndentingNewLine]", 
         " ", 
         RowBox[{"tree", "=", 
          RowBox[{"{", "ann", "}"}]}], ",", "\[IndentingNewLine]", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"\"\<a\>\"", "\[Rule]", " ", 
           RowBox[{"{", " ", "...", " ", "}"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ListQ", "[", "ann", "]"}], ",", " ", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"\"\<a\>\"", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<b\>\"", ",", ".."}], "}"}]}], " ", "*)"}], " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"StringQ", "[", 
                RowBox[{"First", "[", "ann", "]"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", "ann", "]"}], "\[Equal]", "1"}], 
                  ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"\"\<a\>\"", "\[Rule]", 
                    RowBox[{"{", "\"\<b\>\"", "}"}]}], " ", "*)"}], " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"tree", "=", "ann"}], ",", " ", 
                  "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{"\"\<a\>\"", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"\"\<b\>\"", ",", " ", 
                    RowBox[{"other", " ", "stuff"}]}], "}"}]}], " ", "*)"}], 
                  " ", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{
                    "\"\<Error: \>\"", "//", "MathSBML`Private`boldRed"}], 
                    ",", 
                    RowBox[{
                    "\"\< annotationToSymbolicSBML: invalid format for \
annotation: If the first element in a list is a string, there should not be \
any additional elements in the list: \>\"", "//", 
                    "MathSBML`Private`boldBlack"}], ",", 
                    RowBox[{"MathSBML`Private`boldBlue", "[", "ann", "]"}], 
                    ",", " ", 
                    RowBox[{
                    "\"\< will be interpreted as \>\"", "//", 
                    "MathSBML`Private`boldBlack"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"First", "[", "ann", "]"}], "}"}], "//", 
                    "MathSBML`Private`boldBlue"}]}], "]"}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"tree", "=", 
                    RowBox[{"{", 
                    RowBox[{"First", "[", "ann", "]"}], "}"}]}], ";"}]}], 
                 "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
               ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"First", "[", "ann", "]"}], " ", "is", " ", "not", 
                 " ", "a", " ", "string"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"inline", "=", 
                 RowBox[{"inlineElements", "[", 
                  RowBox[{"package", ",", "ann"}], "]"}]}], ";", 
                "\[IndentingNewLine]", " ", 
                RowBox[{"tree", "=", 
                 RowBox[{"treeElements", "[", 
                  RowBox[{"package", ",", "ann"}], "]"}]}], ";"}]}], " ", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}], " ", 
            RowBox[{"(*", " ", 
             RowBox[{"end", " ", "If", " ", 
              RowBox[{"StringQ", "[", 
               RowBox[{"First", "[", "ann", "]"}], "]"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "end", " ", "TRUE", " ", "part", " ", "of", " ", "If", " ", 
              RowBox[{"ListQ", "[", "ann", "]"}]}], "*)"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "ann", " ", "is", " ", "not", " ", "a", " ", "list", " ", "and", 
              " ", "not", " ", "a", " ", "string"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"tree", "=", 
              RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{
             "Print", "[", 
              "\"\<Error: annotationToSymbolicSBML: annotation must be of the \
form string-> string or string -> List\>\"", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"\"\<a\>\"", "\[Rule]", " ", 
             RowBox[{"{", "stuff", " ", "}"}]}], " ", "*)"}], " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", "if", " ", 
          RowBox[{"ListQ", "[", "ann", "]"}]}], "*)"}], "\[IndentingNewLine]",
         "]"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "if", " ", 
         RowBox[{"StringQ", "[", "ann", "]"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"a", "=", 
        RowBox[{"XMLElement", "[", "\[IndentingNewLine]", 
         RowBox[{"\"\<annotation\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", 
            RowBox[{
             RowBox[{
             "package", "<>", "\[IndentingNewLine]", "\"\<:\>\"", "<>", 
              "topLevel"}], ",", " ", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<xmlns:\>\"", "<>", "package"}], "\[Rule]", " ", 
                 "URL"}], "}"}], ",", "inline"}], "]"}], ",", " ", "tree"}], 
            "]"}], "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "a", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"annotationToSymbolicSBML", "[", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<annotation\>\"", ",", "x___"}], "]"}], "]"}], ":=", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<annotation\>\"", ",", "x"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"annotationToSymbolicSBML", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<annotation\>\"", ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"XMLElement", "[", "x", "]"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"annotationToSymbolicSBML", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"{", "x", "}"}], "]"}], ">", "0"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< annotationToSymbolicSBML: incorrect format for argument: \>\
\"", "//", "boldBlack"}], ",", 
            RowBox[{"x", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< argument should be string\[Rule]string or \
string\[Rule]list.\>\"", "//", "boldBlack"}]}], "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"$$LoadBug", ",", " ", 
     RowBox[{
     "Print", "[", "\"\<Loading: Model Builder: annotationToSBML \>\"", 
      "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"annotationToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"XMLOut", "[", 
      RowBox[{"annotationToSymbolicSBML", "[", "opt", "]"}], "]"}]}], ";"}], 
   "*)"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annotationToSBML", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"XMLOut", "[", 
    RowBox[{"annotationToSymbolicSBML", "[", "x", "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{72.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["setModelAnnotation, setSBMLAnnotation", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"$$LoadBug", ",", " ", 
     RowBox[{
     "Print", "[", "\"\<Loading: Model Builder: setModelAnnotation \>\"", 
      "]"}]}], "]"}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setModelAnnotation", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "ann", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ann", " ", "=", " ", 
        RowBox[{"annotationToSymbolicSBML", "[", "x", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"ListQ", "[", "ann", "]"}]}], ",", " ", 
           RowBox[{"ann", "=", 
            RowBox[{"{", "ann", "}"}]}]}], "]"}], ";"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$ModelAnnotation", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$ModelAnnotation", ",", " ", "ann"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "ann", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"setSBMLAnnotation", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ann", ",", 
        RowBox[{"debug", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      " ", 
      RowBox[{
       RowBox[{"ann", " ", "=", 
        RowBox[{"annotationToSymbolicSBML", "[", "x", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"ListQ", "[", "ann", "]"}]}], ",", " ", 
           RowBox[{"ann", "=", 
            RowBox[{"{", "ann", "}"}]}]}], "]"}], ";"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"MB$SBMLAnnotation", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$SBMLAnnotation", ",", "ann"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<setSBMLAnnotation: ann:\>\"", ",", "ann"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<setSBMLAnnotation: MB$SBMLAnnotation:\>\"", ",", 
           "MB$SBMLAnnotation"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "ann", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["symbolicXMLForm: allows heirarchical annotations", "Subsubsection"],

Cell[BoxData[{
 RowBox[{"If", "[", 
  RowBox[{"$$LoadBug", ",", " ", 
   RowBox[{
   "Print", "[", "\"\<Loading: Model Builder: symbolicXMLForm \>\"", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"symbolicXMLForm", "[", 
      RowBox[{"attribute_", "\[Rule]", " ", 
       RowBox[{"value_", "?", "StringQ"}]}], "]"}], ":=", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringLength", "[", "MB$CurrentAnnotationPackage", "]"}], 
        ">", "0"}], ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{
         RowBox[{"MB$CurrentAnnotationPackage", "<>", "\"\<:\>\"", "<>", 
          RowBox[{"stringer", "[", "attribute", "]"}]}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "value", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"XMLElement", "[", 
        RowBox[{
         RowBox[{"stringer", "[", "attribute", "]"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "value", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"symbolicXMLForm", "[", 
      RowBox[{"attribute_", "\[Rule]", " ", 
       RowBox[{"value_", "?", "ListQ"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "element", ",", "SXML", ",", " ", "attributeValuePairs", ",", " ", 
         "data", ",", " ", "ruleQ", ",", "listRuleQ", ",", " ", "listRules", 
         ",", " ", "simpleRules", ",", "values", ",", " ", "nonRules", ",", 
         "srule", ",", "bo", ",", "br", ",", "bb", ",", 
         RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"srule", "[", 
          RowBox[{"x_", "\[Rule]", " ", "y_"}], "]"}], ":=", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringLength", "[", "MB$CurrentAnnotationPackage", "]"}],
             ">", "0"}], ",", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"MB$CurrentAnnotationPackage", "<>", "\"\<:\>\"", "<>", 
              RowBox[{"stringer", "[", "x", "]"}]}], ",", 
             RowBox[{"stringer", "[", "y", "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"stringer", "[", "x", "]"}], ",", 
             RowBox[{"stringer", "[", "y", "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"listRuleQ", "[", 
          RowBox[{"x_", "\[Rule]", " ", 
           RowBox[{"y_", "?", "ListQ"}]}], "]"}], ":=", " ", "True"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"listRuleQ", "[", "x___", "]"}], ":=", " ", "False"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ruleQ", "[", 
          RowBox[{"x_", "\[Rule]", " ", "y_"}], "]"}], ":=", "True"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ruleQ", "[", "x___", "]"}], ":=", "False"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"element", " ", "=", 
         RowBox[{"stringer", "[", "attribute", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"values", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"value", ",", " ", "ruleQ"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nonRules", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"value", ",", "values"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"listRules", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"values", ",", " ", "listRuleQ"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"simpleRules", " ", "=", " ", 
         RowBox[{"Complement", "[", 
          RowBox[{"values", ",", " ", "listRules"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"simpleRules", "=", 
         RowBox[{"srule", "/@", "simpleRules"}]}], ";", "\[IndentingNewLine]",
         "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<symbolicXMLForm: listRules:\>\"", ",", "listRules", ",", 
             "\"\<\\nsimpleRules:\>\"", ",", "simpleRules", ",", 
             "\"\<\\nbadRules:\>\"", ",", "nonRules"}], "]"}], ";"}]}], " ", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: symbolicXMLForm: \>\"", "//", "boldOrange"}],
              ",", 
             RowBox[{
             "\"\<The following input was ignored because it is not a rule: \
\>\"", "//", "boldBlack"}], ",", 
             RowBox[{"#", "//", "boldRed"}]}], "]"}], "&"}], ",", 
          "nonRules"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"attributeValuePairs", "=", "simpleRules"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"data", "=", 
         RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"data", " ", "=", " ", 
         RowBox[{"symbolicXMLForm", "/@", "listRules"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"SXML", "=", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"element", ",", "attributeValuePairs", ",", "data"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "SXML", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"symbolicXMLForm", "[", 
      RowBox[{"attribute_", "\[Rule]", " ", "value_"}], "]"}], ":=", " ", 
     RowBox[{"symbolicXMLForm", "[", 
      RowBox[{"attribute", "\[Rule]", " ", 
       RowBox[{"stringer", "[", "value", "]"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"symbolicXMLForm", "[", 
      RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
     RowBox[{"symbolicXMLForm", "/@", "x"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"symbolicXMLForm", "[", 
      RowBox[{"x__", "?", "RuleQ"}], "]"}], ":=", " ", 
     RowBox[{"symbolicXMLForm", "[", 
      RowBox[{"{", "x", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"symbolicXMLForm", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: symbolicXMLForm: \>\"", "//", "boldOrange"}], 
          ",", 
          RowBox[{
          "\"\<input is not a rule, a sequence of rules, or a list of rules: \
\>\"", "//", "boldBlack"}], ",", " ", 
          RowBox[{
           RowBox[{"{", "x", "}"}], "//", "boldRed"}]}], "]"}], ";", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", "*)"}]}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["annotate", "Subsubsection",
 CellMargins->{{72.0625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"annotate", "[", 
     RowBox[{
      RowBox[{"XMLElement", "[", 
       RowBox[{"x_", ",", " ", "y_", ",", " ", "z_"}], "]"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<annotation\>\"", ",", "u_", ",", " ", "v_"}], "]"}]}], 
     "]"}], ":=", " ", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"x", ",", " ", "y", ",", " ", 
      RowBox[{"Join", "[", 
       RowBox[{"z", ",", " ", 
        RowBox[{"{", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<annotation\>\"", ",", "u", ",", "v"}], "]"}], "}"}]}], 
       "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annotate", "[", 
    RowBox[{
     RowBox[{"XMLElement", "[", 
      RowBox[{"x_", ",", " ", "y_", ",", " ", "z_"}], "]"}], ",", " ", 
     RowBox[{"u_", "?", "ListQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{"annotate", ",", " ", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", " ", "u"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ARRAYS - expt'l level 3 support", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:arrays\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["dimensionIsDefined", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell["\<\
dimensionIsDefined[v,i] returns True if there is an index by the name of i \
that has been defined for the variable v\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dimensionIsDefined", "[", 
    RowBox[{"variable_", ",", " ", "index_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "i", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"x", "=", 
       RowBox[{"stringer", "[", "variable", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"i", "=", 
       RowBox[{"stringer", "[", "index", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{"MB$Dimensions", ",", "x"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "p", "]"}], "<", "1"}], ",", " ", 
        RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"p", "=", 
       RowBox[{"First", "[", 
        RowBox[{"Flatten", "[", "p", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"MB$Dimensions", "[", 
          RowBox[{"[", 
           RowBox[{"p", ",", "2"}], "]"}], "]"}], ",", "i"}], "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["dimensionToSymbolicSBML", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell["\<\
dimensionToSymbolicSBML[id,min,max,options]
dimensionToSymbolicSBML[{{id1,min,max,options},{id2,min,max,options},...}]

lowerLimit or upperLimit are inline tags if the values are numerical
otherwise they are mathml:

<dimension id=\"i\" lowerLimit=\"5\" upperlimit=\"10\" />
or
<dimension id=\"i\">
  <lowerLimit>
    <math>... etc ...</dimension>\
\>", "Text",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"SymbolQ", "[", "x_", "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"ToString", "[", 
       RowBox[{"Head", "[", "x", "]"}], "]"}], "==", "\"\<Symbol\>\""}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"idQ", "[", "x_", "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"SymbolQ", "[", "x", "]"}], "\[Or]", 
      RowBox[{"StringQ", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dimensionToSymbolicSBML", "[", 
      RowBox[{
       RowBox[{"id_", "?", "idQ"}], ",", "min_", ",", " ", "max_", ",", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "name", ",", "lower", ",", "upper", ",", "dim", ",", "tags", ",", 
         "metaid", ",", "ann", ",", "notes", ",", "data"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tags", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<id\>\"", "\[Rule]", " ", 
           RowBox[{"stringer", "[", "id", "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
              "Names", "[", "\"\<MathSBML`Private`MB$CurrentDimension\>\"", 
               "]"}], "]"}], "<", "1"}], ",", " ", 
            RowBox[{"MB$CurrentDimension", "=", 
             RowBox[{"{", "}"}]}]}], "]"}], ";"}], " ", "*)"}], " ", 
        "\[IndentingNewLine]", 
        RowBox[{"MB$CurrentDimension", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"MB$CurrentDimension", ",", 
           RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"name", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Global`name", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`name", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "//",
           "stringer"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"name", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
          RowBox[{"tags", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"tags", ",", 
             RowBox[{"\"\<name\>\"", "\[Rule]", " ", "name"}]}], "]"}]}]}], 
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"metaid", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Global`metaid", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "//",
           "stringer"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
          RowBox[{"tags", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"tags", ",", 
             RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], 
            "]"}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumberQ", "[", "min", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"lower", " ", "=", " ", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"tags", " ", "=", " ", 
            RowBox[{"Append", "[", 
             RowBox[{"tags", ",", " ", 
              RowBox[{"\"\<lowerLimit\>\"", "\[Rule]", " ", 
               RowBox[{"ToString", "[", "min", "]"}]}]}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"lower", " ", "=", " ", 
            RowBox[{"expression2SymbolicSBML", "[", "min", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"lower", "=", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<lowerLimit\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "lower", "}"}]}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumberQ", "[", "max", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"upper", "=", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"tags", " ", "=", " ", 
            RowBox[{"Append", "[", 
             RowBox[{"tags", ",", " ", 
              RowBox[{"\"\<upperLimit\>\"", "\[Rule]", " ", 
               RowBox[{"ToString", "[", "max", "]"}]}]}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"upper", " ", "=", " ", 
            RowBox[{"expression2SymbolicSBML", "[", "max", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"upper", " ", "=", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<upperLimit\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "upper", "}"}]}], "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ann", " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], ";", 
        " ", "\[IndentingNewLine]", 
        RowBox[{"notes", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Global`notes", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`notes", "\[Rule]", " ", 
               RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
          "stringToNotes"}]}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"data", " ", "=", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{"ann", ",", "notes", ",", 
            RowBox[{"{", 
             RowBox[{"upper", ",", "lower"}], "}"}]}], "]"}], "//", 
          "Flatten"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"dim", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<dimension\>\"", ",", "tags", ",", "data"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "dim", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dimensionToSymbolicSBML", "[", 
      RowBox[{
       RowBox[{"id_", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{"min_", ",", "max_", ",", " ", 
          RowBox[{"opt___", "?", "OptionQ"}]}], "}"}]}], ",", 
       RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"dimensionToSymbolicSBML", "[", 
      RowBox[{"id", ",", "min", ",", "max", ",", "opt"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dimensionToSymbolicSBML", "[", 
      RowBox[{
       RowBox[{"u_", "?", "ListQ"}], ",", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dims", ",", " ", 
         RowBox[{"tags", "=", 
          RowBox[{"{", "}"}]}], ",", " ", "metaid", ",", " ", "ann", ",", " ",
          "notes"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"dims", " ", "=", " ", 
         RowBox[{"dimensionToSymbolicSBML", "/@", "u"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"metaid", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Global`metaid", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "//",
           "stringer"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
          RowBox[{"tags", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"tags", ",", 
             RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], 
            "]"}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"ann", " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`annotation", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`annotation", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], ";", 
        " ", "\[IndentingNewLine]", 
        RowBox[{"notes", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Global`notes", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`notes", "\[Rule]", " ", 
               RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
          "stringToNotes"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfDimensions\>\"", ",", "tags", ",", 
           RowBox[{"Join", "[", 
            RowBox[{"ann", ",", "notes", ",", "dims"}], "]"}]}], "]"}], "]"}],
         ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dimensionToSymbolicSBML", "[", "u___", "]"}], ":=", " ", 
     RowBox[{"{", "}"}]}], ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dimensionToSBML", "[", "u___", "]"}], ":=", " ", 
     RowBox[{"XMLOut", "[", 
      RowBox[{"dimensionToSymbolicSBML", "[", "u", "]"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["listOfIndicesToSymbolicSBML - ", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell["\<\
returns <listOfIndicies ... > object .
This is based on the original array proposal of Finney et al.\
\>", "Text",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"listOfIndicesToSymbolicSBML", "[", 
   RowBox[{"x___", ",", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"indices", ",", "metaid", ",", " ", 
      RowBox[{"tags", "=", 
       RowBox[{"{", "}"}]}], ",", " ", "ann", ",", " ", "note"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"indices", " ", "=", " ", 
      RowBox[{"expression2SymbolicSBML", "/@", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "x", "}"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"metaid", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Global`metaid", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "//",
        "stringer"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
       RowBox[{"tags", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"tags", ",", 
          RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], "]"}]}]}], 
      "]"}], ";", "  ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"ann", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Global`annotation", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`annotation", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], ";", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"notes", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Global`notes", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`notes", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//", 
       "stringToNotes"}]}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"indices", " ", "=", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<listOfIndices\>\"", ",", "tags", ",", " ", 
        RowBox[{"Join", "[", 
         RowBox[{"ann", ",", "notes", ",", "indices"}], "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "indices", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["indexToSymbolicSBML, indicesToSymbolicSBML", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"indexToSymbolicSBML", "[", "id_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "type", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "id", "]"}], ",", " ", 
        RowBox[{"type", "=", "\"\<cn\>\""}], ",", " ", 
        RowBox[{"type", "=", "\"\<ci\>\""}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<index\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<id\>\"", "\[Rule]", " ", 
            RowBox[{"stringer", "[", "id", "]"}]}], ",", " ", 
           RowBox[{"\"\<type\>\"", "\[Rule]", " ", "type"}]}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indicesToSymbolicSBML", "[", 
    RowBox[{"{", "i__", "}"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ii", ",", "listOfIndices"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ii", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "i", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"listOfIndices", " ", "=", " ", 
       RowBox[{"indexToSymbolicSBML", "/@", "ii"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"listOfIndices", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfIndices\>\"", ",", " ", 
         RowBox[{"{", "}"}], ",", " ", "listOfIndices"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "listOfIndices", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indicesToSymbolicSBML", "[", "i__", "]"}], ":=", " ", 
   RowBox[{"indicesToSymbolicSBML", "[", 
    RowBox[{"{", "i", "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indexToSBML", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"XMLOut", "[", 
    RowBox[{"indexToSymbolicSBML", "[", "x", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indicesToSBML", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"XMLOut", "[", 
    RowBox[{"indicesToSymbolicSBML", "[", "x", "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["objectLinktToSymbolicSBML", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell["\<\
returns an <objectLink object=\"..\", ...> object
link = speciesLink, compartmentLink, etc.\
\>", "Text",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"objectLinkToSymbolicSBML", "[", 
    RowBox[{"link_", ",", " ", "object_", ",", " ", 
     RowBox[{"{", "indices___", "}"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listOfIndices", ",", 
       RowBox[{"linkXML", "=", 
        RowBox[{"{", "}"}]}], ",", "slink", ",", "metaid", ",", "tags", ",", 
       "data", ",", "ann", ",", "notes", ",", 
       RowBox[{"knownLinks", "=", 
        RowBox[{"{", 
         RowBox[{
         "\"\<compartmentLink\>\"", ",", "\"\<foreachLink\>\"", ",", 
          "\"\<outsideLink\>\"", ",", "\"\<speciesLink\>\"", ",", 
          "\"\<variableLink\>\""}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ifArrays", "[", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"slink", " ", "=", " ", 
          RowBox[{"stringer", "[", "link", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"knownLinks", ",", "slink"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", " ", 
              RowBox[{
              "\"\<objectLinkToSymbolicSBML: unknown link \>\"", "//", 
               "boldBlack"}], ",", 
              RowBox[{"slink", "//", "boldRed"}], ",", 
              RowBox[{"\"\<; allowed types are: \>\"", "//", "boldBlack"}], 
              ",", 
              RowBox[{"knownLinks", "//", "boldBlack"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", 
             RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
          "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"tags", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<object\>\"", "\[Rule]", " ", 
            RowBox[{"stringer", "[", "object", "]"}]}], "}"}]}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"metaid", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"Global`metaid", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "//",
            "stringer"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"metaid", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
           RowBox[{"tags", " ", "=", " ", 
            RowBox[{"Append", "[", 
             RowBox[{"tags", ",", 
              RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "metaid"}]}], 
             "]"}]}]}], "]"}], ";", "  ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"listOfIndices", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{"listOfIndicesToSymbolicSBML", "[", "indices", "]"}], 
           "}"}]}], ";", "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
         RowBox[{"ann", " ", "=", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Global`annotation", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`annotation", "\[Rule]", " ", 
               RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], ";",
          " ", "\[IndentingNewLine]", 
         RowBox[{"notes", " ", "=", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Global`notes", "/.", 
               RowBox[{"{", "opt", "}"}]}], "/.", 
              RowBox[{"{", 
               RowBox[{"Global`notes", "\[Rule]", " ", 
                RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}], "//",
            "stringToNotes"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"data", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"listOfIndices", ",", "ann", ",", " ", "notes"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"linkXML", "=", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"slink", ",", " ", "tags", ",", " ", "data"}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
      " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "linkXML", "]"}], ";"}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}]], "Input",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getObjectLink", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectLink", "[", 
     RowBox[{"tag_", ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "v", ",", "l", ",", "ruleQ", ",", "variables", ",", " ", "indices", 
        ",", "tagstring", ",", "opts"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ruleQ", "[", "x_", "]"}], ":=", " ", 
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"Head", "[", "x", "]"}], "]"}], "==", "\"\<Rule\>\""}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"l", "=", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ifArrays", "[", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"v", "=", 
           RowBox[{
            RowBox[{"tag", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"tag", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"v", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "v", "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"And", "@@", 
             RowBox[{"ruleQ", "/@", "v"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"variables", " ", "=", " ", 
               RowBox[{"First", "/@", "v"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"indices", " ", "=", " ", 
               RowBox[{"Flatten", "/@", 
                RowBox[{"List", "/@", 
                 RowBox[{"Last", "/@", "v"}]}]}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"tagstring", "=", 
               RowBox[{
                RowBox[{"decontextify", "[", "tag", "]"}], "//", 
                "stringer"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"l", "=", 
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"objectLinkToSymbolicSBML", "[", 
                   RowBox[{"tagstring", ",", "#1", ",", "#2"}], "]"}], "&"}], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"variables", ",", "indices"}], "}"}]}], "]"}]}], 
              ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ";"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", " ", 
               RowBox[{"tag", "//", "boldRed"}], ",", 
               RowBox[{"\"\<\[Rule]\>\"", "//", "boldRed"}], ",", 
               RowBox[{"v", "//", "boldRed"}], ",", 
               RowBox[{
               "\"\< incorrectly formatted, should be \>\"", "//", 
                "boldBlack"}], ",", 
               RowBox[{"tag", "//", "boldBlack"}], ",", 
               RowBox[{
               "\"\< \[Rule]{var\[Rule]{i,j,k,...},var\[Rule]{i,j,k},...}\>\"\
", "//", "boldBlack"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "l", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "  "}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getArrayDimensions", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell["\<\
Returns either a listOfDimensions, a listOfDimensions encapsulated as an \
annotation, or a null list\
\>", "Text",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getArrayDimensions", "[", 
     RowBox[{"var_", ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "dim", "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dim", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ifArrays", "[", "]"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"dim", " ", "=", " ", 
           RowBox[{
            RowBox[{"Global`ArrayDimensions", "/.", "opt"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`ArrayDimensions", "\[Rule]", " ", 
              RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "dim", "]"}], ">", "0"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"MB$CurrentDimension", "=", 
              RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"dim", " ", "=", " ", 
              RowBox[{"dimensionToSymbolicSBML", "[", "dim", "]"}]}], ";", 
             " ", "\[IndentingNewLine]", 
             RowBox[{"MB$Dimensions", " ", "=", " ", 
              RowBox[{"Prepend", "[", 
               RowBox[{"MB$Dimensions", ",", 
                RowBox[{"{", 
                 RowBox[{"var", ",", "MB$CurrentDimension"}], "}"}]}], 
               "]"}]}], ";", " ", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ifArraysAreAnnotations", "[", "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"dim", "=", 
                 RowBox[{"{", 
                  RowBox[{"annotationToSymbolicSBML", "[", "dim", " ", "]"}], 
                  "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"dim", "=", 
                 RowBox[{"{", "dim", "}"}]}], ";"}]}], "\[IndentingNewLine]", 
              "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "dim", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["symbolicMathML", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"symbolicMathML", "[", "m_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "p", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "m", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"p", "=", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<math\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<xmlns\>\"", "\[Rule]", " ", 
            "\"\<http://www.w3.org/1998/Math/MathML\>\""}], "}"}], ",", "p"}],
          "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "p", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["matrixToSymbolicSBML and vectorToSymbolicSBML", "Subsubsection",
 CellMargins->{{72, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"matrixToSymbolicSBML", "[", 
    RowBox[{
     RowBox[{"mat_", "?", "MatrixQ"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mrows", ",", "m", ",", " ", 
       StyleBox["matrixrow",
        FontColor->RGBColor[0, 0, 1]]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["matrixrow",
         FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<matrixrow\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<cn\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"ToString", "[", 
                RowBox[{"FortranForm", "[", "#", "]"}], "]"}], "}"}]}], "]"}],
             "&"}], ",", " ", "x"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mrows", " ", "=", " ", 
       RowBox[{"matrixrow", "/@", "mat"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"m", "=", 
       RowBox[{"symbolicMathML", "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<matrix\>\"", ",", 
          RowBox[{"{", "}"}], ",", "mrows"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"matrixToSymbolicSBML", "[", "mat_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", 
        RowBox[{"\"\< matrixToSymbolicSBML:\>\"", "//", "boldBlack"}], ",", 
        RowBox[{"mat", "//", "boldRed"}], ",", 
        RowBox[{"\"\< is not a matrix.\>\"", "//", "boldBlack"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"stringToNotes", "[", 
        RowBox[{
        "\"\<\\nMathSBML: matrixToSymbolicSBML: InvalidInput:\\n\>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"InputForm", "[", "mat", "]"}], "]"}], "<>", 
         "\"\<\\n\>\""}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"matrixToSBML", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"XMLOut", "[", 
    RowBox[{"matrixToSymbolicSBML", "[", "x", "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"vectorToSymbolicSBML", "[", 
    RowBox[{
     RowBox[{"vec_", "?", "VectorQ"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"v", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<cn\>\"", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"ToString", "[", 
              RowBox[{"FortranForm", "[", "#", "]"}], "]"}], "}"}]}], "]"}], 
          "&"}], ",", " ", "vec"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"v", "=", 
       RowBox[{"symbolicMathML", "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<vector\>\"", ",", 
          RowBox[{"{", "}"}], ",", "v"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "v", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"vectorToSymbolicSBML", "[", "mat_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", 
        RowBox[{"\"\< vectorToSymbolicSBML: \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"mat", "//", "boldRed"}], ",", 
        RowBox[{"\"\< is not a vector.\>\"", "//", "boldBlack"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"stringToNotes", "[", 
        RowBox[{
        "\"\<\\nMathSBML: vectorToSymbolicSBML: Invalid Input:\\n\>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"InputForm", "[", "mat", "]"}], "]"}], "<>", 
         "\"\<\\n\>\""}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"vectorToSBML", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"XMLOut", "[", 
    RowBox[{"vectorToSymbolicSBML", "[", "x", "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["MIRIAM", "Subsection"],

Cell[CellGroupData[{

Cell["\<\
set Creator Information
setMIRIAMcreatorFamily, setMIRIAMcreatorGiven, setMIRIAMcreatorEMAIL, \
setMIRIAMcreatorOrgname;\
\>", "Subsubsection",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"MIRIAMcreatorToSymbolicXML", "[", "]"}], ":=", " ", 
     RowBox[{"MIRIAMcreatorToSymbolicXML", "[", 
      RowBox[{
      "MIRIAMcreatorFamily", ",", "MIRIAMcreatorGiven", ",", 
       "MIRIAMcreatorEMAIL", ",", "MIRIAMcreatorOrgname"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"MIRIAMcreatorToSymbolicXML", "[", 
      RowBox[{
       RowBox[{"family_", "?", "StringQ"}], ",", " ", 
       RowBox[{"given_", "?", "StringQ"}], ",", " ", 
       RowBox[{"email_", "?", "StringQ"}], ",", " ", 
       RowBox[{"org_", "?", "StringQ"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"v", ",", "b", ",", "t", ",", "d", ",", "warn", ",", " ", 
         RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
          "Print", "[", 
           "\"\<dbg: MIRIAMcreatorToSymbolicXML: setMIRIAMCreator\>\"", 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"setMIRIAMcreator", "[", 
         RowBox[{"family", ",", "given", ",", "email", ",", "org"}], "]"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
          "Print", "[", 
           "\"\<dbg: MIRIAMcreatorToSymbolicXML: vCardToSymbolicXML\>\"", 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"v", "=", 
         RowBox[{"vCardToSymbolicXML", "[", 
          RowBox[{
          "MIRIAMcreatorFamily", ",", "MIRIAMcreatorGiven", ",", 
           "MIRIAMcreatorEMAIL", ",", "MIRIAMcreatorOrgname"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
          "Print", "[", "\"\<dbg: MIRIAMcreatorToSymbolicXML: warnings\>\"", 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"warn", "[", 
          RowBox[{"test_", ",", " ", "descr_"}], "]"}], ":=", " ", 
         RowBox[{"If", "[", 
          RowBox[{"test", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Warning:\>\"", "//", "boldRed"}], ",", 
             RowBox[{"\"\<MIRIAM creator \>\"", "//", "boldBlack"}], ",", " ", 
             RowBox[{"descr", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< is not specified.\>\"", "//", "boldBlack"}]}], 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"warn", "[", 
         RowBox[{
          RowBox[{"family", "==", "\"\<Indeterminate\>\""}], ",", 
          "\"\<Family\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"warn", "[", 
         RowBox[{
          RowBox[{"given", "==", "\"\<Indeterminate\>\""}], ",", 
          "\"\<Given\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"warn", "[", 
         RowBox[{
          RowBox[{"org", "==", "\"\<Indeterminate\>\""}], ",", 
          "\"\<Orgname\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"warn", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"org", ",", 
            RowBox[{
            "RegularExpression", "[", "\"\<.*Indeterminate.*\>\"", "]"}]}], 
           "]"}], ",", "\"\<EMAIL\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
          "Print", "[", "\"\<dbg: MIRIAMcreatorToSymbolicXML: createBag\>\"", 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"b", "=", 
         RowBox[{"createBag", "[", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"b", "=", 
         RowBox[{"appendToBag", "[", 
          RowBox[{"b", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"b", "=", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<dc:creator\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<rdf:ParseType\>\"", "\[Rule]", "\"\<Resource\>\""}], 
            "}"}], ",", 
           RowBox[{"{", "b", "}"}]}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
          "Print", "[", 
           "\"\<dbg: MIRIAMcreatorToSymbolicXML: setMIRIAMcreatedTime\>\"", 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"setMIRIAMcreatedTime", "[", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"t", "=", 
         RowBox[{"MIRIAMCreateTimeToSymbolicXML", "[", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MB$MetaID", "==", "\"\<\>\""}], ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning:\>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<MIRIAMcreatorToSymbolicXML: Model MetaID has not been \
defined.\>\"", "//", "boldBlack"}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"d", "=", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<rdf:Description\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<rdf:about\>\"", "\[Rule]", " ", 
             RowBox[{"stringer", "[", "MB$MetaID", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"b", ",", " ", "t"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", "=", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<rdf:RDF\>\"", ",", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "\"\<xmlns:rdf\>\"", "\[Rule]", " ", 
              "\"\<http://www.w3.org/1999/02/22-rdf-syntax-ns#\>\""}], ",", 
             RowBox[{
             "\"\<xmlns:dc\>\"", "\[Rule]", " ", 
              "\"\<http://purl.org/dc/elements/1.1/\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
             "\"\<xmlns:dcterms\>\"", "\[Rule]", " ", 
              "\"\<http://purl.org/dc/terms/\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
             "\"\<xmlns:vCard\>\"", "\[Rule]", " ", 
              "\"\<http://www.w3.org/2001/vcard-rdf/3.0#\>\""}]}], 
            "\[IndentingNewLine]", "}"}], ",", 
           RowBox[{"{", "d", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
          "Print", "[", 
           "\"\<dbg: MIRIAMcreatorToSymbolicXML: \
annotationToSymbolicSBML\>\"", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"d", "=", 
         RowBox[{"annotationToSymbolicSBML", "[", "d", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "d", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"MIRIAMcreatorToSymbolicXML", "[", "x___", "]"}], ":=", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
       RowBox[{
       "\"\<MIRIAMcreatorToSymbolicXML: correct format is \
\\n\\tMIRIAMcreatorToSymbolicXML[family,given,email,org]\\nwhere all \
arguments are strings.\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreator", "[", 
      RowBox[{
      "family_", ",", " ", "given_", ",", " ", "email_", ",", " ", "org_"}], 
      "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"setMIRIAMcreatorFamily", "[", "family", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"b", "=", 
         RowBox[{"setMIRIAMcreatorGiven", "[", "given", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"c", "=", 
         RowBox[{"setMIRIAMcreatorEMAIL", "[", "email", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", "=", 
         RowBox[{"setMIRIAMcreatorOrgname", "[", "org", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "//", 
         "Return"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"resetMIRIAMcreator", "[", "]"}], ":=", 
    RowBox[{"setMIRIAMcreator", "[", 
     RowBox[{
     "\"\<Indeterminate\>\"", ",", " ", "\"\<Indeterminate\>\"", ",", " ", 
      "\"\<Indeterminate@Indeterminate.Indeterminate\>\"", ",", " ", 
      "\"\<Indeterminate\>\""}], "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MIRIAMcreatorFamily", "=", "\"\<Indeterminate\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorFamily", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"(", 
      RowBox[{"MIRIAMcreatorFamily", "=", "x"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorFamily", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
       RowBox[{
       "\"\<setMIRIAMcreatorFamily: argument must be a string.\>\"", "//", 
        "boldBlack"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MIRIAMcreatorGiven", "=", "\"\<Indeterminate\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorGiven", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"MIRIAMcreatorGiven", "=", "x"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorGiven", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
       RowBox[{
       "\"\<setMIRIAMcreatorGiven: argument must be a string.\>\"", "//", 
        "boldBlack"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"eMailAddressQ", "[", 
       RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"x", ",", 
        RowBox[{"RegularExpression", "[", 
         RowBox[{
         "\"\<([a-zA-Z1-9_]+)((\\\\.[a-zA-Z1-9_]*[^.])*\>\"", "<>", 
          "\"\<)@([a-zA-Z1-9_]+)((\\\\.[a-zA-Z1-9_]*[^.])*\>\"", "<>", 
          "\"\<)\>\""}], "]"}]}], "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eMailAddressQ", "[", 
      RowBox[{
       RowBox[{"x_", "?", "StringQ"}], ",", " ", 
       RowBox[{"echo_:", "False"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ok", ",", " ", "chars", ",", "badchars", ",", " ", 
         "emailAsciiStartCharacter", ",", " ", "emailAsciiEndCharacter", ",", 
         " ", "invalidAsciiEmailCharacters", ",", "emailWord", " ", ",", " ", 
         "emailsword", ",", "emailListOfWords", ",", "okemail", ",", " ", 
         "Eprint"}], " ", "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Eprint", "[", "xx___", "]"}], ":=", " ", 
         RowBox[{"If", "[", 
          RowBox[{"echo", ",", " ", 
           RowBox[{"Print", "[", "xx", "]"}]}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"emailAsciiStartCharacter", "=", 
         RowBox[{"FromCharacterCode", "[", "33", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"emailAsciiEndCharacter", "=", 
         RowBox[{"FromCharacterCode", "[", "126", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"invalidAsciiEmailCharacters", "=", 
         RowBox[{"Characters", "[", "\"\<()[]<>,;:'\\\\\\\"\>\"", "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"emailWord", "=", 
         RowBox[{
         "\"\<[\>\"", "<>", "emailAsciiStartCharacter", "<>", "\"\<-\>\"", "<>",
           "emailAsciiEndCharacter", "<>", "\"\<]+\>\""}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"emailListOfWords", "=", 
         RowBox[{
         "emailWord", "<>", "\"\<((.\>\"", "<>", "emailWord", "<>", 
          "\"\<)*)\>\""}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"okemail", "=", " ", 
         RowBox[{
         "emailListOfWords", "<>", "\"\<@\>\"", "<>", "emailListOfWords"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"basic", " ", "address"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"ascii", 
          RowBox[{"(", 
           RowBox[{".", "ascii"}], ")"}], "*", " ", 
          RowBox[{"@", " ", "ascii"}], 
          RowBox[{"(", 
           RowBox[{".", "ascii"}], ")"}], "*"}], " ", "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"ok", "=", 
         RowBox[{"StringMatchQ", "[", 
          RowBox[{"x", ",", " ", 
           RowBox[{"RegularExpression", "[", "okemail", "]"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ok", "\[Equal]", "False"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EPrint", "[", 
            RowBox[{
            "\"\<Warning: \>\"", ",", " ", "\"\<The email address \>\"", ",", 
             " ", 
             RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}], 
             ",", " ", 
             "\"\< is invalid because it does not specify the pattern \
specified in RFC 2822, stuff[(.stuff)+]@stuff[(.stuff)+]\>\""}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"check", " ", "for", " ", "special", " ", "cases"}], " ", 
         "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"chars", "=", 
         RowBox[{"Characters", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"badchars", " ", "=", " ", 
         RowBox[{"Intersection", "[", 
          RowBox[{"chars", ",", " ", "invalidAsciiEmailCharacters"}], "]"}]}],
         ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "badchars", "]"}], ">", "0"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"badchars", "=", 
            RowBox[{"Union", "[", "badchars", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"EPrint", "[", 
              RowBox[{"\"\<Warning: \>\"", ",", " ", 
               RowBox[{
               "\"\<The character: \\\"\>\"", "<>", "#", "<>", 
                "\"\<\\\" in the email address \>\""}], ",", 
               RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}],
                ",", " ", "\"\< is not allowed by RFC 2822\>\""}], "]"}], 
             "&"}], "/@", "badchars"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", "False"}], ";"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"StringCases", "[", 
             RowBox[{"x", ",", " ", "\"\<@\>\""}], "]"}], "]"}], ">", "1"}], 
          ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EPrint", "[", 
            RowBox[{
            "\"\<Warning: \>\"", ",", " ", "\"\<The email address \>\"", ",", 
             " ", 
             RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}], 
             ",", " ", 
             "\"\< is invalid because only one \\\"@\\\" is permitted in an \
email address.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", "False"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringTake", "[", 
            RowBox[{"x", ",", " ", 
             RowBox[{"-", "1"}]}], "]"}], "\[Equal]", "\"\<.\>\""}], ",", " ",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EPrint", "[", 
            RowBox[{
            "\"\<Warning: \>\"", ",", " ", "\"\<The email address \>\"", ",", 
             " ", 
             RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}], 
             ",", " ", 
             "\"\< is invalid because an email address may not terminate with \
a period.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", "False"}], ";"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringTake", "[", 
            RowBox[{"x", ",", " ", 
             RowBox[{"-", "1"}]}], "]"}], "\[Equal]", "\"\<@\>\""}], ",", " ",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EPrint", "[", 
            RowBox[{
            "\"\<Warning: \>\"", ",", " ", "\"\<The email address \>\"", ",", 
             " ", 
             RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}], 
             ",", " ", 
             "\"\< is invalid because an email address may not terminate with \
an @.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", "False"}], ";"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"StringCases", "[", 
             RowBox[{"x", ",", " ", "\"\<.@\>\""}], "]"}], "]"}], ">", "0"}], 
          ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EPrint", "[", 
            RowBox[{
            "\"\<Warning: \>\"", ",", " ", "\"\<The email address \>\"", ",", 
             " ", 
             RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}], 
             ",", " ", 
             "\"\< is invalid because a period may not immediately precede \
the \\\"@\\\" in an email address.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", "False"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"StringCases", "[", 
             RowBox[{"x", ",", " ", "\"\<@.\>\""}], "]"}], "]"}], ">", "0"}], 
          ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EPrint", "[", 
            RowBox[{
            "\"\<Warning: \>\"", ",", " ", "\"\<The email address \>\"", ",", 
             " ", 
             RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}], 
             ",", " ", 
             "\"\< is invalid because a period may not immediately follow the \
\\\"@\\\" in an email address.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", "False"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"StringCases", "[", 
             RowBox[{"x", ",", " ", "\"\<..\>\""}], "]"}], "]"}], ">", "0"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"EPrint", "[", 
            RowBox[{
            "\"\<Warning: \>\"", ",", " ", "\"\<The email address \>\"", ",", 
             " ", 
             RowBox[{"\"\<\\\"\>\"", "<>", " ", "x", "<>", "\"\<\\\"\>\""}], 
             ",", " ", 
             "\"\< is invalid because two periods may not be adjacent to one \
another in an email address.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"ok", "=", "False"}], ";"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "ok", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eMailAddressQ", "[", "x___", "]"}], ":=", " ", "False"}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "MIRIAMcreatorEMAIL", "=", 
     "\"\<Indeterminate@Indeterminate.Indeterminate\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorEMAIL", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ok", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"eMailAddressQ", "[", "x", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{"MIRIAMcreatorEMAIL", "=", "x"}], ")"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<The string: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"x", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< does not appear to be a valid email address.\>\"", "//", 
             "boldBlack"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "MIRIAMcreatorEMAIL", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorEMAIL", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
       RowBox[{
       "\"\<setMIRIAMcreatorEMAIL: argument must be a string.\>\"", "//", 
        "boldBlack"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MIRIAMcreatorOrgname", "=", "\"\<Indeterminate\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorOrgname", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"MIRIAMcreatorOrgname", "=", "x"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setMIRIAMcreatorOrgname", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
       RowBox[{
       "\"\<setMIRIAMcreatorOrgname: argument must be a string.\>\"", "//", 
        "boldBlack"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.388318412189536*^9, 3.388318545698642*^9}, {
  3.3883186343387203`*^9, 3.3883186504934607`*^9}, {3.3883222442649727`*^9, 
  3.388322245402176*^9}, {3.402693326366897*^9, 3.402693522197101*^9}, {
  3.402693600590073*^9, 3.402693617693524*^9}, {3.402693689481347*^9, 
  3.402693700065803*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["MIRIAM Create/Modify TIme, checkW3CDTF", "Subsubsection",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"checkW3CDTF", "[", 
     RowBox[{"s_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"monthDay", ",", "time", ",", "year"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"monthDay", "=", 
        RowBox[{
        "\"\<(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[0-1]))\>\"", "<>", 
         "\"\<|\>\"", "<>", "\"\<((0[469]|11)-(0[1-9]|[12][0-9]|30))\>\"", 
         "<>", "\"\<|\>\"", "<>", "\"\<(02-(0[1-9]|[12][0-9])))\>\""}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{
       "time", "=", 
        "\"\<(T([0-1][0-9]|2[0-4]):([0-5][0-9]):([0-5][0-9]))\>\""}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"year", "=", "\"\<(2[0-9][0-9][0-9]-)\>\""}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"StringMatchQ", "[", 
         RowBox[{"s", ",", 
          RowBox[{"RegularExpression", "[", 
           RowBox[{"year", "<>", "monthDay", "<>", "time"}], "]"}]}], "]"}], 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MIRIAMcreatedTime", "=", "\"\<Indeterminate\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMcreatedTime", "[", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"MIRIAMcreatedTime", "=", 
     RowBox[{"W3CDTF", "[", "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setMIRIAMcreatedTime", "[", 
     RowBox[{"s_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"checkW3CDTF", "[", "s", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"MIRIAMcreatedTime", "=", 
            RowBox[{"W3CDTF", "[", "]"}]}], ")"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "s", "]"}], ";"}], "\[IndentingNewLine]", 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<setMIRIAMcreatedTime: the input string \>\"", "//", 
             "boldBlack"}], ",", "\[IndentingNewLine]", 
            RowBox[{"s", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< does not appear to be in W3CDTF yyyy-mm-ddThh:mm:ss\>\"", "//",
              "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"setMIRIAMcreatedTime", "[", "]"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}],
    ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MIRIAMmodifiedTime", "=", "\"\<Indeterminate\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMmodifiedTime", "[", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"MIRIAMmodifiedTime", "=", 
     RowBox[{"W3CDTF", "[", "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setMIRIAMmodifiedTime", "[", 
   RowBox[{"s_", "?", "StringQ"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"checkW3CDTF", "[", "s", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"MIRIAMmodifiedTime", "=", 
          RowBox[{"W3CDTF", "[", "]"}]}], ")"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "s", "]"}], ";"}], "\[IndentingNewLine]", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\<setMIRIAMmodifiedTime: the input string \>\"", "//", 
           "boldBlack"}], ",", "\[IndentingNewLine]", 
          RowBox[{"s", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< does not appear to be in W3CDTF yyyy-mm-ddThh:mm:ss\>\"", "//",
            "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"setMIRIAMmodifiedTime", "[", "]"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MIRIAMCreateTimeToSymbolicXML", "[", "]"}], ":=", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<dcterms:created\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<rdf:parseType\>\"", "\[Rule]", "\"\<Resource\>\""}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<dcterms:W3CDTF\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "MIRIAMcreatedTime", "}"}]}], "]"}], "}"}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MIRIAMmodifiedTimeToSymbolicXML", "[", "]"}], ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"XMLElement", "[", 
   RowBox[{"\"\<dcterms:created\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<rdf:parseType\>\"", "\[Rule]", "\"\<Resource\>\""}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<dcterms:W3CDTF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "MIRIAMmodifiedTime", "}"}]}], "]"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["MIRIAM rdf:Bag: createBag, getBagSize, appendToBag", "Subsubsection",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"createBag", "[", "]"}], ":=", " ", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<rdf:Bag\>\"", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getBagSize", "[", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"\"\<rdf:Bag\>\"", ",", 
      RowBox[{"l1_", "?", "ListQ"}], ",", 
      RowBox[{"l2_", "?", "ListQ"}]}], "]"}], "]"}], ":=", 
   RowBox[{"Length", "[", "l2", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getBagSize", "[", "z___", "]"}], ":=", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\"\<Error: \>\"", "//", 
       RowBox[{"boldRed", ":", " ", "\"\< getBagSize: \>\""}]}], "//", 
      "boldBlack"}], ",", 
     RowBox[{"z", "//", "boldBlue"}], ",", 
     RowBox[{
     "\"\< does not appear to be an rdf:Bag.\>\"", "//", "boldBlack"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"appendToBag", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<rdf:Bag\>\"", ",", 
       RowBox[{"l1_", "?", "ListQ"}], ",", 
       RowBox[{"l2_", "?", "ListQ"}]}], "]"}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<rdf:li\>\"", ",", 
       RowBox[{"l3_", "?", "ListQ"}], ",", 
       RowBox[{"l4_", "?", "ListQ"}]}], "]"}]}], "]"}], ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"XMLElement", "[", 
    RowBox[{"\"\<rdf:Bag\>\"", ",", "l1", ",", "\[IndentingNewLine]", 
     RowBox[{"Append", "[", 
      RowBox[{"l2", ",", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<rdf:li\>\"", ",", "l3", ",", "l4"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"appendToBag", "[", "z_", "]"}], ":=", 
  RowBox[{"Print", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", 
      RowBox[{"boldRed", ":", " ", "\"\< appendToBag: \>\""}]}], "//", 
     "boldBlack"}], ",", 
    RowBox[{"z", "//", "boldBlue"}], ",", 
    RowBox[{"\"\< Invalid syntax.\>\"", "//", "boldBlack"}]}], 
   "]"}]}]}], "Input",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["create MIRIAM RDF vcard", "Subsubsection",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"vCardToSymbolicXML", "[", 
      RowBox[{
       RowBox[{"family_", "?", "StringQ"}], ",", " ", 
       RowBox[{"given_", "?", "StringQ"}], ",", " ", 
       RowBox[{"email_", "?", "eMailAddressQ"}], ",", " ", 
       RowBox[{"org_", "?", "StringQ"}]}], "]"}], ":=", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"XMLElement", "[", 
      RowBox[{"\"\<rdf:li\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<rdf:parseType\>\"", "\[Rule]", " ", "\"\<Resource\>\""}],
         "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<vCard:N\>\"", " ", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<rdf:parseType\>\"", "\[Rule]", " ", "\"\<Resource\>\""}], 
            "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<vCard:Family\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "family", "}"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<vCard:Given\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "given", "}"}]}], "]"}]}], "}"}]}], 
          "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<vCard:EMAIL\>\"", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "email", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<vCard:ORG\>\"", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<vCard:Orgname\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "org", "}"}]}], "]"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"vCardToSymbolicXML", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "nargs", ",", "family", ",", " ", "given", ",", " ", "email", ",", 
         " ", "org"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nargs", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"{", "x", "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nargs", "\[NotEqual]", "4"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<vCardToSymbolicSBML: invalid argument syntax \>\"", "//", 
             "boldBlack"}], ",", 
            RowBox[{"boldBlue", "/@", 
             RowBox[{"{", "x", "}"}]}], ",", 
            RowBox[{"\"\<; expected 4 arguments.\>\"", "//", "boldBlack"}]}], 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nargs", "\[GreaterEqual]", " ", "1"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"family", "=", 
            RowBox[{
             RowBox[{"{", "x", "}"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"StringQ", "[", "family", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
                RowBox[{
                "\"\< vCardToSymbolicXML The expression: \>\"", "//", 
                 "boldBlack"}], ",", 
                RowBox[{"family", "//", "boldBlue"}], ",", 
                RowBox[{
                "\"\< does not appear to be a valid \\\"family\\\" String. \
Attempting Recovery\>\"", "//", "boldBlack"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"family", "=", 
               RowBox[{"ToString", "[", "family", "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"family", "=", "\"\<Unspecified\>\""}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nargs", "\[GreaterEqual]", "2"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"given", "=", 
            RowBox[{
             RowBox[{"{", "x", "}"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"StringQ", "[", "given", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
                RowBox[{
                "\"\< vCardToSymbolicXML The expression: \>\"", "//", 
                 "boldBlack"}], ",", 
                RowBox[{"given", "//", "boldBlue"}], ",", 
                RowBox[{
                "\"\< does not appear to be a valid \\\"given\\\" String. \
Attempting Recovery. \>\"", "//", "boldBlack"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"given", "=", 
               RowBox[{"ToString", "[", "given", "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"given", "=", "\"\<Unspecified\>\""}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nargs", "\[GreaterEqual]", "3"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"email", "=", 
            RowBox[{
             RowBox[{"{", "x", "}"}], "[", 
             RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"eMailAddressQ", "[", "email", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
                RowBox[{"\"\<The expression: \>\"", "//", "boldBlack"}], ",", 
                RowBox[{"email", "//", "boldBlue"}], ",", 
                RowBox[{
                "\"\< does not appear to be a valid email address \
string.\>\"", "//", "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"email", "=", "\"\<Indeterminate@Email.Address\>\""}], 
              ";"}]}], "\[IndentingNewLine]", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"email", "=", "\"\<Unspecified@Email.Address\>\""}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nargs", "\[GreaterEqual]", "4"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"org", "=", 
            RowBox[{
             RowBox[{"{", "x", "}"}], "[", 
             RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"StringQ", "[", "org", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
                RowBox[{
                "\"\< vCardToSymbolicXML The expression: \>\"", "//", 
                 "boldBlack"}], ",", 
                RowBox[{"org", "//", "boldBlue"}], ",", 
                RowBox[{
                "\"\< does not appear to be a valid \\\"Orgname\\\" String. \
Attempting Recovery.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"org", "=", 
               RowBox[{"ToString", "[", "org", "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"org", "=", "\"\<Unspecified\>\""}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"vCardToSymbolicXML", "[", 
          RowBox[{"family", ",", "given", ",", "email", ",", " ", "org"}], 
          "]"}], "//", "Return"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{71.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exit", "Section",
 CellChangeTimes->{{3.5049749580808697`*^9, 3.5049749586879044`*^9}}],

Cell[BoxData[
 RowBox[{"LTPrint", "[", "\"\<Model Builder loaded.\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5049749602159915`*^9, 3.504974970299568*^9}, {
  3.506452416139419*^9, 3.506452416659594*^9}}]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{701, 858},
WindowMargins->{{104, Automatic}, {Automatic, -8}},
FrontEndVersion->"8.0 for Linux x86 (64-bit) (February 23, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "PastelColor.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 106, 1, 70, "Title"],
Cell[688, 25, 457, 11, 128, "Text"],
Cell[CellGroupData[{
Cell[1170, 40, 154, 2, 78, "Section"],
Cell[1327, 44, 2101, 37, 372, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3465, 86, 33, 0, 78, "Section"],
Cell[3501, 88, 203, 6, 40, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[3729, 98, 50, 0, 39, "Subsection"],
Cell[CellGroupData[{
Cell[3804, 102, 38, 0, 70, "Subsubsection"],
Cell[3845, 104, 902, 20, 70, "Text"],
Cell[4750, 126, 4240, 103, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[9027, 234, 38, 0, 70, "Subsubsection"],
Cell[9068, 236, 627, 16, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[9744, 258, 37, 0, 31, "Subsection"],
Cell[9784, 260, 151, 3, 70, "Text"],
Cell[9938, 265, 2244, 58, 70, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[12219, 328, 33, 0, 31, "Subsection"],
Cell[12255, 330, 71, 0, 70, "Text"],
Cell[12329, 332, 943, 25, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[13309, 362, 37, 0, 31, "Subsection"],
Cell[13349, 364, 666, 17, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[14052, 386, 44, 0, 31, "Subsection"],
Cell[14099, 388, 302, 6, 70, "Text"],
Cell[14404, 396, 68719, 1510, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[83160, 1911, 43, 0, 31, "Subsection"],
Cell[83206, 1913, 26596, 596, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[109839, 2514, 51, 0, 31, "Subsection"],
Cell[109893, 2516, 6724, 155, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[116654, 2676, 47, 0, 31, "Subsection"],
Cell[116704, 2678, 6672, 154, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[123413, 2837, 44, 0, 31, "Subsection"],
Cell[123460, 2839, 10481, 241, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[133978, 3085, 45, 0, 31, "Subsection"],
Cell[134026, 3087, 14167, 325, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[148230, 3417, 40, 0, 31, "Subsection"],
Cell[148273, 3419, 5280, 112, 70, "Input",
 InitializationCell->True],
Cell[153556, 3533, 15670, 365, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[169263, 3903, 47, 0, 31, "Subsection"],
Cell[169313, 3905, 14956, 341, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[184306, 4251, 53, 0, 31, "Subsection"],
Cell[184362, 4253, 10135, 248, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[194534, 4506, 41, 0, 31, "Subsection"],
Cell[194578, 4508, 176, 6, 70, "Text"],
Cell[194757, 4516, 35206, 782, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[230000, 5303, 46, 0, 31, "Subsection"],
Cell[230049, 5305, 13515, 320, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[243601, 5630, 41, 0, 31, "Subsection"],
Cell[243645, 5632, 29839, 656, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[273521, 6293, 45, 0, 31, "Subsection"],
Cell[CellGroupData[{
Cell[273591, 6297, 8099, 196, 70, "Input",
 InitializationCell->True],
Cell[281693, 6495, 54, 1, 70, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[281796, 6502, 50, 0, 31, "Subsection"],
Cell[281849, 6504, 4717, 115, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[286603, 6624, 64, 0, 31, "Subsection"],
Cell[286670, 6626, 785, 24, 70, "Text"],
Cell[287458, 6652, 5671, 138, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[293166, 6795, 66, 0, 31, "Subsection"],
Cell[293235, 6797, 324, 6, 70, "Text"],
Cell[293562, 6805, 1290, 32, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[294889, 6842, 37, 0, 29, "Subsection"],
Cell[294929, 6844, 55, 0, 70, "Text"],
Cell[294987, 6846, 2722, 70, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[297746, 6921, 36, 0, 29, "Subsection"],
Cell[297785, 6923, 49, 0, 70, "Text"],
Cell[297837, 6925, 18108, 431, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[315982, 7361, 50, 0, 29, "Subsection"],
Cell[316035, 7363, 1132, 30, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[317204, 7398, 50, 0, 29, "Subsection"],
Cell[CellGroupData[{
Cell[317279, 7402, 103, 1, 28, "Subsubsection"],
Cell[317385, 7405, 2539, 63, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[319961, 7473, 96, 1, 22, "Subsubsection"],
Cell[320060, 7476, 1696, 51, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[321793, 7532, 90, 1, 22, "Subsubsection"],
Cell[321886, 7535, 1813, 53, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[323736, 7593, 117, 1, 22, "Subsubsection"],
Cell[323856, 7596, 375, 6, 65, "Text"],
Cell[324234, 7604, 7553, 195, 932, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[331824, 7804, 104, 1, 22, "Subsubsection"],
Cell[331931, 7807, 3680, 90, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[335648, 7902, 146, 2, 22, "Subsubsection"],
Cell[335797, 7906, 2118, 51, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[337952, 7962, 109, 1, 22, "Subsubsection"],
Cell[338064, 7965, 166, 4, 70, "Text"],
Cell[338233, 7971, 320, 8, 70, "Text"],
Cell[338556, 7981, 222, 7, 70, "Input",
 InitializationCell->True],
Cell[338781, 7990, 22852, 530, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[361670, 8525, 62, 0, 22, "Subsubsection"],
Cell[361735, 8527, 2845, 76, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[364617, 8608, 73, 0, 22, "Subsubsection"],
Cell[364693, 8610, 7333, 171, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[372063, 8786, 95, 1, 22, "Subsubsection"],
Cell[372161, 8789, 1128, 32, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[373338, 8827, 53, 0, 37, "Subsection"],
Cell[373394, 8829, 195, 6, 31, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[373614, 8839, 100, 1, 27, "Subsubsection"],
Cell[373717, 8842, 141, 3, 70, "Text"],
Cell[373861, 8847, 1338, 36, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[375236, 8888, 105, 1, 21, "Subsubsection"],
Cell[375344, 8891, 428, 13, 209, "Text"],
Cell[375775, 8906, 10396, 250, 1112, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[386208, 9161, 112, 1, 27, "Subsubsection"],
Cell[386323, 9164, 181, 4, 70, "Text"],
Cell[386507, 9170, 2638, 66, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[389182, 9241, 124, 1, 21, "Subsubsection"],
Cell[389309, 9244, 2492, 64, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[391838, 9313, 107, 1, 21, "Subsubsection"],
Cell[391948, 9316, 172, 4, 70, "Text"],
Cell[392123, 9322, 4833, 110, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[396993, 9437, 95, 1, 21, "Subsubsection"],
Cell[397091, 9440, 3613, 85, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[400741, 9530, 100, 1, 21, "Subsubsection"],
Cell[400844, 9533, 182, 4, 70, "Text"],
Cell[401029, 9539, 2602, 60, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[403668, 9604, 96, 1, 21, "Subsubsection"],
Cell[403767, 9607, 834, 22, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[404638, 9634, 127, 1, 21, "Subsubsection"],
Cell[404768, 9637, 2717, 69, 70, "Input",
 InitializationCell->True],
Cell[407488, 9708, 2208, 57, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[409745, 9771, 28, 0, 29, "Subsection"],
Cell[CellGroupData[{
Cell[409798, 9775, 215, 5, 70, "Subsubsection"],
Cell[410016, 9782, 23935, 557, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[433988, 10344, 125, 1, 70, "Subsubsection"],
Cell[434116, 10347, 4617, 114, 70, "Input",
 InitializationCell->True],
Cell[438736, 10463, 1230, 32, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[440003, 10500, 137, 1, 70, "Subsubsection"],
Cell[440143, 10503, 2269, 62, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[442449, 10570, 110, 1, 70, "Subsubsection"],
Cell[442562, 10573, 9034, 208, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[451657, 10788, 93, 1, 76, "Section"],
Cell[451753, 10791, 232, 4, 40, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
