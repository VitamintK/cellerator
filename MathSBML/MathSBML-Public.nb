(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    967586,      23458]
NotebookOptionsPosition[    948245,      22831]
NotebookOutlinePosition[    948686,      22848]
CellTagsIndexPosition[    948643,      22845]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
MathSBML-Public.nb
\
\>", "Title",
 CellChangeTimes->{{3.5062186275626783`*^9, 3.506218631821486*^9}}],

Cell[TextData[{
 "Public Functions Package for MathSBML\n2.24.11 - initial Build for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " v.8 extracted from MathSBML 2.9.0"
}], "Text",
 CellChangeTimes->{{3.50497344593038*^9, 3.5049734715798464`*^9}}],

Cell[CellGroupData[{

Cell["File Description", "Section",
 CellChangeTimes->{{3.395408039119268*^9, 3.395408049088715*^9}, {
  3.5062180912805367`*^9, 3.5062181026997566`*^9}}],

Cell[TextData[{
 StyleBox[" ",
  FontSize->16],
 StyleBox["Filename:\tMathSBML-Public.nb\n Description:\tMathSBML is an SBML \
reader for ",
  FontSize->12],
 StyleBox["Mathematica \n \t\t",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox["This is part of the MathSBML Package\n Organization: \tCaltech \
Biological Network Modeling Center\n License:\tLGPL \n \n ",
  FontSize->12],
 "    This file is part of MathSBML.\n \n    MathSBML is free software: you \
can redistribute it and/or modify\n    it under the terms of the GNU Lesser \
General Public License as published by\n    the Free Software Foundation, \
either version 3 of the License, or\n    (at your option) any later version.\n\
\n    This program is distributed in the hope that it will be useful,\n    \
but WITHOUT ANY WARRANTY; without even the implied warranty of\n    \
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU \
General Public License for more details.\n\n    You should have received a \
copy of the GNU Lesser General Public License\n    along with this program.  \
If not, see <http://www.gnu.org/licenses/>.",
 StyleBox[" ",
  FontSize->12]
}], "Text",
 CellChangeTimes->{{3.388248302205469*^9, 3.388248304035112*^9}, 
   3.388264681197356*^9, {3.3882668683761797`*^9, 3.388266875242931*^9}, 
   3.388353386077384*^9, {3.388363325911048*^9, 3.3883633263870773`*^9}, 
   3.3883996477410192`*^9, {3.388761163736053*^9, 3.38876116441009*^9}, {
   3.389125922604425*^9, 3.389125923136166*^9}, {3.390045172241888*^9, 
   3.39004517571679*^9}, {3.39019850450497*^9, 3.3901985115655603`*^9}, {
   3.392748682342765*^9, 3.392748683344193*^9}, {3.3954080212118177`*^9, 
   3.395408027048024*^9}, {3.395690507776781*^9, 3.3956905087487507`*^9}, {
   3.3973955266739798`*^9, 3.397395527497595*^9}, {3.401465824219963*^9, 
   3.401465836954739*^9}, 3.506217737019514*^9, {3.5062177764407835`*^9, 
   3.506217778375187*^9}, 3.506217826938072*^9, {3.5062180797833166`*^9, 
   3.506218242226402*^9}, {3.506218621541068*^9, 3.5062186224302697`*^9}, {
   3.537137211726701*^9, 3.5371372128081617`*^9}},
 FontSize->10,
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Public function definitions", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:functions\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["init", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"init", "[", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$SBML$SessionWarnings", " ", "=", " ", "0"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"$SBML$FileWarnings", "=", "0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MathSBML`Private`$SBML$warnings", "=", " ", "True"}], ";"}]}],
      "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"init", "[", "]"}], ";"}]}], "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["SBMLRead", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "SBMLRead", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Global`debug", "\[Rule]", " ", "False"}], ",", 
     RowBox[{"Global`verbose", "\[Rule]", " ", "False"}], ",", " ", 
     RowBox[{"Global`warnings", "\[Rule]", " ", "True"}], ",", 
     RowBox[{"Global`evaluateParameters", "\[Rule]", " ", "True"}], ",", 
     RowBox[{"Global`showKineticLaw", "\[Rule]", " ", "True"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`showReactionParameters", "\[Rule]", " ", "True"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`shortenODES", "\[Rule]", " ", "False"}], ",", 
     RowBox[{"Global`stats", "\[Rule]", "False"}], ",", 
     RowBox[{"Global`concise", "\[Rule]", " ", "False"}], ",", " ", 
     RowBox[{"Global`underscore", "\[Rule]", " ", "\"\<\[UnderBracket]\>\""}],
      ",", 
     RowBox[{"Global`defaultIC", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
     ",", 
     RowBox[{
     "Global`defaultParameterValue", "\[Rule]", "\"\<Indeterminate\>\""}], 
     ",", 
     RowBox[{
     "Global`indeterminateValueString", "\[Rule]", " ", 
      "\"\<Indeterminate\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"Global`printModelName", "\[Rule]", " ", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`printSessionStats", "\[Rule]", " ", "False"}], " ", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`return", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Global`SBMLODES", "\[Rule]", " ", "True"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLIC", "\[Rule]", " ", "True"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLConstants", "\[Rule]", " ", "True"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLParameters", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLModelVariables", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLSpecies", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLBoundaryConditions", "\[Rule]", " ", "True"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLAlgebraicRules", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLAssignmentRules", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLConstraints", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLInitialAssignments", "\[Rule]", " ", "True"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLContext", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLUnitDefinitions", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLUnitAssociations", "\[Rule]", "True"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLReactions", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLModelName", "\[Rule]", " ", "True"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLFunctions", "\[Rule]", " ", "True"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLEvents", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLNameIDAssociations", "\[Rule]", " ", "True"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLNumericalSolution", "\[Rule]", " ", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLCompartments", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "Global`SBMLSpeciesCompartmentAssociations", "\[Rule]", " ", "True"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLStoichiometryMatrix", "\[Rule]", " ", "False"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLConservationMatrix", "\[Rule]", " ", "False"}], 
        ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLMassBalanceEquations", "\[Rule]", " ", "False"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLMassActionEquations", "\[Rule]", " ", "False"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLSpeciesTypes", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLCompartmentTypes", "\[Rule]", " ", "True"}], ",", 
        " ", "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLKineticLaws", "\[Rule]", " ", "True"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Global`SBMLMetaIDAssociations", "\[Rule]", " ", "True"}]}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "Global`SBMLMassBalanceRateVector", "\[Rule]", " ", "Automatic"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`SBMLSimplifyRateLaws", "\[Rule]", " ", "False"}], ",", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"Global`context", "\[Rule]", " ", "\"\<Automatic\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`verboseContext", "\[Rule]", " ", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`align", "\[Rule]", " ", "\"\<Left\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`NDSolveOptions", "\[Rule]", " ", 
      RowBox[{"{", "}"}]}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{"MathSBMLSaveVerboseData", "\[Rule]", " ", "\"\<False\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Global`PlotOptions", "\[Rule]", " ", 
      RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"Global`LoadModelBuilder", "\[Rule]", " ", "True"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`EchoLoad", "\[Rule]", " ", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`rationals", "\[Rule]", " ", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`verboseBuiltInUnits", "\[Rule]", " ", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`verboseNormalizedValues", "\[Rule]", " ", "False"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"Global`units", "\[Rule]", " ", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`verboseStoichiometry", "\[Rule]", " ", "False"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`verboseMassBalanceEquations", "\[Rule]", " ", "False"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Global`verboseMassActionEquations", "\[Rule]", " ", "False"}], 
     ",", " ", "\[IndentingNewLine]", 
     RowBox[{"Global`reportMissingODES", "\[Rule]", " ", "False"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.404050102927313*^9, 3.40405011154323*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$SBML$modelcount", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$SBML$SessionWarnings", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$SBML$SessionStartTime", "=", 
   RowBox[{"TimeUsed", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$SBML$FilesRead", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$SBML$OutputFormatIsHTML", "=", "False"}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SBMLRead", "[", 
    RowBox[{"x_", ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sbml", ",", " ", "returnFlags", ",", " ", "plot", ",", "plotopt", ",", 
       " ", "solve"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Off", "[", 
       RowBox[{"General", "::", "\"\<spell\>\""}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Off", "[", 
       RowBox[{"General", "::", "\"\<spell1\>\""}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Off", "[", 
       RowBox[{"Part", "::", "\"\<pspec\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"previouslyDefinedNamesInTheMathematicaEnvirnoment", "=", 
       RowBox[{"Names", "[", "\"\<*\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"previouslyDefinedContextsInTheMathematicaEnvironment", "=", 
       RowBox[{"Contexts", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"$CPU$Trace", "=", "False"}], ";", "\[IndentingNewLine]", 
      RowBox[{"$CPUZero", "=", 
       RowBox[{"TimeUsed", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$CPU", "=", "$CPUZero"}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$InitialCPU", "=", 
       RowBox[{"TimeUsed", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$debug", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`debug", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$verbose", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`verbose", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SBML$VerboseData", " ", "=", " ", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$ReportMissingODE", "=", 
       RowBox[{
        RowBox[{"Global`reportMissingODES", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<SBMLRead: {opt}:\>\"", "//", "boldRed"}], ",", 
           RowBox[{
            RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<SBMLRead: $SBML$debug:\>\"", "//", "boldRed"}], ",", 
           RowBox[{"$SBML$debug", "//", "boldBlue"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Load", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`LoadModelBuilder", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Load", "=", "True"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "need", " ", "for", " ", "force", " ", "this", " ", "for", " ", 
        "checking"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"MB$Echo", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`EchoLoad", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$MetaIDAssociations", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"MB$Load", ",", " ", 
        RowBox[{"newModel", "[", 
         RowBox[{"opt", ",", 
          RowBox[{"Global`echo", "\[Rule]", " ", "MB$Echo"}]}], "]"}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"$SBML$debug", " ", "\[And]", " ", "MB$Load"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<SBMLRead: Model Builder Loaded.\>\"", "//", "boldRed"}], "]"}],
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$Rationals", "=", 
       RowBox[{
        RowBox[{"Global`rationals", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$verboseContext", "=", 
       RowBox[{
        RowBox[{"Global`verboseContext", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$verboseBuiltInUnits", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`verboseBuiltInUnits", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$verboseNormalizedValues", "=", 
       RowBox[{
        RowBox[{"Global`verboseNormalizedValues", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$UseUnits", "=", 
       RowBox[{
        RowBox[{"Global`units", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$verboseNormalizedValues", " ", "=", " ", 
       RowBox[{"And", "[", 
        RowBox[{"$SBML$verboseNormalizedValues", ",", " ", "$SBML$UseUnits"}],
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$Normalize", "=", "$SBML$UseUnits"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$printModelName", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`printModelName", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$modelcount", "++"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"$SBML$FileWarnings", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$warnings", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`warnings", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$evaluateParameters", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`evaluateParameters", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$KineticLaw", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`showKineticLaw", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBMLSimplifyRateLaws", "=", 
       RowBox[{
        RowBox[{"Global`SBMLSimplifyRateLaws", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$ShowReactionParameters", "=", 
       RowBox[{
        RowBox[{"Global`showReactionParameters", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$shortenODES", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`shortenODES", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$Stats", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`stats", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$Underscorecharacter", "=", 
       RowBox[{
        RowBox[{"Global`underscore", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$IndeterminateValue", "=", 
       RowBox[{
        RowBox[{"Global`indeterminateValueString", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$DefaultIC", "=", " ", 
       RowBox[{"ToString", "[", 
        RowBox[{
         RowBox[{"Global`defaultIC", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLRead", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$UseDefaultIC", " ", "=", 
       RowBox[{"(", 
        RowBox[{
        "$SBML$DefaultIC", "\[NotEqual]", " ", "$SBML$IndeterminateValue"}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$DefaultParameterValue", "=", 
       RowBox[{"ToString", "[", " ", 
        RowBox[{
         RowBox[{"Global`defaultParameterValue", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLRead", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$UseDefaultParameterValue", " ", "=", 
       RowBox[{"(", 
        RowBox[{
        "$SBML$DefaultParameterValue", "\[NotEqual]", " ", 
         "$SBML$IndeterminateValue"}], " ", ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$VerboseAlign", " ", "=", " ", 
       RowBox[{"ToString", "[", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Global`align", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"Options", "[", "SBMLRead", "]"}]}], ")"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$ReportCPU", " ", "=", " ", "False"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "change", " ", "this", " ", "line", " ", "to", " ", "enable", " ", 
        "CPU", " ", "observation"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$ReportCPU", ",", " ", 
        RowBox[{"$SBML$CPU", "=", 
         RowBox[{"{", 
          RowBox[{"TimeUsed", "[", "]"}], "}"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBMLUndefinedConstants", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Global`concise", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLRead", "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$SBML$verbose", "=", "False"}], ";", "\[IndentingNewLine]", 
         RowBox[{"$SBML$warnings", "=", "False"}], ";", "\[IndentingNewLine]", 
         RowBox[{"$SBML$Stats", "=", "False"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<SBMLRead: Basic constants set .\>\"", "//", "boldRed"}], "]"}],
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"saveVerboseData", " ", "=", " ", 
       RowBox[{"$SBML$verbose", " ", "\[Or]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MathSBMLSaveVerboseData", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"Options", "[", "SBMLRead", "]"}]}], ")"}]}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBMLRead: verbose flag set .\>\"", "//", "boldRed"}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLVariableQ", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLParameterQ", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLIC", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLIC\[UnderBracket]SI", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLSpeciesToSubstanceUnits", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLSpeciesSIConcentration", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLCompartmentSize", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLSpeciesToUnitsOfTheSpecies", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<SBMLRead: SBML parameters cleared.\>\"", "//", "boldRed"}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBMLVariableQ", "[", "unknownVariable_", "]"}], ":=", " ", 
       "False"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBMLParameterQ", "[", "unknownParameter_", "]"}], ":=", " ", 
       "False"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBMLIC", "[", "unknownVariable_", "]"}], ":=", " ", 
       RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBMLSpeciesToSubstanceUnits", "[", "unknownVariable_", "]"}], 
       ":=", " ", "unknownVariable"}], ";", "\[IndentingNewLine]", 
      RowBox[{"SBMLSpeciesSIConcentration", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBMLCompartmentSize", "[", "unknownVariable_", "]"}], ":=", 
       " ", "unknownVariable"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
       "SBMLSpeciesToUnitsOfTheSpecies", "[", "unknownVariable_", "]"}], ":=",
        " ", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBMLIC\[UnderBracket]SI", "[", "unknownVariable_", "]"}], ":=",
        " ", 
       RowBox[{"SBMLIC", "[", "unknownVariable", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBMLVariables", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"SBMLConstants", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"SBMLBoundaryConditions", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SBMLGlobalParameters", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"SBMLReplacementRules", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"$SBML$MassActionVariables", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SBML$MassAction$Equations", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$SpeciesTypes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$SpeciesTypeAssociations", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentTypes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentTypeAssociations", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "determine", " ", "what", " ", "needs", " ", "to", " ", "be", " ", 
         "returned"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"returnFlags", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Global`return", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLRead", "]"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<SBMLRead: setting return flags; {returnFlags}=\>\"", "//", 
            "boldRed"}], ",", 
           RowBox[{
            RowBox[{"{", "returnFlags", "}"}], "//", "boldBlue"}]}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBMLRead$return", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ToUpperCase", "[", 
          RowBox[{"ToString", "[", "returnFlags", "]"}], "]"}], "\[NotEqual]",
          " ", "\"\<NONE\>\""}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"SBMLRead$return", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"returnFlags", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"returnFlags", ",", 
            RowBox[{"Global`return", "/.", 
             RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnODES", "=", " ", 
          RowBox[{"Global`SBMLODES", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnContext", "=", 
          RowBox[{"Global`SBMLContext", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnIC", "=", " ", 
          RowBox[{"Global`SBMLIC", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
         "SBMLRead$returnConstants", "=", " ", "\[IndentingNewLine]", " ", 
          RowBox[{"Global`SBMLConstants", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnBoundaryConditions", "=", 
          RowBox[{"Global`SBMLBoundaryConditions", "/.", "returnFlags"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnGlobalParameters", "=", 
          RowBox[{"Global`SBMLParameters", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnModelVariables", "=", " ", 
          RowBox[{"Global`SBMLModelVariables", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnSpecies", "=", " ", 
          RowBox[{"Global`SBMLSpecies", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnSpeciesTypes", "=", " ", 
          RowBox[{"Global`SBMLSpeciesTypes", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnCompartmentTypes", "=", 
          RowBox[{"Global`SBMLCompartmentTypes", "/.", "returnFlags"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnAlgebraicRules", "=", " ", 
          RowBox[{"Global`SBMLAlgebraicRules", "/.", "returnFlags"}]}], ";", 
         RowBox[{"SBMLRead$returnConstraints", "=", " ", 
          RowBox[{"Global`SBMLConstraints", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnInitialAssignments", " ", "=", " ", 
          RowBox[{"Global`SBMLInitialAssignments", "/.", "returnFlags"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnAssignmentRules", "=", 
          RowBox[{"Global`SBMLAssignmentRules", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"SBMLRead$returnUnitDefinitions", "=", " ", 
          RowBox[{"Global`SBMLUnitDefinitions", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnUnitAssociations", "=", 
          RowBox[{"Global`SBMLUnitAssociations", "/.", "returnFlags"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnKineticLaws", "=", 
          RowBox[{"Global`SBMLKineticLaws", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnReactions", "=", " ", 
          RowBox[{"Global`SBMLReactions", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnModelName", "=", 
          RowBox[{"Global`SBMLModelName", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnFunctions", "=", 
          RowBox[{"Global`SBMLFunctions", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnEvents", "=", 
          RowBox[{"Global`SBMLEvents", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnNameIDAssociations", "=", 
          RowBox[{"Global`SBMLNameIDAssociations", "/.", "returnFlags"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnSolution", "=", 
          RowBox[{"Global`SBMLNumericalSolution", "/.", "returnFlags"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnCompartments", "=", 
          RowBox[{"Global`SBMLCompartments", "/.", "returnFlags"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
         "SBMLRead$returnSpeciesCompartmentAssociations", " ", "=", " ", 
          RowBox[{
          "Global`SBMLSpeciesCompartmentAssociations", "/.", 
           "returnFlags"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnMetaIDAssociations", "=", 
          RowBox[{"Global`SBMLMetaIDAssociations", "/.", "returnFlags"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"SBML$NDSolveOptions", " ", "=", " ", 
          RowBox[{"Sequence", "[", 
           RowBox[{
            RowBox[{"Global`NDSolveOptions", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"Global`NDSolveOptions", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"solve", " ", "=", " ", 
          RowBox[{
           RowBox[{"NumberQ", "[", "SBMLRead$returnSolution", "]"}], " ", 
           "\[And]", " ", 
           RowBox[{"SBMLRead$returnSolution", ">", "0"}]}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"NumberQ", "[", "SBMLRead$returnSolution", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"boldRed", "[", "\"\<Warning:\>\"", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
              "boldBlack", "[", 
               "\"\<SBMLNDSolve must be assigned a numerical value, not \>\"",
                "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"boldBlue", "[", "SBMLRead$returnSolution", "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"SBMLRead$returnSolution", " ", "=", " ", "0"}], ";"}]}], 
          " ", "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{
              "\"\<SBMLRead: basic SBMLRead return flags set, \
returnFlags=\>\"", "//", "boldRed"}], ",", 
              RowBox[{
               RowBox[{"{", "returnFlags", "}"}], "//", "boldBlue"}]}], "]"}],
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnMassBalanceEquations", "=", 
          RowBox[{"Global`SBMLMassBalanceEquations", "/.", "returnFlags"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnConservationMatrix", "=", 
          RowBox[{"Global`SBMLConservationMatrix", "/.", "returnFlags"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnStoichiometryMatrix", "=", 
          RowBox[{"(", 
           RowBox[{"SBMLRead$returnConservationMatrix", " ", "\[Or]", " ", 
            RowBox[{"(", 
             RowBox[{"Global`SBMLStoichiometryMatrix", "/.", "returnFlags"}], 
             ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLRead$returnMassActionEquations", "=", 
          RowBox[{"And", "[", 
           RowBox[{
            RowBox[{"Global`SBMLMassActionEquations", "/.", "returnFlags"}], 
            ",", " ", "SBMLRead$returnMassBalanceEquations"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<SBMLRead:  SBMLRead$returnStoichiometryMatrix flags \
set\>\"", "//", "boldRed"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
          "SBMLRead$returnMassBalanceEquations", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"SBML$RateVectorID", "=", 
             RowBox[{
              RowBox[{"Global`SBMLMassBalanceRateVector", "/.", 
               RowBox[{"{", "opt", "}"}]}], "/.", 
              RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"SBML$RateVectorID", "=", 
             RowBox[{"stringer", "[", "SBML$RateVectorID", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"SBML$RateVectorID", "==", "\"\<Automatic\>\""}], ",", 
              RowBox[{
               RowBox[{"SBML$RateVectorID", "=", 
                RowBox[{"Unique", "[", "\"\<v\>\"", "]"}]}], ";"}]}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"SBML$RateVectorID", "=", 
             RowBox[{"ToExpression", "[", "SBML$RateVectorID", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"SBML$MassBalanceEquations", "=", 
             RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<SBMLRead:  mass balance flags set\>\"", "//", "boldRed"}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"$SBML$VerboseStoichiometry", "=", 
          RowBox[{
           RowBox[{"Global`verboseStoichiometry", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"$SBML$Verbose$MassBalanceEquations", "=", 
          RowBox[{"And", "[", 
           RowBox[{"SBMLRead$returnMassBalanceEquations", ",", 
            RowBox[{
             RowBox[{"Global`verboseMassBalanceEquations", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], "]"}]}], ";", " ",
          "\[IndentingNewLine]", 
         RowBox[{"$SBML$Verbose$MassActionEquations", "=", 
          RowBox[{"And", "[", 
           RowBox[{"SBMLRead$returnMassActionEquations", ",", 
            RowBox[{
             RowBox[{"Global`verboseMassActionEquations", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], "]"}]}], ";"}]}], 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<SBMLRead: stoichiometric SBMLRead return flags set\>\"", "//", 
           "boldRed"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$Context", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`context", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$Context", "=", 
       RowBox[{"ToString", "[", "$SBML$Context", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBMLRead: Return flags set .\>\"", "//", "boldRed"}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<SBMLRead::calling getSBML: x:\>\"", "//", "boldRed"}],
            ",", 
           RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<SBMLRead::calling getSBML: {opt}:\>\"", "//", "boldRed"}], 
           ",", 
           RowBox[{
            RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sbml", "  ", "=", " ", 
       RowBox[{"getSBML", "[", 
        RowBox[{"x", ",", "opt"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$debug", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<SBMLRead::returned from getSBML: sbml:\>\"", "//", 
            "boldRed"}], ",", 
           RowBox[{"sbml", "//", "boldBlue"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"plotopt", "=", 
       RowBox[{
        RowBox[{"Global`PlotOptions", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ListQ", "[", "plotopt", "]"}], " ", "\[And]", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "plotopt", "]"}], ">", "0"}], ")"}]}], 
         ")"}], "\[Or]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"ToUpperCase", "[", 
            RowBox[{"ToString", "[", "plotopt", "]"}], "]"}], ")"}], " ", 
          "==", "\"\<TRUE\>\""}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"plot", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"solve", ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ToUpperCase", "[", 
               RowBox[{"ToString", "[", "plotopt", "]"}], "]"}], "==", 
              "\"\<TRUE\>\""}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"SBMLPlot", "[", "sbml", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"SBMLPlot", "[", 
              RowBox[{"sbml", ",", " ", 
               RowBox[{"Sequence", "[", "plotopt", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"boldRed", "[", "\"\<Warning:  \>\"", "]"}], ",", " ", 
              RowBox[{"boldBlack", "[", "\"\<SBMLRead: \>\"", "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"boldBlue", "[", 
               RowBox[{"\"\<PlotOptions\[Rule]\>\"", "<>", 
                RowBox[{"ToString", "[", "plotopt", "]"}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
              "boldBlack", "[", 
               "\"\<\\nignored because numerical solution is inhibited by \
\>\"", "]"}], ",", 
              RowBox[{
              "\"\<return\[Rule]{SBMLNumericalSolution\[Rule]0}\>\"", "//", 
               "boldBlue"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<getSBML\>\"", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Global`printSessionStats", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLRead", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<Aggregate Statistics: \>\"", ",", "\[IndentingNewLine]", 
           "$SBML$modelcount", ",", "\"\< models; \>\"", ",", 
           "\[IndentingNewLine]", "$SBML$SessionWarnings", ",", 
           "\"\< warnings; \>\"", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"TimeUsed", "[", "]"}], "-", "$SBML$SessionStartTime"}], 
           ",", "\"\< CPU.\>\""}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sbml", " ", "=", " ", 
       RowBox[{"Sort", "[", "sbml", "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "put", " ", "options", " ", "in", " ", "alphabetical", " ", "order"}], 
       " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "sbml", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.404050125811346*^9, 3.4040501780345907`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["textODES", "Subsection",
 CellChangeTimes->{{3.392740738047266*^9, 3.3927407396550083`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"textODES", "[", "model_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "eqs", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"eqs", "=", 
       RowBox[{"Global`SBMLODES", "/.", "model"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eqs", "=", 
       RowBox[{"InputForm", "/@", "eqs"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"eqs", "=", 
       RowBox[{"ToString", "/@", "eqs"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"eqs", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", "<>", "\"\<\\n\>\""}], ")"}], "&"}], "/@", "eqs"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"eqs", "=", 
       RowBox[{"StringJoin", "@@", "eqs"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "eqs", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"textODES", "[", 
    RowBox[{"model_", ",", " ", "filename_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"eqs", ",", "f"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"eqs", "=", " ", 
       RowBox[{"textODES", "[", "model", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"f", "=", 
       RowBox[{"validateOutputFileName", "[", "filename", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"f", "=", 
       RowBox[{"Export", "[", 
        RowBox[{"f", ",", "eqs", ",", "\"\<text\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "f", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3927404202343082`*^9, 3.39274049349751*^9}, {
  3.3927405554602003`*^9, 3.39274060343824*^9}, {3.392740639019598*^9, 
  3.392740639575613*^9}, {3.392740815935845*^9, 3.392740869582514*^9}, {
  3.392740900597114*^9, 3.392740903490011*^9}, {3.392741068344*^9, 
  3.39274109272087*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLNDSolve", "Subsection"],

Cell["processing of events added 2-26-04; ", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLNDSolve", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", "x___"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<Expecting \>\"", "//", "boldBlack"}], ",", 
         RowBox[{
         "\"\<SBMLNDSolve[model, duration, options]\>\"", "//", "boldBlue"}], 
         ",", " ", 
         RowBox[{"\"\< and not \>\"", "//", "boldBlack"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<SBMLNDSolve[{}, ...]\>\"", "//", "boldBlue"}]}], " ", 
        "]"}], ";", "\[IndentingNewLine]", " ", 
       RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLNDSolve", "[", 
     RowBox[{"$Failed", ",", " ", "x___"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<Expecting \>\"", "//", "boldBlack"}], ",", 
         RowBox[{
         "\"\<SBMLNDSolve[model, duration, options]\>\"", "//", "boldBlue"}], 
         ",", " ", 
         RowBox[{"\"\< and not \>\"", "//", "boldBlack"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<SBMLNDSolve[$Failed, ...]\>\"", "//", "boldBlue"}]}], 
        " ", "]"}], ";", "\[IndentingNewLine]", " ", 
       RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLNDSolve", "[", 
     RowBox[{"x_", ",", "tmax_", ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "ev", ",", "cr"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$ReportMissingIC", "=", "True"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"$ReportMissingODE", " ", "=", " ", "False"}], ";"}], " ", 
        "*)"}], " ", "\[IndentingNewLine]", 
       RowBox[{"$FirstIteration", " ", "=", " ", "True"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ev", " ", "=", " ", 
        RowBox[{"Global`SBMLEvents", "/.", "x"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"cr", "=", 
        RowBox[{
         RowBox[{"Global`SBMLConstraints", "/.", "x"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`SBMLConstraints", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"$InitialRun", "=", "True"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "ev", "]"}], ">", "0"}], " ", "\[Or]", " ", 
          RowBox[{
           RowBox[{"Length", "[", "cr", "]"}], ">", "0"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", "=", 
           RowBox[{"NDSolveSBMLWithEvents", "[", 
            RowBox[{"x", ",", " ", "tmax", ",", "ev", ",", "cr", ",", "opt"}],
             "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", "=", 
           RowBox[{"NDSolveSBMLModel", "[", 
            RowBox[{"x", ",", "0", ",", " ", "tmax", ",", " ", "opt"}], 
            "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SBMLNDSolve", "[", "x___", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
       RowBox[{"\"\<Expecting \>\"", "//", "boldBlack"}], ",", 
       RowBox[{
       "\"\<SBMLNDSolve[model, duration, options]\>\"", "//", "boldBlue"}]}], 
      "]"}], ";", "\[IndentingNewLine]", " ", 
     RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.397049994477014*^9, 3.397050107182309*^9}, {
  3.3970502957920847`*^9, 3.3970504257320347`*^9}, {3.404050055910193*^9, 
  3.4040500567297*^9}, {3.404050188811281*^9, 3.4040501915530357`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLGridPlot", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"DEBUGGridPlot", "=", "False"}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLGridPlot", "[", 
    RowBox[{
     RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"DEBUGGridPlot", ",", " ", 
        RowBox[{"Print", "[", "\"\<SBMLGridPlot (1):\>\"", "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"Head", "/@", 
          RowBox[{"decontextify", "/@", 
           RowBox[{"First", "/@", 
            RowBox[{"q", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "3"}], "\[RightDoubleBracket]"}]}]}]}]}], 
        ";"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"v", "=", 
       RowBox[{"ToString", "/@", 
        RowBox[{"(", 
         RowBox[{"Head", "/@", 
          RowBox[{"First", "/@", 
           RowBox[{"q", "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "3"}], "\[RightDoubleBracket]"}]}]}], ")"}]}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"decontextify", "/@", 
            RowBox[{"ToString", "/@", 
             RowBox[{"First", "/@", 
              RowBox[{"q", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "3"}], "]"}], "]"}]}]}]}], ",", " ", 
           RowBox[{"\"\<[t]\>\"", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], 
        ";"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"DEBUGGridPlot", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<SBMLGridPlot (1): v: \>\"", ",", " ", "v"}], "]"}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"SBMLGridPlot", "[", 
        RowBox[{"q", ",", "v", ",", "opt"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLGridPlot", "[", 
    RowBox[{
     RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", 
     RowBox[{"{", "vars__", "}"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tstart", ",", "tend"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"DEBUGGridPlot", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<SBMLGridPlot (2): {vars}: \>\"", ",", " ", 
          RowBox[{"{", "vars", "}"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"tstart", "=", 
       RowBox[{"q", "\[LeftDoubleBracket]", 
        RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tend", "=", 
       RowBox[{"q", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"Length", "[", "q", "]"}], ",", "2"}], 
        "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"SBMLGridPlot", "[", 
        RowBox[{"q", ",", 
         RowBox[{"{", "vars", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"tstart", ",", "tend"}], "}"}], ",", "opt"}], "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLGridPlot", "[", 
    RowBox[{
     RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", 
     RowBox[{"{", "vars__", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"tstart_", ",", "tend_"}], "}"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", "n", ",", "colors", ",", "nc", ",", "g", ",", "np"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"DEBUGGridPlot", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<SBMLGridPlot (3): {vars}: \>\"", ",", " ", 
          RowBox[{"{", "vars", "}"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "vars", "}"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"colors", "=", 
       RowBox[{"Hue", "/@", 
        FractionBox[
         RowBox[{"Range", "[", "n", "]"}], 
         RowBox[{"1.`", " ", "n"}]]}]}], ";", 
      RowBox[{"p", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"SBMLPlot", "[", 
           RowBox[{"q", ",", 
            RowBox[{"{", "#1", "}"}], ",", 
            RowBox[{"PlotLabel", "\[Rule]", 
             RowBox[{"stringer", "[", "#1", "]"}]}], ",", 
            RowBox[{"PlotStyles", "\[Rule]", "#2"}], ",", 
            RowBox[{"Global`holdLegend", "\[Rule]", "True"}], ",", 
            RowBox[{"DisplayFunction", "\[Rule]", "Identity"}], ",", "opt"}], 
           "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "vars", "}"}], ",", "colors"}], "}"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"nc", "=", 
       RowBox[{
        RowBox[{"Global`columns", "/.", "\[InvisibleSpace]", 
         RowBox[{"{", "opt", "}"}]}], "/.", "\[InvisibleSpace]", 
        RowBox[{"{", 
         RowBox[{"Global`columns", "\[Rule]", "3"}], "}"}]}]}], ";", 
      RowBox[{"g", "=", 
       RowBox[{"Partition", "[", 
        RowBox[{"p", ",", "nc"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ng", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Flatten", "[", "g", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"np", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Flatten", "[", "p", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"np", ">", "ng"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"g", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"g", ",", 
            RowBox[{"Take", "[", 
             RowBox[{"p", ",", 
              RowBox[{"ng", "-", "np"}]}], "]"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"g", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"GraphicsGrid", "[", "g", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "g", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLGridPlot", "[", 
    RowBox[{"sol_", ",", 
     RowBox[{"var_", "?", "ListQ"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"tbegin_", "?", "NumberQ"}], ",", 
       RowBox[{"tend_", "?", "NumberQ"}]}], "}"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "n", ",", "colors", ",", "p", ",", "popt", ",", "nc", ",", "g", ",", 
       "ng", ",", "np"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"DEBUGGridPlot", ",", " ", 
        RowBox[{"Print", "[", "\"\<SBMLGridPlot (4):\>\"", "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Flatten", "[", "var", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"colors", "=", 
       RowBox[{"Hue", "/@", 
        FractionBox[
         RowBox[{"Range", "[", "n", "]"}], 
         RowBox[{"1.`", " ", "n"}]]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"popt", "=", 
          RowBox[{"MyFilterOptions", "[", 
           RowBox[{"Plot", ",", 
            RowBox[{"System`DisplayFunction", "\[Rule]", "Identity"}], ",", 
            "opt"}], " ", "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"SBMLPlot", "[", 
              RowBox[{"sol", ",", "#1", ",", 
               RowBox[{"{", 
                RowBox[{"tbegin", ",", " ", "tend"}], "}"}], ",", " ", 
               RowBox[{"PlotStyle", "\[Rule]", "#2"}], ",", 
               RowBox[{"PlotLabel", "\[Rule]", 
                RowBox[{"stringer", "[", "#1", "]"}]}], ",", 
               RowBox[{"Global`holdLegend", "\[Rule]", " ", "True"}], ",", 
               " ", "popt"}], "]"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"var", ",", "colors"}], "}"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"nc", "=", 
       RowBox[{
        RowBox[{"Global`columns", "/.", "\[InvisibleSpace]", 
         RowBox[{"{", "opt", "}"}]}], "/.", "\[InvisibleSpace]", 
        RowBox[{"{", 
         RowBox[{"Global`columns", "\[Rule]", "3"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"g", "=", 
       RowBox[{"Partition", "[", 
        RowBox[{"p", ",", "nc"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ng", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Flatten", "[", "g", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"np", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"Flatten", "[", "p", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"np", ">", "ng"}], ",", 
        RowBox[{
         RowBox[{"g", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"g", ",", 
            RowBox[{"Take", "[", 
             RowBox[{"p", ",", 
              RowBox[{"ng", "-", "np"}]}], "]"}]}], "]"}]}], ";"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"g", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"GraphicsGrid", "[", "g", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "g", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLGridPlot", "[", 
    RowBox[{"sol_", ",", 
     RowBox[{"var_", "?", "ListQ"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"soln", ",", "g", ",", "tbegin", ",", "tend", ",", 
       RowBox[{"debug", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"DEBUGGridPlot", ",", " ", 
        RowBox[{"Print", "[", "\"\<SBMLGridPlot (5):\>\"", "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"soln", "=", 
       RowBox[{"selectSolution", "[", "sol", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"debug", ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<soln=\>\"", ",", "soln"}], "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"tbegin", ",", "tend"}], "}"}], "=", 
       RowBox[{"getPlotTimes", "[", "soln", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"g", "=", 
       RowBox[{"SBMLGridPlot", "[", 
        RowBox[{"soln", ",", "var", ",", 
         RowBox[{"{", 
          RowBox[{"tbegin", ",", "tend"}], "}"}], ",", "opt"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "g", "]"}], ";"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLGridPlot", "[", 
    RowBox[{"sol_", ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"soln", ",", "g", ",", "vars"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"DEBUGGridPlot", ",", " ", 
        RowBox[{"Print", "[", "\"\<SBMLGridPlot (6):\>\"", "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"vars", "=", 
       RowBox[{"decontextify", "[", 
        RowBox[{"Head", "/@", 
         RowBox[{"First", "/@", 
          RowBox[{"Flatten", "[", "sol", "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"g", "=", 
       RowBox[{"SBMLGridPlot", "[", 
        RowBox[{"sol", ",", "vars", ",", "opt"}], "]"}]}], ";", 
      RowBox[{"Return", "[", "g", "]"}], ";"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3882543915337048`*^9, 3.3882544677611856`*^9}, 
   3.388263305320883*^9, {3.395406785864106*^9, 3.395406942256691*^9}, {
   3.395406988478054*^9, 3.395407016564125*^9}, {3.395407600872129*^9, 
   3.3954076201187887`*^9}, {3.39540774765058*^9, 3.395407761988904*^9}, {
   3.395407794429318*^9, 3.395407796972992*^9}, {3.395407912929696*^9, 
   3.3954079155892477`*^9}, {3.397854146489813*^9, 3.397854231281939*^9}, {
   3.397854566359694*^9, 3.397854573006892*^9}, {3.397854743145465*^9, 
   3.397854787599671*^9}, {3.397854922599697*^9, 3.3978549360895367`*^9}, {
   3.397854985618005*^9, 3.3978549997112503`*^9}, {3.397856478189782*^9, 
   3.397856535992667*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["InterpolationSetListQ", "Subsection"],

Cell["10-26-04", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"InterpolationSetListQ", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ListQ", "[", "x", "]"}]}], ",", " ", 
        RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"Head", "/@", "x"}], ",", 
           RowBox[{"{", "InterpolationSet", "}"}]}], "]"}], "]"}], "<", "1"}],
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["startAndEndValues", "Subsection"],

Cell["10-26-04", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"startAndEndValues", "[", 
    RowBox[{"InterpolationSet", "[", 
     RowBox[{"start_", ",", " ", "end_", ",", " ", "f_"}], "]"}], "]"}], ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vars", ",", "startValues", ",", " ", "endvalues"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{"First", "/@", "f"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"startValues", " ", "=", " ", 
       RowBox[{
        RowBox[{"vars", "/.", "f"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`t", "\[Rule]", " ", "start"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"endValues", "=", 
       RowBox[{
        RowBox[{"vars", "/.", "f"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`t", "\[Rule]", " ", "end"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{"decontextify", "[", "vars", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"startValues", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#1", ",", "start", ",", "#2"}], "}"}], "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"vars", ",", "startValues"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"endValues", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#1", ",", "end", ",", "#2"}], "}"}], "&"}], ",", 
         RowBox[{"{", " ", 
          RowBox[{"vars", ",", "endValues"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"startValues", ",", " ", "endValues"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"startAndEndValues", "[", 
    RowBox[{"f_", "?", "InterpolationSetListQ"}], "]"}], ":=", " ", 
   RowBox[{"Join", "@@", 
    RowBox[{"(", 
     RowBox[{"startAndEndValues", "/@", "f"}], ")"}]}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLPlot", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DEBUGPLOT", "=", "False"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389118008513939*^9, 3.389118041129348*^9}, {
  3.389646984440296*^9, 3.389646985282167*^9}, {3.3899712647521067`*^9, 
  3.3899712700214033`*^9}, {3.389977043818542*^9, 3.389977044592577*^9}, {
  3.389977496154107*^9, 3.38997749665512*^9}, {3.390049947637519*^9, 
  3.390049949824531*^9}, {3.3900499870043592`*^9, 3.3900499878976717`*^9}, {
  3.3927384686662607`*^9, 3.3927384811508627`*^9}}],

Cell[CellGroupData[{

Cell["Plotting of Interpolation Sets", "Subsubsection"],

Cell["\<\
2-26-04. revised 8-10-04
6-10-05 make holdLegend a global option; add PlotStyles option
5-15-06 replace PlotStyle with BaseStyle\
\>", "Text",
 CellChangeTimes->{{3.388250213236174*^9, 3.388250226681388*^9}, {
  3.3882545018872423`*^9, 3.388254525870145*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SBML$LogPlotZero", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SBML$MultiPlot", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLPlot", "[", "$Failed", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
       RowBox[{"\"\<SBMLPlot: unable to plot: \>\"", "//", "boldBlack"}], ",",
        " ", 
       RowBox[{"$Failed", "//", "boldBlue"}]}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLPlot", "[", 
    RowBox[{"{", "}"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
       RowBox[{"\"\<SBMLPlot: unable to plot: \>\"", "//", "boldBlack"}], ",",
        " ", 
       RowBox[{
        RowBox[{"{", "}"}], "//", "boldBlue"}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{
      RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", " ", 
      RowBox[{"{", "}"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<SBMLPlot: Invalid input.\>\"", "//", "boldBlack"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLPlot", "[", 
    RowBox[{
     RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", 
     RowBox[{"z___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "p", ",", "s", ",", "opts", ",", "legend", ",", "savs", ",", "vars", 
       ",", "datasets", ",", "createLines", ",", "connectingLines", ",", 
       RowBox[{"debug", "=", "True"}], ",", " ", "dbg", ",", "zbad", ",", 
       "logplot", ",", "zerovalue", ",", "hold", ",", "colors", ",", "df"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SBML$MultiPlot", "=", "True"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dbg", "=", "DEBUGPLOT"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
          "\"\<SBMLPlot: InterpolationSetListQ (0): \>\"", "//", "boldRed"}], 
          ",", " ", "\"\<SBMLPlot: plotting interpolation set\>\""}], "]"}]}],
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"opts", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"{", "z", "}"}], ",", "OptionQ"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"hold", "=", 
       RowBox[{
        RowBox[{"holdLegend", "/.", "\[InvisibleSpace]", "opts"}], "/.", 
        "\[InvisibleSpace]", 
        RowBox[{"{", 
         RowBox[{"holdLegend", "\[Rule]", "False"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"colors", "=", 
       RowBox[{
        RowBox[{"SBMLPlotColors", "/.", "\[InvisibleSpace]", "opts"}], "/.", 
        "\[InvisibleSpace]", 
        RowBox[{"{", 
         RowBox[{"SBMLPlotColors", "\[Rule]", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
          "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], ",",
           " ", 
          RowBox[{"\"\<\\ncolors:\>\"", "//", "boldRed"}], ",", 
          RowBox[{"colors", "//", "boldBlue"}], ",", " ", 
          RowBox[{"\"\<\\nhold:\>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"hold", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"zbad", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"{", "z", "}"}], ",", 
         RowBox[{"{", "opts", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"logplot", "=", 
       RowBox[{
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"type", "/.", "\[InvisibleSpace]", 
           RowBox[{"{", "z", "}"}]}], "/.", "\[InvisibleSpace]", 
          RowBox[{"{", 
           RowBox[{"type", "\[Rule]", "\"\<\>\""}], "}"}]}], "]"}], 
        "\[Equal]", "\"\<Log\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"zbad", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"zbad", ",", 
         RowBox[{"{", 
          RowBox[{"type", "\[Rule]", "\"\<Log\>\""}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"zbad", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"zbad", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"stringer", "[", 
            RowBox[{"First", "[", "#1", "]"}], "]"}], "\[NotEqual]", 
           "\"\<zero\>\""}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"zbad", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"zbad", ",", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "===", "holdLegend"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"zbad", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"zbad", ",", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "===", "SBMLPlotColors"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"zbad", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"zbad", ",", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "===", "PlotStyles"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
          "\"\<SBMLPlot: InterpolationSetListQ: q:\>\"", "//", "boldRed"}], 
          ",", " ", 
          RowBox[{"q", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "zbad", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"boldOrange", "[", "\"\<>>Warning: \>\"", "]"}], ",", 
              RowBox[{"boldBlack", "[", "\"\< The option \>\"", "]"}], ",", 
              RowBox[{"boldRed", "[", "#1", "]"}], ",", 
              RowBox[{
              "boldBlack", "[", 
               "\"\< is not allowed (or has not yet been implemented) for \
models that contain events.\>\"", "]"}]}], "]"}], "&"}], ")"}], "/@", 
          "zbad"}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"logplot", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", 
             "\"\<About to call SBMLPlot[interpolatingFunction] - \
LogPlot\>\""}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"zerovalue", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"zero", "/.", "\[InvisibleSpace]", 
             RowBox[{"{", "z", "}"}]}], "/.", "\[InvisibleSpace]", 
            RowBox[{"{", 
             RowBox[{"zero", "\[Rule]", "0"}], "}"}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBML$LogPlotZero", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"zerovalue", ",", "0"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"p", "=", 
          RowBox[{"SBMLLogPlot", "[", 
           RowBox[{"q", ",", 
            RowBox[{"Sequence", "@@", "opts"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", 
             "\"\<About to call SBMLPlot[interpolatingFunction]\>\""}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"p", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"SBMLPlot", "[", 
              RowBox[{"#1", ",", 
               RowBox[{"Sequence", "@@", "opts"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Global`holdLegend", "\[Rule]", "hold"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Global`SBMLPlotColors", "\[Rule]", "colors"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"PlotRange", "\[Rule]", "All"}]}], 
              "\[IndentingNewLine]", "]"}], "&"}], ")"}], "/@", "q"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
          "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], ",",
           " ", "\"\<dbg: SBMLPlot: plotting interpolation sets: p: \>\"", 
          ",", 
          RowBox[{"Show", "[", 
           RowBox[{"p", ",", 
            RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
           "]"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"SBML$MultiPlot", "=", "False"}], ";", 
      RowBox[{"legend", "=", 
       RowBox[{"{", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Graphics", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Sequence", "@@", "#1"}], ",", 
                RowBox[{"Line", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}], 
              "]"}], ",", 
             RowBox[{"ToString", "[", "#2", "]"}]}], "}"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"MultiPlot$Styles", ",", "MultiPlot$Legends"}], "}"}]}], 
         "]"}], "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"$VersionNumber", "<", "6"}], ",", " ", 
        RowBox[{"legend", "=", 
         RowBox[{"Join", "[", 
          RowBox[{"legend", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"LegendSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}], ",", 
             RowBox[{"LegendPosition", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"1", ",", 
                RowBox[{"-", "0.5`"}]}], "}"}]}], ",", 
             RowBox[{"TextStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"FontFamily", "\[Rule]", "Times"}], "}"}]}]}], "}"}]}],
           "]"}]}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"legend", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"legend", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"LegendSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}]}], ",", 
              RowBox[{"LegendPosition", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"-", "0.5`"}]}], "}"}]}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"FontFamily", "\[Rule]", "Times"}], "}"}]}]}], 
             "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "p", "]"}], ">", "1"}], "&&", 
         RowBox[{"!", "logplot"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"sav", "=", 
          RowBox[{"startAndEndValues", "[", "q", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"vars", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"#1", "[", "Global`t", "]"}], "&"}], ")"}], "/@", 
           RowBox[{"ToExpression", "/@", "MultiPlot$Legends"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", 
             RowBox[{"\"\<sav: \>\"", "//", "boldRed"}], ",", " ", 
             RowBox[{"sav", "//", "boldBlue"}], ",", " ", 
             RowBox[{"\"\<\\nvars:\>\"", "//", "boldRed"}], ",", " ", 
             RowBox[{"vars", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"datasets", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{"sav", ",", 
               RowBox[{"{", 
                RowBox[{"#1", ",", "___"}], "}"}], ",", "\[Infinity]"}], 
              "]"}], "&"}], ")"}], "/@", "vars"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", 
             "\"\<dbg: SBMLPlot: plotting interpolation set: datasets(1): \
\>\"", ",", 
             RowBox[{"datasets", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"datasets", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Drop", "[", 
              RowBox[{
               RowBox[{"Drop", "[", 
                RowBox[{"#1", ",", "1"}], "]"}], ",", 
               RowBox[{"-", "1"}]}], "]"}], "&"}], ")"}], "/@", 
           "datasets"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", 
             "\"\<dbg: SBMLPlot: plotting interpolation set: datasets(2): \
\>\"", ",", 
             RowBox[{"datasets", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
         RowBox[{"datasets", "=", 
          RowBox[{"Transpose", "/@", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Drop", "[", 
               RowBox[{"#1", ",", "1"}], "]"}], "&"}], ")"}], "/@", 
            RowBox[{"Transpose", "/@", "datasets"}]}]}]}], ";", 
         RowBox[{"datasets", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Partition", "[", 
              RowBox[{"#1", ",", "2"}], "]"}], "&"}], ")"}], "/@", 
           "datasets"}]}], ";", 
         RowBox[{
          RowBox[{"createLines", "[", 
           RowBox[{"dataset_", ",", "style_"}], "]"}], ":=", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"dbg", ",", 
               RowBox[{"Print", "[", 
                RowBox[{"\"\<createLines: style:\>\"", ",", "style"}], 
                "]"}]}], "]"}], ";", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Graphics", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Sequence", "@@", "style"}], ",", 
                   RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], "}"}], "]"}]}], "}"}], "]"}],
                 "&"}], ")"}], "/@", "dataset"}]}]}], "]"}]}], ";", 
         RowBox[{"datasets", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{"createLines", ",", 
            RowBox[{"{", 
             RowBox[{"datasets", ",", "MultiPlot$Styles"}], "}"}]}], "]"}]}], 
         ";", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", "\"\<datasets:\>\"", ",", "datasets"}], "]"}]}], "]"}],
          ";", 
         RowBox[{"connectingLines", "=", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", "datasets", "]"}], ",", 
            RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
         ";", 
         RowBox[{"p", "=", 
          RowBox[{"Show", "[", 
           RowBox[{"p", ",", "connectingLines"}], "]"}]}], ";", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", "\"\<p with connectingLines:\>\"", ",", 
             RowBox[{"Show", "[", 
              RowBox[{"p", ",", 
               RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
              "]"}]}], "]"}]}], "]"}], ";"}], ",", 
        RowBox[{
         RowBox[{"Off", "[", 
          RowBox[{"Graphics", "::", "\"\<gptn\>\""}], "]"}], ";", 
         RowBox[{"p", "=", 
          RowBox[{"Show", "[", 
           RowBox[{"p", ",", 
            RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
         ";", 
         RowBox[{"On", "[", 
          RowBox[{"Graphics", "::", "\"\<gptn\>\""}], "]"}], ";"}]}], "]"}], 
      ";", 
      RowBox[{"If", "[", 
       RowBox[{"AllowMultiPlot$Legends", ",", 
        RowBox[{"s", "=", 
         RowBox[{"ShowLegend", "[", 
          RowBox[{"p", ",", "legend"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"df", "=", 
          RowBox[{
           RowBox[{"DisplayFunction", "/.", "\[InvisibleSpace]", "opts"}], "/.",
            "\[InvisibleSpace]", 
           RowBox[{"{", 
            RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}], 
            "}"}]}]}], ";", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<SBMLPlot: InterpolationSetListQ: \>\"", "//", "boldRed"}], 
             ",", " ", "\"\<df:\>\"", ",", "df"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"Show", "[", 
           RowBox[{"p", ",", 
            RowBox[{"DisplayFunction", "\[Rule]", "df"}]}], "]"}], "]"}]}]}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{
      RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", 
      RowBox[{"{", "var__", "}"}], ",", 
      RowBox[{"z___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tstart", ",", "tend"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"DEBUGPLOT", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<SBMLPlot: InterpolationSetListQ: (1): {var}: \>\"", ",", " ", 
           RowBox[{"{", "var", "}"}]}], " ", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"tstart", "=", 
        RowBox[{"q", "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"tend", "=", 
        RowBox[{"q", "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"Length", "[", "q", "]"}], ",", "2"}], 
         "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"SBMLPlot", "[", 
         RowBox[{"q", ",", 
          RowBox[{"{", "var", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"tstart", ",", "tend"}], "}"}], ",", "z"}], "]"}], "]"}], 
       ";"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{
      RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", 
      RowBox[{"{", "var__", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"tstart_", ",", "tend_"}], "}"}], ",", 
      RowBox[{"z___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"convars", ",", "devars", ",", "r", ",", "n", ",", "selvars"}],
        "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"DEBUGPLOT", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<SBMLPlot: InterpolationSetListQ: (2): {var}: \>\"", ",", " ", 
           RowBox[{"{", "var", "}"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"selvars", "[", 
         RowBox[{
          RowBox[{"InterpolationSet", "[", 
           RowBox[{"t1_", ",", "t2_", ",", "set_"}], "]"}], ",", "vin_"}], 
         "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "newset", ",", "v", ",", "  ", "notfound", ",", " ", 
            "varsInSolution"}], "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"v", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"StringQ", "[", "#", "]"}], ",", " ", 
                RowBox[{"ToExpression", "[", "#", "]"}], ",", " ", "#"}], 
               "]"}], "&"}], "/@", "vin"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"newset", "=", 
            RowBox[{"Select", "[", 
             RowBox[{"set", ",", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{"v", ",", 
                 RowBox[{"First", "[", "#1", "]"}]}], "]"}], "&"}]}], "]"}]}],
            ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"varsInSolution", "=", 
            RowBox[{"First", "/@", "set"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"debugPrint", "[", 
            RowBox[{
            "DEBUGPLOT", ",", " ", 
             "\"\<SBMLPlot: selvars: varsInSolution:\>\"", ",", " ", 
             "varsInSolution"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"debugPrint", "[", 
            RowBox[{
            "DEBUGPLOT", ",", " ", "\"\<SBMLPlot: selvars:  v:\>\"", ",", " ",
              "v"}], "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"debugPrint", "[", 
            RowBox[{
            "DEBUGPLOT", ",", " ", 
             "\"\<SBMLPlot: selvars:  defunctionate/@v:\>\"", ",", " ", 
             RowBox[{"defunctionate", "/@", "v"}]}], "]"}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"notFound", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{
              RowBox[{"decontextify", "/@", 
               RowBox[{"defunctionate", "/@", "v"}]}], ",", " ", 
              RowBox[{"decontextify", "/@", 
               RowBox[{"defunctionate", "/@", "varsInSolution"}]}]}], "]"}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Warning:\>\"", "//", "boldRed"}], ",", " ", 
               RowBox[{
               "\"\<SBMLPlot: The requested variable \>\"", "//", 
                "boldBlack"}], ",", 
               RowBox[{
                RowBox[{"defunctionate", "[", "#", "]"}], "//", "boldBlue"}], 
               ",", " ", 
               RowBox[{
               "\"\< was not found in the solution set for the time period \>\
\"", "//", "boldBlack"}], " ", ",", " ", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"t1", ",", " ", "t2"}], "}"}], "//", "boldBlack"}]}],
               "]"}], "&"}], "/@", "notFound"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"DEBUGPLOT", ",", " ", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{"\"\<v:\>\"", ",", " ", "v"}], "]"}], ";", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"Print", "[", 
               RowBox[{
               "\"\<set: \>\"", ",", " ", "set", ",", " ", 
                "\"\<\\nnewset:\>\"", ",", " ", "newset"}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "newset", "]"}], "\[Equal]", "0"}], ",", 
             " ", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                RowBox[{
                "\"\<SBMLPlot: requested variables: \>\"", "//", 
                 "boldBlack"}], ",", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"defunctionate", "/@", " ", "v"}], ")"}], "//", 
                 "boldBlue"}], ",", " ", 
                RowBox[{
                "\"\< not found in solution set. There is nothing to plot. \>\
\"", " ", "//", "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"InterpolationSet", "[", 
             RowBox[{"t1", ",", "t2", ",", "newset"}], "]"}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
       RowBox[{"devars", "=", 
        RowBox[{"decontextify", "/@", 
         RowBox[{"{", "var", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"convars", "=", 
        RowBox[{"contextify", "/@", "devars"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"devars", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"#1", "[", "Global`t", "]"}], "&"}], ")"}], "/@", 
           "devars"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"convars", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"#1", "[", "Global`t", "]"}], "&"}], ")"}], "/@", 
           "convars"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"devars", " ", "=", " ", 
        RowBox[{"functionate", "/@", "devars"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"convars", "=", " ", 
        RowBox[{"functionate", "/@", "convars"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"r", "=", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", "\[Rule]", "#2"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"convars", ",", "devars"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"n", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"selvars", "[", 
              RowBox[{"#1", ",", 
               RowBox[{"Union", "[", 
                RowBox[{"Join", "[", 
                 RowBox[{"devars", ",", "convars"}], "]"}], "]"}]}], "]"}], 
             "&"}], ")"}], "/@", "q"}]}], ";"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"selvars", "[", 
            RowBox[{"#1", ",", "convars"}], "]"}], "&"}], ")"}], "/@", 
         "q"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"DEBUGPLOT", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<SBMLPlot: InterpolationSetListQ: (2): n: \>\"", ",", " ", 
           "n"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "\[IndentingNewLine]", 
        RowBox[{"SBMLPlot", "[", 
         RowBox[{"n", ",", 
          RowBox[{"PlotRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"tstart", ",", "tend"}], "}"}], ",", "All"}], "}"}]}], 
          ",", "z"}], "]"}], "\[IndentingNewLine]", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{
      RowBox[{"InterpolationSet", "[", 
       RowBox[{"t1_", ",", "t2_", ",", "sol_"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"var__", "?", "nonOptionQ"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tbegin_", "?", "NumberQ"}], ",", 
        RowBox[{"tend_", "?", "NumberQ"}]}], "}"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"DEBUGPLOT", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBMLPlot:InterpolationSet: (1)\>\"", "//", "boldRed"}],
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"SBMLPlot", "[", 
        RowBox[{"sol", ",", 
         RowBox[{"{", "var", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"tbegin", ",", "t1"}], "]"}], ",", 
           RowBox[{"Min", "[", 
            RowBox[{"tend", ",", "t2"}], "]"}]}], "}"}], ",", "opt"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{
      RowBox[{"InterpolationSet", "[", 
       RowBox[{"t1_", ",", "t2_", ",", "sol_"}], "]"}], ",", 
      RowBox[{"var_", "?", "nonOptionQ"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tbegin_", "?", "NumberQ"}], ",", 
        RowBox[{"tend_", "?", "NumberQ"}]}], "}"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"DEBUGPLOT", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBMLPlot:InterpolationSet: (2)\>\"", "//", "boldRed"}],
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"SBMLPlot", "[", 
        RowBox[{"sol", ",", "var", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"tbegin", ",", "t1"}], "]"}], ",", 
           RowBox[{"Min", "[", 
            RowBox[{"tend", ",", "t2"}], "]"}]}], "}"}], ",", "opt"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{
      RowBox[{"InterpolationSet", "[", 
       RowBox[{"t1_", ",", "t2_", ",", "sol_"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tbegin_", "?", "NumberQ"}], ",", 
        RowBox[{"tend_", "?", "NumberQ"}]}], "}"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"DEBUGPLOT", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBMLPlot:InterpolationSet: (3)\>\"", "//", "boldRed"}],
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"SBMLPlot", "[", 
        RowBox[{"sol", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"tbegin", ",", "t1"}], "]"}], ",", 
           RowBox[{"Min", "[", 
            RowBox[{"tend", ",", "t2"}], "]"}]}], "}"}], ",", "opt"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{
      RowBox[{"InterpolationSet", "[", 
       RowBox[{"t1_", ",", "t2_", ",", "sol_"}], "]"}], ",", 
      RowBox[{"var_", "?", "nonOptionQ"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"DEBUGPLOT", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<SBMLPlot:InterpolationSet: (4), var=\>\"", "//", "boldRed"}], 
           ",", " ", 
           RowBox[{"var", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"SBMLPlot", "[", 
        RowBox[{"sol", ",", "var", ",", 
         RowBox[{"{", 
          RowBox[{"t1", ",", "t2"}], "}"}], ",", "opt"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLPlot", "[", 
    RowBox[{
     RowBox[{"InterpolationSet", "[", 
      RowBox[{"t1_", ",", "t2_", ",", "sol_"}], "]"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"DEBUGPLOT", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<SBMLPlot:InterpolationSet: (5)\>\"", "//", "boldRed"}], 
         "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"DEBUGPLOT", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
          "\"\<SBMLPlot: InterpolationSet: (5): sol:\>\"", "//", "boldRed"}], 
          ",", " ", 
          RowBox[{"sol", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SBMLPlot", "[", 
       RowBox[{"sol", ",", 
        RowBox[{"{", 
         RowBox[{"t1", ",", "t2"}], "}"}], ",", "opt"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388250267876912*^9, 3.388250402021941*^9}, {
   3.3882591227134113`*^9, 3.388259174680875*^9}, {3.388263313889928*^9, 
   3.3882633282227497`*^9}, {3.388263385503499*^9, 3.3882633859844418`*^9}, {
   3.3888498878103*^9, 3.388849933205957*^9}, {3.388850034962281*^9, 
   3.388850068288986*^9}, 3.3888501680877113`*^9, {3.3891180545489807`*^9, 
   3.389118058103882*^9}, {3.389971393938308*^9, 3.389971395886944*^9}, {
   3.3899760730311213`*^9, 3.389976154175037*^9}, 3.389976715638893*^9, {
   3.389976975451733*^9, 3.389976976214432*^9}, {3.389977036816383*^9, 
   3.389977040518855*^9}, {3.389977094571147*^9, 3.389977108556572*^9}, {
   3.389977187737698*^9, 3.389977280990965*^9}, {3.389977335861614*^9, 
   3.389977343431664*^9}, 3.389977504244467*^9, {3.389977661516938*^9, 
   3.389977664744647*^9}, {3.38997770386246*^9, 3.389977705267548*^9}, {
   3.3899778060260267`*^9, 3.389977832351123*^9}, {3.389977886181535*^9, 
   3.389977895946574*^9}, {3.389977955365982*^9, 3.3899780248982267`*^9}, {
   3.389978227878334*^9, 3.389978236467828*^9}, {3.389978347117835*^9, 
   3.389978445498414*^9}, {3.38997977538973*^9, 3.389979792323807*^9}, {
   3.389979909493226*^9, 3.3899799324547462`*^9}, {3.389980013339551*^9, 
   3.3899800399311132`*^9}, {3.392738689006092*^9, 3.3927387493357077`*^9}, {
   3.392738950634057*^9, 3.3927391243197107`*^9}, {3.392739168257594*^9, 
   3.392739198567505*^9}, {3.3927392593081408`*^9, 3.392739276160187*^9}, {
   3.392743269808456*^9, 3.392743272363138*^9}, {3.392743366182967*^9, 
   3.392743411667954*^9}, {3.392743495649129*^9, 3.392743502049082*^9}, {
   3.392743612743246*^9, 3.3927436223874283`*^9}, {3.392743678097391*^9, 
   3.3927437651902637`*^9}, {3.3927438599666452`*^9, 3.392743864558568*^9}, {
   3.392743944753829*^9, 3.392743981345162*^9}, {3.392744170231662*^9, 
   3.392744235131966*^9}, 3.392747013177143*^9, {3.3927475574988422`*^9, 
   3.392747712304112*^9}, {3.3927478660712337`*^9, 3.392748039985272*^9}, {
   3.392748081212618*^9, 3.392748114172998*^9}, {3.392748221426784*^9, 
   3.3927482216707067`*^9}, {3.397050144170683*^9, 3.397050231967289*^9}, {
   3.397158024378388*^9, 3.397158083039927*^9}, {3.397158147920109*^9, 
   3.397158153482841*^9}, {3.39715820843255*^9, 3.39715821021554*^9}, {
   3.3971584446062*^9, 3.397158565783782*^9}, {3.397158597873516*^9, 
   3.3971586025205173`*^9}, {3.3971586692229147`*^9, 3.397158703189104*^9}, {
   3.397854405273522*^9, 3.397854412613472*^9}, {3.3978544866376743`*^9, 
   3.3978544987388477`*^9}, {3.397855256639661*^9, 3.397855323813139*^9}, {
   3.397855372067734*^9, 3.397855376404125*^9}, {3.3978555230505743`*^9, 
   3.397855533766346*^9}, {3.397855589108522*^9, 3.3978556129467688`*^9}, {
   3.397855665740066*^9, 3.397855706808429*^9}, {3.397855767595128*^9, 
   3.397855773759452*^9}, {3.397855838653515*^9, 3.3978558391317577`*^9}, {
   3.397855869507568*^9, 3.3978559212688007`*^9}, {3.3978560768082047`*^9, 
   3.397856079258638*^9}, {3.3978561260228043`*^9, 3.397856129523106*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["ploting of interpolating functions", "Subsubsection"],

Cell["\<\
6-9-05 Add PlotStyles options (2.5.1); make holdLegend global; fix bug in \
holdLegend that ignored holdLegend if there were no events.
5-30-07 Updates to make plotting work in Version 6; add MyLegend
10-15-07 make sure plots have default PlotRange-> All, otherwise when \
variables are combinded there is some clipping
3-31-08 2.7.3 - in SBMLPlot[sol, {times}, options] check for variables in \
options before assuming all (SBMLPlot debug \"3\" below)\
\>", "Text",
 CellChangeTimes->{{3.389646998422266*^9, 3.389647013686035*^9}, {
  3.401473227694392*^9, 3.401473259419382*^9}, {3.415991072221697*^9, 
  3.415991111682953*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{"sol_", ",", " ", 
      RowBox[{"{", 
       RowBox[{"var__", "?", "nonOptionQ"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tbegin_", "?", "NumberQ"}], ",", " ", 
        RowBox[{"tend_", "?", "NumberQ"}]}], "}"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "legends", ",", " ", "variables", ",", "n", ",", "colors", ",", 
        "defaultColors", ",", "plotType", ",", " ", "soln", ",", "p", ",", 
        "legend", ",", "allowLegend", ",", "popt", ",", "styles", ",", 
        "trace", ",", " ", 
        RowBox[{"dbg", "=", "False"}], ",", "tt", ",", " ", "vars", ",", " ", 
        "plot", ",", " ", "gopt"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"trace", "=", "DEBUGPLOT"}], ";", "\[IndentingNewLine]", 
       RowBox[{"dbg", "=", "DEBUGPLOT"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"dbg", " ", "\[Or]", " ", "trace"}], ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<==== SBMLPlot Trace ON ====\\nSBMLPlot: {var}=\>\"", "//", 
            "boldRed"}], ",", 
           RowBox[{
            RowBox[{"{", "var", "}"}], "//", "boldBlue"}], ",", 
           RowBox[{"\"\<\\nSBMLPlot: {tbegin, tend}=\>\"", "//", "boldRed"}], 
           ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"tbegin", ",", "tend"}], "}"}], "//", "boldBlue"}], ",", 
           " ", 
           RowBox[{"\"\<\\nSBMLPlot: {opt}=\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
            RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}]}], "]"}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"soln", " ", "=", " ", 
        RowBox[{"selectSolution", "[", "sol", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<decontextify/@{var}: \>\"", ",", " ", 
           RowBox[{"decontextify", "/@", 
            RowBox[{"stringer", "/@", 
             RowBox[{"{", "var", "}"}]}]}]}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<contextify/@decontextify/@{var}: \>\"", ",", 
           RowBox[{"contextify", "/@", " ", 
            RowBox[{"decontextify", "/@", 
             RowBox[{"stringer", "/@", 
              RowBox[{"{", "var", "}"}]}]}]}]}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"variables", "=", 
        RowBox[{"contextify", "/@", 
         RowBox[{"decontextify", "/@", 
          RowBox[{"stringer", "/@", 
           RowBox[{"{", "var", "}"}]}]}]}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"variables", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"StringQ", "[", "#", "]"}], ",", " ", 
             RowBox[{"ToExpression", "[", "#", "]"}], ",", " ", "#"}], "]"}], 
           "&"}], ",", " ", "variables"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"vars", " ", "=", " ", "variables"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"variables", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", "Global`t", "]"}], "&"}], ",", "variables"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"legends", " ", "=", " ", 
        RowBox[{"decontextify", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"ToString", ",", 
           RowBox[{"{", "var", "}"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "legends", "]"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "get", " ", "styles", " ", "and", " ", "make", " ", "sure", " ", "it",
          " ", "is", " ", "a", " ", "list", " ", "of", " ", "lists"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"styles", "=", 
        RowBox[{
         RowBox[{"Global`PlotStyles", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`PlotStyles", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "if", " ", "PlotSTyles", " ", "is", " ", "not", " ", "used"}], ",", 
         " ", 
         RowBox[{
         "maybe", " ", "PlotStyle", " ", "was", " ", "used", " ", 
          "globally"}]}], " ", "*)"}], " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "styles", "]"}], "<", "1"}], ",", " ", 
         RowBox[{"styles", "=", 
          RowBox[{
           RowBox[{"PlotStyle", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"PlotStyle", "\[Rule]", " ", 
             RowBox[{"{", "}"}]}], "}"}]}]}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<styles (1):\>\"", ",", "styles"}], "]"}]}], "]"}], ";",
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "If", " ", "there", " ", "is", " ", "just", " ", "one", " ", 
          "style"}], ",", " ", 
         RowBox[{
         "apply", " ", "it", " ", "to", " ", "each", " ", "variable"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"\[Not]", 
          RowBox[{"ListQ", "[", "styles", "]"}]}], ",", " ", 
         RowBox[{"styles", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", "styles", "}"}], ",", 
            RowBox[{"{", "n", "}"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<styles (2):\>\"", ",", "styles"}], "]"}]}], "]"}], ";",
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "If", " ", "there", " ", "is", " ", "more", " ", "than", " ", "one", 
          " ", "style"}], ",", " ", 
         RowBox[{
         "but", " ", "only", " ", "a", " ", "one", " ", "level", " ", 
          "list"}], ",", " ", 
         RowBox[{
         "apply", " ", "them", " ", "to", " ", "all", " ", "variables"}]}], 
        " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "styles", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"\[Not]", 
             RowBox[{"ListQ", "[", 
              RowBox[{"First", "[", "styles", "]"}], "]"}]}], ",", 
            RowBox[{"styles", "=", 
             RowBox[{"{", "styles", "}"}]}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<styles (3):\>\"", ",", "styles"}], "]"}]}], "]"}], ";",
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "styles", "]"}], "<", "n"}], ",", " ", 
         RowBox[{"styles", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"styles", ",", 
            RowBox[{"{", "}"}]}], "]"}]}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "styles", "]"}], ">", "n"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\< SBMLPlot: \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{
             RowBox[{"Length", "[", "styles", "]"}], "//", "boldBlue"}], ",", 
            " ", 
            RowBox[{"\"\< PlotStyles supplied only \>\"", "//", "boldBlack"}],
             ",", 
            RowBox[{"n", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< expected. Extra styles ignored. \>\"", "//", 
             "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"styles", "=", 
           RowBox[{"Take", "[", 
            RowBox[{"styles", ",", "n"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<styles (4):\>\"", ",", "styles"}], "]"}]}], "]"}], ";",
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "add", " ", "in", " ", "colors", " ", "if", " ", "not", " ", 
         "supplied", " ", "in", " ", "PlotStyles"}], " ", "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"colors", " ", "=", 
        RowBox[{"Flatten", "[", " ", 
         RowBox[{
          RowBox[{"Global`SBMLPlotColors", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`SBMLPlotColors", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], "}"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{"colors", ",", "None"}], "]"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"colors", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{"Hue", ",", 
              RowBox[{
               RowBox[{"Range", "[", "n", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{"1.0", "*", "n"}], ")"}]}]}], "]"}]}]}], "]"}], ";"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "colors", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "colors", "]"}], ">", "n"}], ",", " ", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
               RowBox[{"\"\<SBMLPlot: \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{
                RowBox[{"\"\<\\nSBMLPlotColors\[Rule]\>\"", "<>", 
                 RowBox[{"ToString", "[", "colors", "]"}]}], "//", 
                "boldBlue"}], ",", 
               RowBox[{"\"\< contains \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{
                RowBox[{"Length", "[", "colors", "]"}], "//", "boldBlue"}], 
               ",", " ", 
               RowBox[{"\"\< colors; only \>\"", "//", "boldBlack"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"n", "//", "boldBlue"}], ",", "\[IndentingNewLine]", 
               RowBox[{
               "boldBlack", "[", 
                "\"\<\\nare expected. The input will be interpreted as\>\"", 
                "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"boldBlue", "[", 
                RowBox[{"\"\<\\nSBMLPlotColors\[Rule]\>\"", "<>", 
                 RowBox[{"ToString", "[", 
                  RowBox[{"Take", "[", 
                   RowBox[{"colors", ",", "n"}], "]"}], "]"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"colors", "=", 
              RowBox[{"Take", "[", 
               RowBox[{"colors", ",", "n"}], "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<n=\>\"", ",", "n", ",", "\"\< Length[colors]:\>\"", ",", 
           RowBox[{"Length", "[", "colors", "]"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "colors", "]"}], "<", "n"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"defaultColors", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{"Hue", ",", 
             RowBox[{
              RowBox[{"Range", "[", "n", "]"}], "/", 
              RowBox[{"(", 
               RowBox[{"1.0", "*", "n"}], ")"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"defaultColors", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"defaultColors", ",", 
             RowBox[{"Length", "[", "colors", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"colors", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"colors", ",", " ", "defaultColors"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<colors:\>\"", ",", "colors"}], "]"}]}], "]"}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<original styles:\>\"", ",", "styles"}], "]"}]}], "]"}],
        ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Seems", " ", "that", " ", "Mathematica", " ", "choose", " ", "the", 
          " ", "LAST", " ", "style", " ", "to", " ", "use"}], ",", " ", 
         RowBox[{"not", " ", "the", " ", "FIRST"}], ",", " ", 
         RowBox[{"like", " ", "Options"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"styles", "=", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"styles", ",", " ", "colors"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<revised styles:\>\"", ",", "styles"}], "]"}]}], "]"}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"plotType", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{"(", 
          RowBox[{"Global`type", "/.", 
           RowBox[{"{", "opt", "}"}]}], ")"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"plotType", "==", "\"\<Log\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "=", 
           RowBox[{"SBMLLogPlot", "[", 
            RowBox[{"soln", ",", 
             RowBox[{"{", "var", "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"tbegin", ",", " ", "tend"}], "}"}], ",", "opt"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "p", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"allowLegend", " ", "=", " ", 
        RowBox[{"\[Not]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`holdLegend", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`holdLegend", "\[Rule]", " ", "False"}], "}"}]}], 
          ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"AllowMultiPlot$Legends", "=", "allowLegend"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"trace", ",", " ", "\[IndentingNewLine]", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<SBMLPlot: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\<variables: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"variables", "//", "boldBlue"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<SBMLPlot: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\<styles: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"styles", "//", "boldBlue"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<SBMLPlot: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\<legends: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"legends", "//", "boldBlue"}]}], "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"popt", "=", 
           RowBox[{"MyFilterOptions", "[", 
            RowBox[{"Plot", ",", "opt"}], "]"}]}], "}"}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"trace", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<SBMLPlot: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{"\"\<{popt}:\>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{
               RowBox[{"{", "popt", "}"}], "//", "boldBlue"}]}], "]"}]}], 
           "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"SBML$MultiPlot", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"trace", ",", " ", 
               RowBox[{"Print", "[", 
                RowBox[{"\"\<SBMLPlot: SBML$MultiPlot\>\"", "//", "boldRed"}],
                 "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"$VersionNumber", "<", "6"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"p", "=", 
                RowBox[{"Plot", "[", 
                 RowBox[{
                  RowBox[{"Evaluate", "[", 
                   RowBox[{"variables", "/.", "soln"}], "]"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"Global`t", ",", "tbegin", ",", "tend"}], "}"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"PlotStyle", "\[Rule]", "styles"}], ",", "  ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Sequence", "[", "popt", "]"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"DisplayFunction", "\[Rule]", " ", "Identity"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"plot", "[", 
                  RowBox[{"x_", ",", " ", "directives_"}], "]"}], ":=", " ", 
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/.", "soln"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    "Global`t", ",", " ", "tbegin", ",", " ", "tend"}], "}"}],
                    ",", " ", 
                   RowBox[{"PlotStyle", "\[Rule]", "directives"}], ",", " ", 
                   "popt"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
                RowBox[{"(*", "\[IndentingNewLine]", 
                 RowBox[{"p", "=", 
                  RowBox[{"Plot", "[", 
                   RowBox[{
                    RowBox[{"variables", "/.", "soln"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"Global`t", ",", "tbegin", ",", "tend"}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"PlotStyle", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Directive", "@@", "#"}], ")"}], "&"}], "/@", 
                    "styles"}], ")"}]}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "[", "popt", "]"}]}], 
                   "\[IndentingNewLine]", "]"}]}], "*)"}], 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"p", "=", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{"plot", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"variables", ",", " ", 
                    RowBox[{"Directive", "/@", "styles"}]}], "}"}]}], 
                  "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"MultiPlot$Colors", "=", "colors"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"MultiPlot$Legends", " ", "=", " ", "legends"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"MultiPlot$Styles", " ", "=", " ", "styles"}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"trace", ",", " ", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<SBMLPlot: \>\"", "//", "boldRed"}], ",", " ", 
                 RowBox[{
                 "\"\<Not SBML$MultiPlot: allowLegend: \>\"", "//", 
                  "boldRed"}], ",", " ", 
                 RowBox[{"allowLegend", "//", "boldBlue"}]}], "]"}]}], "]"}], 
             ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"$VersionNumber", "<", "6"}], ",", " ", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"allowLegend", ",", "\[IndentingNewLine]", 
                 RowBox[{"p", "=", 
                  RowBox[{"Plot", "[", 
                   RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"variables", "/.", "soln"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"Global`t", ",", "tbegin", ",", "tend"}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "[", "popt", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "Graphics`Legend`PlotLegend", "\[Rule]", " ", "legends"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"PlotStyle", "\[Rule]", "styles"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Graphics`Legend`LegendPosition", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "0.5"}]}], "}"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Graphics`Legend`LegendSize", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{".5", ",", "1"}], "}"}]}]}], "]"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"p", "=", 
                  RowBox[{"Plot", "[", 
                   RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"variables", "/.", "soln"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"Global`t", ",", "tbegin", ",", "tend"}], "}"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Sequence", "[", "popt", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"PlotStyle", "\[Rule]", "styles"}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], ",", " ", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{"trace", ",", " ", 
                  RowBox[{"Print", "[", 
                   RowBox[{
                    RowBox[{"\"\<SBMLPlot: variables:\>\"", "//", "boldRed"}],
                     ",", " ", 
                    RowBox[{"variables", "//", "boldBlue"}]}], "]"}]}], "]"}],
                 ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"plot", "[", 
                  RowBox[{"x_", ",", " ", "directives_"}], "]"}], ":=", " ", 
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"x", "/.", "soln"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    "Global`t", ",", " ", "tbegin", ",", " ", "tend"}], "}"}],
                    ",", " ", 
                   RowBox[{"PlotStyle", "\[Rule]", "directives"}], ",", " ", 
                   "popt", ",", " ", 
                   RowBox[{"PlotRange", "\[Rule]", " ", "All"}]}], "]"}]}], 
                ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                 "allowLegend", ",", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"p", "=", "\[IndentingNewLine]", 
                    RowBox[{"{", " ", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Show", "[", 
                    RowBox[{
                    RowBox[{"MyLegend", "[", 
                    RowBox[{"legends", ",", " ", "colors"}], "]"}], ",", 
                    RowBox[{"AspectRatio", "\[Rule]", " ", 
                    RowBox[{"1", "/", "GoldenRatio"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"plot", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"variables", ",", " ", 
                    RowBox[{"Directive", "/@", "styles"}]}], "}"}]}], "]"}]}],
                     "\[IndentingNewLine]", "}"}]}], ";", " ", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{"trace", ",", " ", 
                    RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<SBMLPlot: p \>\"", "//", "boldRed"}], ",", 
                    " ", 
                    RowBox[{"p", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"gopt", "=", 
                    RowBox[{"MyFilterOptions", "[", 
                    RowBox[{"Graphics", ",", "opt"}], "]"}]}], "}"}], ",", 
                    " ", "\[IndentingNewLine]", 
                    RowBox[{"p", "=", 
                    RowBox[{"Show", "[", 
                    RowBox[{"p", ",", " ", "gopt", ",", "  ", 
                    RowBox[{"Axes", "\[Rule]", " ", "True"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"p", "=", 
                   RowBox[{"Show", "[", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"plot", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"variables", ",", " ", 
                    RowBox[{"Directive", "/@", "styles"}]}], "}"}]}], "]"}], 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
              "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]}], 
           " ", "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"trace", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<SBMLPlot: Plot: \>\"", "//", "boldRed"}], ",", " ", 
           "p", ",", " ", 
           RowBox[{
           "\"\<\\n=== SBMLPlot Trace: EXIT ===\>\"", "//", "boldRed"}]}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "p", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MyLegend", "[", 
     RowBox[{
      RowBox[{"names_", "?", "ListQ"}], ",", " ", 
      RowBox[{"colors_", "?", "ListQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "p", ",", " ", "n", ",", " ", "nc", ",", " ", "x", ",", " ", "y", ",", 
        " ", "xy"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "names", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"nc", "=", 
        RowBox[{"Length", "[", "colors", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", " ", "\[NotEqual]", " ", "nc"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\<MyLegend:\>\"", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< number of names = \>\"", "//", "boldBlack"}], ",", 
            " ", 
            RowBox[{"n", "//", "boldBlack"}], ",", " ", 
            RowBox[{
            "\"\< is different from the number of colors = \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"nc", "//", "boldBlack"}]}], "]"}], ";", 
          "\[IndentingNewLine]", " ", 
          RowBox[{"Return", "[", "$Failed", "]"}]}]}], "\[IndentingNewLine]", 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"x", "=", "1.1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"xy", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Scaled", "[", 
           RowBox[{"{", 
            RowBox[{"x", ",", " ", 
             RowBox[{"1", "-", 
              RowBox[{"1.0", "*", 
               RowBox[{"y", "/", 
                RowBox[{"(", 
                 RowBox[{"n", "+", "1"}], ")"}]}]}]}]}], "}"}], "]"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"y", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}]}], ";",
        " ", "\[IndentingNewLine]", 
       RowBox[{"p", "=", 
        RowBox[{"MapThread", "[", 
         RowBox[{"Text", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"stringer", "/@", "names"}], ",", " ", "xy"}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"p", "=", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{"colors", ",", " ", "p"}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"p", "=", 
        RowBox[{"Graphics", "/@", "p"}]}]}]}], "\[IndentingNewLine]", "]"}]}],
    ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{"sol_", ",", " ", 
      RowBox[{"variable_", "?", "nonOptionQ"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tbegin_", "?", "NumberQ"}], ",", " ", 
        RowBox[{"tend_", "?", "NumberQ"}]}], "}"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "vars", ",", "lvars", ",", "r", ",", "n", ",", "pvar", ",", "p", ",", 
        " ", "dbg"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dbg", "=", "DEBUGPLOT"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<SBMLPlot 2: variable: \>\"", "//", "boldRed"}], ",", 
            " ", 
            RowBox[{"variable", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< {begin, end}:\>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"tbegin", ",", " ", "tend"}], "}"}], "//", "boldBlue"}],
             ",", " ", 
            RowBox[{"\"\< {options}:\>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
             RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}], ";"}]}], 
        " ", "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "rev", " ", "2.6", ".2", " ", "to", " ", "check", " ", "for", " ", 
         "\"\<ALL\>\"", " ", "here"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToUpperCase", "[", 
           RowBox[{"ToString", "[", "variable", "]"}], "]"}], "\[Equal]", 
          "\"\<ALL\>\""}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"SBMLPlot", "[", 
           RowBox[{"sol", ",", " ", 
            RowBox[{"{", 
             RowBox[{"tbegin", ",", " ", "tend"}], "}"}], ",", " ", "opt"}], 
           "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"SBMLPlot", "[", 
        RowBox[{"sol", ",", " ", 
         RowBox[{"{", "variable", "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"tbegin", ",", " ", "tend"}], "}"}], ",", " ", "opt"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{"sol_", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tbegin_", "?", "NumberQ"}], ",", " ", 
        RowBox[{"tend_", "?", "NumberQ"}]}], "}"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"soln", ",", "vars", ",", " ", "dbg"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dbg", "=", "DEBUGPLOT"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<SBMLPlot 3: {tbegin, tend}: \>\"", "//", "boldRed"}],
             ",", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"tbegin", ",", " ", "tend"}], "}"}], "//", "boldBlue"}],
             ",", " ", 
            RowBox[{"\"\< {opt}:\>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
             RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}], ";"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"soln", " ", "=", " ", 
        RowBox[{"selectSolution", "[", "sol", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "added", " ", "the", " ", "following", " ", "check", " ", "2.7", ".3",
          " ", "in", " ", "responsed", " ", "to", " ", "bug", " ", 
         "1892076"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"vars", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`variables", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`variables", "\[Rule]", " ", "All"}], "}"}]}]}], ";",
        " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"SameQ", "[", 
          RowBox[{"vars", ",", " ", "All"}], "]"}], ",", " ", 
         RowBox[{"vars", "  ", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"Head", ",", 
            RowBox[{"Map", "[", 
             RowBox[{"First", ",", 
              RowBox[{"Flatten", "[", "soln", "]"}]}], "]"}]}], "]"}]}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBMLPlot 3: vars: \>\"", ",", " ", "vars"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"SBMLPlot", "[", 
         RowBox[{"soln", ",", " ", "vars", ",", 
          RowBox[{"{", 
           RowBox[{"tbegin", ",", "tend"}], "}"}], ",", "opt"}], "]"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{"sol_", ",", " ", 
      RowBox[{"variable_", "?", "nonOptionQ"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "p", ",", " ", "tbegin", ",", " ", "tend", ",", " ", "soln", ",", " ", 
        "dbg"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dbg", "=", "DEBUGPLOT"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", "*)"}], " ", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<SBMLPlot 4: variable: \>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"variable", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< {options}:\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
            RowBox[{"{", "opt", "}"}], "//", "boldRed"}]}], "]"}]}], "]"}], 
       " ", ";", 
       RowBox[{"(*", " ", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "allow", " ", "plotting", " ", "of", " ", "either", " ", "solutions",
           " ", "or", " ", "solutions", " ", "incorporated", " ", "within", 
          " ", "a", " ", "model"}], " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"soln", " ", "=", " ", 
        RowBox[{"selectSolution", "[", "sol", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"tbegin", ",", " ", "tend"}], "}"}], " ", "=", " ", 
        RowBox[{"getPlotTimes", "[", "soln", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"p", " ", "=", " ", 
        RowBox[{"SBMLPlot", "[", 
         RowBox[{"soln", ",", "variable", ",", " ", 
          RowBox[{"{", 
           RowBox[{"tbegin", ",", " ", "tend"}], "}"}], ",", "opt"}], "]"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "p", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLPlot", "[", 
     RowBox[{"sol_", ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "vars", ",", "svars", ",", " ", "tbegin", ",", " ", "tend", ",", " ", 
        "soln", ",", " ", "dbg"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dbg", "=", "DEBUGPLOT"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<SBMLPlot 5: opt: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
             RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}], ";"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "allow", " ", "plotting", " ", "of", " ", "either", " ", "solutions",
           " ", "or", " ", "solutions", " ", "incorporated", " ", "within", 
          " ", "a", " ", "model"}], " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"soln", " ", "=", " ", 
        RowBox[{"selectSolution", "[", "sol", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"tbegin", ",", " ", "tend"}], "}"}], " ", "=", " ", 
        RowBox[{"getPlotTimes", "[", "soln", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"vars", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Global`variables", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"Global`variables", "\[Rule]", " ", 
            RowBox[{"{", "\"\<All\>\"", "}"}]}]}], "}"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<SBMLPlot 5: variables: \>\"", ",", " ", "vars"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"svars", " ", "=", " ", 
        RowBox[{"ToUpperCase", "/@", 
         RowBox[{"ToString", "/@", "vars"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"svars", ",", " ", "\"\<ALL\>\""}], "]"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"SBMLPlot", "[", 
           RowBox[{"soln", ",", " ", 
            RowBox[{"{", 
             RowBox[{"tbegin", ",", "tend"}], "}"}], ",", "opt"}], "]"}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"SBMLPlot", "[", 
         RowBox[{"soln", ",", "vars", ",", "  ", 
          RowBox[{"{", 
           RowBox[{"tbegin", ",", "tend"}], "}"}], ",", "opt"}], "]"}], "]"}],
        ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]",
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getPlotTimes", "[", "soln_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "solTimes", ",", " ", "n1", ",", " ", "tbegin", ",", " ", "tend", ",", 
        " ", "pos", ",", "part"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"solTimes", "[", 
         RowBox[{
          RowBox[{"System`InterpolatingFunction", "[", 
           RowBox[{"deltat_", ",", " ", "___"}], "]"}], "[", "t_", "]"}], 
         "]"}], ":=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "deltat", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"part", "[", 
         RowBox[{"x_", ",", 
          RowBox[{"{", "i__", "}"}]}], "]"}], ":=", " ", 
        RowBox[{"Part", "[", 
         RowBox[{"x", ",", "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{
          RowBox[{
          "replace", " ", "the", " ", "following", " ", "2.4", ".4", " ", 
           "because", " ", "may", " ", "have", " ", "things", " ", "like", 
           " ", "expression", " ", "*", " ", "interpolatingFUnction"}], ",", 
          " ", "etc", ",", " ", 
          RowBox[{
          "rather", " ", "than", " ", "just", " ", "pure", " ", 
           "interpolating", " ", "funcitons"}]}],
         FontWeight->"Plain"], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"n1", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"Last", ",", 
            RowBox[{"Flatten", "[", "soln", "]"}]}], "]"}]}], ";"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"pos", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"soln", ",", " ", 
          RowBox[{
           RowBox[{"InterpolatingFunction", "[", "___", "]"}], "[", 
           "Global`t", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n1", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"part", "[", 
           RowBox[{"soln", ",", "#"}], "]"}], "&"}], "/@", "pos"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"n1", "=", 
        RowBox[{"Map", "[", 
         RowBox[{"solTimes", ",", "n1"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "numerical", " ", "error", " ", "could", " ", "make", " ", "the", 
          " ", "solution", " ", "times", " ", "slightly", " ", 
          RowBox[{"different", ":", " ", 
           RowBox[{
           "some", " ", "may", " ", "be", " ", "real", " ", "and", " ", 
            "some", " ", "may", " ", "be", " ", "integer"}]}]}], ",", " ", 
         RowBox[{
          RowBox[{"for", " ", 
           RowBox[{"example", "!"}], " ", "\[IndentingNewLine]", "corrected", 
           " ", "2.4", ".15"}], " ", "-", " ", 
          RowBox[{"9", " ", "May", " ", "2005"}], " ", "-", " ", 
          RowBox[{"Tokyo", " ", "Hackathon"}]}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"tbegin", ",", " ", "tend"}], "}"}], " ", "=", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n1", "//", "Union"}], ")"}], "//", "Flatten"}]}], ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"tbegin", " ", "=", " ", 
        RowBox[{"Max", "[", 
         RowBox[{"First", "/@", "n1"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"tend", " ", "=", " ", 
        RowBox[{"Min", "[", 
         RowBox[{"Last", "/@", "n1"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"tbegin", ",", " ", "tend"}], "}"}], "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"selectSolution", "[", "sol_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"ToString", "/@", 
            RowBox[{"First", "/@", "sol"}]}], ",", " ", 
           "\"\<SBMLNumericalSolution\>\""}], "]"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Return", "[", 
           RowBox[{"Global`SBMLNumericalSolution", "/.", "sol"}], "]"}], 
          ";"}], "\[IndentingNewLine]", ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Return", "[", 
           RowBox[{"sol", "//", "Flatten"}], "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"boldOrange", "[", "\"\<Error:\>\"", "]"}], ",", " ", 
         RowBox[{
          RowBox[{
          "boldRed", "[", 
           "\"\<selectSolution: law of excluded middles violation. \
Catastrophic failure of nature.\>\"", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Abort", "[", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388259026673294*^9, 3.388259028726636*^9}, {
   3.38825906226819*^9, 3.388259077350554*^9}, {3.388259220104335*^9, 
   3.388259259602276*^9}, {3.388263404352552*^9, 3.388263406671616*^9}, {
   3.3890347902924633`*^9, 3.3890347949615498`*^9}, {3.389034907209416*^9, 
   3.3890349629755287`*^9}, {3.389035023412973*^9, 3.389035102378351*^9}, {
   3.389035144090638*^9, 3.389035144826078*^9}, {3.389035186572186*^9, 
   3.389035187321412*^9}, {3.3890352316391497`*^9, 3.3890352798608503`*^9}, {
   3.3890375537487993`*^9, 3.389037692784257*^9}, {3.38903773074958*^9, 
   3.389037862568769*^9}, 3.3890378964788094`*^9, {3.3890379382612753`*^9, 
   3.389037940082679*^9}, 3.389038103724739*^9, {3.389038278274411*^9, 
   3.389038284230076*^9}, {3.389038464000046*^9, 3.389038527735573*^9}, {
   3.3890385860731173`*^9, 3.389038591067062*^9}, {3.3890393197986393`*^9, 
   3.389039325762602*^9}, {3.3890395032191*^9, 3.389039527911558*^9}, {
   3.3890396558925858`*^9, 3.3890396642889853`*^9}, {3.3890397565065517`*^9, 
   3.389039771511759*^9}, {3.389039934527206*^9, 3.3890399821124783`*^9}, {
   3.38904001914231*^9, 3.38904001982299*^9}, {3.389040952073657*^9, 
   3.389041047543709*^9}, {3.3890410913254843`*^9, 3.3890411351149883`*^9}, {
   3.389041269596303*^9, 3.38904131169272*^9}, {3.389041385542108*^9, 
   3.389041386481546*^9}, {3.389041438831224*^9, 3.38904146945844*^9}, {
   3.389041527457097*^9, 3.38904155308934*^9}, {3.389041693366722*^9, 
   3.3890416938224382`*^9}, {3.389041814291574*^9, 3.389041987580345*^9}, {
   3.3890420724033957`*^9, 3.389042091730062*^9}, {3.38911809307123*^9, 
   3.3891182935075207`*^9}, {3.389119781297929*^9, 3.389119811586913*^9}, {
   3.3891198569416037`*^9, 3.389119901787099*^9}, {3.389120033106577*^9, 
   3.389120068106246*^9}, {3.3891201423917093`*^9, 3.3891201666334467`*^9}, {
   3.3891202578583803`*^9, 3.389120265527197*^9}, 3.389120633679658*^9, {
   3.3891206959391623`*^9, 3.389120728255002*^9}, {3.389121048949736*^9, 
   3.389121087988467*^9}, {3.389121160978282*^9, 3.3891212758735733`*^9}, {
   3.389124140188484*^9, 3.3891241704050817`*^9}, {3.389124215548335*^9, 
   3.389124217601712*^9}, {3.389126442944873*^9, 3.389126453520831*^9}, {
   3.389126515773501*^9, 3.389126528087515*^9}, {3.3891267419354486`*^9, 
   3.389126760911327*^9}, {3.389127229330179*^9, 3.389127236830635*^9}, {
   3.389127559951083*^9, 3.389127593266823*^9}, {3.389127714543476*^9, 
   3.389127720671669*^9}, {3.3891278905062*^9, 3.3891278982267017`*^9}, {
   3.389127975417666*^9, 3.3891280462268343`*^9}, {3.3894489470804243`*^9, 
   3.3894489488573647`*^9}, {3.3894500306398087`*^9, 
   3.3894500492257566`*^9}, {3.389450282980389*^9, 3.3894503145444393`*^9}, {
   3.389450496061923*^9, 3.389450544799938*^9}, {3.389450619209787*^9, 
   3.389450624265484*^9}, {3.389450709339654*^9, 3.389450710582282*^9}, {
   3.389450740828547*^9, 3.3894507422030287`*^9}, {3.3894508215019503`*^9, 
   3.389450844073125*^9}, {3.389450874217011*^9, 3.389450894701666*^9}, {
   3.38945095449155*^9, 3.3894509600208607`*^9}, {3.389451055089114*^9, 
   3.389451099838379*^9}, 3.389451189749898*^9, {3.389451226286302*^9, 
   3.389451262913837*^9}, {3.389451439324511*^9, 3.3894514684452267`*^9}, 
   3.389451563034021*^9, {3.389451626079033*^9, 3.3894516316109047`*^9}, {
   3.389451933750786*^9, 3.389451949065802*^9}, {3.38945198495877*^9, 
   3.389452038823525*^9}, {3.3894521185595503`*^9, 3.389452122139654*^9}, {
   3.389458246134234*^9, 3.389458261323777*^9}, {3.389458540084095*^9, 
   3.389458542767221*^9}, {3.389461636260295*^9, 3.389461701753846*^9}, {
   3.389462012761303*^9, 3.3894620164724493`*^9}, {3.389462071375024*^9, 
   3.389462092736491*^9}, {3.38946214159938*^9, 3.3894622047946587`*^9}, {
   3.3894622503281507`*^9, 3.389462257726101*^9}, {3.389462675925404*^9, 
   3.3894627009269457`*^9}, {3.389641388124949*^9, 3.389641389209097*^9}, {
   3.3896414237706823`*^9, 3.3896416604100533`*^9}, 3.3896417430151997`*^9, {
   3.389641819008389*^9, 3.38964182305509*^9}, {3.389642105796328*^9, 
   3.3896421116564083`*^9}, {3.389642169772139*^9, 3.389642174898543*^9}, {
   3.389642209010515*^9, 3.389642214074423*^9}, {3.38964233191634*^9, 
   3.389642343908587*^9}, {3.389642385565282*^9, 3.389642389114118*^9}, {
   3.3896424228537903`*^9, 3.389642437030405*^9}, {3.389642538819056*^9, 
   3.389642691782654*^9}, {3.389642752381979*^9, 3.389642782249288*^9}, {
   3.389642821260668*^9, 3.389642834193584*^9}, {3.389642962313542*^9, 
   3.389643002590355*^9}, {3.3896436895721684`*^9, 3.389643779170673*^9}, {
   3.389643820278886*^9, 3.3896438614566183`*^9}, {3.389643914123939*^9, 
   3.3896439607910213`*^9}, {3.3896440822594767`*^9, 
   3.3896441704968348`*^9}, {3.389644267331058*^9, 3.389644275535314*^9}, {
   3.389644328167173*^9, 3.389644347210644*^9}, {3.389644454537719*^9, 
   3.389644479293454*^9}, {3.389644567877428*^9, 3.389644586618616*^9}, {
   3.38964470070427*^9, 3.38964470380733*^9}, {3.389645630819092*^9, 
   3.389645650004772*^9}, {3.389645682867386*^9, 3.389645687604376*^9}, {
   3.389646261827984*^9, 3.38964626795216*^9}, {3.3896465368050013`*^9, 
   3.389646547466473*^9}, {3.3896466134126587`*^9, 3.389646622306933*^9}, {
   3.389646661171929*^9, 3.389646678606749*^9}, {3.389646870554942*^9, 
   3.389646882677207*^9}, {3.389647771477559*^9, 3.38964777694693*^9}, {
   3.38997548448777*^9, 3.389975591600597*^9}, {3.389975645475256*^9, 
   3.389975658197847*^9}, {3.38997569421714*^9, 3.389975710049717*^9}, {
   3.3899757416386013`*^9, 3.389975843580367*^9}, {3.38997590148521*^9, 
   3.389975919200292*^9}, {3.3899759518024693`*^9, 3.3899760224380836`*^9}, {
   3.390045630751802*^9, 3.390045633883642*^9}, 3.390045726267345*^9, {
   3.390045784092401*^9, 3.390045803861519*^9}, {3.3900458732853413`*^9, 
   3.390045883368272*^9}, {3.390049558560473*^9, 3.390049566000594*^9}, {
   3.390049680540304*^9, 3.390049726678495*^9}, {3.392738877998517*^9, 
   3.392738936476959*^9}, {3.395406615965289*^9, 3.395406619927567*^9}, {
   3.395407276533564*^9, 3.395407290340728*^9}, {3.395407390743948*^9, 
   3.3954074434513617`*^9}, {3.39575387648123*^9, 3.395753953634446*^9}, {
   3.397054519362688*^9, 3.397054576506015*^9}, {3.397054857391211*^9, 
   3.3970548934203033`*^9}, {3.401472769903658*^9, 3.4014727718461*^9}, {
   3.4014728077080507`*^9, 3.401472855817202*^9}, {3.401473056721346*^9, 
   3.401473070121499*^9}, {3.4014731770400743`*^9, 3.4014732052731*^9}, {
   3.4026951983666058`*^9, 3.402695213599525*^9}, {3.4159905410565243`*^9, 
   3.415990542688162*^9}, {3.415990604757309*^9, 3.415990625125527*^9}, {
   3.4159908208028297`*^9, 3.415990882925288*^9}, {3.41599094769911*^9, 
   3.415990972663012*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SBMLListPlot", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SBMLListPlot", "[", 
   RowBox[{"vars_", ",", 
    RowBox[{"{", 
     RowBox[{"t_", ",", "tmin_", ",", "tmax_", ",", " ", "dt_"}], "}"}], ",", 
    " ", "sol_", ",", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "data", ",", "x", ",", "variableNames", ",", "xname", ",", "xdata", ",", 
      "plts", ",", "colors", ",", "nvars", ",", "style"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"data", "=", 
      RowBox[{"dataTable", "[", 
       RowBox[{"vars", ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "tmin", ",", "tmax", ",", "dt"}], "}"}], ",", 
        "sol"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"variableNames", " ", "=", " ", 
      RowBox[{"First", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"xname", "=", 
      RowBox[{"First", "[", "variableNames", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"variableNames", "=", 
      RowBox[{"Rest", "[", "variableNames", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"data", " ", "=", " ", 
      RowBox[{"Transpose", "[", 
       RowBox[{"Rest", "[", "data", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"xdata", " ", "=", " ", 
      RowBox[{"First", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"data", " ", "=", " ", 
      RowBox[{"Rest", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"nvars", " ", "=", " ", 
      RowBox[{"Length", "[", "data", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"colors", " ", "=", " ", 
      RowBox[{
       RowBox[{"Range", "[", "nvars", "]"}], "*", 
       RowBox[{"1.0", "/", "nvars"}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"style", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"PlotStyle", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"PlotStyle", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}], "}"}], "//", "Flatten"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"plots", " ", "=", " ", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ListPlot", "[", 
          RowBox[{
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{"xdata", ",", "#1"}], "}"}], "]"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Hue", "[", "#2", "]"}], ",", "style"}], "}"}], 
             "]"}]}], ",", 
           RowBox[{"MyFilterOptions", "[", 
            RowBox[{"ListPlot", ",", "opt"}], "]"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", " ", "Identity"}]}], "]"}], 
         "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"data", ",", "colors"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Show", "[", 
       RowBox[{"plots", ",", 
        RowBox[{"MyFilterOptions", "[", 
         RowBox[{"Show", ",", "opt"}], "]"}], ",", 
        RowBox[{"DisplayFunction", "\[Rule]", " ", "$DisplayFunction"}]}], 
       "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.388260596716476*^9, {3.388342712551909*^9, 3.3883427128597107`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLWrite", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "SBMLWrite", "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Global`format", "\[Rule]", "\"\<\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`inputfile", "\[Rule]", " ", "\"\<\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Global`outputfile", "\[Rule]", " ", "\"\<\>\""}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SBMLWrite", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "model", ",", " ", "format", ",", " ", "inputfile", ",", "outputfile", 
       ",", "msg", ",", "tofile", ",", " ", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"inputfile", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"Global`inputfile", "/.", 
         RowBox[{"{", "opt", "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"inputfile", "=", 
       RowBox[{"stringer", "[", "inputfile", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"fileExists", "[", "inputfile", "]"}]}], ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
           RowBox[{"\"\<The file \>\"", "//", "boldBlack"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ToFileName", "[", 
             RowBox[{
              RowBox[{"Directory", "[", "]"}], ",", "inputfile"}], "]"}], "//",
             "boldRed"}], ",", " ", 
           RowBox[{"\"\< does not exist.\>\"", "//", "boldBlack"}]}], "]"}], 
         ";", " ", 
         RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<SBMLWrite: inputfile:\>\"", ",", "inputfile"}], "]"}]}],
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"format", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`format", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"Options", "[", "SBMLWrite", "]"}]}], ")"}], "//", 
         "ToString"}], "//", "ToUpperCase"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$OutputFormat", "=", "format"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$OutputFormatIsHTML", "=", 
       RowBox[{"(", 
        RowBox[{"format", "==", "\"\<HTML\>\""}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "format", ",", "\[IndentingNewLine]", "\"\<BERKELEYMADONNA\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"model", " ", "=", " ", 
         RowBox[{"SBMLRead", "[", 
          RowBox[{"inputfile", ",", 
           RowBox[{"MathSBMLSaveVerboseData", "\[Rule]", " ", "True"}], ",", 
           "\[IndentingNewLine]", " ", "opt", ",", 
           RowBox[{"Global`context", "\[Rule]", " ", "\"\<$\>\""}], ",", 
           RowBox[{"Global`LoadModelBuilder", "\[Rule]", " ", "False"}]}], 
          "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "_", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"model", " ", "=", " ", 
          RowBox[{"SBMLRead", "[", 
           RowBox[{"inputfile", ",", 
            RowBox[{"MathSBMLSaveVerboseData", "\[Rule]", " ", "True"}], ",", 
            "\[IndentingNewLine]", " ", "opt", ",", 
            RowBox[{"Global`LoadModelBuilder", "\[Rule]", " ", "False"}]}], 
           "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$OutputFormatIsHTML", "=", "False"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$Inputfile", "=", "inputfile"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"outputfile", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Global`outputfile", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"Options", "[", "SBMLWrite", "]"}]}], ")"}], "//", 
        "ToString"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"tofile", " ", "=", " ", 
       RowBox[{"outputfile", "\[NotEqual]", " ", "\"\<\>\""}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<SBMLWrite: inputfile,outputfile,format:\>\"", ",", "inputfile", 
          ",", "\"\<,\>\"", ",", "outputfile", ",", "\"\<,\>\"", ",", 
          "format"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"tofile", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"outputfile", "=", 
          RowBox[{"validateOutputFileName", "[", "outputfile", "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"outputfile", "==", "\"\<$Failed\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tofile", "=", "False"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "format", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\"\<BERKELEYMADONNA\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"msg", " ", "=", " ", 
          RowBox[{"If", "[", 
           RowBox[{"tofile", ",", " ", "\[IndentingNewLine]", 
            RowBox[{"toBerkeleyMadonnaForm", "[", 
             RowBox[{"model", ",", "outputfile", ",", " ", "opt"}], "]"}], 
            ",", " ", "\[IndentingNewLine]", 
            RowBox[{"toBerkeleyMadonnaForm", "[", 
             RowBox[{"model", ",", "opt"}], "]"}]}], "\[IndentingNewLine]", 
           "]"}]}], ";"}], " ", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\"\<XPP\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"msg", " ", "=", " ", 
          RowBox[{"If", "[", 
           RowBox[{"tofile", ",", " ", "\[IndentingNewLine]", 
            RowBox[{"toXPPForm", "[", 
             RowBox[{"model", ",", "outputfile"}], "]"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"toXPPForm", "[", "model", "]"}]}], "\[IndentingNewLine]",
            "]"}]}], ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]",
         ",", "\[IndentingNewLine]", "\"\<FORTRAN\>\"", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "boldRed", "[", 
           "\"\<Warning: SBMLWrite: FORTRAN format is Developemental and \
subject to both error. Please report any errors to the developers.\>\"", 
           "]"}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"msg", " ", "=", " ", 
          RowBox[{"fortranize", "[", 
           RowBox[{"model", ",", " ", "opt"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"tofile", ",", " ", 
           RowBox[{"msg", " ", "=", " ", 
            RowBox[{"Export", "[", 
             RowBox[{"outputfile", ",", "msg", ",", "\"\<Text\>\""}], 
             "]"}]}]}], "]"}], ";"}], " ", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\"\<HTML\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"msg", " ", "=", " ", 
          RowBox[{"htmlPrint", "[", 
           RowBox[{"model", ",", "opt"}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<SBMLWrite: msg (1): \>\"", ",", " ", "msg"}], 
            "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"The", " ", "character", " ", "\[CenterEllipsis]", " ", 
           RowBox[{"is", " ", "\\", " ", 
            RowBox[{"[", " ", "CenterEllipsis", " ", "]"}]}], " ", "and", " ",
            "is", " ", "not", " ", "three", " ", 
           RowBox[{"dots", "!"}]}], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"msg", " ", "=", " ", 
          RowBox[{"StringReplace", "[", 
           RowBox[{"msg", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "\"\<\[CenterEllipsis];\>\"", "\[Rule]", " ", "\"\<\>\""}], ",",
               " ", 
              RowBox[{
              "\"\<\[CenterEllipsis]\>\"", "\[Rule]", " ", "\"\<\>\""}], ",", 
              " ", 
              RowBox[{"\"\<\[EmptySet]\>\"", "\[Rule]", " ", "\"\<\>\""}], 
              ",", 
              RowBox[{"\"\<\[Rule]\>\"", "\[Rule]", " ", "\"\<&rarr;\>\""}], 
              " ", 
              RowBox[{"(*", "\"\<&#x2192;\>\"", "*)"}], " ", ",", " ", 
              RowBox[{
              "\"\<\[RightArrowLeftArrow]\>\"", "\[Rule]", " ", 
               "\"\<&larr;<span \
style=\\\"margin-left:-12;\\\">&rarr;</span>\>\""}]}], " ", 
             RowBox[{"(*", " ", "\"\<&#x21CC;\>\"", "*)"}], " ", "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<SBMLWrite: msg (2): \>\"", ",", " ", "msg"}], 
            "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"tofile", ",", " ", 
           RowBox[{"msg", "=", 
            RowBox[{"Export", "[", 
             RowBox[{"outputfile", ",", "msg", ",", "\"\<Text\>\""}], 
             "]"}]}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "_", ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"printWarning", "[", 
          RowBox[{
          "\"\<SBMLWrite: invalid format = '\>\"", "<>", "format", "<>", 
           "\"\<'. No file written. Valid formats are: XPP, HTML\>\""}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"msg", " ", "=", " ", "model"}], ";"}]}], " ", 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "msg", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3978509661508627`*^9, 3.397850991736377*^9}, {
   3.397851050628257*^9, 3.397851059749098*^9}, {3.397851456669697*^9, 
   3.397851474024042*^9}, {3.397851519323107*^9, 3.397851522257584*^9}, {
   3.397851601042053*^9, 3.397851631455318*^9}, {3.397851684324992*^9, 
   3.3978517292092876`*^9}, {3.397851834793354*^9, 3.397851836892716*^9}, {
   3.397851890134405*^9, 3.397851906335766*^9}, 3.397851983377203*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["model Builder", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading: model builder funtions\>\"", "]"}]}], 
   "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fixMathematicaENotation", "[", 
    RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"x", ",", " ", 
     RowBox[{"\"\<*^\>\"", "\[Rule]", " ", "\"\<e\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["checkMathMLSubset", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"checkMathMLSubset", "[", 
     RowBox[{"math_", ",", " ", "type_", ",", " ", "id_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"dbg", "=", "False"}], ",", "XML2Sym", ",", "m", ",", " ", 
        "commands", ",", " ", "attributes", ",", "\[IndentingNewLine]", 
        RowBox[{"oksubset", "=", 
         RowBox[{"{", 
          RowBox[{
          "\"\<math\>\"", ",", " ", "\"\<lambda\>\"", ",", "\"\<cn\>\"", ",", 
           "\"\<ci\>\"", ",", "\"\<csymbol\>\"", ",", "\"\<sep\>\"", ",", 
           "\"\<apply\>\"", ",", " ", "\"\<piecewise\>\"", ",", " ", 
           "\"\<piece\>\"", ",", " ", "\"\<otherwise\>\"", ",", " ", 
           "\"\<eq\>\"", ",", "\"\<neq\>\"", ",", " ", "\"\<gt\>\"", ",", 
           " ", "\"\<lt\>\"", ",", " ", "\"\<geq\>\"", ",", " ", 
           "\"\<leq\>\"", ",", " ", "\"\<plus\>\"", ",", " ", "\"\<minus\>\"",
            ",", " ", "\"\<times\>\"", ",", " ", "\"\<divide\>\"", ",", " ", 
           "\"\<power\>\"", ",", " ", "\"\<root\>\"", ",", " ", "\"\<abs\>\"",
            ",", " ", "\"\<exp\>\"", ",", " ", "\"\<ln\>\"", ",", " ", 
           "\"\<log\>\"", ",", " ", "\"\<floor\>\"", ",", " ", 
           "\"\<ceiling\>\"", ",", " ", "\"\<factorial\>\"", ",", " ", 
           "\"\<and\>\"", ",", " ", "\"\<or\>\"", ",", " ", "\"\<xor\>\"", 
           ",", " ", "\"\<not\>\"", ",", " ", "\"\<degree\>\"", ",", " ", 
           "\"\<bvar\>\"", ",", "\"\<logbase\>\"", ",", " ", "\"\<sin\>\"", 
           ",", " ", "\"\<cos\>\"", ",", " ", "\"\<tan\>\"", ",", " ", 
           "\"\<sec\>\"", ",", " ", "\"\<csc\>\"", ",", " ", "\"\<cot\>\"", 
           ",", " ", "\"\<sinh\>\"", ",", " ", "\"\<cosh\>\"", ",", " ", 
           "\"\<Tanh\>\"", ",", " ", "\"\<sech\>\"", ",", " ", "\"\<csch\>\"",
            ",", " ", "\"\<coth\>\"", ",", " ", "\"\<arcsin\>\"", ",", " ", 
           "\"\<arccos\>\"", ",", " ", "\"\<arctan\>\"", ",", " ", 
           "\"\<arcsec\>\"", ",", " ", "\"\<arccsc\>\"", ",", " ", 
           "\"\<arccot\>\"", ",", " ", "\"\<arcsinh\>\"", ",", " ", 
           "\"\<arccosh\>\"", ",", " ", "\"\<arctanh\>\"", ",", " ", 
           "\"\<arcsech\>\"", ",", " ", "\"\<arccsch\>\"", ",", " ", 
           "\"\<arccoth\>\"", ",", " ", "\"\<true\>\"", ",", " ", 
           "\"\<false\>\"", ",", " ", "\"\<notanumber\>\"", ",", " ", 
           "\"\<pi\>\"", ",", " ", "\"\<infinity\>\"", ",", " ", 
           "\"\<exponentiale\>\"", ",", " ", "\"\<semantics\>\"", ",", " ", 
           "\"\<annotation\>\"", ",", " ", "\"\<annotation-xml\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"okattributes", "=", 
         RowBox[{"{", 
          RowBox[{
          "\"\<style\>\"", ",", " ", "\"\<class\>\"", ",", " ", "\"\<id\>\"", 
           ",", " ", "\"\<encoding\>\"", ",", "\"\<definitionURL\>\"", ",", 
           " ", "\"\<type\>\"", ",", "\"\<xmlns\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"oktypes", "=", 
         RowBox[{"{", 
          RowBox[{
          "\"\<real\>\"", ",", " ", "\"\<integer\>\"", ",", " ", 
           "\"\<rational\>\"", ",", " ", "\"\<e-notation\>\""}], "}"}]}], ",",
         "\[IndentingNewLine]", "types", ",", " ", "xmlns", ",", " ", 
        "isanumber", ",", " ", "notanumber"}], "\[IndentingNewLine]", "}"}], 
      ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"isanumber", "[", "x_", "]"}], ":=", " ", 
        RowBox[{
         RowBox[{"numberFormQ", "[", "x", "]"}], " ", "\[Or]", " ", 
         RowBox[{"eFormQ", "[", "x", "]"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"notanumber", "[", "x_", "]"}], ":=", " ", 
        RowBox[{"!", 
         RowBox[{"isanumber", "[", "x", "]"}]}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"type", "\[NotEqual]", " ", "\"\<function\>\""}], ",", " ", 
         RowBox[{"oksubset", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"oksubset", ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<bvar\>\"", ",", "\"\<lambda\>\""}], "}"}]}], 
           "]"}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<checkMathMLSubset: math:\>\"", ",", " ", "math"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"XML2Sym", "[", 
         RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ":=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"XML2Sym", "[", 
         RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ":=", " ", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"XML2Sym", "[", "x___", "]"}], ":=", " ", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"m", "=", 
        RowBox[{"math", "/.", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "\[Rule]", " ", "XML2Sym"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"m", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"m", "/.", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "\[Rule]", " ", "List"}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<checkMathMLSubset: m:\>\"", ",", " ", "m"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"attributes", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{"Head", "[", "#", "]"}], ",", " ", "Rule"}], "]"}], 
           "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"types", "=", 
        RowBox[{"Select", "[", 
         RowBox[{"attributes", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"First", "[", "#", "]"}], "==", "\"\<type\>\""}], "&"}]}],
          "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"commands", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"m", ",", " ", "attributes"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"commands", "=", 
        RowBox[{"Select", "[", 
         RowBox[{"commands", ",", "notanumber"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<checkMathMLSubset: attributes:\>\"", ",", " ", "attributes"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<checkMathMLSubset: commands:\>\"", ",", " ", "commands"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<checkMathMLSubset: types:\>\"", ",", " ", "types"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"commands", " ", "=", " ", 
        RowBox[{"Complement", "[", 
         RowBox[{"commands", ",", " ", "oksubset"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"attributes", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"First", "/@", "attributes"}], ",", " ", "okattributes"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"xmlns", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"attributes", ",", 
          RowBox[{"{", 
           RowBox[{"_", ",", "\"\<xmlns\>\""}], "}"}], ",", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"attributes", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"attributes", ",", "xmlns"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"types", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"types", ",", " ", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"oktypes", ",", " ", 
              RowBox[{"Last", "[", "#", "]"}]}], "]"}]}], "&"}]}], "]"}]}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
           RowBox[{"\"\< Invalid MathML element \>\"", "//", "boldBlack"}], 
           ",", 
           RowBox[{"#", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< used in \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"type", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< definition for \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"id", "//", "boldBlue"}]}], "]"}], "&"}], "/@", 
        "commands"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
           RowBox[{"\"\< Invalid MathML attribute \>\"", "//", "boldBlack"}], 
           ",", " ", 
           RowBox[{"#", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< used in \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"type", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< definition for \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"id", "//", "boldBlue"}]}], "]"}], "&"}], "/@", 
        "attributes"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
           RowBox[{"\"\< Invalid MathML type \>\"", "//", "boldBlack"}], ",", 
           " ", 
           RowBox[{"#", "//", "boldBlue"}], ",", "  ", 
           RowBox[{"\"\< used in \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"type", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< definition for \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"id", "//", "boldBlue"}]}], "]"}], "&"}], "/@", "types"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
newModel, showModel, loadSimulator, loadModelBuilder, modifyModel\
\>", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:newModel\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"setEcho", "[", "value_", "]"}], ":=", " ", 
   RowBox[{"(", 
    RowBox[{"MB$Echo", "=", "value"}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setEcho", "[", "]"}], ":=", " ", 
   RowBox[{"setEcho", "[", "True", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hideEcho", "[", "]"}], ":=", " ", 
   RowBox[{"setEcho", "[", "False", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setEcho", "[", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setArray", "[", "value_", "]"}], ":=", " ", 
   RowBox[{"(", 
    RowBox[{"MB$Arrays", "=", "value"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setArray", "[", "]"}], ":=", " ", 
   RowBox[{"setArray", "[", "True", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setArray", "[", "False", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ifArrays", "[", "]"}], ":=", " ", "MB$Arrays"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setArraysAreAnnotations", "[", "value_", "]"}], ":=", " ", 
   RowBox[{"(", 
    RowBox[{"MB$ArraysAreAnnotations", "=", "value"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setArraysAreAnnotations", "[", "]"}], ":=", " ", 
   RowBox[{"setArraysAreAnnotations", "[", "True", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setArraysAreAnnotations", "[", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ifArraysAreAnnotations", "[", "]"}], ":=", " ", 
   "MB$ArraysAreAnnotations"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$SBML$Rationals", "=", "False"}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True],

Cell["\<\
popCompartment, pushCompartment, setCompartment, forgetCompartment
added 2.4.11\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"popCompartment", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ListQ", "[", "MB$CurrentCompartment", "]"}]}], ",", " ", 
        RowBox[{"MB$CurrentCompartment", "=", 
         RowBox[{"{", "MB$CurrentCompartment", "}"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "MB$CurrentCompartment", "]"}], ">", "0"}], 
        ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "MB$CurrentCompartment", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"MB$CurrentCompartment", "=", 
          RowBox[{"Rest", "[", "MB$CurrentCompartment", "]"}]}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"n", "=", "Null"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:newModel:pushCompartment\>\"", "]"}]}],
    "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pushCompartment", "[", "n_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", "\[Equal]", "Null"}], ",", 
         RowBox[{
          RowBox[{"MB$CurrentCompartment", "=", 
           RowBox[{"{", "}"}]}], ";", " ", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"ListQ", "[", "MB$CurrentCompartment", "]"}], "&&", 
           RowBox[{
            RowBox[{"Length", "[", "MB$CurrentCompartment", "]"}], ">", 
            "0"}]}], ")"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"stringer", "[", "n", "]"}], "\[NotEqual]", " ", 
             RowBox[{"stringer", "[", 
              RowBox[{"First", "[", "MB$CurrentCompartment", "]"}], "]"}]}], 
            ",", " ", "\[IndentingNewLine]", 
            RowBox[{"MB$CurrentCompartment", "=", "\[IndentingNewLine]", 
             RowBox[{"Prepend", "[", 
              RowBox[{"MB$CurrentCompartment", ",", 
               RowBox[{"stringer", "[", "n", "]"}]}], "]"}]}]}], "]"}], ";"}],
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"MB$CurrentCompartment", "=", 
          RowBox[{"{", "n", "}"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"forgetCompartment", "[", "n_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MB$CurrentCompartment", "=", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{"MB$CurrentCompartment", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"n", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{
            RowBox[{"stringer", "[", "n", "]"}], "\[Rule]", " ", 
            RowBox[{"{", "}"}]}]}], "}"}]}], "]"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:newModel:setCompartment\>\"", "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setCompartment", "[", "n_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"compartmentExists", "[", 
        RowBox[{"stringer", "[", "n", "]"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pushCompartment", "[", "n", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Current compartment set to \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"n", "//", "boldBlue"}]}], "]"}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"n", "\[Equal]", "Null"}], ",", "\[IndentingNewLine]", 
          RowBox[{"pushCompartment", "[", "Null", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Warning:\>\"", "//", "boldOrange"}], ",", 
             RowBox[{
             "\"\<pushCompartment: Requested compartment \>\"", "//", 
              "boldBlack"}], ",", 
             RowBox[{"n", "//", "boldRed"}], ",", 
             RowBox[{"\"\< does not exist.\>\"", "//", "boldBlack"}]}], "]"}],
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3882670501551867`*^9, 3.388267069321821*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:newModel:newModel\>\"", "]"}]}], "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"newModel", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "stringer", ",", "val", ",", "c", ",", " ", "defaultNotes", ",", " ", 
        "family", ",", " ", "given", ",", "email", ",", "org", ",", " ", 
        "creator", ",", " ", "domain"}], "}"}], ",", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBML$CheckModelContext", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`checkModelContext", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`checkModelContext", "\[Rule]", " ", "False"}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Off", "[", 
        RowBox[{"General", "::", "\"\<spell\>\""}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Off", "[", 
        RowBox[{"General", "::", "\"\<spell1\>\""}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Off", "[", 
        RowBox[{"Part", "::", "\"\<pspec\>\""}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"stringer", "[", 
         RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", "x"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"stringer", "[", "x_", "]"}], ":=", " ", 
        RowBox[{"ToString", "[", 
         RowBox[{"InputForm", "[", "x", "]"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"stringer", "[", 
         RowBox[{"x_", "\[Rule]", " ", "y_"}], "]"}], ":=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"stringer", "[", "x", "]"}], "\[Rule]", " ", 
          RowBox[{"stringer", "[", "y", "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"val", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`Arrays", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`Arrays", "\[Rule]", " ", 
           RowBox[{"ifArrays", "[", "]"}]}], "}"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"setArray", "[", "val", "]"}], ";", " ", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"val", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`ArraysAreAnnotations", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`ArraysAreAnnotations", "\[Rule]", " ", 
           RowBox[{"ifArraysAreAnnotations", "[", "]"}]}], "}"}]}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"setArraysAreAnnotations", "[", "val", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"$SBML$Rationals", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`rationals", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`rationals", "\[Rule]", " ", "False"}], "}"}]}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"family", "=", 
        RowBox[{"stringer", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MIRIAM`Family", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"MIRIAM`Family", "\[Rule]", " ", 
             RowBox[{
             "$MachineName", "<>", "\"\< at \>\"", "<>", "$MachineDomain", 
              "<>", "\"\< (automatically generated)\>\""}]}], "}"}]}], 
          ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"given", "=", 
        RowBox[{"stringer", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MIRIAM`Given", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"MIRIAM`Given", "\[Rule]", 
             RowBox[{
             "$UserName", "<>", "\"\< (automatically generated)\>\""}]}], 
            "}"}]}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"domain", "=", "$MachineDomain"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"domain", "==", "\"\<\>\""}], ",", " ", 
         RowBox[{"domain", "=", "\"\<not.specified\>\""}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"email", "=", 
        RowBox[{"stringer", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MIRIAM`EMAIL", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"MIRIAM`EMAIL", "\[Rule]", " ", 
             RowBox[{"\"\<anonymous@\>\"", "<>", "domain"}]}], "}"}]}], 
          ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"org", "=", 
        RowBox[{"stringer", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"MIRIAM`Orgname", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{
            "MIRIAM`Orgname", "\[Rule]", " ", 
             "\"\<MathSBML User Community\>\""}], "}"}]}], ")"}]}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"creator", "=", 
        RowBox[{
         RowBox[{"Global`CreatedBy", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`CreatedBy", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{"family", ",", "given", ",", "email", ",", "org"}], 
            "}"}]}], "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"creator", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "creator", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"Length", "[", "creator", "]"}], ",", "\[IndentingNewLine]", 
         "0", ",", " ", 
         RowBox[{
          RowBox[{"creator", "=", 
           RowBox[{"{", 
            RowBox[{
            "family", ",", " ", "given", ",", " ", "email", ",", " ", "org"}],
             "}"}]}], ";"}], ",", "\[IndentingNewLine]", "1", ",", " ", 
         RowBox[{
          RowBox[{"creator", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"creator", ",", 
             RowBox[{"{", 
              RowBox[{"given", ",", "email", ",", " ", "org"}], "}"}]}], 
            "]"}]}], ";"}], ",", "\[IndentingNewLine]", "2", ",", " ", 
         RowBox[{
          RowBox[{"creator", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"creator", ",", " ", 
             RowBox[{"{", 
              RowBox[{"email", ",", " ", "org"}], "}"}]}], "]"}]}], ";"}], 
         ",", "\[IndentingNewLine]", "3", ",", " ", 
         RowBox[{
          RowBox[{"creator", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"creator", ",", " ", 
             RowBox[{"{", "org", "}"}]}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", "_", ",", " ", 
         RowBox[{"creator", "=", 
          RowBox[{"Take", "[", 
           RowBox[{"creator", ",", "4"}], "]"}]}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$Modify", "=", "False"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$Species", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$SpeciesTypes", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$CompartmentTypes", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Compartments", "=", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"MB$Functions", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Events", "=", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"MB$Reactions", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Parameters", "=", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"MB$InitialAssignments", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Units", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Rules", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Constraints", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$UnitsOfTheSpecies", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$CurrentCompartment", "=", "Null"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"previouslyDefinedNamesInTheMathematicaEnvirnoment", "=", 
        RowBox[{"Names", "[", "\"\<*\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"previouslyDefinedContextsInTheMathematicaEnvironment", "=", 
        RowBox[{"Contexts", "[", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"resetDefaultUnits", "[", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$ID", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`id", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`id", "\[Rule]", " ", "\"\<SBMLModel\>\""}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$ID", "=", 
        RowBox[{"stringer", "[", "MB$ID", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$MetaID", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`metaid", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"MB$MetaID", "=", 
        RowBox[{"stringer", "[", "MB$MetaID", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"SIDQ", "[", "MB$ID", "]"}]}], " ", ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "=", 
           RowBox[{"fixSID", "[", "MB$ID", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
             RowBox[{"\"\<\\\"\>\"", "<>", "MB$ID", "<>", "\"\<\\\"\>\""}], "//",
              "boldBlue"}], ",", " ", 
            RowBox[{
            "\"\<is not a valid SID, replaced with \>\"", "//", "boldBlack"}],
             ",", " ", 
            RowBox[{
             RowBox[{"\"\<\\\"\>\"", "<>", "c", "<>", "\"\<\\\"\>\""}], "//", 
             "boldBlue"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"MB$ID", "=", "c"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MB$MetaID", "\[Equal]", " ", "\"\<\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MB$MetaID", "=", 
           RowBox[{"\"\<\[UnderBracket]\>\"", "<>", "MB$ID"}]}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"SIDQ", "[", "MB$MetaID", "]"}]}], " ", ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"c", "=", 
              RowBox[{"fixSID", "[", "MB$MetaID", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
               RowBox[{
                RowBox[{
                "\"\<\\\"\>\"", "<>", "MB$MetaID", "<>", "\"\<\\\"\>\""}], "//",
                 "boldBlue"}], ",", " ", 
               RowBox[{
               "\"\<is not a valid SID, replaced with \>\"", "//", 
                "boldBlack"}], ",", " ", 
               RowBox[{
                RowBox[{"\"\<\\\"\>\"", "<>", "c", "<>", "\"\<\\\"\>\""}], "//",
                 "boldBlue"}]}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"MB$MetaID", "=", "c"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"$SBML$IDTable", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"$SBML$MetaIDTable", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"$SBML$function$bvars", "=", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"$SBML$MetaIDAssociations", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"MB$ID", ",", "\"\<model\>\"", ",", "False"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"addMetaID", "[", 
        RowBox[{
        "MB$MetaID", ",", "MB$ID", ",", " ", "\"\<model\>\"", ",", " ", 
         "True"}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$ModelAnnotation", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$SBMLAnnotation", "=", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"MB$Name", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`name", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`name", "\[Rule]", "MB$ID"}], "}"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"$SBML$Underscorecharacter", "=", 
        RowBox[{
         RowBox[{"Global`underscore", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"$SBML$IndeterminateValue", "=", 
        RowBox[{
         RowBox[{"Global`indeterminateValueString", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLRead", "]"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "setAnnotationNamespace", "[", 
        "\"\<http://sbml.org/software/mathsbml/ns\>\"", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"setAnnotationPackage", "[", "\"\<mathsbml\>\"", "]"}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"setSBMLAnnotation", "[", 
        RowBox[{
         RowBox[{
         "\"\<AuthorConfiguration\>\"", "\[Rule]", "\[IndentingNewLine]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<SoftwareVersion\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$MathSBML$Version", "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<MathematicaVersion\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$Version", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<ProcessorType\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$ProcessorType", "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<MachineType\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$MachineType", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<System\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$SystemID", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<OperatingSystem\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$OperatingSystem", "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<date\>\"", "\[Rule]", " ", 
             RowBox[{"{", 
              RowBox[{"W3CDTF", "[", "]"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<MachineName\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$MachineName", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<MachineID\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$MachineID", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<MachineDomain\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$MachineDomain", "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<UserName\>\"", "\[Rule]", " ", 
             RowBox[{"{", "$UserName", "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<ProductInformation\>\"", "\[Rule]", " ", 
             RowBox[{"stringer", "/@", "$ProductInformation"}]}]}], 
           "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
         "\"\<mathsbml\>\"", ",", 
         "\"\<http://sbml.org/software/mathsbml/ns\>\""}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$reactioncounter", "=", "1"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$speciescounter", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$speciestypecounter", "=", "1"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$functioncounter", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$unitcounter", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$compartmentcounter", "=", "1"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$parametercounter", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$variablecounter", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$eventcounter", " ", "=", " ", "1"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$rulecounter", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$dimensionCounter", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$CurrentDimension", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$indexCounter", "=", "1"}], ";", " ", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"MB$SBMLNotes", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$AssignmentRuleVariables", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$RateRuleVariables", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$ReactionVariables", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$BoundaryConditionSpecies", "=", 
        RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"defaultNotes", " ", "=", 
        RowBox[{
        "\"\<<p style='font-size:x-small;'>This is a Systems Biology Markup \
Language (SBML) file, generated by MathSBML \>\"", "<>", "$MathSBML$Version", 
         "<>", "\"\< \>\"", "<>", 
         RowBox[{"now", "[", "]"}], "<>", 
         "\"\<.  SBML is a form of XML, and most XML files will not display \
properly in an internet browser. To view the contents of an XML file use the \
\\\"Page Source\\\" or equivalent button on you browser. </p>\>\""}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$ModelNotes", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`notes", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"Global`notes", "\[Rule]", " ", "\"\<\>\""}]}], ")"}], "//",
          "stringer"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$ModelNotes", "=", 
        RowBox[{"MB$ModelNotes", "<>", "defaultNotes"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$Comments", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Global`comments", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"Global`comments", "\[Rule]", " ", "\"\<\>\""}]}], ")"}], "//",
          "stringer"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$Echo", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`echo", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`echo", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MB$Index", "[", "x_", "]"}], ":=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Dimensions", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$Level", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "Global`level", ")"}], "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`level", "\[Rule]", " ", "2"}], "}"}]}], "]"}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"MB$Version", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "Global`version", ")"}], "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`version", "\[Rule]", " ", "3"}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"MB$LevelVersion", "=", 
        RowBox[{"MB$Level", "<>", "\"\<.\>\"", "<>", "MB$Version"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "MB$Level", ",", "\[IndentingNewLine]", "\"\<2\>\"", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Switch", "[", 
           RowBox[{
           "MB$Version", ",", "\[IndentingNewLine]", "\"\<1\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "MB$xmlns", "=", "\"\<http://www.sbml.org/sbml/level2\>\""}], ",",
             "\[IndentingNewLine]", "\"\<2\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{
            "MB$xmlns", "=", 
             "\"\<http://www.sbml.org/sbml/level2/version2\>\""}], ",", 
            "\[IndentingNewLine]", "\"\<3\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{
            "MB$xmlns", "=", 
             "\"\<http://www.sbml.org/sbml/level2/version3\>\""}], ",", 
            "\[IndentingNewLine]", "\"\<4\>\"", ",", "\[IndentingNewLine]", 
            RowBox[{
            "MB$xmlns", "=", 
             "\"\<http://www.sbml.org/sbml/level2/version4\>\""}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: newModel: \>\"", "//", "boldRed"}], ",", 
               RowBox[{"\"\< SBML Level \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
               RowBox[{"\"\< Version \>\"", "//", "boldBlack"}], ",", 
               RowBox[{"MB$Version", "//", "boldBlue"}], ",", 
               RowBox[{"\"\< is not supported.\>\"", "//", "boldBlack"}]}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";"}], " ", ",", "\[IndentingNewLine]", "_", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\< SBML Level \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< is not currently supported by the model builder.\>\"", "//",
              "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"setModelAnnotation", "[", 
        RowBox[{"MIRIAMcreatorToSymbolicXML", "@@", "creator"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Model \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"MB$ID", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< initialized: SBML Level \>\"", "//", "boldGreen"}], 
           ",", " ", 
           RowBox[{"MB$Level", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< Version \>\"", "//", "boldGreen"}], ",", " ", 
           RowBox[{"MB$Version", "//", "boldBlue"}]}], "]"}]}], "]"}], 
       ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{
    "Print", "[", "\"\<Loading:newModel: newModel: default \>\"", "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"newModel", "[", 
     RowBox[{
      RowBox[{"x_", "?", "nonOptionQ"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"newModel", "[", 
     RowBox[{
      RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:newModel: modifyModel\>\"", "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modifyModel", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"id", ",", " ", "name", ",", " ", "val"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"id", "=", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "Global`id", ")"}], "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"name", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "Global`name", ")"}], "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`name", "\[Rule]", "\"\<\>\""}], "}"}]}], "]"}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"MB$ID", "=", "id"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"name", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"MB$Name", "=", "name"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"val", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`Arrays", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`Arrays", "\[Rule]", " ", 
           RowBox[{"ifArrays", "[", "]"}]}], "}"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"setArray", "[", "val", "]"}], ";", " ", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"val", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`ArraysAreAnnotations", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`ArraysAreAnnotations", "\[Rule]", " ", 
           RowBox[{"ifArraysAreAnnotations", "[", "]"}]}], "}"}]}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"setArraysAreAnnotations", "[", "val", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:newModel:showModel\>\"", "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"showModel", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "saveEcho"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"saveEcho", "=", "MB$Echo"}], ";", "\[IndentingNewLine]", 
       RowBox[{"m", "=", 
        RowBox[{"SBMLRead", "[", 
         RowBox[{
          RowBox[{"createSymbolicModel", "[", "]"}], ",", " ", "opt", ",", 
          " ", 
          RowBox[{"Global`evaluateParameters", "\[Rule]", " ", "False"}], ",",
           " ", 
          RowBox[{"Global`verbose", "\[Rule]", " ", "True"}], ",", " ", 
          RowBox[{"Global`return", "\[Rule]", "\"\<None\>\""}], ",", " ", 
          RowBox[{"Global`LoadModelBuilder", "\[Rule]", " ", "False"}], ",", 
          " ", 
          RowBox[{"Global`warnings", "\[Rule]", " ", "False"}]}], "]"}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"MB$Echo", "=", "saveEcho"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "m", "]"}], ";"}]}], " ", "\[IndentingNewLine]",
      "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:newModel:loadSimulator\>\"", "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"loadSimulator", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"echo", ",", "m", ",", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"echo", "=", "MB$Echo"}], ";", "\[IndentingNewLine]", 
       RowBox[{"m", "=", 
        RowBox[{"createSymbolicModel", "[", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dbg", " ", "=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Global`debug", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`debug", "\[Rule]", " ", "False"}], "}"}]}], 
         ")"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<loadSimulator: m(1)=\>\"", "//", "boldRed"}], ",", 
           RowBox[{"m", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<loadSimulator: {opt}=\>\"", "//", "boldRed"}], ",", 
           RowBox[{
            RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"m", "=", " ", 
        RowBox[{"SBMLRead", "[", 
         RowBox[{"m", ",", "opt", ",", " ", 
          RowBox[{"Global`verbose", "\[Rule]", " ", "False"}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<loadSimulator: m(2)=\>\"", "//", "boldRed"}], ",", 
           RowBox[{"m", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$Echo", "=", "echo"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "m", "]"}], ";"}]}], " ", "\[IndentingNewLine]",
      "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{
    "Print", "[", "\"\<Loading:newModel: loadModelBuilder\>\"", "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"loadModelBuilder", "[", 
   RowBox[{"file_", ",", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"echo", ",", "m"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"echo", " ", "=", " ", "MB$Echo"}], ";", "\[IndentingNewLine]", 
     RowBox[{"m", "=", 
      RowBox[{"SBMLRead", "[", 
       RowBox[{"file", ",", "  ", "opt", ",", 
        RowBox[{"Global`LoadModel", "\[Rule]", " ", "True"}], ",", 
        RowBox[{"Global`EchoLoad", "\[Rule]", " ", "True"}]}], "]"}]}], ";", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"MB$Echo", "=", "echo"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.38826707502134*^9, 3.3882671525339613`*^9}, {
  3.3882672831965847`*^9, 3.388267285631838*^9}, {3.388267371980341*^9, 
  3.388267372742361*^9}, {3.390200353889018*^9, 3.3902003871642447`*^9}, {
  3.390201214471198*^9, 3.3902012236579933`*^9}, {3.390202608755198*^9, 
  3.3902026092940693`*^9}, {3.5062162159325337`*^9, 3.506216235777669*^9}}],

Cell["Make sure newModel is executed at least once!", "Text"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"$$LoadBug", ",", " ", 
      RowBox[{"Print", "[", "\"\<setting Annotation\>\"", "]"}]}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"setModelAnnotation", "[", 
     RowBox[{"MIRIAMcreatorToSymbolicXML", "[", 
      RowBox[{
      "\"\<None Given\>\"", ",", "\"\<No Name Given\>\"", ",", 
       "\"\<no@email.address\>\"", ",", "\"\<Unspecified\>\""}], "]"}], "]"}],
     ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"$$LoadBug", ",", " ", 
      RowBox[{"Print", "[", "\"\<executing newModel\>\"", "]"}]}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newModel", "[", "\"\<temporary\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"$$LoadBug", ",", " ", 
      RowBox[{"Print", "[", "\"\<resetting MIRIAM\>\"", "]"}]}], "]"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"resetMIRIAMcreator", "[", "]"}], ";"}], "\[IndentingNewLine]", 
   " "}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3882671649330873`*^9, 3.3882671814220953`*^9}, {
  3.388267432666502*^9, 3.38826747016777*^9}, {3.3882675034797363`*^9, 
  3.388267537355051*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["dumpModel", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:dumpModel\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dumpModel", "[", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Functions=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Functions", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Units=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Units", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$CompartmentTypes=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$CompartmentTypes", "//", "boldBlack"}]}], "]"}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$SpeciesTypes=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$SpeciesTypes", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Compartments=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Compartments", "//", "boldBlack"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Species=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Species", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$UnitsOfTheSpecies=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$UnitsOfTheSpecies", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Parameters=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Parameters", "//", "boldBlack"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$InitialAssignments=\>\"", "//", "boldRed"}], ",", 
         " ", 
         RowBox[{"MB$InitialAssignments", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Rules=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Rules", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Reactions=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Reactions", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Events=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Events", "//", "boldBlack"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$ID=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$ID", "//", "boldBlack"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$MetaID=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$MetaID", "//", "boldBlack"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$Name=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$Name", "//", "boldBlack"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$ModelNotes=\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"MB$ModelNotes", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$SBMLNotes=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$SBMLNotes", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$ModelAnnotation=\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"MB$ModelAnnotation", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$SBMLAnnotation=\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"MB$SBMLAnnotation", "//", "boldBlack"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$functioncounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$functioncounter", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$unitcounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$unitcounter", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$compartmentcounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$compartmentcounter", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$speciescounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$speciescounter", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$variablecounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$variablecounter", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$parametercounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$parametercounter", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$rulecounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$rulecounter", "//", "boldBlack"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$reactioncounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$reactioncounter", "//", "boldBlack"}]}], "]"}], ";", " ",
        "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<MB$eventcounter=\>\"", "//", "boldRed"}], ",", 
         RowBox[{"MB$eventcounter", "//", "boldBlack"}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}], 
  " "}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["createModel, createSymbolicModel", "Subsubsection"],

Cell["\<\
removeEmptyStandardElements replaces <sbmltag/> with <!-- <sbmltag/ --> for \
specific tags\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"removeEmptyStandardElements", "[", "s_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"sbmlStandardElements", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<listOfFunctionDefinitions\>\"", ",", 
         "\"\<listOfUnitDefinitions\>\"", ",", "\"\<listOfCompartments\>\"", 
         ",", "\"\<listOfCompartmentTypes\>\"", ",", " ", 
         "\"\<listOfSpeciesTypes\>\"", ",", "\"\<listOfSpecies\>\"", ",", 
         "\"\<listOfParameters\>\"", ",", "\"\<listOfInitialAssignments\>\"", 
         ",", "\"\<listOfReactions\>\"", ",", "\"\<listOfRules\>\"", ",", 
         "\"\<listOfConstraints\>\"", ",", "\"\<listOfEvents\>\"", ",", 
         "\"\<listOfReactants\>\"", ",", "\"\<listOfProducts\>\"", ",", 
         "\"\<listOfModifiers\>\"", ",", " ", "\"\<notes\>\""}], "}"}]}], ",",
       "sr", ",", "r"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"sr", "[", "x_", "]"}], ":=", " ", 
      RowBox[{"ToString", "[", 
       RowBox[{"XMLOut", "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"x", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Rule", "[", 
         RowBox[{
          RowBox[{"sr", "[", "#", "]"}], ",", 
          RowBox[{"\"\<<!-- \>\"", "<>", 
           RowBox[{"sr", "[", "#", "]"}], "<>", " ", "\"\< -->\>\""}]}], 
         "]"}], "&"}], "/@", "sbmlStandardElements"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"s", ",", "r"}], "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"createModel", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"SBML", ",", " ", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"createSymbolicModel", "[", "opt", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<createModel:\>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"\"\<SBML: \>\"", "//", "boldBlue"}], ",", " ", 
          RowBox[{"SBML", "//", "boldBlack"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"postprocess", "[", "SBML", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<createModel:\>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"\"\<SBML (postprocessed): \>\"", "//", "boldBlue"}], ",", 
          " ", 
          RowBox[{"SBML", "//", "boldBlack"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBML", "=", 
       RowBox[{"ExportXMLString", "[", "SBML", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<createModel:\>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"\"\<SBML (Exported): \>\"", "//", "boldBlue"}], ",", " ", 
          RowBox[{"SBML", "//", "boldBlack"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\"\<RemoveEmptySBML\>\"", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"\"\<RemoveEmptySBML\>\"", "\[Rule]", " ", "True"}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SBML", "=", 
          RowBox[{"removeEmptyStandardElements", "[", "SBML", "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"sunderscore", "[", "SBML", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"fixMathematicaENotation", "[", "SBML", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"createModel", "[", 
    RowBox[{
     RowBox[{"fileName_", "?", "StringQ"}], ",", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "f"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"f", "=", 
       RowBox[{"validateOutputFileName", "[", "fileName", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"f", "\[NotEqual]", " ", "\"\<$Failed\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"s", " ", "=", " ", 
          RowBox[{"createModel", "[", "opt", "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"s", "=", 
          RowBox[{"Export", "[", 
           RowBox[{"f", ",", "s", ",", "\"\<text\>\""}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSBMLModel", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"createModel", "[", "x", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"createSymbolicModel", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "functions", ",", "units", ",", " ", "compartments", ",", " ", 
       "species", ",", " ", "parameters", ",", " ", "rules", ",", " ", 
       "reactions", ",", " ", "events", ",", " ", "SBML", ",", "notes", ",", 
       "preface", ",", "comments", ",", "speciesTypes", ",", 
       "compartmentTypes", ",", 
       RowBox[{"dbg", "=", "False"}], ",", "sub", ",", "inline", ",", " ", 
       "initialAssignments", ",", " ", "includeAnnotations", ",", " ", 
       "includeNotes", ",", " ", "includeComments", ",", " ", "stuff"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"includeAnnotations", " ", "=", " ", 
       RowBox[{
        RowBox[{"\"\<annotations\>\"", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"\"\<annotations\>\"", "\[Rule]", " ", "True"}], "}"}]}]}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"includeNotes", "=", 
       RowBox[{
        RowBox[{"\"\<notes\>\"", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "True"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"includeComments", "=", 
       RowBox[{
        RowBox[{"\"\<comments\>\"", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"\"\<comments\>\"", "\[Rule]", " ", "True"}], "}"}]}]}], ";",
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"functions", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfFunctionDefinitions\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$Functions"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"units", " ", "=", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfUnitDefinitions\>\"", ",", 
         RowBox[{"{", "}"}], ",", " ", 
         RowBox[{"Last", "/@", "MB$Units"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"compartments", "=", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfCompartments\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$Compartments"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"speciesTypes", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfSpeciesTypes\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$SpeciesTypes"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"compartmentTypes", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfCompartmentTypes\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$CompartmentTypes"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"species", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfSpecies\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$Species"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"parameters", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfParameters\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$Parameters"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"initialAssignments", "=", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfInitialAssignments\>\"", ",", " ", 
         RowBox[{"{", "}"}], ",", " ", 
         RowBox[{"Last", "/@", "MB$InitialAssignments"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rules", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfRules\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$Rules"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"constraints", "=", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfConstraints\>\"", ",", 
         RowBox[{"{", "}"}], ",", "MB$Constraints"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reactions", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfReactions\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"Last", "/@", "MB$Reactions"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"events", " ", "=", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<listOfEvents\>\"", ",", 
         RowBox[{"{", "}"}], ",", " ", 
         RowBox[{"Last", "/@", "MB$Events"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<createSymbolicModel:MB$ModelNotes:\>\"", ",", 
           "MB$ModelNotes"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"MB$ModelNotes", "\[NotEqual]", " ", "\"\<\>\""}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"following", " ", "line", " ", "fixed", " ", "2.3", ".22"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"notes", "=", 
       RowBox[{"stringToNotes", "[", 
        RowBox[{
         RowBox[{"{", "MB$ModelNotes", "}"}], "//", "Flatten"}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<createSymbolicModel:MB$ModelNotes:\>\"", ",", 
           "MB$ModelNotes"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<createSymbolicModel:notes:\>\"", ",", "notes"}], "]"}],
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"sub", "=", 
       RowBox[{"{", 
        RowBox[{"functions", ",", "units"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", " ", "]"}], ">", 
         "2.15"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"sub", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"sub", ",", "compartmentTypes"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", " ", "]"}], ">", 
         "2.15"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"sub", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"sub", ",", "speciesTypes"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sub", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"sub", ",", " ", 
         RowBox[{"{", 
          RowBox[{"compartments", ",", " ", "species", ",", "parameters"}], 
          " ", "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", " ", "]"}], ">", 
         "2.15"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"sub", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"sub", ",", "initialAssignments"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"sub", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"sub", ",", " ", 
         RowBox[{"{", "rules", " ", "}"}]}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToExpression", "[", "MB$LevelVersion", " ", "]"}], ">", 
         "2.15"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"sub", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"sub", ",", "constraints"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sub", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"sub", ",", " ", 
         RowBox[{"{", 
          RowBox[{"reactions", ",", " ", "events"}], " ", "}"}]}], "]"}]}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"inline", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<id\>\"", "\[Rule]", 
          RowBox[{"stringer", "[", "MB$ID", "]"}]}], ",", " ", 
         RowBox[{"\"\<name\>\"", "\[Rule]", " ", 
          RowBox[{"stringer", "[", "MB$Name", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MB$MetaID", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"inline", ",", 
          RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", 
           RowBox[{"stringer", "[", "MB$MetaID", "]"}]}]}], "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"includeAnnotations", ",", " ", 
        RowBox[{"sub", "=", 
         RowBox[{"Join", "[", " ", 
          RowBox[{"MB$ModelAnnotation", ",", " ", "sub"}], "]"}]}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"includeNotes", ",", " ", 
        RowBox[{"sub", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"notes", ",", " ", "sub"}], "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<model\>\"", ",", "inline", ",", " ", "sub"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"{", "SBML", "}"}]}], ";", " ", "\[IndentingNewLine]", " ", 
      RowBox[{"If", "[", 
       RowBox[{"includeAnnotations", ",", " ", 
        RowBox[{"SBML", "=", 
         RowBox[{"Join", "[", " ", 
          RowBox[{"MB$SBMLAnnotation", ",", " ", "SBML"}], "]"}]}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", " ", 
      RowBox[{"If", "[", 
       RowBox[{"includeNotes", ",", " ", 
        RowBox[{"SBML", "=", 
         RowBox[{"Join", "[", " ", 
          RowBox[{"MB$SBMLNotes", ",", " ", "SBML"}], "]"}]}]}], "]"}], ";", 
      " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{"XMLElement", "[", 
        RowBox[{"\"\<sbml\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<xmlns\>\"", "\[Rule]", " ", "MB$xmlns"}], ",", " ", 
           RowBox[{"\"\<level\>\"", "\[Rule]", " ", "MB$Level"}], ",", " ", 
           RowBox[{"\"\<version\>\"", "\[Rule]", " ", "MB$Version"}]}], "}"}],
          ",", "SBML"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"includeComments", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"preface", " ", "=", " ", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"XMLObject", "[", "\"\<Declaration\>\"", "]"}], "[", 
             RowBox[{
              RowBox[{"\"\<Version\>\"", "\[Rule]", "\"\<1.0\>\""}], ",", 
              RowBox[{"\"\<Encoding\>\"", "\[Rule]", "\"\<UTF-8\>\""}]}], 
             "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"XMLObject", "[", "\"\<Comment\>\"", "]"}], "[", 
             RowBox[{"\"\< Generated \>\"", "<>", 
              RowBox[{"now", "[", "]"}], "<>", "\"\< \>\""}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"XMLObject", "[", "\"\<Comment\>\"", "]"}], "[", 
             RowBox[{
             "\"\< Generated by MathSBML \>\"", "<>", "$MathSBML$Version", 
              "<>", "\"\< \>\""}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"XMLObject", "[", "\"\<Comment\>\"", "]"}], "[", 
             RowBox[{
             "\"\< Generated using Mathematica Version \>\"", "<>", 
              "$Version", "<>", "\"\< \>\""}], " ", "]"}]}], 
           "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MB$Comments", "==", "\"\<\>\""}], ",", 
           RowBox[{"comments", "=", 
            RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"comments", "=", 
             RowBox[{
              RowBox[{"XMLObject", "[", "\"\<Comment\>\"", "]"}], "[", 
              "MB$Comments", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"preface", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"preface", ",", "comments"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"preface", " ", "=", " ", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"XMLObject", "[", "\"\<Declaration\>\"", "]"}], "[", 
            RowBox[{
             RowBox[{"\"\<Version\>\"", "\[Rule]", "\"\<1.0\>\""}], ",", 
             RowBox[{"\"\<Encoding\>\"", "\[Rule]", "\"\<UTF-8\>\""}]}], 
            "]"}], "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SBML", " ", "=", " ", 
       RowBox[{
        RowBox[{"XMLObject", "[", "\"\<Document\>\"", "]"}], "[", 
        RowBox[{"preface", ",", "SBML", ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<createSymbolicModel: SBML: \>\"", ",", " ", "SBML"}], 
         "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getModel", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"createSymbolicModel", "[", "x", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389721073103292*^9, 3.389721073614043*^9}, {
   3.3897211269844007`*^9, 3.389721145979548*^9}, {3.3897212017465467`*^9, 
   3.389721284216407*^9}, {3.389721817742724*^9, 3.389721835997553*^9}, {
   3.3897225943086433`*^9, 3.389722595166648*^9}, {3.3957574586352453`*^9, 
   3.3957576185753202`*^9}, {3.395757796447761*^9, 3.395757982195806*^9}, {
   3.395758057521371*^9, 3.395758064723207*^9}, {3.39575817066259*^9, 
   3.395758173983656*^9}, {3.395758219212161*^9, 3.395758261861205*^9}, {
   3.395758312127166*^9, 3.395758319218895*^9}, {3.395758403941947*^9, 
   3.395758450807625*^9}, {3.39575849532406*^9, 3.395758498567463*^9}, {
   3.3957585418387623`*^9, 3.395758645727363*^9}, {3.395758698643879*^9, 
   3.3957587703165503`*^9}, 3.395758808134729*^9, {3.3960108569123573`*^9, 
   3.396010875740715*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["retrieveSBMLObject", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"retrieveSBMLObject", "[", 
     RowBox[{
      RowBox[{"type_", "?", "StringQ"}], ",", 
      RowBox[{"id_", "?", "StringQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"data", ",", " ", "c", ",", "p", ",", "x"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"data", " ", "=", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "type", ",", "\[IndentingNewLine]", "\"\<function\>\"", ",", " ", 
          "MB$Functions", ",", "\[IndentingNewLine]", "\"\<unit\>\"", ",", 
          "MB$Units", ",", "\[IndentingNewLine]", "\"\<compartment\>\"", ",", 
          "MB$Compartments", ",", "\[IndentingNewLine]", 
          "\"\<compartmentType\>\"", ",", "MB$CompartmentTypes", ",", 
          "\[IndentingNewLine]", "\"\<species\>\"", ",", "MB$Species", ",", 
          "\[IndentingNewLine]", "\"\<speciesType\>\"", ",", 
          "MB$SpeciesTypes", ",", "\[IndentingNewLine]", "\"\<parameter\>\"", 
          ",", "MB$Parameters", ",", "\[IndentingNewLine]", 
          "\"\<initialAssignment\>\"", ",", " ", "MB$InitialAssignments", ",",
           "\[IndentingNewLine]", "\"\<rule\>\"", ",", "MB$Rules", ",", 
          "\[IndentingNewLine]", "\"\<reaction\>\"", ",", "MB$Reactions", ",",
           "\[IndentingNewLine]", "\"\<event\>\"", ",", "MB$Events", ",", 
          "\[IndentingNewLine]", "_", ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
             RowBox[{"\"\<retrieveSBMLObject \>\"", "//", "boldBlack"}], ",", 
             RowBox[{"\"\< type = \>\"", "//", "boldBlack"}], ",", " ", 
             RowBox[{"type", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< unknown.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"c", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{"First", ",", "data"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"c", ",", "id"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "=", 
           RowBox[{"Position", "[", 
            RowBox[{"c", ",", "id"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{"ListQ", "[", "p", "]"}], ",", " ", 
            RowBox[{"p", "=", 
             RowBox[{"First", "[", "p", "]"}]}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"x", "=", 
           RowBox[{"Last", "[", 
            RowBox[{"data", "[", 
             RowBox[{"[", "p", "]"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "x", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " "}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["globalize", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"globalize", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", " ", 
   RowBox[{"Rule", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"contextify", "[", 
       RowBox[{"a", ",", "\"\<Global\>\""}], "]"}], "//", "ToExpression"}], 
     ",", "b"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"globalize", "[", 
    RowBox[{"{", "x_", "}"}], "]"}], ":=", " ", 
   RowBox[{"globalize", "/@", 
    RowBox[{"{", "x", "}"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"globalize", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"contextify", "[", 
    RowBox[{
     RowBox[{"decontextify", "[", "x", "]"}], ",", "Global"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["extractAndUpdateXMLOptions", "Subsubsection"],

Cell["\<\
Given an XMLElement[x,{xmloptions},stuff] and a second option list opt,
create a new option list by putting the list \"opt\" in front of \"xmloptions\
\" and making everything in the Global` context.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"extractAndUpdateXMLOptions", "[", 
     RowBox[{
      RowBox[{"XMLElement", "[", "x___", "]"}], ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "y", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"y", "=", 
        RowBox[{"extractXMLOptions", "[", 
         RowBox[{"XMLElement", "[", "x", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"y", " ", "=", " ", 
        RowBox[{"stringrule", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opt", "}"}], ",", "y"}], "]"}], "//", "Flatten"}], 
          ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "y", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell["reactionToSBML, add/remove/modifyReaction", "Subsubsection"],

Cell[CellGroupData[{

Cell["getReaction", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getReaction", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$Reactions", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getReaction: \>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\< Reaction: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< reaction definitions.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$Reactions", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getReactionNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Reactions"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Error: getReactionNumber: \>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\<Reaction: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid reactions are \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getReaction", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getReactionNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{
           RowBox[{"MB$Reactions", "[", 
            RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
     " ", "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getReaction", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getReaction", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getReaction", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: getReaction: \>\"", "//", "boldOrange"}], ",", 
         " ", 
         RowBox[{"\"\<Correct format is \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getReaction[id]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\< where id is an integer or an SID \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"\"\<getReaction[Integer]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<getReaction[{x1,x2,...}]\>\"", "//", "boldRed"}], ",", 
         RowBox[{
         "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
          "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfReactions", "[", "]"}], ":=", " ", 
   RowBox[{"Length", "[", "MB$Reactions", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getReactions", "[", "]"}], ":=", " ", 
   RowBox[{"getReaction", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"getNumberOfReactions", "[", "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceReaction", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceReaction", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<reaction\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Reactions", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<reaction\>\"", ",", "x"}], "]"}]}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Reactions", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MB$Reactions", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Reactions", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<reaction\>\"", ",", "x"}], "]"}]}], ",", "i"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Reaction \>\"", ",", "i", ",", " ", "\"\< replaced.\>\""}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceReaction: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{"\"\< unable to replace reaction \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceReaction", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<reaction\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getReactionNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceReaction", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<reaction\>\"", ",", "x"}], "]"}]}], "]"}], ";", " ",
           "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceReaction: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{"\"\< unable to replace reaction \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceReaction", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Print", "[", 
     RowBox[{
      RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
      RowBox[{"\"\<replaceReaction: \>\"", "//", "boldRed"}], ",", " ", 
      RowBox[{
      "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
      ",", 
      RowBox[{"\"\<replaceReaction[\>\"", "//", "boldBlack"}], ",", 
      RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
      RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
      RowBox[{
      "\"\< XMLElement[\\\"reaction\\\",...]\>\"", "//", "boldBlack"}], ",", 
      RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["reactionToSBML", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"reactionToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "SBML", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SBML", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"reactionToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"SBML", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfReactions\>\"", ",", 
           RowBox[{"{", "}"}], ",", "SBML"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"SBML", "=", 
         RowBox[{"ExportXMLString", "[", "SBML", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"SBML", " ", "=", " ", 
         RowBox[{"sunderscore", "[", "SBML", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"SBML", "=", 
         RowBox[{"fixMathematicaENotation", "[", "SBML", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"reactionToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"reactionToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"fixMathematicaENotation", "[", "r", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"reactionToSBML", "[", 
      RowBox[{"reaction_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"reactionToSBML", "[", 
      RowBox[{
       RowBox[{"Global`reaction", "\[Rule]", " ", "reaction"}], ",", " ", 
       "opt"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"reactionToSBML", "[", "x___", "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"boldRed", "[", "\"\<Error:\>\"", "]"}], ",", " ", 
       RowBox[{
       "boldBlack", "[", 
        "\"\<The argument to reactionToSBML must be a sequence of \
options.\>\"", "]"}]}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389721850972513*^9, 3.389721876949479*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["deleteReaction, removeReaction", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteReaction", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//", 
        "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteReaction\>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< was specified.\>\"", "//", "boldBlack"}]}], "]"}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", " ", "\"\<reaction\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$Reactions"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$Reactions", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$Reactions", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteReaction", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteReaction", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeReaction", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteReaction", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Reaction \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\<removeReaction:Requested reaction \>\"", "//", "boldBlack"}], 
          ",", 
          RowBox[{"MB$Currentid", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\< does not exist. No removal peformed.\>\"", "//", 
           "boldBlack"}]}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["checkKineticLaw", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"checkKineticLaw", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dbg", ",", "klaw", ",", "parameters", ",", " ", "reaction", ",", 
       "modifiers", ",", " ", "reactants", ",", "products", ",", "species", 
       ",", "compartments", ",", "GlobalParameters", ",", "functions", ",", 
       " ", "missingSpecies", ",", "xml", ",", "myXMLElement", ",", "syms", 
       ",", "undefinedSymbols", ",", "undefinedSpecies", ",", 
       "definedSymbols", ",", " ", "undefinedModifiers", ",", "id", ",", " ", 
       "caller", ",", " ", "allSpeciesReferenced", " ", ",", " ", "csymbols", 
       ",", "math", ",", " ", "csymbolsInFormula"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"caller", "=", 
       RowBox[{
        RowBox[{"invokedBy", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"invokedBy", "\[Rule]", " ", "\"\<Unknown\>\""}], "}"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"dbg", "=", 
       RowBox[{
        RowBox[{"Global`debug", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"dbg", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"csymbolsInFormula", " ", "=", " ", 
       RowBox[{
        RowBox[{"csymbolsused", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"csymbolsused", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "get", " ", "parameters", " ", "and", " ", "then", " ", "convert", 
         " ", "to", " ", "just", " ", "parameter", " ", "ids"}], ",", " ", 
        RowBox[{"not", " ", "values"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"id", "=", 
       RowBox[{"stringer", "[", 
        RowBox[{
         RowBox[{"Global`id", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`id", "\[Rule]", " ", "\"\<ID_unassigned\>\""}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", " ", "\"\<checkKineticLaw: id\>\"", ",", "id"}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"parameters", "=", 
       RowBox[{
        RowBox[{"Global`parameters", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`parameters", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"parameters", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"List", "[", "#", "]"}], "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"parameters", "/.", 
          RowBox[{"{", 
           RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"parameters", " ", "=", 
       RowBox[{"stringer", "/@", 
        RowBox[{"(", " ", 
         RowBox[{"First", "/@", "parameters"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"klaw", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`kineticLaw", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`kineticLaw", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionQ", "[", "klaw", "]"}], ",", 
        RowBox[{"klaw", "=", 
         RowBox[{
          RowBox[{"Global`math", "/.", "klaw"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`math", "\[Rule]", " ", 
            RowBox[{"{", "}"}]}], "}"}]}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"reaction", "=", 
       RowBox[{
        RowBox[{"Global`reaction", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`reaction", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"modifiers", "=", 
       RowBox[{
        RowBox[{"Global`modifiers", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`modifiers", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkKineticLaw: reaction \>\"", ",", 
        "reaction"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkKineticLaw: caller \>\"", ",", "caller"}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ListQ", "[", "reaction", "]"}], "\[And]", " ", 
         RowBox[{
          RowBox[{"Length", "[", "reaction", "]"}], "\[Equal]", "0"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reactants", "=", 
          RowBox[{
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"Global`reactants", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`reactants", "\[Rule]", " ", 
               RowBox[{"{", "}"}]}], "}"}]}], "]"}], "//", "Flatten"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"products", "=", 
          RowBox[{
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"Global`products", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`products", "\[Rule]", " ", 
               RowBox[{"{", "}"}]}], "}"}]}], "]"}], "//", "Flatten"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<checkKineticLaw: products(1)\>\"", ",", 
           "products"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"reactants", "\[Equal]", 
             RowBox[{"{", "}"}]}], " ", "\[And]", 
            RowBox[{"products", "\[Equal]", 
             RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"reaction", "=", 
             RowBox[{"First", "[", 
              RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"SameQ", "[", 
                RowBox[{
                 RowBox[{"Head", "[", "reaction", "]"}], ",", "Rule"}], 
                "]"}]}], ",", " ", 
              RowBox[{
              "Print", "[", "\"\<Error: unknown form for reaction.\>\"", 
               "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"debugPrint", "[", 
             RowBox[{
             "dbg", ",", "\"\<checkKineticLaw: reaction\>\"", ",", 
              "reaction"}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"reactants", ",", " ", "products"}], "}"}], "=", 
             RowBox[{"(", 
              RowBox[{"reaction", "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Rule", "\[Rule]", " ", "List"}], ",", " ", 
                 RowBox[{"Plus", "\[Rule]", " ", "List"}], ",", " ", 
                 RowBox[{"Times", "\[Rule]", " ", "List"}]}], "}"}]}], 
              ")"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"reactants", ",", " ", "products"}], "}"}], "=", 
             RowBox[{"Flatten", "/@", 
              RowBox[{"List", "/@", 
               RowBox[{"{", 
                RowBox[{"reactants", ",", " ", "products"}], "}"}]}]}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"reactants", "=", 
             RowBox[{"Select", "[", 
              RowBox[{"reactants", ",", " ", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"NumberQ", "[", "#", "]"}]}], "&"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"products", "=", 
             RowBox[{"Select", "[", 
              RowBox[{"products", ",", " ", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"NumberQ", "[", "#", "]"}]}], "&"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"reactants", "=", 
               RowBox[{"First", "[", "reaction", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"products", "=", 
               RowBox[{"Last", "[", "reaction", "]"}]}], ";"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"debugPrint", "[", 
             RowBox[{
             "dbg", ",", "\"\<checkKineticLaw: products(2a)\>\"", ",", 
              "products"}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"debugPrint", "[", 
             RowBox[{
             "dbg", ",", "\"\<checkKineticLaw: reactants(2a)\>\"", ",", 
              "reactants"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<checkKineticLaw: products(2b)\>\"", ",", 
           "products"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<checkKineticLaw: reactants(2b)\>\"", ",", 
           "reactants"}], "]"}], ";"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{"Head", "[", "reaction", "]"}], ",", " ", "Rule"}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"reactants", ",", " ", "products"}], "}"}], "=", 
             RowBox[{"(", 
              RowBox[{"reaction", "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Rule", "\[Rule]", " ", "List"}], ",", " ", 
                 RowBox[{"Plus", "\[Rule]", " ", "List"}], ",", " ", 
                 RowBox[{"Times", "\[Rule]", " ", "List"}]}], "}"}]}], 
              ")"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"reactants", ",", " ", "products"}], "}"}], "=", 
             RowBox[{"Flatten", "/@", 
              RowBox[{"List", "/@", 
               RowBox[{"{", 
                RowBox[{"reactants", ",", " ", "products"}], "}"}]}]}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"reactants", "=", 
             RowBox[{"Select", "[", 
              RowBox[{"reactants", ",", " ", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"NumberQ", "[", "#", "]"}]}], "&"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"products", "=", 
             RowBox[{"Select", "[", 
              RowBox[{"products", ",", " ", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"NumberQ", "[", "#", "]"}]}], "&"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"debugPrint", "[", 
             RowBox[{
             "dbg", ",", "\"\<checkKineticLaw: products(2c)\>\"", ",", 
              "products"}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"debugPrint", "[", 
             RowBox[{
             "dbg", ",", "\"\<checkKineticLaw: reactants(2c)\>\"", ",", 
              "reactants"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<checkKineticLaw: products(2d)\>\"", ",", 
           "products"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<checkKineticLaw: reactants(2d)\>\"", ",", 
           "reactants"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: products(3)\>\"", ",", "products"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkKineticLaw: caller: \>\"", ",", " ", 
        "caller"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkKineticLaw: First/@MB$Species: \>\"", ",", 
        " ", 
        RowBox[{"First", "/@", "MB$Species"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"caller", "\[Equal]", "\"\<getReaction\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"species", "=", 
          RowBox[{"decontextify", "/@", 
           RowBox[{"stringer", "/@", "$SBML$Species$IDs"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"compartments", "=", 
          RowBox[{"decontextify", "/@", 
           RowBox[{"stringer", "/@", "$SBML$Compartmentids"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"GlobalParameters", "=", 
          RowBox[{"decontextify", "/@", 
           RowBox[{"stringer", "/@", "SBMLGlobalParameters"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"functions", "=", 
          RowBox[{"decontextify", "/@", 
           RowBox[{"stringer", "/@", 
            RowBox[{"First", "/@", "$SBML2$Functions"}]}]}]}]}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"species", "=", 
          RowBox[{"First", "/@", "MB$Species"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"compartments", "=", 
          RowBox[{"First", "/@", "MB$Compartments"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"GlobalParameters", "=", 
          RowBox[{"First", "/@", "MB$Parameters"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"functions", "=", 
          RowBox[{"First", "/@", "MB$Functions"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: products\>\"", ",", "products"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"reactants", "=", 
       RowBox[{"stringer", "/@", 
        RowBox[{"Flatten", "[", 
         RowBox[{"List", "[", "reactants", "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"products", "=", 
       RowBox[{"stringer", "/@", 
        RowBox[{"Flatten", "[", 
         RowBox[{"List", "[", "products", "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"modifiers", "=", 
       RowBox[{"stringer", "/@", 
        RowBox[{"Flatten", "[", 
         RowBox[{"List", "[", "modifiers", "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allSpeciesReferenced", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
        "reactants", ",", " ", "products", " ", ",", " ", "modifiers"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<checkKineticLaw: opt\>\"", ",", 
        RowBox[{"{", "opt", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<checkKineticLaw: klaw(1)\>\"", ",", "klaw"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: parameters\>\"", ",", "parameters"}],
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: reactants\>\"", ",", "reactants"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: products\>\"", ",", "products"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: modifiers\>\"", ",", "modifiers"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: species\>\"", ",", "species"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: allSpeciesReferenced\>\"", ",", 
        "allSpeciesReferenced"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: compartments\>\"", ",", 
        "compartments"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: GlobalParameters\>\"", ",", 
        "GlobalParameters"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: functions\>\"", ",", "functions"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"reaction", "=", 
       RowBox[{"Rule", "[", 
        RowBox[{
         RowBox[{"Plus", "@@", "reactants"}], ",", 
         RowBox[{"Plus", "@@", "products"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "modifiers", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"reaction", "=", 
          RowBox[{"System`Overscript", "[", 
           RowBox[{"reaction", ",", "modifiers"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: reaction(2)\>\"", ",", "reaction"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"\"\< the global parameter \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"#", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< has been referenced in the reaction \>\"", "//", 
           "boldBlack"}], ",", 
          RowBox[{"id", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< = \>\"", "//", "boldBlack"}], ",", " ", 
          RowBox[{"reaction", "//", "boldBlue"}], " ", ",", " ", 
          RowBox[{"\"\< as a species.\>\"", "//", "boldBlack"}]}], "]"}], 
        "&"}], "/@", 
       RowBox[{"Intersection", "[", 
        RowBox[{"allSpeciesReferenced", ",", " ", "GlobalParameters"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"missingSpecies", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"allSpeciesReferenced", ",", "species"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "this", " ", "line", " ", "checks", " ", "for", " ", "species", " ", 
        "that", " ", "are", " ", "declared", " ", "in", " ", "the", " ", 
        "reaction", " ", "but", " ", "not", " ", "in", " ", "the", " ", 
        "model"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: checkKineticLaw: \>\"", "//", "boldRed"}], 
          ",", 
          RowBox[{"\"\< the species \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"#", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is referenced in the reaction \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"id", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< = \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"reaction", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< but has not been previously defined.\>\"", "//", 
           "boldBlack"}]}], "]"}], "&"}], "/@", "missingSpecies"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"caller", "==", "\"\<addReaction\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"addSpecies", "[", 
             RowBox[{"Global`id", "\[Rule]", " ", "#"}], "]"}], "&"}], ",", 
           "  ", "missingSpecies"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "need", " ", "to", " ", "redefined", " ", "species", " ", "because",
            " ", "it", " ", "may", " ", "have", " ", "changed"}], " ", "*)"}],
          "\[IndentingNewLine]", " ", 
         RowBox[{"species", "=", 
          RowBox[{"First", "/@", "MB$Species"}]}], ";"}]}], "  ", 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "now", " ", "check", " ", "for", " ", "species", " ", "that", " ", 
        "are", " ", "referenced", " ", "in", " ", "the", " ", "kinetic", " ", 
        "law", " ", "but", " ", "are", " ", "not", " ", "declared", " ", "as",
         " ", "modifiers"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<checkKineticLaw: klaw(2)\>\"", ",", "klaw"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkKineticLaw: csymbolsInFormula: \>\"", ",", 
        " ", "csymbolsInFormula"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"csymbols", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"FullForm", "[", "klaw", "]"}], ",", 
           RowBox[{"MyAngleBracket", "[", 
            RowBox[{"_", ",", "\"\<time\>\""}], "]"}], ",", "Infinity"}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"FullForm", "[", "klaw", "]"}], ",", 
           RowBox[{
            RowBox[{"MyAngleBracket", "[", 
             RowBox[{"_", ",", "\"\<delay\>\""}], "]"}], "[", 
            RowBox[{"_", ",", "_"}], "]"}], ",", "Infinity"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", "ANG", "}"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"ANG", "[", 
           RowBox[{"x_", ",", "\"\<time\>\""}], "]"}], ":=", " ", "x"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"ANG", "[", 
            RowBox[{"x_", ",", " ", "\"\<delay\>\""}], "]"}], "[", 
           RowBox[{"_", ",", " ", "_"}], "]"}], ":=", " ", "x"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"csymbols", "=", 
          RowBox[{"csymbols", "/.", 
           RowBox[{"{", 
            RowBox[{"MyAngleBracket", "\[Rule]", " ", "ANG"}], "}"}]}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"csymbols", ",", " ", "MyAngleBracket"}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"csymbols", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"First", "/@", 
            RowBox[{"(", 
             RowBox[{"csymbols", "/.", 
              RowBox[{"{", 
               RowBox[{"Global`AngleBracket", "\[Rule]", " ", "List"}], 
               "}"}]}], ")"}]}], ",", "Global`AngleBracket"}], "]"}]}], ";"}],
        " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"csymbols", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"stringer", "/@", "csymbols"}], ",", 
         RowBox[{"stringer", "/@", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", "csymbolsInFormula", "}"}], "]"}]}]}], " ", "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: csymbols\>\"", ",", "csymbols"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"xml", "=", 
       RowBox[{"Xpression2SymbolicMathML", "[", "klaw", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"math", "=", "xml"}], ";", "\[IndentingNewLine]", 
      RowBox[{"xml", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"xml", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<ci\>\"", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "_", "}"}]}], "]"}], ",", "Infinity"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<checkKineticLaw: xml\>\"", ",", "xml"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myXMLElement", "[", 
        RowBox[{"\"\<ci\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "\"\<t\>\"", "}"}]}], "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myXMLElement", "[", 
        RowBox[{"\"\<ci\>\"", ",", 
         RowBox[{"{", "}"}], ",", " ", 
         RowBox[{"{", "x_", "}"}]}], "]"}], ":=", " ", "x"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myXMLElement", "[", "x___", "]"}], ":=", " ", 
       "\"\<XMLFormatError\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"syms", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"xml", "/.", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "\[Rule]", " ", "myXMLElement"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<checkKineticLaw: syms\>\"", ",", "syms"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"definedSymbols", "=", 
       RowBox[{"defunctionate", "/@", 
        RowBox[{"Join", "[", 
         RowBox[{
         "parameters", ",", "  ", "species", ",", " ", "compartments", ",", 
          " ", "functions", ",", " ", "GlobalParameters", ",", " ", 
          "csymbols"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkKineticLaw: definedSymbols\>\"", ",", " ", 
        "definedSymbols"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       StyleBox[
        RowBox[{
        "this", " ", "gives", " ", "all", " ", "symbols", " ", "that", " ", 
         "are", " ", "not", " ", "declared"}],
        FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"undefinedSymbols", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"syms", ",", " ", "definedSymbols"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: undefinedSymbols\>\"", ",", 
        "undefinedSymbols"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: checkKineticLaw: \>\"", "//", "boldRed"}], 
          ",", 
          RowBox[{"\"\< the symbol \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"#", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is referenced in the kinetic law \>\"", "//", "boldBlack"}], 
          ",", " ", 
          RowBox[{"klaw", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< for reaction \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"id", "//", "boldBlue"}], ",", "\"\< = \>\"", ",", 
          RowBox[{"reaction", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< but has not been defined in the model.\>\"", "//", 
           "boldBlack"}]}], "]"}], "&"}], "/@", "undefinedSymbols"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "this", " ", "gives", " ", "all", " ", "objects", " ", "that", " ", 
        "are", " ", "used", " ", "as", " ", "species", " ", "but", " ", "are",
         " ", "not", " ", "defined"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"undefinedSpecies", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{"modifiers", ",", "reactants", ",", " ", "products"}], 
          "]"}], ",", "species"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: undefinedSpecies\>\"", ",", 
        "undefinedSpecies"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\< the species \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"#", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< is referenced in reaction \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< but has not been previously defined as a species in the \
model.\>\"", "//", "boldBlack"}]}], "]"}], "&"}], "/@", "undefinedSpecies"}], 
        ";"}], " ", "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "this", " ", "gives", " ", "all", " ", "the", " ", "species", " ", 
        "that", " ", "are", " ", "referenced", " ", "in", " ", "the", " ", 
        "kinetic", " ", "law", " ", "that", " ", "are", " ", "not", " ", 
        "declared", " ", "as", " ", "modifiers"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"undefinedModifiers", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"Intersection", "[", 
            RowBox[{"syms", ",", " ", "species"}], "]"}], ",", "reactants", 
           ",", " ", "products"}], "]"}], ",", "modifiers"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<checkKineticLaw: undefinedModifiers\>\"", ",", 
        "undefinedModifiers"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\< the species \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"#", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is referenced in the kinetic law \>\"", "//", "boldBlack"}], 
          ",", " ", 
          RowBox[{"klaw", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< for reaction \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"id", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< = \>\"", "//", "boldBlack"}], ",", " ", 
          RowBox[{"reaction", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< but is not defined as a modifier in the reaction.\>\"", "//", 
           "boldBlack"}]}], "]"}], "&"}], "/@", "undefinedModifiers"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"checkFunctionCalls", "[", 
       RowBox[{"math", ",", "\"\<reaction\>\"", ",", 
        RowBox[{"stringer", "[", "id", "]"}], ",", " ", "opt"}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"modifiers", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"modifiers", ",", "undefinedModifiers"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"caller", "==", "\"\<addReaction\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Return", "[", "\[IndentingNewLine]", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Global`reactants", "\[Rule]", " ", "reactants"}], ",",
                "\[IndentingNewLine]", 
               RowBox[{"Global`products", "\[Rule]", " ", "products"}], ",", 
               " ", "\[IndentingNewLine]", 
               RowBox[{"Global`modifiers", "\[Rule]", " ", "modifiers"}]}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", "opt", "}"}]}], "\[IndentingNewLine]", "]"}], "]"}],
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388319017807542*^9, 3.3883190435628138`*^9}, 
   3.3883414582314043`*^9, {3.388341528624852*^9, 3.388341528855611*^9}, {
   3.5404928421377897`*^9, 3.54049284500041*^9}, {3.5404928927632313`*^9, 
   3.540492932796974*^9}, 3.540492982462975*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["addReaction", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addReaction", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", " ", "reacts", ",", " ", "prods", ",", " ", "mods",
         ",", "sp", ",", " ", "compartment", ",", "rstring", ",", 
        "reactListString", ",", " ", "\[IndentingNewLine]", "meta", ",", " ", 
        "rmetas", ",", " ", "pmetas", ",", " ", "mmetas", ",", "addmeta", ",",
         " ", 
        RowBox[{"dbg", "=", "False"}], ",", " ", "reactionparameters"}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"addmeta", "[", 
         RowBox[{"metau_", ",", "idu_", ",", " ", "object_"}], "]"}], ":=", 
        " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"id", ",", " ", "cn", ",", " ", "cio"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<addmeta: metau=\>\"", ",", " ", "metau", ",", " ", 
               "\"\< idu=\>\"", ",", " ", "idu", ",", " ", "\"\< object=\>\"",
                ",", " ", "object"}], "]"}]}], "]"}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"cio", "=", 
            RowBox[{"contextify", "[", 
             RowBox[{"idu", ",", " ", "object"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<addmeta: cio: \>\"", ",", " ", "cio"}], "]"}]}], 
            "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"cn", "=", 
            RowBox[{"contextify", "[", 
             RowBox[{"n", ",", " ", "MB$ID"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<addmeta: n, cn: \>\"", ",", "n", ",", " ", "\"\<,\>\"", 
               ",", " ", "cn"}], "]"}]}], "]"}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"id", "=", 
            RowBox[{"contextify", "[", 
             RowBox[{"cio", ",", " ", "cn"}], "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<addmeta: id: \>\"", ",", " ", "id"}], "]"}]}], 
            "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"metau", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
             RowBox[{"addMetaID", "[", 
              RowBox[{
              "metau", ",", "id", ",", " ", "object", ",", " ", "True"}], 
              "]"}]}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}]}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"reactListString", "[", 
         RowBox[{"{", "}"}], "]"}], ":=", " ", "\"\<\>\""}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"reactListString", "[", 
         RowBox[{"{", "q__", "}"}], "]"}], ":=", " ", 
        RowBox[{"ToString", "[", 
         RowBox[{"Plus", "[", "q", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLid", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[XML]: r: \>\"", ",", " ", "r"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[XML]: n: \>\"", ",", " ", "n"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteReaction", "[", 
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of reaction \>\"", "//", "boldGreen"}], 
             ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", " ", "\"\<reaction\>\"", ",", "True"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{"meta", ",", 
           RowBox[{"contextify", "[", "n", "]"}], ",", " ", 
           "\"\<reaction\>\"", ",", " ", "True"}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[XML]: meta: \>\"", ",", " ", "meta"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$Reactions", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Reactions", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "add", " ", "code", " ", "here", " ", "to", " ", "verify", " ", 
           "that", " ", "reactants"}], ",", " ", "products", ",", " ", 
          RowBox[{"modifiers", " ", "are", " ", "in", " ", "model"}]}], " ", 
         "*)"}],
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"reacts", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"r", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<listOfReactants\>\"", ",", "_", ",", "_"}], "]"}], 
          ",", "2"}], " ", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"reacts", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"reacts", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<speciesReference\>\"", ",", "_", ",", "_"}], "]"}], 
          ",", "3"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"rmetas", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<metaid\>\"", ",", "#"}], "]"}], "&"}], ",", " ", 
          "reacts"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"reacts", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<species\>\"", ",", "#"}], "]"}], "&"}], ",", " ", 
          "reacts"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[XML]: addmeta: \>\"", ",", " ", 
           RowBox[{"{", 
            RowBox[{"rmetas", ",", " ", "reacts"}], "}"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"addmeta", "[", 
           RowBox[{"#1", ",", " ", "#2", ",", " ", "\"\<reactant\>\""}], 
           "]"}], "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"rmetas", ",", " ", "reacts"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{
         "Print", "[", "\"\<addReaction[XML]: addmeta: done \>\"", "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"prods", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"r", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<listOfProducts\>\"", ",", "_", ",", "_"}], "]"}], ",",
           "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"prods", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"prods", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<speciesReference\>\"", ",", "_", ",", "_"}], "]"}], 
          ",", "3"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"pmetas", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<metaid\>\"", ",", "#"}], "]"}], "&"}], ",", " ", 
          "prods"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"prods", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<species\>\"", ",", "#"}], "]"}], "&"}], ",", " ", 
          "prods"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[XML]: addmeta: \>\"", ",", " ", 
           RowBox[{"{", 
            RowBox[{"pmetas", ",", " ", "prods"}], "}"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"addmeta", "[", 
           RowBox[{"#1", ",", " ", "#2", ",", " ", "\"\<product\>\""}], "]"}],
           "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"pmetas", ",", " ", "prods"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{
         "Print", "[", "\"\<addReaction[XML]: addmeta: done \>\"", "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "to", " ", "see", " ", "if", " ", "any", " ", 
         "reactant", " ", "or", " ", "product", " ", "is", " ", "already", 
         " ", "referenced", " ", "in", " ", "an", " ", "assignment", " ", 
         "rule"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"prior", ",", " ", "check"}], "}"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"prior", "[", "variable_", "]"}], ":=", " ", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{"MB$AssignmentRuleVariables", ",", " ", "variable"}],
                  "]"}], ",", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Return", "[", "\"\<assignmentRule\>\"", "]"}], 
                 ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{"MB$RateRuleVariables", ",", " ", "variable"}], 
                 "]"}], ",", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Return", "[", "\"\<rateRule\>\"", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"Return", "[", "\"\<\>\"", "]"}], ";"}]}], " ", 
            "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"check", "[", "variable_", "]"}], ":=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"StringLength", "[", 
               RowBox[{"prior", "[", "variable", "]"}], "]"}], ">", "0"}], 
             ")"}], " ", "\[And]", " ", 
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"MB$BoundaryConditionSpecies", ",", " ", "variable"}], 
              "]"}]}]}]}], ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"check", "[", "#", "]"}], ",", " ", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                 RowBox[{"\"\<addReaction: \>\"", "//", "boldBlack"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"prior", "[", "#", "]"}], "//", "boldBlue"}], ",", 
                 " ", 
                 RowBox[{
                 "\"\< already defined for the variable \>\"", "//", 
                  "boldBlack"}], ",", " ", 
                 RowBox[{"#", "//", "boldBlue"}], " ", ",", " ", 
                 RowBox[{
                 "\"\< which is not a boundaryCondition\\n\>\"", "//", 
                  "boldBlack"}], ",", " ", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"XMLHighlightForm", "[", 
                   RowBox[{"r", ",", " ", "Purple", ",", " ", 
                    RowBox[{"\"\<species=\>\"", "<>", 
                    RowBox[{"quote", "[", "#", "]"}]}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], "]"}], 
             "&"}], ",", " ", 
            RowBox[{"Union", "[", 
             RowBox[{"prods", ",", " ", "reacts"}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MB$ReactionVariables", "=", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"MB$ReactionVariables", ",", " ", 
               RowBox[{"Union", "[", 
                RowBox[{"prods", ",", " ", "reacts"}], "]"}]}], "]"}], "]"}], 
            "//", "Union"}]}], ";"}]}], " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"mods", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"r", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<listOfModifiers\>\"", ",", "_", ",", "_"}], "]"}], 
          " ", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"mods", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"mods", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<modifierSpeciesReference\>\"", ",", "_", ",", "_"}], 
           "]"}], ",", "3"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"mmetas", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<metaid\>\"", ",", "#"}], "]"}], "&"}], ",", " ", 
          "mods"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"mods", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<species\>\"", ",", "#"}], "]"}], "&"}], ",", " ", 
          "mods"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"addmeta", "[", 
           RowBox[{"#1", ",", " ", "#2", ",", " ", "\"\<modifier\>\""}], 
           "]"}], "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"mmetas", ",", " ", "mods"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"rstring", "=", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"reacts", "/.", 
              RowBox[{"{", 
               RowBox[{"List", "\[Rule]", " ", "Plus"}], "}"}]}], ")"}], ",", 
            RowBox[{"prods", "/.", 
             RowBox[{"{", 
              RowBox[{"List", "\[Rule]", " ", "Plus"}], "}"}]}]}], "]"}]}], 
         ";"}], "*)"}], " ", "\[IndentingNewLine]", 
       RowBox[{"rstring", "=", 
        RowBox[{
         RowBox[{"reactListString", "[", "reacts", "]"}], "<>", 
         "\"\<\[Rule]\>\"", "<>", 
         RowBox[{"reactListString", "[", "prods", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"rstring", "=", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"rstring", ",", 
          RowBox[{"\"\< \>\"", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "mods", "]"}], ">", "0"}], ",", 
         RowBox[{"rstring", "=", 
          RowBox[{"Overscript", "[", 
           RowBox[{"rstring", ",", "mods"}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"reacts", " ", "=", 
        RowBox[{"Union", "[", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{"reacts", ",", "prods", ",", "mods"}], "}"}], "]"}], 
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"reacts", " ", "=", " ", 
        RowBox[{"Complement", "[", 
         RowBox[{"reacts", ",", 
          RowBox[{"Map", "[", 
           RowBox[{"First", ",", "MB$Species"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "reacts", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"addSpecies", "[", 
             RowBox[{"Global`id", "\[Rule]", " ", "#"}], "]"}], "&"}], ",", 
           " ", "reacts"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"reactionparameters", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"getSBMLfield", "[", 
           RowBox[{"\"\<id\>\"", ",", " ", "#"}], "]"}], "&"}], "/@", 
         RowBox[{"Cases", "[", 
          RowBox[{"r", ",", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<parameter\>\"", ",", "___"}], "]"}], ",", " ", 
           "Infinity"}], "]"}]}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"addID", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{
           "\"\<reaction-parameter (\>\"", "<>", "n", "<>", "\"\<)\>\""}], 
           ",", " ", "False"}], "]"}], "&"}], "/@", "reactionparameters"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Reaction \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"rstring", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< added as \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addReaction", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", "id", ",", " ", "opts", ",", "optss", ",", " ", 
        "rs", ",", " ", "ps", ",", " ", "reaction", ",", " ", "info", ",", 
        " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"MB$Echo", " ", "=", " ", 
         RowBox[{
          RowBox[{"Global`echo", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`echo", "\[Rule]", " ", "True"}], "}"}]}]}], ";"}], 
       " ", "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[options]: opts: \>\"", ",", " ", "opts"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"rs", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`reactants", ")"}], "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`reactants", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ps", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`products", ")"}], "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`products", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"reaction", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`reaction", ")"}], "/.", "opts"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`reaction", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"info", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Join", "[", 
          RowBox[{"rs", ",", " ", "ps", ",", " ", 
           RowBox[{"{", "reaction", "}"}]}], "]"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"info", "\[Equal]", 
          RowBox[{"{", "}"}]}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"reaction", "=", 
           RowBox[{"First", "[", "opts", "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"opts", "=", 
           RowBox[{"Rest", "[", "opts", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"opts", ",", " ", 
            RowBox[{"Global`reaction", "\[Rule]", " ", "reaction"}]}], "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"id", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "Global`id", ")"}], "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"id", "==", "\"\<\>\""}], ",", 
         RowBox[{
          RowBox[{"id", " ", "=", " ", 
           RowBox[{"\"\<reaction\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"MB$reactioncounter", "++"}], "]"}]}]}], ";"}]}], " ", 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"opts", ",", 
           RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", 
           RowBox[{"invokedBy", "\[Rule]", " ", "\"\<addReaction\>\""}]}], 
          "}"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"optss", "=", 
        RowBox[{"checkKineticLaw", "@@", "opts"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"optss", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"optss", ",", " ", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"SameQ", "[", 
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], ",", " ", "invokedBy"}], 
             "]"}]}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"reactionToSymbolicSBML", "@@", "optss"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[options]: r: \>\"", ",", " ", "r"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"addReaction", "[", "r", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addReaction[options]: n: \>\"", ",", " ", "n"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", "\[IndentingNewLine]",
      "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addReaction", "[", 
    RowBox[{"r_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Return", "[", 
       RowBox[{"addReaction", "[", 
        RowBox[{
         RowBox[{"Global`reaction", "\[Rule]", " ", "r"}], ",", " ", "opt"}], 
        "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQA2IQHdH09flNx5eOAQeNX4PodYyH34Norr1xH0H0e4ab
f0B0NuNdhltAOvnyYi4Q/aRiN5h2ilwqAqJZO4VEQXTABA1pEF1/R0YJRD/y
/aEOop+1M2uCaIUV6/VAtEvse0MQHfYuLh5E69juSQDRt0rLskD0yimKOSDa
MGdhK4gu4qnqBNEe+80ngGiTn3+mg+hzK15vBtEH+7V2gug0f5/DIFpmxueT
INruSPhlEC2Uy3wFRG/x5dK7DaRXPTIG06c0V5mB6CTlY2DaRbPHFkR7+e0B
0/+22r/I8X/p6Fcz/zuIzouW/Aeii75x/QfRx84uZ88F8f1ugmkGSz4eEJ0l
eZAfRAMA0ZG0xQ==
  "]]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyReaction", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"modifyReaction", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "x", ",", "y", ",", " ", "m", ",", 
       RowBox[{"dbg", "=", "False"}], ",", "dummyvariable", ",", 
       "\[IndentingNewLine]", "r", ",", " ", "p", ",", "rn", ",", " ", "pn", 
       ",", "rs", ",", " ", "ps", ",", "  ", "k", ",", "kopt", ",", "kann", 
       ",", "knotes", ",", "rann", ",", "pann", ",", "mann", ",", 
       "reactionAnnotation", ",", "reactionNotes", ",", "rmetaids", ",", 
       "pmetaids", ",", "mmetaids", ",", " ", 
       StyleBox["getFirst",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["getSpecies",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["speciesName",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["stoic",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["infix",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["parameter",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["getspeciesReferenceInfo",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["getModifierSpecies",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["speciesMetaid",
        FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["getFirst",
         FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "b", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"b", "=", "a"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"While", " ", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ListQ", "[", "b", "]"}], " ", "\[And]", " ", 
             RowBox[{
              RowBox[{"Length", "[", "b", "]"}], ">", "0"}]}], ",", " ", 
            RowBox[{"b", " ", "=", " ", 
             RowBox[{"First", "[", "b", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "b", "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getSpecies",
         FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"a", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<speciesReference\>\"", ",", "___"}], "]"}], ",", 
         "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getModifierSpecies",
         FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"a", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<modifierSpeciesReference\>\"", ",", "___"}], "]"}], 
         ",", "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getSpecies",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"a_", ",", " ", "tag_"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"Switch", "[", 
            RowBox[{
            "tag", ",", "\[IndentingNewLine]", "\"\<listOfReactants\>\"", ",", 
             RowBox[{"getSpecies", "[", "a", "]"}], ",", 
             "\[IndentingNewLine]", "\"\<listOfProducts\>\"", ",", 
             RowBox[{"getSpecies", "[", "a", "]"}], ",", 
             "\[IndentingNewLine]", "\"\<listOfModifiers\>\"", ",", 
             RowBox[{"getModifierSpecies", "[", "a", "]"}], ",", 
             "\[IndentingNewLine]", "_", ",", "\"\<Error\>\""}], 
            "\[IndentingNewLine]", "]"}], "//", "Return"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["speciesName",
         FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
       RowBox[{"getSBMLfield", "[", 
        RowBox[{"\"\<species\>\"", ",", "a"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["speciesMetaid",
         FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
       RowBox[{"getSBMLfield", "[", 
        RowBox[{"\"\<metaid\>\"", ",", "a"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getspeciesReferenceInfo",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"tag_", ",", " ", "input_"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", "names", ",", " ", "stoichiometries", ",", 
           RowBox[{"dbg", "=", "False"}], ",", " ", "ann", ",", " ", 
           "metaids", ",", " ", "notes"}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"r", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{"input", ",", " ", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"tag", ",", " ", "___"}], "]"}], ",", "Infinity"}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"r", "=", 
           RowBox[{"getSpecies", "[", 
            RowBox[{
             RowBox[{"r", "//", "getFirst"}], ",", "tag"}], "]"}]}], ";", " ",
           "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{"dbg", ",", 
            RowBox[{"\"\<\!\(\*
StyleBox[\"getspeciesReferenceInfo\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\":\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\>\"", "<>", "tag"}], ",", "r"}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"ann", " ", "=", " ", 
           RowBox[{"getAnnotations", "/@", "r"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{"dbg", ",", 
            RowBox[{"\"\<\!\(\*
StyleBox[\"getspeciesReferenceInfo\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\":\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\>\"", "<>", "tag", "<>", 
             "\"\<: annotations\>\""}], ",", "ann"}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"names", " ", "=", 
           RowBox[{"speciesName", "/@", "r"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{"dbg", ",", 
            RowBox[{"\"\<\!\(\*
StyleBox[\"getspeciesReferenceInfo\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\":\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\>\"", "<>", "tag", "<>", "\"\<: names \>\""}],
             ",", "names"}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"notes", " ", "=", " ", 
           RowBox[{"getNotes", "/@", "r"}]}], ";", " ", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{
           StyleBox[
            RowBox[{"meta", 
             StyleBox["ids",
              FontColor->GrayLevel[0]]}]], 
           StyleBox["=",
            FontColor->GrayLevel[0]], 
           RowBox[{"speciesMetaid", "/@", "r"}]}], 
          StyleBox[";",
           FontColor->GrayLevel[0]], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"tag", "\[Equal]", " ", "\"\<listOfReactants\>\""}], " ",
              "\[Or]", " ", 
             RowBox[{"tag", "==", "\"\<listOfProducts\>\""}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"stoichiometries", "=", " ", 
              RowBox[{"stoic", "/@", "r"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"debugPrint", "[", 
              RowBox[{"dbg", ",", 
               RowBox[{
               "\"\<getspeciesReferenceInfo: \>\"", "<>", "tag", "<>", 
                "\"\<: stoichiometries \>\""}], ",", "stoichiometries"}], 
              "]"}], ";"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"stoichiometries", "=", 
              RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "names", ",", "stoichiometries", ",", "ann", ",", "notes", ",", 
             " ", "metaids"}], " ", "}"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["infix",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<math\>\"", ",", "x___"}], "]"}], "]"}], ":=", " ", 
       RowBox[{"SymbolicSBMLMathMLToExpression", "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<math\>\"", ",", "x"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["infix",
         FontColor->RGBColor[0, 0, 1]], "[", "x___", "]"}], ":=", " ", "1"}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["stoic",
         FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{"a", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", " ", 
            "Infinity"}], "]"}], "//", "getFirst"}], "//", "infix"}]}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["parameter",
         FontColor->RGBColor[0, 0, 1]], "[", "p_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s", ",", "ann", ",", "notes", ",", "r"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"s", "=", " ", 
           RowBox[{"extractXMLOptions", "[", "p", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ann", " ", "=", " ", 
           RowBox[{"getAnnotations", "[", "p", "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"notes", "=", 
           RowBox[{
            RowBox[{"getNotes", "[", "p", "]"}], "//", "stringToNotes"}]}], 
          ";", " ", "\[IndentingNewLine]", 
          RowBox[{"r", "=", 
           RowBox[{"Rule", "[", " ", 
            RowBox[{
             RowBox[{"getSBMLfield", "[", 
              RowBox[{"\"\<id\>\"", ",", "p"}], "]"}], ",", 
             RowBox[{"Join", "[", 
              RowBox[{"s", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], ",", 
                 RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}]}], 
                "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "r", "]"}]}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<modifyReaction,opt\>\"", ",", 
        RowBox[{"{", "opt", "}"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], 
        "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "==", "\"\<\>\""}], ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
           RowBox[{
           "\"\<modifyReaction: No reaction id specified.\>\"", "//", 
            "boldBlack"}]}], "]"}], ";", 
         RowBox[{"Return", "[", 
          RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<modifyReaction,n\>\"", ",", "n"}], "]"}], ";",
       " ", "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"retrieveSBMLObject", "[", 
        RowBox[{"\"\<reaction\>\"", ",", "n"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<modifyReaction,x\>\"", ",", "x"}], "]"}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"reactionAnnotation", " ", "=", " ", 
       RowBox[{"updateAnnotations", "[", 
        RowBox[{"x", ",", "opt"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<modifyReaction: annotations \>\"", ",", 
        "reactionAnnotation"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"reactionNotes", "=", 
       RowBox[{"updateNotes", "[", 
        RowBox[{"x", ",", "opt"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<modifyReaction: notes \>\"", ",", "reactionNotes"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
         "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"y", "=", 
          RowBox[{"extractXMLOptions", "[", "x", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "opt", "}"}], ",", "y"}], "]"}], "//", 
           "Flatten"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<modifyReaction,y\>\"", ",", "y"}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "rn", ",", "rs", ",", "rann", ",", "rnotes", ",", " ", 
            "rmetaids"}], "}"}], "=", 
          RowBox[{
           StyleBox["getspeciesReferenceInfo",
            FontColor->RGBColor[0, 0, 1]], "[", 
           RowBox[{"\"\<listOfReactants\>\"", ",", " ", "x"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "pn", ",", "ps", ",", "pann", ",", "pnotes", ",", "pmetaids"}], 
           "}"}], "=", 
          RowBox[{
           StyleBox["getspeciesReferenceInfo",
            FontColor->RGBColor[0, 0, 1]], "[", 
           RowBox[{"\"\<listOfProducts\>\"", ",", " ", "x"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "m", ",", "dummyvariable", ",", " ", "mann", ",", "mnotes", ",", 
            " ", "mmetaids"}], "}"}], "=", 
          RowBox[{
           StyleBox["getspeciesReferenceInfo",
            FontColor->RGBColor[0, 0, 1]], "[", 
           RowBox[{"\"\<listOfModifiers\>\"", ",", " ", "x"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"y", ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<reactants\>\"", "\[Rule]", " ", "rn"}], ",", " ", 
              RowBox[{"\"\<products\>\"", "\[Rule]", " ", "pn"}], ",", " ", 
              RowBox[{"\"\<reactantStoichiometry\>\"", "\[Rule]", " ", "rs"}],
               ",", " ", 
              RowBox[{"\"\<productStoichiometry\>\"", "\[Rule]", " ", "ps"}], 
              ",", " ", 
              RowBox[{"\"\<modifiers\>\"", "\[Rule]", " ", "m"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<reactantannotations\>\"", "\[Rule]", " ", "rann"}],
               ",", 
              RowBox[{"\"\<productannotations\>\"", "\[Rule]", " ", "pann"}], 
              ",", 
              RowBox[{"\"\<modifierannotations\>\"", "\[Rule]", " ", "mann"}],
               ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<reactantmetaids\>\"", "\[Rule]", " ", "rmetaids"}],
               ",", 
              RowBox[{"\"\<productmetaids\>\"", "\[Rule]", " ", "pmetaids"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<modifiermetaids\>\"", "\[Rule]", " ", "mmetaids"}],
               ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<reactantnotes\>\"", "\[Rule]", " ", "rnotes"}], 
              ",", " ", 
              RowBox[{"\"\<productnotes\>\"", "\[Rule]", " ", "pnotes"}], ",", 
              RowBox[{"\"\<modifiernotes\>\"", "\[Rule]", " ", "mnotes"}]}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<modifyReaction,y\>\"", ",", "y"}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"k", " ", "=", " ", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"x", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<kineticLaw\>\"", ",", "___"}], "]"}], ",", 
             "Infinity"}], "]"}], "//", "getFirst"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"kopt", " ", "=", " ", 
          RowBox[{"extractXMLOptions", "[", "k", "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<modifyReaction,k\>\"", ",", "k"}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<modifyReaction,kopt\>\"", ",", "kopt"}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"p", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{"k", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<parameter\>\"", ",", "___"}], "]"}], ",", 
            "Infinity"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<modifyReaction, parameters\>\"", ",", "p"}], "]"}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"p", " ", "=", " ", 
          RowBox[{"parameter", "/@", "p"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<modifyReaction, parameters\>\"", ",", "p"}], "]"}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"kann", " ", "=", " ", 
          RowBox[{"getAnnotations", "[", "k", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"knotes", " ", "=", " ", 
          RowBox[{
           RowBox[{"getNotes", "[", "k", "]"}], "//", "stringToNotes"}]}], 
         ";", " ", "\[IndentingNewLine]", 
         RowBox[{"k", " ", "=", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{"k", ",", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "Infinity"}],
              "]"}], "//", "getFirst"}], "//", "infix"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<modifyReaction,kinetic law\>\"", ",", "k"}], "]"}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"y", ",", 
            RowBox[{"kopt", "/.", 
             RowBox[{"{", 
              RowBox[{
              "\"\<metaid\>\"", "\[Rule]", " ", "\"\<kineticlawmetaid\>\""}], 
              "}"}]}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"y", ",", " ", "\[IndentingNewLine]", 
            RowBox[{"\"\<kineticLaw\>\"", "\[Rule]", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"\"\<math\>\"", "\[Rule]", " ", "k"}], ",", " ", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "kann"}], ",", 
               " ", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "knotes"}]}], 
              "}"}]}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"y", ",", " ", 
            RowBox[{"\"\<parameters\>\"", "\[Rule]", " ", "p"}]}], "]"}]}], 
         ";", " ", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Prepend", "[", 
           RowBox[{"y", ",", 
            RowBox[{
            "\"\<annotation\>\"", "\[Rule]", " ", "reactionAnnotation"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Prepend", "[", 
           RowBox[{"y", ",", 
            RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "reactionNotes"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"globalize", "/@", "y"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<modifyReaction,y\>\"", ",", "y"}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"Apply", "[", 
           RowBox[{"addReaction", ",", "y"}], "]"}]}], ";"}], "  ", 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
           RowBox[{"\"\<The reaction \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"n", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\< was not found.\>\"", "//", "boldBlack"}]}], "]"}], 
         ";", " ", "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyReaction", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"modifyReaction", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.3882606751310673`*^9, 3.388260694221843*^9}}]
}, Closed]],

Cell["\<\
speciesToSBML, addSpecies, deleteSpecies, removeSpecies, modifySpecies\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell["getSpecies", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpecies", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$Species", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getSpecies: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\< Species: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< species.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$Species", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Species"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getSpeciesNumber: \>\"", "//", "boldRed"}], 
            ",", 
            RowBox[{"\"\<Species: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid species are \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpecies", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getSpeciesNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", 
         RowBox[{"Return", "[", 
          RowBox[{
           RowBox[{"MB$Species", "[", 
            RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpecies", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getSpecies", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfSpecies", "[", "]"}], ":=", " ", 
   RowBox[{"Length", "[", "MB$Species", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpecies", "[", "]"}], ":=", " ", 
    RowBox[{"getSpecies", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"getNumberOfSpecies", "[", "]"}], "]"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpecies", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: getSpecies: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getSpecies[id]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"\"\<getSpecies[Integer]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getSpecies[{x1,x2,...}]\>\"", "//", "boldRed"}], ",", 
         RowBox[{
         "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
          "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.395751526012856*^9, 3.395751542086557*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceSpecies", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceSpecies", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<species\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Species", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<species\>\"", ",", "x"}], "]"}]}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Species", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"MB$Species", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Species", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<species\>\"", ",", "x"}], "]"}]}], ",", "i"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Species \>\"", ",", "i", ",", " ", "\"\< replaced.\>\""}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceSpecies: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{"\"\< unable to replace species \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceSpecies", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<species\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getSpeciesNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceSpecies", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<species\>\"", ",", "x"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceSpecies: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{"\"\< unable to replace species \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"replaceSpecies", "[", "x___", "]"}], ":=", " ", 
  RowBox[{"Print", "[", 
   RowBox[{
    RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
    RowBox[{"\"\<replaceSpecies: \>\"", "//", "boldRed"}], ",", " ", 
    RowBox[{
    "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], ",", 
    RowBox[{"\"\<replaceSpecies[\>\"", "//", "boldBlack"}], ",", 
    RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
    RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
    RowBox[{"\"\< XMLElement[\\\"species\\\",...]\>\"", "//", "boldBlack"}], 
    ",", 
    RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["speciesToSBML", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesToSBML", "[", 
     RowBox[{"{", 
      RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "SBML", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBML", " ", "=", 
        RowBox[{"Flatten", "[", " ", 
         RowBox[{"speciesToSymbolicSBML", "/@", 
          RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<listOfSpecies\>\"", ",", 
          RowBox[{"{", "}"}], ",", "SBML"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", "=", 
        RowBox[{"ExportXMLString", "[", "SBML", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"sunderscore", "[", "SBML", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesToSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"speciesToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"r", "=", 
        RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", " ", 
        RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesToSBML", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"speciesToSBML", "[", 
     RowBox[{
      RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesToSBML", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Print", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"boldRed", "[", "\"\<Error:\>\"", "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{
      "boldBlack", "[", "\"\<speciesToSBML:  invalid syntax: \>\"", "]"}], 
      ",", " ", 
      RowBox[{"boldBlue", "[", 
       RowBox[{"ToString", "[", 
        RowBox[{"{", "x", "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.3897218858023043`*^9, 3.3897219081190357`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["removeSpecies, deleteSpecies", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteSpecies", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//", 
        "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteSpecies\>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\< was specified.\>\"", "//", "boldBlack"}]}], "]"}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<species\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$Species"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$Species", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$Species", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteSpecies", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteSpecies", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeSpecies", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteSpecies", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Species \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\<removeSpecies: Requested species \>\"", "//", "boldBlack"}], 
          ",", 
          RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< does not exist.\>\"", "//", "boldBlack"}]}], "]"}]}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addSpecies", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addSpecies", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", " ", "comp", ",", "comps", ",", " ", "units", ",", 
        " ", "cdata", ",", " ", 
        RowBox[{"dbg", "=", "False"}], ",", "\[IndentingNewLine]", 
        "substanceUnits", ",", " ", "spatialSizeUnits", ",", " ", 
        "defSpatialSizeUnits", ",", "dim", ",", "hasOnlySubstanceUnits", ",", 
        "logicate", ",", " ", "opts", ",", "sub", ",", "unitsofthespecies", 
        ",", "stype", ",", "stypes", ",", " ", "meta", ",", " ", "bc"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLid", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "for", " ", "previous", " ", "occurance", " ", "of", 
          " ", "this", " ", "species"}], " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteSpecies", "[", 
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of species \>\"", "//", "boldGreen"}], 
             ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", " ", "\"\<species\>\"", ",", "True"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{"meta", ",", 
           RowBox[{"contextify", "[", "n", "]"}], ",", " ", "\"\<species\>\"",
            ",", " ", "True"}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{
         RowBox[{"{", "x", "}"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"sub", "=", 
        RowBox[{
         RowBox[{"{", "x", "}"}], "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"logicate", "[", "\"\<true\>\"", "]"}], ":=", " ", "True"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"logicate", "[", "\"\<false\>\"", "]"}], ":=", " ", "False"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"logicate", "[", "___", "]"}], ":=", "False"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"bc", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<boundaryCondition\>\"", ",", " ", "r"}], "]"}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"logicate", "[", "bc", "]"}], ",", " ", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"MB$BoundaryConditionSpecies", ",", " ", "n"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "to", " ", "make", " ", "sure", " ", "assigned", " ", 
          "compartment", " ", "exists"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"comp", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<compartment\>\"", ",", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"comps", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Compartments"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"comps", ",", "comp"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"addCompartment", "[", "comp", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"cdata", " ", "=", " ", 
        RowBox[{"comp", "/.", "MB$Compartments"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addSpecies: cdata: \>\"", ",", "cdata"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"stype", "=", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<speciesType\>\"", ",", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"stype", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"stypes", "=", 
           RowBox[{"First", "/@", "MB$SpeciesTypes"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"stypes", ",", "stype"}], "]"}]}], ",", " ", 
            RowBox[{"addSpeciesType", "[", "stype", "]"}]}], "]"}], ";"}]}], 
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "for", " ", "substanceUnits", " ", "and", " ", 
          "insert", " ", "default", " ", "if", " ", "not", " ", "present"}], 
         " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"substanceUnits", "=", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<substanceUnits\>\"", ",", "r", ",", 
          RowBox[{"default", "\[Rule]", " ", "\"\<substance\>\""}]}], "]"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{"Select", "[", 
         RowBox[{"opts", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"First", "[", "#", "]"}], "\[NotEqual]", " ", 
             "\"\<substanceUnits\>\""}], ")"}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"opts", ",", 
          RowBox[{
          "\"\<substanceUnits\>\"", "\[Rule]", " ", "substanceUnits"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"unitExists", "[", "substanceUnits", "]"}]}], ",", " ", 
         RowBox[{"addUnit", "[", "substanceUnits", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addSpecies: opts (1):\>\"", ",", "opts"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "for", " ", "hasOnlySubstanceUntis", " ", "and", " ", 
          "insert", " ", "default", " ", "value", " ", "if", " ", "not", " ", 
          "present"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"hasOnlySubstanceUnits", "=", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<hasOnlySubstanceUnits\>\"", ",", "r", ",", 
          RowBox[{"default", "\[Rule]", " ", "\"\<false\>\""}]}], "]"}]}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{"Select", "[", 
         RowBox[{"opts", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"First", "[", "#", "]"}], "\[NotEqual]", " ", 
             "\"\<hasOnlySubstanceUnits\>\""}], ")"}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"opts", ",", 
          RowBox[{
          "\"\<hasOnlySubstanceUnits\>\"", "\[Rule]", " ", 
           "hasOnlySubstanceUnits"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addSpecies: opts (2):\>\"", ",", "opts"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"logicate", "[", "hasOnlySubstanceUnits", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"unitsofthespecies", "=", 
           RowBox[{"Rule", "[", 
            RowBox[{"n", ",", "substanceUnits"}], "]"}]}], ";"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", "\t", 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Bold"], 
         StyleBox[
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"check", " ", "spatial", " ", "size", " ", "units"}], ";",
             " ", 
            RowBox[{
            "compare", " ", "with", " ", "compartment", " ", "units"}], ";", 
            " ", 
            RowBox[{
            "insert", " ", "default", " ", "if", " ", "not", " ", "there"}]}],
            " ", "*)"}],
          FontWeight->"Plain"], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"dim", " ", "=", " ", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<spatialDimensions\>\"", ",", "cdata", ",", 
             RowBox[{"default", "\[Rule]", " ", "\"\<3\>\""}]}], "]"}]}], ";",
           " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"defSpatialSizeUnits", "=", 
           RowBox[{"Switch", "[", 
            RowBox[{
            "dim", ",", "\[IndentingNewLine]", "\"\<0\>\"", ",", 
             "\"\<dimensionless\>\"", ",", "\[IndentingNewLine]", "\"\<1\>\"",
              ",", "\"\<length\>\"", ",", "\[IndentingNewLine]", "\"\<2\>\"", 
             ",", "\"\<area\>\"", ",", "\[IndentingNewLine]", "\"\<3\>\"", 
             ",", "\"\<volume\>\"", ",", "\[IndentingNewLine]", "_", ",", 
             "\"\<Indeterminate\>\""}], "\[IndentingNewLine]", "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"defSpatialSizeUnits", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<units\>\"", ",", "cdata", ",", 
             RowBox[{"default", "\[Rule]", " ", "defSpatialSizeUnits"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", 
             "2.3"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"spatialSizeUnits", "=", 
              RowBox[{"getSBMLfield", "[", 
               RowBox[{"\"\<spatialSizeUnits\>\"", ",", "r", ",", 
                RowBox[{"default", "\[Rule]", " ", "defSpatialSizeUnits"}]}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"opts", " ", "=", " ", 
              RowBox[{"Select", "[", 
               RowBox[{"opts", ",", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"First", "[", "#", "]"}], "\[NotEqual]", " ", 
                   "\"\<spatialSizeUnits\>\""}], ")"}], "&"}]}], "]"}]}], ";",
              " ", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
               "spatialSizeUnits", "\[NotEqual]", " ", 
                "\"\<Indeterminate\>\""}], ",", "\[IndentingNewLine]", 
               RowBox[{"opts", " ", "=", " ", 
                RowBox[{"Append", "[", 
                 RowBox[{"opts", ",", 
                  RowBox[{
                  "\"\<spatialSizeUnits\>\"", "\[Rule]", " ", 
                   "spatialSizeUnits"}]}], "]"}]}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"unitsofthespecies", "=", 
              RowBox[{"Rule", "[", 
               RowBox[{"n", ",", 
                RowBox[{
                "substanceUnits", "<>", "\"\</\>\"", "<>", 
                 "spatialSizeUnits"}]}], "]"}]}], ";"}], 
            "\[IndentingNewLine]", ",", " ", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "spatialSizeUnits", " ", "were", " ", "removed", " ", "in", " ", 
              "L2V3"}], " ", "*)"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"unitsofthespecies", "=", 
              RowBox[{"Rule", "[", 
               RowBox[{"n", ",", 
                RowBox[{
                "substanceUnits", "<>", "\"\</\>\"", "<>", 
                 "defSpatialSizeUnits"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"spatialSizeUnits", "=", 
              RowBox[{"getSBMLfield", "[", 
               RowBox[{"\"\<spatialSizeUnits\>\"", ",", "r", ",", 
                RowBox[{"default", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"spatialSizeUnits", "\[NotEqual]", " ", "\"\<\>\""}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Error: addSpecies: \>\"", "//", "boldRed"}], 
                 ",", " ", 
                 RowBox[{
                 "\"\<spatialSizeUnits is not a valid option in SMBL \
Level.Version \>\"", "//", "boldBlack"}], ",", " ", 
                 RowBox[{"MB$LevelVersion", "//", "boldBlack"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"spatialSizeUnits", "==", "\"\<Indeterminate\>\""}], " ", 
            ",", " ", 
            RowBox[{"unitsofthespecies", "=", "\"\<Indeterminate\>\""}]}], 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"dim", "==", "\"\<0\>\""}], " ", ",", " ", 
         RowBox[{"unitsofthespecies", "=", "substanceUnits"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$UnitsOfTheSpecies", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$UnitsOfTheSpecies", ",", "unitsofthespecies"}], "]"}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<addSpecies: substanceUnits: \>\"", ",", " ", "n", ",", 
            "\"\<:\>\"", ",", "substanceUnits"}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<addSpecies: spatialSizeUnits: \>\"", ",", "n", ",", 
            "\"\<:\>\"", ",", "spatialSizeUnits"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<addSpecies: hasOnlySubstanceUnits: \>\"", ",", " ", "n", ",", 
            "\"\<:\>\"", ",", "hasOnlySubstanceUnits"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"r", "=", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<species\>\"", ",", "opts", ",", "sub"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addSpecies: opts (3):\>\"", ",", "opts"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<addSpecies: r:\>\"", ",", "r"}], "]"}], ";"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$Species", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Species", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "to", " ", "make", " ", "sure", " ", "assigned", " ", 
          "units", " ", "exits"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"units", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<units\>\"", ",", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"units", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"unitExists", "[", "units", "]"}]}], ",", " ", 
           RowBox[{"addUnit", "[", "units", "]"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Species \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added to compartment \>\"", "//", "boldGreen"}], ",",
            " ", 
           RowBox[{"comp", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addSpecies", "[", 
     RowBox[{
      RowBox[{"s_", "?", "ListQ"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"addSpecies", "[", 
        RowBox[{"#", ",", "opt"}], "]"}], "&"}], ",", "s"}], "]"}]}], ";"}], 
  "    ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addSpecies", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", " ", "c", ",", "comps", ",", "opts", ",", " ", 
        "allowedOpts", ",", " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opts", " ", "=", 
        RowBox[{"{", "opt", "}"}]}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "MB$LevelVersion", ",", " ", "\[IndentingNewLine]", "\"\<2.1\>\"", 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"allowedOpts", "=", 
           RowBox[{"{", 
            RowBox[{
            "Global`annotation", ",", " ", "Global`boundaryCondition", ",", 
             " ", "Global`charge", ",", " ", "Global`compartment", ",", 
             "Global`constant", ",", "  ", "Global`id", ",", " ", 
             "Global`metaid", ",", "  ", "Global`name", ",", "Global`notes", 
             ",", "Global`initialAmount", ",", " ", 
             "Global`initialConcentration", ",", " ", "Global`substanceUnits",
              ",", "Global`spatialSizeUnits", ",", " ", 
             "Global`ArrayDimensions", ",", " ", 
             "Global`hasOnlySubstanceUnits"}], "}"}]}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "\"\<2.2\>\"", 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"allowedOpts", "=", 
           RowBox[{"{", 
            RowBox[{
            "Global`annotation", ",", " ", "Global`boundaryCondition", ",", 
             " ", "Global`charge", ",", " ", "Global`compartment", ",", 
             "Global`constant", ",", "  ", "Global`id", ",", " ", 
             "Global`metaid", ",", "  ", "Global`name", ",", "Global`notes", 
             ",", "Global`initialAmount", ",", " ", 
             "Global`initialConcentration", ",", " ", "Global`substanceUnits",
              ",", "Global`spatialSizeUnits", ",", " ", 
             "Global`ArrayDimensions", ",", " ", 
             "Global`hasOnlySubstanceUnits", ",", " ", "Global`speciesType"}],
             "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", "\"\<2.3\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"allowedOpts", "=", 
           RowBox[{"{", 
            RowBox[{
            "Global`annotation", ",", " ", "Global`boundaryCondition", ",", 
             " ", "Global`charge", ",", " ", "Global`compartment", ",", 
             "Global`constant", ",", "  ", "Global`id", ",", " ", 
             "Global`metaid", ",", "  ", "Global`name", ",", "Global`notes", 
             ",", "Global`initialAmount", ",", " ", 
             "Global`initialConcentration", ",", " ", "Global`substanceUnits",
              ",", " ", "Global`ArrayDimensions", ",", " ", 
             "Global`hasOnlySubstanceUnits", ",", " ", "Global`speciesType"}],
             "}"}]}], ";"}], " ", "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<addSpecies: \>\"", ",", " ", 
            "\"\<unable to process MB$LevelVersion: \>\"", ",", " ", 
            "MB$LevelVersion"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"checkOptions", "[", 
        RowBox[{"addSpecies", ",", " ", "opts", ",", " ", "allowedOpts"}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addSpecies: opts: \>\"", ",", " ", "opts"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"c", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`compartment", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`compartment", "\[Rule]", " ", "\"\<\>\""}], 
           "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"If", " ", "no", " ", "compartment"}], ",", " ", 
          RowBox[{"automatically", " ", "add", " ", 
           RowBox[{"it", "!"}]}]}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"c", "==", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "if", " ", "there", " ", "is", " ", "at", " ", "least", " ", 
             "one", " ", "compartment", " ", "already"}], ",", " ", 
            RowBox[{"use", " ", "the", " ", "first", " ", "one"}]}], " ", 
           "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "otherwise", " ", "add", " ", "a", " ", "new", " ", 
            "compartment"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "MB$Compartments", "]"}], ">", "0"}], ",",
             " ", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             StyleBox[" ",
              FontColor->RGBColor[0, 1, 1]], 
             StyleBox[
              RowBox[{
              "check", " ", "for", " ", "possible", " ", "invalid", " ", 
               "reassignment", " ", "of", " ", "MB$CurrentCompartment", " ", 
               "by", " ", "another", " ", "program", " ", "or", " ", 
               "possible", " ", "deletion", " ", "of", " ", "compartment"}],
              FontColor->GrayLevel[0.500008]], 
             StyleBox[" ",
              FontColor->RGBColor[0, 1, 1]], "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"c", "=", 
              RowBox[{"popCompartment", "[", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"While", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"!", 
                  RowBox[{"MemberQ", "[", 
                   RowBox[{
                    RowBox[{"First", "/@", "MB$Compartments"}], ",", "c"}], 
                   "]"}]}], " ", ")"}], "&&", 
                RowBox[{"(", 
                 RowBox[{"c", "\[NotEqual]", " ", "Null"}], ")"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"c", "=", 
                 RowBox[{"popCompartment", "[", "]"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"c", "\[Equal]", "Null"}], ",", " ", 
               RowBox[{"c", " ", "=", " ", 
                RowBox[{
                 RowBox[{"MB$Compartments", "//", "First"}], "//", 
                 "First"}]}]}], "]"}], ";"}], " ", "\[IndentingNewLine]", ",",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"c", " ", "=", " ", 
              RowBox[{"\"\<Compartment\>\"", "<>", 
               RowBox[{"ToString", "[", "MB$compartmentcounter", "]"}]}]}], 
             ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"opts", " ", "=", " ", 
           RowBox[{"Prepend", "[", 
            RowBox[{"opts", ",", " ", 
             RowBox[{"Global`compartment", "\[Rule]", " ", "c"}]}], "]"}]}], 
          ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        StyleBox[" ",
         FontColor->GrayLevel[0.500008]], 
        StyleBox[
         RowBox[{"reset", " ", "current", " ", "compartment"}],
         FontColor->GrayLevel[0.500008]], " ", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"pushCompartment", "[", "c", "]"}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"Apply", "[", 
         RowBox[{"speciesToSymbolicSBML", ",", "opts"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addSpecies:r \>\"", ",", " ", "r"}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addSpecies", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addSpecies", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addSpecies", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.390211096613493*^9, 3.390211194267126*^9}, {
  3.3902113620562763`*^9, 3.3902115207771673`*^9}, {3.390211690606306*^9, 
  3.390211696723009*^9}, {3.390211824440749*^9, 3.390211861712039*^9}, {
  3.390211939273147*^9, 3.390212003946682*^9}, {3.390212861887146*^9, 
  3.390212918746253*^9}, {3.390212966540803*^9, 3.390212971599649*^9}, {
  3.390213036201086*^9, 3.3902131711104517`*^9}, {3.390213228972959*^9, 
  3.390213245640835*^9}, {3.390213722498866*^9, 3.390213724981987*^9}, {
  3.3902137961924553`*^9, 3.390213830059565*^9}, {3.390213914448298*^9, 
  3.390214147912601*^9}, {3.390214552021535*^9, 3.39021458246294*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["modifySpecies", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifySpecies", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", "x", ",", "y", ",", "ann", ",", " ", "notes"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`id", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<species\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", " ", "=", " ", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}], "]"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addSpecies", ",", "y"}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addSpecies", "[", "opt", "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifySpecies", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifySpecies", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["speciesTypeToSBML, getSpeciesType, removeSpeciesType, \
addSpeciesType, modifySpeciesType",
 FontFamily->"Times",
 FontSize->12]], "Subsection"],

Cell[CellGroupData[{

Cell["getSpeciesType", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesType", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"getNumberOfSpeciesTypes", "[", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getSpeciesType: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\< speciesType: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< speciesTypes.\>\"", "//", "boldBlack"}]}], "]"}], 
          ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$SpeciesTypes", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesTypeNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$SpeciesTypes"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Error: getSpeciesTypeNumber: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<speciesType: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid speciesType are \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesType", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$SpeciesTypes"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getSpeciesType: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<speciesType: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid speciesType are \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$SpeciesTypes", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpeciesType", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getSpeciesType", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfSpeciesTypes", "[", "]"}], ":=", " ", 
   RowBox[{"Length", "[", "MB$SpeciesTypes", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesType", "[", "]"}], ":=", " ", 
    RowBox[{"getSpeciesType", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"getNumberOfSpeciesTypes", "[", "]"}], "]"}], "]"}]}], ";"}], 
  " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesType", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: getSpeciesType: \>\"", "//", "boldRed"}], ",", 
         " ", 
         RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getSpeciesType[id]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"\"\<getSpeciesType[Integer]\>\"", "//", "boldRed"}], ",", 
         " ", 
         RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getSpeciesType[{x1,x2,...}]\>\"", "//", "boldRed"}], 
         ",", 
         RowBox[{
         "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
          "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.39575145051614*^9, 3.395751452207745*^9}, {
  3.395751503866927*^9, 3.395751519844364*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["speciesTypeToSBML", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesTypeToSBML", "[", 
     RowBox[{"{", 
      RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "SBML", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBML", " ", "=", 
        RowBox[{"Flatten", "[", " ", 
         RowBox[{"speciesTypeToSymbolicSBML", "/@", 
          RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<listOfSpeciesTypes\>\"", ",", 
          RowBox[{"{", "}"}], ",", "SBML"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", "=", 
        RowBox[{"ExportXMLString", "[", "SBML", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"sunderscore", "[", "SBML", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesTypeToSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"speciesTypeToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"r", "=", 
        RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", " ", 
        RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesTypeToSBML", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"speciesTypeToSBML", "[", 
     RowBox[{
      RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"speciesTypeToSBML", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Print", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"boldRed", "[", "\"\<Error:\>\"", "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{
      "boldBlack", "[", "\"\<speciesTypeToSBML:  invalid syntax: \>\"", "]"}],
       ",", " ", 
      RowBox[{"boldBlue", "[", 
       RowBox[{"ToString", "[", 
        RowBox[{"{", "x", "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.3897219140266933`*^9, 3.3897219312638493`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["removeSpeciesType, deleteSpeciesType", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteSpeciesType", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], 
        "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\< deleteSpeciesType: id not specified.\>\"", "//", 
           "boldBlack"}]}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<speciesType\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$SpeciesTypes"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$SpeciesTypes", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$SpeciesTypes", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteSpeciesType", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteSpeciesType", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeSpeciesType", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteSpeciesType", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Species Type \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\<removeSpeciesType:\>\"", "//", "boldBlack"}], ",", 
          RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< not found.\>\"", "//", "boldBlack"}]}], "]"}]}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addSpeciesType", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addSpeciesType", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", " ", "opts", ",", "sub", ",", " ", "meta"}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", "2.2"}],
          ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", 
            RowBox[{
            "\"\< Cannot add a speciesType in SBML Level \>\"", "//", 
             "boldBlack"}], ",", 
            RowBox[{"MB$LevelVersion", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLid", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{
         RowBox[{"{", "x", "}"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"sub", "=", 
        RowBox[{
         RowBox[{"{", "x", "}"}], "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "for", " ", "previous", " ", "occurance", " ", "of", 
          " ", "this", " ", "species", " ", "type"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteSpeciesType", "[", 
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of speciesType \>\"", "//", 
              "boldGreen"}], ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", " ", "\"\<speciesType\>\"", ",", "True"}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{"meta", ",", 
           RowBox[{"contextify", "[", "n", "]"}], ",", " ", 
           "\"\<speciesType\>\"", ",", " ", "True"}], "]"}]}], "]"}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"r", "=", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<speciesType\>\"", ",", "opts", ",", "sub"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"MB$SpeciesTypes", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$SpeciesTypes", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<SpeciesType \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addSpeciesType", "[", 
     RowBox[{
      RowBox[{"s_", "?", "ListQ"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"addSpeciesType", "[", 
        RowBox[{"#", ",", "opt"}], "]"}], "&"}], ",", "s"}], "]"}]}], ";"}], 
  "    ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addSpeciesType", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkOptions", "[", 
        RowBox[{
        "addSpeciesType", ",", " ", "opt", ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "Global`annotation", ",", "  ", "Global`id", ",", " ", 
           "Global`metaid", ",", "  ", "Global`name", ",", "Global`notes"}], 
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"speciesTypeToSymbolicSBML", "@@", 
         RowBox[{"{", "opt", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addSpeciesType", "[", "r", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addSpeciesType", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addSpeciesType", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["modifySpeciesType", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifySpeciesType", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", "x", ",", "y", ",", "ann", ",", " ", "notes"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`id", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<speciesType\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", " ", "=", " ", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}], "]"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addSpeciesType", ",", "y"}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addSpeciesType", "[", "opt", "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifySpeciesType", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifySpeciesType", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell["\<\
functionToSBML, addFunction, deleteFunction, removeFunction, modifyFunction\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell["getFunction", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getFunction", "[", 
    RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", "=", 
       RowBox[{"Length", "[", "MB$Functions", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
         RowBox[{"n", "<", "1"}]}], ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: getFunction: \>\"", "//", "boldOrange"}], ",", 
           RowBox[{"\"\< Function: \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"n", "//", "boldRed"}], ",", 
           RowBox[{"\"\< does not exist. There are \>\"", "//", "boldBlack"}],
            ",", 
           RowBox[{"m", "//", "boldRed"}], ",", 
           RowBox[{"\"\< functions.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
         RowBox[{"Return", "[", 
          RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"MB$Functions", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunctionNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Functions"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Error: getFunctionNumber: \>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\<Function: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid functions are \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "  "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunction", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getFunctionNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", 
         RowBox[{"Return", "[", 
          RowBox[{
           RowBox[{"MB$Functions", "[", 
            RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}]}], "]"}], 
       ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getFunction", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getFunction", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfFunctions", "[", "]"}], ":=", " ", 
   RowBox[{"Length", "[", "MB$Functions", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunctions", "[", "]"}], ":=", " ", 
    RowBox[{"getFunction", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"getNumberOfFunctions", "[", "]"}], "]"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunction", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: getFunction: \>\"", "//", "boldOrange"}], ",", 
         " ", 
         RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getFunction[id]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"\"\<getFunction[Integer]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getFunction[{x1,x2,...}]\>\"", "//", "boldRed"}], ",", 
         RowBox[{
         "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
          "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceFunction", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceFunction", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<functionDefinition\>\"", ",", "x___"}], "]"}]}], "]"}], ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Functions", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<functionDefinition\>\"", ",", "x"}], "]"}]}], 
            "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Functions", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"MB$Functions", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Functions", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<functionDefinition\>\"", ",", "x"}], "]"}]}], ",",
              "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Function \>\"", ",", "i", ",", " ", "\"\< replaced.\>\""}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceFunction: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{"\"\< unable to replace function \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceFunction", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<functionDefinition\>\"", ",", "x___"}], "]"}]}], "]"}], ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getFunctionNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceFunction", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<functionDefinition\>\"", ",", "x"}], "]"}]}], "]"}],
           ";", " ", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceFunction: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{"\"\< unable to replace function \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceFunction", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
     RowBox[{"\"\<replaceFunction: \>\"", "//", "boldRed"}], ",", " ", 
     RowBox[{
     "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\<replaceFunction[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{
     "\"\< XMLElement[\\\"functionDefinition\\\",...]\>\"", "//", 
      "boldBlack"}], ",", 
     RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["functionToSBML", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"functionToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "SBML", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SBML", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"functionToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"SBML", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfFunctionDefinitions\>\"", ",", 
           RowBox[{"{", "}"}], ",", "SBML"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"SBML", "=", 
         RowBox[{"ExportXMLString", "[", "SBML", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"SBML", " ", "=", " ", 
         RowBox[{"sunderscore", "[", "SBML", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"functionToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"functionToSymbolicSBML", "[", "opt", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"functionToSBML", "[", 
      RowBox[{"x_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"functionToSBML", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}],
     ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"functionToSBML", "[", "x___", "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"boldRed", "[", "\"\<Error:\>\"", "]"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{
       "boldBlack", "[", "\"\< functionToSBML: invalid argument syntax: \>\"",
         "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"boldBlue", "[", 
        RowBox[{"ToString", "[", 
         RowBox[{"{", "x", "}"}], "]"}], "]"}]}], "]"}]}], ";"}], 
   " "}]}]], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389721936690624*^9, 3.389721941511312*^9}, {
  3.3897220035664988`*^9, 3.389722008146509*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["removeFunction, deleteFunction", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteFunction", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//", 
        "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteFunction\>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "/", "boldRed"}], ",", 
          "\"\< was specified.\>\""}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<function\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$Functions"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$Functions", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$Functions", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteFunction", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteFunction", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeFunction", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteFunction", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Function \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\<Requested function \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"MB$Currentid", "//", "boldRed"}], ",", 
          RowBox[{"\"\< can not be removed.\>\"", "//", "boldBlack"}]}], 
         "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addFunction", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addFunction", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "n", ",", "meta", ",", " ", "syms", ",", "XML2Sym", ",", " ", "bvars", 
        ",", "hf", ",", " ", "math", ",", " ", "csymbols", ",", " ", 
        "mycsymbol", ",", " ", "lambda", ",", "checkIfLambda", ",", "  ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"checkIfLambda", "[", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<math\>\"", ",", "v_", ",", " ", 
           RowBox[{"XMLElement", "[", "w___", "]"}]}], "]"}], "]"}], ":=", 
        "True"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"checkIfLambda", "[", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<math\>\"", ",", "v_", ",", " ", 
           RowBox[{"{", 
            RowBox[{"XMLElement", "[", "w___", "]"}], "}"}]}], "]"}], "]"}], ":=",
         "True"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"checkIfLambda", "[", "w___", "]"}], ":=", "False"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"XML2Sym", "[", 
         RowBox[{"\"\<ci\>\"", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "u_", "}"}]}], "]"}], ":=", "u"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"XML2Sym", "[", "u___", "]"}], ":=", " ", 
        "\"\<??--Unknown--??\>\""}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLid", "[", 
         RowBox[{"XMLElement", "[", "x", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addFunction: id: \>\"", ",", "n"}], "]"}]}], "]"}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteFunction", "[", 
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], " ", ",", " ", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of function \>\"", "//", "boldGreen"}], 
             ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", "\"\<function\>\"", ",", "True"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{"meta", ",", 
           RowBox[{"contextify", "[", "n", "]"}], ",", " ", 
           "\"\<function\>\"", ",", " ", "True"}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$Functions", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Functions", ",", 
          RowBox[{"n", "\[Rule]", 
           RowBox[{"XMLElement", "[", "x", "]"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"check", " ", "for", " ", "undefined", " ", "symbols"}], " ", 
        "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"math", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", "x", "]"}], "}"}], ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", " ", 
          "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"checkMathMLSubset", "[", 
        RowBox[{"math", ",", " ", "\"\<function\>\"", ",", " ", "n"}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"checkIfLambda", "[", "#", "]"}]}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
             RowBox[{"\"\< The \>\"", "//", "boldBlack"}], ",", 
             RowBox[{"\"\<<math ...>\>\"", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< object in \>\"", "//", "boldBlack"}], ",", 
             RowBox[{
             "\"\<<functionDefinition id=\\\"\>\"", "//", "boldBlue"}], ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\<\\\" ..>\>\"", "//", "boldBlue"}], ",", " ", 
             RowBox[{
             "\"\< contains the wrong number of \>\"", "//", "boldBlack"}], 
             ",", 
             RowBox[{"\"\<<lambda ..>\>\"", "//", "boldBlue"}], ",", 
             RowBox[{
             "\"\< elements. It should begin with a \>\"", "//", 
              "boldBlack"}], ",", 
             RowBox[{"\"\<<lambda ..>\>\"", "//", "boldBlue"}], ",", 
             RowBox[{
             "\"\< element and contain precisely one \>\"", "//", 
              "boldBlack"}], ",", 
             RowBox[{"\"\<<lambda ..>\>\"", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< element:\\n\>\"", "//", "boldBlack"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Sequence", "@@", 
              RowBox[{"XMLHighlightForm", "[", 
               RowBox[{
                RowBox[{"XMLElement", "[", "x", "]"}], ",", "Purple", ",", 
                " ", "\"\<math\>\""}], "]"}]}]}], "\[IndentingNewLine]", 
            "]"}]}], "\[IndentingNewLine]", "]"}], "&"}], "/@", "math"}], ";",
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"syms", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", "x", "]"}], "}"}], ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ",", " ", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"syms", "=", 
        RowBox[{"Union", "[", 
         RowBox[{"syms", "/.", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "\[Rule]", " ", "XML2Sym"}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"bvars", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", "x", "]"}], "}"}], ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<bvar\>\"", ",", "___"}], "]"}], ",", " ", 
          "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"bvars", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"bvars", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ",", " ", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"bvars", "=", 
        RowBox[{"bvars", "/.", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "\[Rule]", " ", "XML2Sym"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"bvars", "=", 
        RowBox[{"Union", "[", "bvars", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"addID", "[", 
          RowBox[{
          "#", ",", " ", "\"\<function-argument\>\"", ",", " ", "False"}], 
          "]"}], "&"}], "/@", "bvars"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addFunction:bvars:\>\"", ",", "bvars"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"$SBML$function$bvars", ",", " ", 
         RowBox[{"{", 
          RowBox[{"n", ",", " ", 
           RowBox[{"Length", "[", "bvars", "]"}]}], "}"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<$SBML$function$bvars: \>\"", ",", " ", 
           "$SBML$function$bvars"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"csymbols", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"XMLElement", "[", "x", "]"}], ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "csymbols", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"mycsymbol", "[", 
            RowBox[{"\"\<csymbol\>\"", ",", 
             RowBox[{"{", "___", "}"}], ",", "xx_"}], "]"}], ":=", " ", 
           "xx"}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"mycsymbol", "[", "xx___", "]"}], ":=", " ", 
           RowBox[{"XMLElement", "[", "xx", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"csymbols", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"csymbols", "/.", 
               RowBox[{"{", 
                RowBox[{"XMLElement", "\[Rule]", " ", "mycsymbol"}], "}"}]}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"XMLElement", "\[Rule]", " ", "List"}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"csymbols", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"csymbols", ",", 
             RowBox[{"{", "\"\<ci\>\"", "}"}]}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"syms", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"syms", ",", " ", "bvars", ",", "csymbols", ",", "  ", 
          RowBox[{"First", "/@", "$SBML$IDTable"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
        RowBox[{"XMLHighlightForm", "[", 
         RowBox[{
          RowBox[{"XMLElement", "[", "x", "]"}], ",", "Purple", ",", 
          RowBox[{"\"\<<ci>\>\"", "<>", 
           RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<</ci>\>\""}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<addFunction: undefined symbol \>\"", "//", "boldBlack"}], ",",
            " ", 
           RowBox[{"#", "//", "boldBlue"}], ",", " ", 
           RowBox[{
           "\"\< referenced in the definition of the function \>\"", "//", 
            "boldBlack"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", "\"\<\\n\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], "&"}], "/@", 
        "syms"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"lambda", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"XMLElement", "[", "x", "]"}], ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<lambda\>\"", ",", "___"}], "]"}], ",", " ", 
          "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "lambda", "]"}], ">", "1"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<Multiple lambda elements in function \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"n", "//", "boldBlue"}], ",", " ", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"XMLHighlightForm", "[", 
              RowBox[{
               RowBox[{"XMLElement", "[", "x", "]"}], ",", " ", "Purple", ",",
                " ", "\"\<<lambda>\>\""}], "]"}]}]}], "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"checkFunctionCalls", "[", 
        RowBox[{"lambda", ",", " ", "\"\<function\>\"", ",", "n"}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Function \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addFunction", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"MB$Echo", " ", "=", " ", 
         RowBox[{
          RowBox[{"Global`echo", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`echo", "\[Rule]", " ", "True"}], "}"}]}]}], ";"}], 
       " ", "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"functionToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addFunction", "[", "r", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addFunction", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addFunction", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.3970840152946787`*^9, 3.3970840353766823`*^9}, {
   3.397084287058284*^9, 3.3970842933666773`*^9}, 3.397084459826762*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyFunction", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"modifyFunction", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "n", ",", "x", ",", "y", ",", " ", "m", ",", " ", "arguments", ",", " ",
        "math", ",", "ann", ",", "notes"}], "}"}], ",", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["arguments",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"_", "[", 
         RowBox[{"args_", ",", " ", "formula_"}], "]"}], "]"}], ":=", " ", 
       "args"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["math",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"_", "[", 
         RowBox[{"args_", ",", " ", "formula_"}], "]"}], "]"}], ":=", " ", 
       "formula"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], 
        "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"retrieveSBMLObject", "[", 
        RowBox[{"\"\<function\>\"", ",", "n"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
         "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"y", "=", 
          RowBox[{"extractAndUpdateXMLOptions", "[", 
           RowBox[{"x", ",", "opt"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"ann", " ", "=", " ", 
          RowBox[{"updateAnnotations", "[", 
           RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"notes", " ", "=", " ", 
          RowBox[{"updateNotes", "[", 
           RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Prepend", "[", 
           RowBox[{"y", ",", " ", 
            RowBox[{"globalize", "[", 
             RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"y", "  ", "=", 
          RowBox[{"Prepend", "[", 
           RowBox[{"y", ",", " ", 
            RowBox[{"globalize", "[", 
             RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}], "]"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"m", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{"x", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", " ", 
            "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"While", " ", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ListQ", "[", "m", "]"}], " ", "\[And]", " ", 
            RowBox[{
             RowBox[{"Length", "[", "m", "]"}], ">", "0"}]}], ",", " ", 
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"First", "[", "m", "]"}]}]}], "]"}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"m", " ", "=", " ", 
          RowBox[{"SymbolicSBMLMathMLToExpression", "[", "m", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"y", ",", " ", 
            RowBox[{
             RowBox[{"\"\<arguments\>\"", "\[Rule]", " ", 
              RowBox[{"arguments", "[", "m", "]"}]}], "//", "Flatten"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"y", ",", 
            RowBox[{"\"\<math\>\"", "\[Rule]", " ", 
             RowBox[{"math", "[", "m", "]"}]}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"y", " ", "=", " ", 
          RowBox[{"globalize", "/@", "y"}]}], ";", " ", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"Apply", "[", 
           RowBox[{"addFunction", ",", "y"}], "]"}]}], ";"}], "  ", 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"n", "=", 
          RowBox[{"addFunction", "[", "opt", "]"}]}], ";"}]}], " ", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyFunction", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"modifyFunction", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell["unitToSBML, addUnit, deleteUnit, removeUnit", "Subsubsection"],

Cell[CellGroupData[{

Cell["getUnit", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getUnit", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$Units", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getUnit: \>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\< Unit definition: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< unit definitions.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$Units", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getUnitNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Units"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getUnitNumber: \>\"", "//", "boldOrange"}], 
            ",", 
            RowBox[{"\"\<Unit: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid units are \>\"", "//", "boldBlack"}], 
            ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getUnit", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getUnitNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", 
         RowBox[{"Return", "[", 
          RowBox[{
           RowBox[{"MB$Units", "[", 
            RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getUnit", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getUnit", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getUnit", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: getUnit: \>\"", "//", "boldOrange"}], ",", " ", 
        RowBox[{"\"\<Correct format is \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"\"\<getUnit[id]\>\"", "//", "boldRed"}], ",", " ", 
        RowBox[{
        "\"\< where id is an integer or an SID \>\"", "//", "boldBlack"}], 
        ",", 
        RowBox[{"\"\<getUnit[Integer]\>\"", "//", "boldRed"}], ",", " ", 
        RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<getUnit[{x1,x2,...}]\>\"", "//", "boldRed"}], ",", 
        RowBox[{
        "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
         "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfUnits", "[", "]"}], ":=", 
   RowBox[{"Length", "[", "MB$Units", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getUnits", "[", "]"}], ":=", " ", 
   RowBox[{"getUnit", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"getNumberOfUnits", "[", "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceUnit", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceUnit", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<unitDefinition\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", 
    " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Units", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<unitDefinition\>\"", ",", "x"}], "]"}]}], "]"}]}], 
          ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Units", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"MB$Units", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Units", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<unitDefinition\>\"", ",", "x"}], "]"}]}], ",", 
             "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Unit \>\"", ",", "i", ",", " ", "\"\< replaced.\>\""}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceUnit: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{
         "\"\< unable to replace unitDefinition \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceUnit", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<unitDefinition\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", 
    " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getUnitNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceUnit", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<unitDefinition\>\"", ",", "x"}], "]"}]}], "]"}], 
          ";", " ", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceUnit: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{
         "\"\< unable to replace unitDefinition \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceUnit", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
     RowBox[{"\"\<replaceUnit: \>\"", "//", "boldRed"}], ",", " ", 
     RowBox[{
     "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\<replaceUnit[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{
     "\"\< XMLElement[\\\"unitDefinition\\\",...]\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["unitToSBML", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"unitToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"unitToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfUnitDefinitions\>\"", ",", 
           RowBox[{"{", "}"}], ",", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"unitToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"unitToSymbolicSBML", "[", "opt", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"unitToSBML", "[", 
      RowBox[{"x_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"unitToSBML", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}],
     ";"}]}]}]], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389722014284484*^9, 3.389722030793953*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["deleteUnit, removeUnit", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteUnit", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p", ",", "sp"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//", 
        "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteUnit\>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "/", "boldRed"}], ",", 
          "\"\< was specified.\>\""}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<unit\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$Units"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<deleteUnit: c=\>\"", ",", "c"}], "]"}], ";"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"\[Not]", "MB$Modify"}], ",", "\[IndentingNewLine]", 
           StyleBox[
            RowBox[{"(*", " ", 
             RowBox[{
             "check", " ", "to", " ", "see", " ", "if", " ", "any", " ", 
              "species", " ", "or", " ", "parameters", " ", "reference", " ", 
              "this", " ", "unit"}], " ", "*)"}],
            FontWeight->"Plain"], 
           StyleBox[" ",
            FontWeight->"Plain"], 
           StyleBox["\[IndentingNewLine]",
            FontWeight->"Plain"], 
           RowBox[{
            RowBox[{"sp", " ", "=", " ", 
             RowBox[{"Position", "[", 
              RowBox[{"MB$Species", ",", " ", 
               RowBox[{"\"\<units\>\"", "\[Rule]", " ", "n"}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "sp", "]"}], ">", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"sp", " ", "=", " ", 
                RowBox[{"First", "/@", "sp"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"sp", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "MB$Species"}], ",", "#"}], "]"}], 
                   "&"}], ",", "sp"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
                 RowBox[{"\"\<The species \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{
                  RowBox[{"list2CommaSeparatedString", "[", "sp", "]"}], "//",
                   "boldRed"}], ",", " ", 
                 RowBox[{"\"\< refer to units \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{"n", "//", "boldRed"}]}], " ", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Return", "[", "False", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"sp", " ", "=", " ", 
             RowBox[{"Position", "[", 
              RowBox[{"MB$Parameters", ",", 
               RowBox[{"\"\<units\>\"", "\[Rule]", " ", "n"}]}], "]"}]}], ";",
             " ", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "sp", "]"}], ">", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"sp", " ", "=", " ", 
                RowBox[{"First", "/@", "sp"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"sp", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "MB$Parameters"}], ",", "#"}], 
                    "]"}], "&"}], ",", "sp"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
                 RowBox[{"\"\<The parameters \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{
                  RowBox[{"list2CommaSeparatedString", "[", "sp", "]"}], "//",
                   "boldRed"}], ",", " ", 
                 RowBox[{"\"\< refer to units \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{"n", "//", "boldRed"}]}], " ", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Return", "[", "False", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$Units", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$Units", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteUnit", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteUnit", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeUnit", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteUnit", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Unit \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\<Requested unit \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"MB$Currentid", "//", "boldRed"}], ",", 
          RowBox[{"\"\< can not be removed.\>\"", "//", "boldBlack"}]}], 
         "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addUnit", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Global`$DEBUG$ADDUNIT", "=", "False"}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addUnit", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "meta"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "Global`$DEBUG$ADDUNIT", ",", "\"\<addUnit[XMLElement]: \>\"", ",", 
         " ", 
         RowBox[{"XMLElement", "[", "x", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLid", "[", 
         RowBox[{"XMLElement", "[", "x", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"defaultUnit", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"\[Not]", 
             RowBox[{"removeDefaultUnit", "[", "n", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{
               "\"\<Warning: Unable to redefine default unit\>\"", "//", 
                "boldOrange"}], ",", 
               RowBox[{"\"\< Unit \>\"", "//", "boldBlack"}], ",", 
               RowBox[{"n", "//", "boldRed"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", 
              RowBox[{"{", "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
          ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"unitExists", "[", "n", "]"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"deleteUnit", "[", 
                RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], " ", ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{"MB$Echo", ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{
                    "\"\<Previous occurance of unit \>\"", "//", 
                    "boldBlack"}], ",", 
                    RowBox[{"n", "//", "boldRed"}], ",", 
                    RowBox[{"\"\< removed.\>\"", "//", "boldBlack"}]}], "]"}],
                    ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Print", "[", 
                 RowBox[{
                  RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
                  RowBox[{"\"\< Unit \>\"", "//", "boldBlack"}], ",", 
                  RowBox[{"n", "//", "boldRed"}], ",", 
                  RowBox[{"\"\< can not be added.\>\"", "//", "boldBlack"}]}],
                  "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"Return", "[", 
                 RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
              "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", "\"\<unit\>\"", ",", "True"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{"meta", ",", 
           RowBox[{"contextify", "[", "n", "]"}], ",", " ", "\"\<unit\>\"", 
           ",", " ", "True"}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$Units", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Units", ",", 
          RowBox[{"n", "\[Rule]", 
           RowBox[{"XMLElement", "[", "x", "]"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Unit \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addUnit", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "Global`$DEBUG$ADDUNIT", ",", "\"\<addUnit[options]: \>\"", ",", " ", 
         RowBox[{"{", "opt", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"MB$Echo", " ", "=", " ", 
          RowBox[{
           RowBox[{"Global`echo", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`echo", "\[Rule]", " ", "True"}], "}"}]}]}], ";"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"unitToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addUnit", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addUnit", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addUnit", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.432492619616638*^9, 3.432492756501921*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyUnit", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyUnit", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", "x", ",", "y", ",", "k", ",", 
         RowBox[{"dbg", "=", "True"}], ",", " ", "u", ",", "name", ",", " ", 
         "ann", ",", " ", "newann", ",", "unitann", ",", " ", "metaid"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`id", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"metaid", " ", "=", " ", 
         RowBox[{
          RowBox[{"Global`metaid", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`metaid", "\[Rule]", "1"}], "}"}]}]}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<unit\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"extractXMLOptions", "[", "x", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"metaid", "\[Equal]", " ", "1"}], ",", " ", 
             RowBox[{"metaid", "=", 
              RowBox[{
               RowBox[{"\"\<metaid\>\"", "/.", "y"}], "/.", 
               RowBox[{"{", 
                RowBox[{"\"\<metaid\>\"", "\[Rule]", "\"\<\>\""}], 
                "}"}]}]}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"stringrule", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"{", "opt", "}"}], ",", "y"}], "]"}], "//", 
               "Flatten"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"u", " ", "=", 
            RowBox[{"Cases", "[", 
             RowBox[{"x", ",", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<listOfUnits\>\"", ",", "___"}], "]"}], ",", 
              "Infinity"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "u", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"ListQ", "[", "u", "]"}], " ", "\[And]", " ", 
                 RowBox[{
                  RowBox[{"Length", "[", "u", "]"}], ">", "0"}]}], ",", " ", 
                RowBox[{"u", "=", 
                 RowBox[{"First", "[", "u", "]"}]}]}], "]"}], ";", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"Cases", "[", 
                RowBox[{"u", ",", " ", 
                 RowBox[{"XMLElement", "[", 
                  RowBox[{"\"\<unit\>\"", ",", "___"}], "]"}], ",", " ", 
                 "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"unitann", " ", "=", " ", 
               RowBox[{"getAnnotations", "/@", "u"}]}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"expressionate", "/@", 
                RowBox[{"(", 
                 RowBox[{"extractXMLOptions", "/@", "u"}], ")"}]}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Append", "[", 
                   RowBox[{"#1", ",", 
                    RowBox[{"Global`annotation", "\[Rule]", " ", "#2"}]}], 
                   "]"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"u", ",", "unitann"}], "}"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"k", " ", "=", " ", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Global`kind", "/.", "#"}], "&"}], ",", " ", "u"}], 
                "]"}]}], ";", " ", "\[IndentingNewLine]", 
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Rule", "[", 
                   RowBox[{"#1", ",", " ", "#2"}], "]"}], "&"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", "u"}], "}"}]}], "]"}]}], ";", " ", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"u", " ", "=", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"\"\<unit\>\"", "/.", "y"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"\"\<unit\>\"", "\[Rule]", " ", "u"}], "}"}]}], "//",
                 "expressionate"}]}], ";", " ", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"name", " ", "=", 
               RowBox[{
                RowBox[{"\"\<name\>\"", "/.", "y"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"\"\<name\>\"", "\[Rule]", " ", "\"\<\>\""}], 
                 "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"ann", " ", "=", " ", 
               RowBox[{"getAnnotations", "[", "x", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"newann", " ", "=", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Global`annotation", "/.", 
                  RowBox[{"{", "opt", "}"}]}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"Global`annotation", "\[Rule]", " ", 
                   RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"ann", " ", "=", " ", 
               RowBox[{"Join", "[", 
                RowBox[{"ann", ",", " ", "newann"}], "]"}]}], ";", " ", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"y", "  ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Global`id", "\[Rule]", " ", "n"}], ",", " ", 
                 RowBox[{"Global`unit", "\[Rule]", " ", "u"}], ",", 
                 RowBox[{"Global`annotation", "\[Rule]", " ", "ann"}], ",", 
                 " ", 
                 RowBox[{"Global`metaid", "\[Rule]", "metaid"}]}], "}"}]}], 
              ";", " ", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"name", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
                RowBox[{"y", " ", "=", " ", 
                 RowBox[{"Append", "[", 
                  RowBox[{"y", ",", " ", 
                   RowBox[{"Global`name", "\[Rule]", " ", "name"}]}], 
                  "]"}]}]}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
           " ", "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "True"}], ";", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addUnit", ",", "y"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "False"}], ";"}], "\[IndentingNewLine]", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addUnit", "[", "opt", "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifyUnit", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifyUnit", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["compartmentTypeToSBML, getCompartmentType, \
removeCompartmentType, addCompartmentType, modifyCompartmentType",
 FontFamily->"Times",
 FontSize->12]], "Subsection"],

Cell[CellGroupData[{

Cell["getCompartmentType", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentType", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"getNumberOfCompartmentTypes", "[", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Error: getCompartmentType: \>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\< compartmentType: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< compartmentTypes.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$CompartmentTypes", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartmentTypeNumber", "[", 
    RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "=", " ", 
       RowBox[{"First", "/@", "MB$CompartmentTypes"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Position", "[", 
        RowBox[{"m", ",", " ", 
         RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<Error: getCompartmentTypeNumber: \>\"", "//", "boldOrange"}], 
           ",", 
           RowBox[{"\"\<compartmentType: \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"id", "//", "boldRed"}], ",", 
           RowBox[{
           "\"\< does not exist. Valid compartmentType are \>\"", "//", 
            "boldBlack"}], ",", " ", 
           RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
         RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
        RowBox[{"n", "=", 
         RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentType", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$CompartmentTypes"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "m", "]"}], ">", "0"}], ",", " ", 
         RowBox[{"m", " ", "=", 
          RowBox[{"list2CommaSeparatedString", "[", "m", "]"}]}], ",", " ", 
         RowBox[{
         "m", "=", "\"\<No compartmentTypes have been defined.\>\""}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\< getCompartmentType: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"\"\<compartmentType: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid compartmentTypes are: \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldBlue"}]}], "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$CompartmentTypes", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartmentType", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getCompartmentType", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfCompartmentTypes", "[", "]"}], ":=", " ", 
   RowBox[{"Length", "[", "MB$CompartmentTypes", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentTypes", "[", "]"}], ":=", " ", 
    RowBox[{"getCompartmentType", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"getNumberOfCompartmentTypes", "[", "]"}], "]"}], "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentType", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: getCompartmentType: \>\"", "//", "boldOrange"}], 
         ",", " ", 
         RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getCompartmentType[id]\>\"", "//", "boldRed"}], ",", 
         " ", 
         RowBox[{
         "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"\"\<getCompartmentType[Integer]\>\"", "//", "boldRed"}], 
         ",", " ", 
         RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getCompartmentType[{x1,x2,...}]\>\"", "//", "boldRed"}],
          ",", 
         RowBox[{
         "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
          "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["CompartmentTypeToSBML", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compartmentTypeToSBML", "[", 
     RowBox[{"{", 
      RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "SBML", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBML", " ", "=", 
        RowBox[{"Flatten", "[", " ", 
         RowBox[{"compartmentTypeToSymbolicSBML", "/@", 
          RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<listOfCompartmentTypes\>\"", ",", 
          RowBox[{"{", "}"}], ",", "SBML"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", "=", 
        RowBox[{"ExportXMLString", "[", "SBML", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"SBML", " ", "=", " ", 
        RowBox[{"sunderscore", "[", "SBML", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "SBML", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compartmentTypeToSBML", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"compartmentTypeToSymbolicSBML", "[", "opt", "]"}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"r", "=", 
        RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", " ", 
        RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compartmentTypeToSBML", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"compartmentTypeToSBML", "[", 
     RowBox[{
      RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compartmentTypeToSBML", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Print", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"boldOrange", "[", "\"\<Warning:\>\"", "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{
      "boldBlack", "[", 
       "\"\<The argument to compartmentTypeToSBML must be either a sequence \
of options or a list of option lists\>\"", "]"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.38972203664624*^9, 3.389722053884151*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["removeCompartmentType, deleteCompartmentType", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteCompartmentType", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//", 
        "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteCompartmentType\>\"", "//", "boldRed"}], 
          ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "/", "boldRed"}], ",", 
          "\"\< was specified.\>\""}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<compartmentType\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$CompartmentTypes"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$CompartmentTypes", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$CompartmentTypes", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteCompartmentType", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteCompartmentType", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeCompartmentType", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteCompartmentType", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Compartment Type \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\<Requested compartmentType \>\"", "//", "boldBlack"}], 
          ",", 
          RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< does not exist. No removal peformed.\>\"", "//", 
           "boldBlack"}]}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addCompartmentType", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addCompartmentType", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", " ", "opts", ",", "sub", ",", " ", "meta"}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", 
          "2.15"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< Cannot add a compartmentType in SBML Level \>\"", "//", 
             "boldBlack"}], ",", 
            RowBox[{"MB$LevelVersion", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLid", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{
         RowBox[{"{", "x", "}"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"sub", "=", 
        RowBox[{
         RowBox[{"{", "x", "}"}], "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "for", " ", "previous", " ", "occurance", " ", "of", 
          " ", "this", " ", "Compartment", " ", "type"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteCompartmentType", "[", 
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of compartmentType \>\"", "//", 
              "boldGreen"}], ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", " ", "\"\<compartmentType\>\"", ",", "True"}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{"meta", ",", 
           RowBox[{"contextify", "[", "n", "]"}], ",", " ", 
           "\"\<compartmentType\>\"", ",", " ", "True"}], "]"}]}], "]"}], ";",
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"r", "=", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<compartmentType\>\"", ",", "opts", ",", "sub"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MB$CompartmentTypes", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$CompartmentTypes", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<CompartmentType \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addCompartmentType", "[", 
     RowBox[{
      RowBox[{"s_", "?", "ListQ"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"addCompartmentType", "[", 
        RowBox[{"#", ",", "opt"}], "]"}], "&"}], ",", "s"}], "]"}]}], ";"}], 
  "    ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addCompartmentType", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n", ",", " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkOptions", "[", 
        RowBox[{
        "addCompartmentType", ",", " ", "opt", ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "Global`annotation", ",", "  ", "Global`id", ",", " ", 
           "Global`metaid", ",", "  ", "Global`name", ",", "Global`notes"}], 
          "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addCompartmentType[opt]:{opt}:\>\"", ",", " ", 
           RowBox[{"{", "opt", "}"}]}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"compartmentTypeToSymbolicSBML", "@@", 
         RowBox[{"{", "opt", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addCompartmentType[opt]:r:\>\"", ",", "r"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addCompartmentType", "[", "r", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addCompartmentType[opt]:n:\>\"", ",", "n"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addCompartmentType", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addCompartmentType", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyCompartmentType", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyCompartmentType", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", "x", ",", "y", ",", "ann", ",", " ", "notes"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`id", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<compartmentType\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", " ", "=", " ", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}], "]"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addCompartmentType", ",", "y"}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addCompartmentType", "[", "opt", "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifyCompartmentType", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifyCompartmentType", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell["\<\
compartmentToSBML, addCompartment, removeCompartment, deleteCompartment, \
getCompartment, createCompartment\
\>", "Subsubsection"],

Cell["compartmentCreate, compartmentCreateWith", "Subsubsection",
 CellMargins->{{89.125, Inherited}, {Inherited, Inherited}}],

Cell[CellGroupData[{

Cell["getCompartment", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartment", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$Compartments", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getCompartment: \>\"", "//", "boldOrange"}], 
            ",", 
            RowBox[{"\"\< Compartment: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< compartments.\>\"", "//", "boldBlack"}]}], "]"}], 
          ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$Compartments", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Compartments"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Error: getCompartmentNumber: \>\"", "//", "boldOrange"}], 
            ",", 
            RowBox[{"\"\<Compartment: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid compartments are \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartment", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"getCompartmentNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", 
         RowBox[{"Return", "[", 
          RowBox[{
           RowBox[{"MB$Compartments", "[", 
            RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartment", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getCompartment", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartment", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: getCompartment: \>\"", "//", "boldOrange"}], ",", 
        " ", 
        RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"\"\<getCompartment[id]\>\"", "//", "boldRed"}], ",", " ", 
        RowBox[{
        "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
        ",", 
        RowBox[{"\"\<getCompartment[Integer]\>\"", "//", "boldRed"}], ",", 
        " ", 
        RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"\"\<getCompartment[{x1,x2,...}]\>\"", "//", "boldRed"}], ",", 
        RowBox[{
        "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
         "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfCompartments", "[", "]"}], ":=", 
   RowBox[{"Length", "[", "MB$Compartments", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartments", "[", "]"}], ":=", " ", 
    RowBox[{"getCompartment", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"getNumberOfCompartments", "[", "]"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceCompartment", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceCompartment", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<compartment\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", 
    " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Compartments", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<compartment\>\"", ",", "x"}], "]"}]}], "]"}]}], 
          ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Compartments", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MB$Compartments", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Compartments", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<compartment\>\"", ",", "x"}], "]"}]}], ",", "i"}],
             "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Compartment \>\"", ",", "i", ",", " ", 
              "\"\< replaced.\>\""}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceCompartment: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{
         "\"\< unable to replace compartment \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceCompartment", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<compartment\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", 
    " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getCompartmentNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceCompartment", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<compartment\>\"", ",", "x"}], "]"}]}], "]"}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceCompartment: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{
         "\"\< unable to replace compartment \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceCompartment", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
     RowBox[{"\"\<replaceCompartment: \>\"", "//", "boldRed"}], ",", " ", 
     RowBox[{
     "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\<replaceCompartment[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{
     "\"\< XMLElement[\\\"compartment\\\",...]\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["compartmentExists", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"compartmentExists", "[", "n_", "]"}], ":=", " ", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"First", "/@", "MB$Compartments"}], ",", "n"}], "]"}]}], 
  ";"}]], "Input",
 CellMargins->{{90.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["compartmentToSBML", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"compartmentToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"compartmentToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfCompartments\>\"", ",", 
           RowBox[{"{", "}"}], ",", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"compartmentToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"compartmentToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"compartmentToSBML", "[", 
      RowBox[{"x_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"compartmentToSBML", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", "x"}], ",", " ", "opt"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389722059398851*^9, 3.389722072699695*^9}, {
  3.3897224229382563`*^9, 3.389722436509179*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["deleteCompartment, removeCompartment", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteCompartment", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p", ",", " ", "sp", ",", " ", "mod"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//", 
        "stringer"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteCompartment\>\"", "//", "boldOrange"}], 
          ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "/", "boldRed"}], ",", 
          "\"\< was specified.\>\""}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<compartment\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$Compartments"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"\[Not]", "MB$Modify"}], ",", "\[IndentingNewLine]", 
           StyleBox[
            RowBox[{"(*", " ", 
             RowBox[{
             "check", " ", "to", " ", "see", " ", "if", " ", "there", " ", 
              "are", " ", "any", " ", "species", " ", "references", " ", "to",
               " ", "this", " ", "compartment"}], " ", "*)"}],
            FontWeight->"Plain"], 
           StyleBox[" ",
            FontWeight->"Plain"], 
           StyleBox["\[IndentingNewLine]",
            FontWeight->"Plain"], 
           RowBox[{
            RowBox[{"sp", " ", "=", " ", 
             RowBox[{"Position", "[", 
              RowBox[{"MB$Species", ",", " ", 
               RowBox[{"\"\<compartment\>\"", "\[Rule]", " ", "n"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "sp", "]"}], ">", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"sp", " ", "=", " ", 
                RowBox[{"First", "/@", "sp"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"sp", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "MB$Species"}], ",", "#"}], "]"}], 
                   "&"}], ",", "sp"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", " ", 
                 RowBox[{"\"\<The species \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{
                  RowBox[{"list2CommaSeparatedString", "[", "sp", "]"}], "//",
                   "boldRed"}], ",", " ", 
                 RowBox[{
                 "\"\< refers to compartment \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{"n", "//", "boldRed"}]}], " ", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Return", "[", "False", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "check", " ", "for", " ", "other", " ", "compartments", " ", 
               "referring", " ", "to", " ", "this"}], " ", "*)"}],
             FontWeight->"Plain"], "\[IndentingNewLine]", 
            RowBox[{"sp", " ", "=", " ", 
             RowBox[{"Position", "[", 
              RowBox[{"MB$Compartments", ",", " ", 
               RowBox[{"\"\<outside\>\"", "\[Rule]", " ", "n"}]}], "]"}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "sp", "]"}], ">", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"sp", " ", "=", " ", 
                RowBox[{"First", "/@", "sp"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"sp", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "MB$Compartments"}], ",", "#"}], 
                    "]"}], "&"}], ",", "sp"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", " ", 
                 RowBox[{"\"\<The compartment \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{
                  RowBox[{"list2CommaSeparatedString", "[", "sp", "]"}], "//",
                   "boldRed"}], ",", " ", 
                 RowBox[{
                 "\"\< refers to compartment \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{"n", "//", "boldRed"}], ",", 
                 RowBox[{
                 "\"\< in its outside field. This message usually occurs when \
compartments are not defined in the proper order. \>\"", "//", 
                  "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Return", "[", "False", "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", " ", 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"delete", " ", "the", " ", "compartment"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$Compartments", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$Compartments", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"forgetCompartment", "[", "n", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteCompartment", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteCompartment", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeCompartment", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteCompartment", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Compartment \>\"", "//", "boldGreen"}], ",", 
          RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\<Requested compartment \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"MB$Currentid", "//", "boldRed"}], ",", 
          RowBox[{"\"\< can not be removed.\>\"", "//", "boldBlack"}]}], 
         "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.404052892859133*^9, 3.4040528941989717`*^9}, {
  3.4040529468350267`*^9, 3.404052958820764*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["addCompartment", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"addCompartment", "[", 
      RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "n", ",", "r", ",", "outside", ",", " ", "comps", ",", " ", "meta"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"n", "=", 
         RowBox[{"getSBMLid", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"compartmentExists", "[", "n", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"deleteCompartment", "[", 
              RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], " ", ",", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{"MB$Echo", ",", 
                RowBox[{"Print", "[", 
                 RowBox[{
                  RowBox[{
                  "\"\<Previous occurance of \>\"", "//", "boldGreen"}], ",", 
                  RowBox[{"n", "//", "boldBlue"}], ",", 
                  RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}],
                "]"}], ";"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
                RowBox[{"\"\< Compartment \>\"", "//", "boldBlack"}], ",", 
                RowBox[{"n", "//", "boldRed"}], ",", 
                RowBox[{
                "\"\< cannot be added because it already exists. This message \
usually occurs when compartments are defined out of order in the SBML model \
and added automatically by SBMLRead during the prior (invalid) reference. \
\>\"", "//", "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"Return", "[", 
               RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"addID", "[", 
         RowBox[{"n", ",", " ", "\"\<compartment\>\"", ",", "True"}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"meta", " ", "=", " ", 
         RowBox[{"getSBMLfield", "[", 
          RowBox[{"\"\<metaid\>\"", ",", " ", 
           RowBox[{"XMLElement", "[", "x", "]"}]}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
          RowBox[{"addMetaID", "[", 
           RowBox[{"meta", ",", 
            RowBox[{"contextify", "[", "n", "]"}], ",", " ", 
            "\"\<compartment\>\"", ",", " ", "True"}], "]"}]}], "]"}], ";", 
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"MB$Compartments", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"MB$Compartments", ",", 
           RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pushCompartment", "[", "n", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"outside", " ", "=", " ", 
         RowBox[{"getSBMLfield", "[", 
          RowBox[{"\"\<outside\>\"", ",", "r"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"outside", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"comps", " ", "=", " ", 
            RowBox[{"First", "/@", "MB$Compartments"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"MemberQ", "[", 
               RowBox[{"comps", ",", "outside"}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"addCompartment", "[", "outside", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Compartment \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"n", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addCompartment", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"r", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"MB$Echo", " ", "=", " ", 
          RowBox[{
           RowBox[{"Global`echo", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`echo", "\[Rule]", " ", "True"}], "}"}]}]}], ";"}],
         " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"compartmentToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"n", "=", 
         RowBox[{"addCompartment", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addCompartment", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"addCompartment", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.404053008009595*^9, 3.40405308225838*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyCompartment", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyCompartment", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", "x", ",", "y", ",", "ann", ",", "notes"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`id", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<compartment\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", " ", "=", " ", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", "  ", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}], "]"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "True"}], ";", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addCompartment", ",", "y"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "False"}], ";"}], "\[IndentingNewLine]", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addCompartment", "[", "opt", "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifyCompartment", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifyCompartment", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell["\<\
parameterToSBML, addParameter, removeParameter, deleteParameter\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell["getParameter", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getParameter", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$Parameters", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getParameter: \>\"", "//", "boldOrange"}], 
            ",", 
            RowBox[{"\"\< Parameter: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< parameters\>\"", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$Parameters", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getParameterNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n", ",", " ", "sid"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sid", "=", 
        RowBox[{"stringer", "[", "id", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m", "=", 
        RowBox[{"First", "/@", "MB$Parameters"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", "sid"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Error: getParameterNumber: \>\"", "//", "boldOrange"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<Parameters: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"id", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. Valid parameters are \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getParameter", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"getParameterNumber", "[", "id", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "=", 
           RowBox[{"Last", "[", 
            RowBox[{"MB$Parameters", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "p", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getParameter", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getParameter", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getParameter", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: getParameter: \>\"", "//", "boldOrange"}], ",", 
        " ", 
        RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"\"\<getParameter[id]\>\"", "//", "boldRed"}], ",", " ", 
        RowBox[{
        "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
        ",", 
        RowBox[{"\"\<getParameter[Integer]\>\"", "//", "boldRed"}], ",", " ", 
        RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<getParameter[{x1,x2,...}]\>\"", "//", "boldRed"}], ",", 
        RowBox[{
        "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
         "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfParameters", "[", "]"}], ":=", 
   RowBox[{"Length", "[", "MB$Parameters", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getParameters", "[", "]"}], ":=", " ", 
   RowBox[{"getParameter", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"getNumberOfParameters", "[", "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceParameter", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceParameter", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<parameter\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Parameters", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<parameter\>\"", ",", "x"}], "]"}]}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Parameters", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MB$Parameters", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Parameters", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<parameter\>\"", ",", "x"}], "]"}]}], ",", "i"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Parameter \>\"", ",", "i", ",", " ", "\"\< replaced.\>\""}],
              "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceParameter: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{"\"\< unable to replace parameter \>\"", "//", "boldBlack"}],
          ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceParameter", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<parameter\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getParameterNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceParameter", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<parameter\>\"", ",", "x"}], "]"}]}], "]"}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceParameter: \>\"", "//", "boldOrange"}], 
         ",", 
         RowBox[{"\"\< unable to replace parameter \>\"", "//", "boldBlack"}],
          ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceParameter", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
     RowBox[{"\"\<replaceParameter: \>\"", "//", "boldRed"}], ",", " ", 
     RowBox[{
     "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\<replaceParameter[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{
     "\"\< XMLElement[\\\"parameter\\\",...]\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["parameterToSBML", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"parameterToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"parameterToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfParameters\>\"", ",", 
           RowBox[{"{", "}"}], ",", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"parameterToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"parameterToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"parameterToSBML", "[", 
      RowBox[{"x_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"parameterToSBML", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}],
     ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389722078038561*^9, 3.389722093036092*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["removeParameter, deleteParameter", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteParameter", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], 
        "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteParameter\>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "/", "boldRed"}], ",", 
          "\"\< was specified.\>\""}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<parameter\>\""}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$Parameters"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$Parameters", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$Parameters", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteParameter", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteParameter", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeParameter", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteParameter", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Parameter \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\<Requested Parameter \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"MB$Currentid", "//", "boldRed"}], ",", 
          RowBox[{"\"\< can not be removed.\>\"", "//", "boldBlack"}]}], 
         "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addParameter", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addParameter", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n", ",", " ", "units", ",", 
        RowBox[{"dbg", "=", "False"}], ",", " ", "val", ",", " ", "meta"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLid", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteParameter", "[", 
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], " ", ",", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of parameter \>\"", "//", "boldGreen"}], 
             ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", "\"\<parameter\>\"", ",", "True"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{"meta", ",", 
           RowBox[{"contextify", "[", "n", "]"}], ",", " ", 
           "\"\<parameter\>\"", ",", " ", "True"}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$Parameters", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Parameters", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "to", " ", "make", " ", "sure", " ", "assigned", " ", 
          "units", " ", "exits"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"units", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<units\>\"", ",", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"units", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"unitExists", "[", "units", "]"}]}], ",", " ", 
           RowBox[{"addUnit", "[", "units", "]"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addParameter: r=\>\"", ",", "r"}], "]"}]}], "]"}], ";",
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"val", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<value\>\"", ",", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"val", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"val", "=", 
          RowBox[{"\"\<=\>\"", "<>", 
           RowBox[{"stringer", "[", "val", "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Parameter \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"val", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addParameter", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n", ",", " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addParameter: {opt}: \>\"", ",", " ", 
           RowBox[{"{", "opt", "}"}]}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"parameterToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addParameter", "[", "r", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addParameter", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dbg", "=", "False"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<addParameter: id = \>\"", ",", " ", "id", ",", " ", 
          "\"\< {opt}=\>\"", ",", " ", 
          RowBox[{"{", "opt", "}"}]}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"addParameter", "[", 
        RowBox[{
         RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
        "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.396982147443625*^9, 3.3969821657437572`*^9}, {
  3.3969825083221188`*^9, 3.396982569107377*^9}, {3.3969887426666718`*^9, 
  3.396988748184388*^9}, {3.3969891753937597`*^9, 3.396989176853134*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyParameter", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyParameter", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "n", ",", "x", ",", "y", ",", "ann", ",", " ", "notes", ",", " ", 
         RowBox[{"bug", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`id", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<parameter\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"bug", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<x=\>\"", ",", " ", "x"}], "]"}]}], "]"}], ";", " ",
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"bug", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<y(1)=\>\"", ",", " ", "y"}], "]"}]}], "]"}], ";", 
           " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", " ", "=", " ", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"x", ",", "opt"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"bug", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<y(2)=\>\"", ",", " ", "y"}], "]"}]}], "]"}], ";", 
           " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", "notes"}], "]"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"bug", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<y(3)=\>\"", ",", " ", "y"}], "]"}]}], "]"}], ";", 
           " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "True"}], ";", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addParameter", ",", "y"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"bug", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<n=\>\"", ",", " ", "n"}], "]"}]}], "]"}], ";", " ",
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "False"}], ";"}], "\[IndentingNewLine]", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addParameter", "[", "opt", "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifyParameter", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifyParameter", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.4187392013143578`*^9, 3.41873924364272*^9}, {
  3.4187392796090527`*^9, 3.41873929513476*^9}, {3.41873944125149*^9, 
  3.418739441955785*^9}}]
}, Closed]],

Cell["\<\
initialAssignmentToSBML, add.., delete.., remove.., modify.., get... \
InitialAssignment\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell["getInitialAssignment", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getInitialAssignment", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$InitialAssignments", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<getInitialAssignment: \>\"", "//", "boldBlack"}], 
            ",", 
            RowBox[{"\"\< initialAssignment: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< initialAssignments\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$InitialAssignments", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getInitialAssignmentNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n", ",", " ", "sid"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sid", "=", 
        RowBox[{"stringer", "[", "id", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m", "=", 
        RowBox[{"First", "/@", "MB$InitialAssignments"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", "sid"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\<getInitialAssignmentNumber: \>\"", "//", "boldBlack"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"\"\<initialAssignment for \>\"", "//", "boldBlack"}], 
            ",", 
            RowBox[{"id", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< does not exist.\>\"", "//", "boldBlack"}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "0", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getInitialAssignment", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"getInitialAssignmentNumber", "[", "id", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "=", 
           RowBox[{"Last", "[", 
            RowBox[{"MB$InitialAssignments", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "p", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
     "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInitialAssignment", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getInitialAssignment", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInitialAssignment", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
        RowBox[{"\"\<getInitialAssignment: \>\"", "//", "boldBlack"}], ",", 
        " ", 
        RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"\"\<getInitialAssignment[id]\>\"", "//", "boldBlue"}], ",", 
        " ", 
        RowBox[{
        "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
        ",", 
        RowBox[{"\"\<getInitialAssignment[Integer]\>\"", "//", "boldBlue"}], 
        ",", " ", 
        RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "\"\<getInitialAssignment[{x1,x2,...}]\>\"", "//", "boldBlue"}], ",", 
        RowBox[{
        "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
         "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfInitialAssignments", "[", "]"}], ":=", 
   RowBox[{"Length", "[", "MB$InitialAssignments", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInitialAssignments", "[", "]"}], ":=", " ", 
   RowBox[{"getInitialAssignment", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"getNumberOfInitialAssignments", "[", "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["initialAssignmentToSBML", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"initialAssignmentToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"initialAssignmentToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfInitialAssignments\>\"", ",", 
           RowBox[{"{", "}"}], ",", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"initialAssignmentToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"initialAssignmentToSymbolicSBML", "[", "opt", "]"}]}], ";", 
        " ", "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"initialAssignmentToSBML", "[", 
      RowBox[{"x_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"initialAssignmentToSBML", "[", 
      RowBox[{
       RowBox[{"Global`symbol", "\[Rule]", " ", "x"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389722097686442*^9, 3.3897221126128473`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["remove -, deleteInitialAssignment", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteInitialAssignment", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p", ",", " ", "meta", ",", " ", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`symbol", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`symbol", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"\"\< deleteInitialAssignment\>\"", "//", "boldBlack"}], 
          ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<symbol\>\"", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< was specified.\>\"", "//", "boldBlack"}]}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$InitialAssignments"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$InitialAssignments", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$InitialAssignments", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "remove", " ", "metaids", " ", "pointing", " ", "to", " ", "n"}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"meta", " ", "=", 
          RowBox[{
           RowBox[{"functionate", "[", 
            RowBox[{"\"\<initialAssignment\>\"", ",", " ", "n"}], "]"}], "/.", 
           RowBox[{"(", 
            RowBox[{"Reverse", "/@", "$SBML$MetaIDAssociations"}], ")"}]}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dbg", "\[Equal]", "True"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<deleteInitialAssignment: meta, n: \>\"", ",", " ", 
              RowBox[{"{", 
               RowBox[{"meta", ",", " ", "n"}], "}"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"removeMetaID", "[", 
          RowBox[{"meta", ",", " ", "\"\<initialAssignment\>\""}], "]"}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteInitialAssignment", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteInitialAssignment", "[", 
    RowBox[{
     RowBox[{"Global`symbol", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeInitialAssignment", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteInitialAssignment", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<InitialAssignment for \>\"", "//", "boldGreen"}], 
            ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\<Requested initialAssignment for \>\"", "//", "boldBlack"}], 
          ",", 
          RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< could not be removed.\>\"", "//", "boldBlack"}]}], 
         "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addInitialAssignment", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addInitialAssignment", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n", ",", " ", "meta"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", "2.2"}],
          ",", " ", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<addInitialAssignment: initialAssignment is not permitted in \
SBML level.version \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"MB$LevelVersion", "//", "boldBlue"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<symbol\>\"", ",", " ", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteInitialAssignment", "[", 
          RowBox[{"Global`symbol", "\[Rule]", " ", "n"}], "]"}], " ", ",", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of initialAssignment for \>\"", "//", 
              "boldGreen"}], ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"addMetaID", "[", 
           RowBox[{"meta", ",", 
            RowBox[{
            "\"\<initialAssignment[\>\"", "<>", "n", "<>", "\"\<]\>\""}], ",",
             " ", "\"\<initialAssignment\>\"", ",", " ", "True"}], "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"MB$InitialAssignments", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$InitialAssignments", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"checkInitialAssignment", "[", 
        RowBox[{"r", ",", " ", "\"\<addInitialAssignment\>\""}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<InitialAssignment for \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addInitialAssignment", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"initialAssignmentToSymbolicSBML", "[", "opt", "]"}]}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addInitialAssignment", "[", "r", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addInitialAssignment", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addInitialAssignment", "[", 
    RowBox[{
     RowBox[{"Global`symbol", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
    "]"}]}], ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceInitialAssignment", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceInitialAssignment", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<initialAssignment\>\"", ",", "x___"}], "]"}]}], "]"}], ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$InitialAssignments", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<symbol\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<initialAssignment\>\"", ",", "x"}], "]"}]}], 
            "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$InitialAssignments", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MB$InitialAssignments", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$InitialAssignments", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<initialAssignment\>\"", ",", "x"}], "]"}]}], ",", 
             "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<InitialAssignment \>\"", ",", "i", ",", " ", 
              "\"\< replaced.\>\""}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
         RowBox[{"\"\< replaceParameter: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{
         "\"\< unable to replace initialAssignment \>\"", "//", "boldBlack"}],
          ",", 
         RowBox[{"i", "//", "boldBlue"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceInitialAssignment", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<initialAssignment\>\"", ",", "x___"}], "]"}]}], "]"}], ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getInitialAssignmentNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceInitialAssignment", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<initialAssignment\>\"", ",", "x"}], "]"}]}], "]"}], 
          ";", " ", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
         RowBox[{"\"\< replaceInitialAssignment: \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{
         "\"\< unable to replace initialAssignment for \>\"", "//", 
          "boldBlack"}], ",", 
         RowBox[{"id", "//", "boldBlue"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceInitialAssignment", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
     RowBox[{"\"\<replaceInitialAssignment: \>\"", "//", "boldBlack"}], ",", 
     " ", 
     RowBox[{
     "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\<replaceInitialAssignment[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer|SID,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{
     "\"\< XMLElement[\\\"initialAssignment\\\",...]\>\"", "//", 
      "boldBlack"}], ",", 
     RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyInitialAssignment", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyInitialAssignment", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "n", ",", "x", ",", "y", ",", "ann", ",", " ", "notes", ",", " ", 
         "oldmath", ",", "xmlsub", ",", " ", 
         RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`symbol", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`symbol", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<initialAssignment\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", "=", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"stringToNotes", "[", 
              RowBox[{"x", ",", "opt"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", "notes"}], "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"xmlsub", "=", 
            RowBox[{"extractXMLSubElements", "[", "x", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<modifyInitialAssignment: xmlsub: \>\"", ",", " ", 
               "xmlsub"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"oldmath", " ", "=", " ", 
            RowBox[{"Cases", "[", 
             RowBox[{"xmlsub", ",", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<math\>\"", ",", "___"}], "]"}]}], "]"}]}], ";", 
           " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "oldmath", "]"}], ">", "1"}], ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
               "\"\<modifyInitialAssignment: previous value of \
initialAssignment for \>\"", "//", "boldblack"}], ",", "\[IndentingNewLine]", 
               RowBox[{"n", "//", "boldBlue"}], ",", " ", 
               RowBox[{
               "\"\< has multiple math fields. Only the first will be \
retrieved. \>\"", "//", "boldBlack"}]}], "\[IndentingNewLine]", "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "oldmath", "]"}], "<", "1"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                "\"\<modifyInitialAssignment: previous value of \
initialAssignment for \>\"", "//", "boldblack"}], ",", "\[IndentingNewLine]", 
                RowBox[{"n", "//", "boldBlue"}], ",", " ", 
                RowBox[{
                "\"\< has no math field.  \>\"", "//", "boldBlack"}]}], 
               "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"ListQ", "[", "oldmath", "]"}], " ", "\[And]", " ", 
                 RowBox[{
                  RowBox[{"Length", "[", "oldmath", "]"}], ">", "0"}]}], ",", 
                " ", 
                RowBox[{"oldmath", "=", 
                 RowBox[{"First", "[", "oldmath", "]"}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"dbg", ",", " ", 
                RowBox[{"Print", "[", 
                 RowBox[{
                 "\"\<modifyInitialAssignment: oldmath: \>\"", ",", " ", 
                  "oldmath"}], "]"}]}], "]"}], ";", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"oldmath", " ", "=", " ", 
               RowBox[{"MathMLToInfix", "[", 
                RowBox[{"XMLOut", "[", "oldmath", "]"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"dbg", ",", " ", 
                RowBox[{"Print", "[", 
                 RowBox[{
                 "\"\<modifyInitialAssignment: oldmath: \>\"", ",", " ", 
                  "oldmath"}], "]"}]}], "]"}], ";", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"y", " ", "=", " ", 
               RowBox[{"Append", "[", 
                RowBox[{"y", ",", " ", 
                 RowBox[{"Global`math", "\[Rule]", " ", "oldmath"}]}], 
                "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<modifyInitialAssignment: y:\>\"", ",", " ", "y"}], 
              "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "True"}], ";", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addInitialAssignment", ",", "y"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "False"}], ";"}], "\[IndentingNewLine]", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addInitialAssignment", "[", "opt", "]"}]}], ";"}]}], " ",
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifyInitialAssignment", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifyInitialAssignment", "[", 
      RowBox[{
       RowBox[{"Global`symbol", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.3882641174993067`*^9, {3.388264160170043*^9, 3.388264166780324*^9}, {
   3.388264238723756*^9, 3.388264276119384*^9}, {3.388264398854693*^9, 
   3.388264416648786*^9}, {3.388264485713993*^9, 3.388264524104473*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["checkInitialAssignment", "Subsubsection",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"checkInitialAssignment", "[", 
    RowBox[{"r_", ",", "calledby_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dbg", "=", "False"}], ",", "\[IndentingNewLine]", 
       "symbolsReferenced", ",", "math", ",", "options", ",", "subXML", ",", 
       " ", "XML2Symbol", ",", "knownSymbols", ",", "\[IndentingNewLine]", 
       "unknownSymbols", ",", "variable", ",", "ruleType", ",", "hf", ",", 
       " ", "csymbols", ",", " ", "mycsymbol", ",", " ", "mathexpression", 
       ",", "symbol", ",", "\[IndentingNewLine]", "calledbySBMLRead"}], "}"}],
      ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"calledbySBMLRead", "=", 
       RowBox[{"(", 
        RowBox[{"calledby", "==", "\"\<calledbySBMLRead\>\""}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"XML2Symbol", "[", 
        RowBox[{"\"\<ci\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "x_", "}"}]}], "]"}], ":=", " ", "x"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"XML2Symbol", "[", "x___", "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"options", "=", 
       RowBox[{"extractXMLOptions", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"subXML", "=", 
       RowBox[{"extractXMLSubElements", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"symbol", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\"\<symbol\>\"", "/.", "options"}], ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{
         "\"\<symbol\>\"", "\[Rule]", " ", 
          "\"\<??-symbol-not-specified-??\>\""}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"First", "/@", "$SBML$IDTable"}], ",", " ", "symbol"}], 
         "]"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"p", ",", "s"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"p", "=", 
             RowBox[{"Position", "[", 
              RowBox[{"$SBML$IDTable", ",", " ", "symbol"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{"ListQ", "[", "p", "]"}], ",", " ", 
              RowBox[{"p", "=", 
               RowBox[{"First", "[", "p", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"s", "=", 
             RowBox[{"$SBML$IDTable", "[", 
              RowBox[{"[", 
               RowBox[{"p", ",", "2"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<compartment\>\"", ",", "\"\<parameter\>\"", ",", " ", 
                   "\"\<species\>\""}], "}"}], ",", " ", "s"}], "]"}]}], ",", 
              " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                 RowBox[{
                 "\"\<checkInitialAssignment: an initial assignment cannot be \
made to a \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{"s", "//", "boldBlue"}], ",", 
                 RowBox[{
                 "\"\< only to a compartment, parameter, or species:\\n\>\"", 
                  "//", "boldBlack"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"XMLHighlightForm", "[", 
                   RowBox[{"r", ",", " ", "Purple", ",", 
                    RowBox[{"\"\<symbol=\>\"", "<>", 
                    RowBox[{"quote", "[", "symbol", "]"}]}]}], "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{
          "\"\<checkInitialAssignment: undefined or invalid symbol \>\"", "//",
            "boldBlack"}], ",", "\[IndentingNewLine]", 
          RowBox[{"symbol", "//", "boldBlue"}], ",", " ", 
          RowBox[{"\"\< in \>\"", "//", "boldBlack"}], ",", " ", 
          RowBox[{"\"\<initialAssignment:\\n\>\"", "//", "boldBlue"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"XMLHighlightForm", "[", 
            RowBox[{"r", ",", "Purple", ",", " ", 
             RowBox[{"\"\<symbol=\>\"", "<>", 
              RowBox[{"quote", "[", "symbol", "]"}]}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Prevent", " ", "duplicate", " ", "messaging"}], " ", "-", 
        " ", 
        RowBox[{
        "catch", " ", "this", " ", "in", " ", "addInitialAssignment"}]}], 
       "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "calledbySBMLRead"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"MB$AssignmentRuleVariables", ",", " ", "symbol"}], "]"}],
            ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{"\"\< An \>\"", "//", "boldBlack"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<initialAssignment \>\"", "//", "boldBlue"}], ",", 
              " ", "\[IndentingNewLine]", 
              RowBox[{
              "\"\<may not refer to a symbol for which an \>\"", "//", 
               "boldBlack"}], ",", " ", 
              RowBox[{"\"\<assignmentRule\>\"", "//", "boldBlue"}], ",", 
              RowBox[{
              "\"\< has been previously defined. Symbol: \>\"", "//", 
               "boldBlack"}], ",", " ", 
              RowBox[{"symbol", "//", "boldBlue"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "The", " ", "following", " ", "test", " ", "will", " ", "never", " ", 
        "pass", " ", "when", " ", "called", " ", "by", " ", 
        "addInitialAssignment", " ", "because", " ", "of", " ", "the", " ", 
        "deleteInitialAssignment"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"calledbySBMLRead", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"First", "/@", "MB$InitialAssignments"}], ",", " ", 
             "symbol"}], "]"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{
              "\"\< Multiple initialAssignments may not be made to the same \
symbol. Symbol: \>\"", "//", "boldBlack"}], ",", " ", 
              RowBox[{"symbol", "//", "boldBlue"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"math", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"subXML", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "math", "]"}], "<", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Return", "[", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "math", "]"}], ">", "1"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{
              "\"\<Multiple math objects in initialAssignment:\\n\>\"", "//", 
               "boldBlack"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"XMLHighlightForm", "[", 
                RowBox[{"r", ",", "Purple", ",", "\"\<math\>\""}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{"ListQ", "[", "math", "]"}], ",", 
           RowBox[{"math", "=", 
            RowBox[{"First", "[", "math", "]"}]}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"math", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"symbolsReferenced", "/.", 
        RowBox[{"{", 
         RowBox[{"XMLElement", "\[Rule]", " ", "XML2Symbol"}], "}"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"Union", "[", "symbolsReferenced", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"csymbols", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"math", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "csymbols", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"mycsymbol", "[", 
           RowBox[{"\"\<csymbol\>\"", ",", 
            RowBox[{"{", "___", "}"}], ",", "x_"}], "]"}], ":=", " ", "x"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"mycsymbol", "[", "x___", "]"}], ":=", " ", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"csymbols", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"csymbols", "/.", 
              RowBox[{"{", 
               RowBox[{"XMLElement", "\[Rule]", " ", "mycsymbol"}], "}"}]}], 
             ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"XMLElement", "\[Rule]", " ", "List"}], "}"}]}], "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"csymbols", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"csymbols", ",", 
            RowBox[{"{", "\"\<ci\>\"", "}"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"knownSymbols", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"First", "/@", "$SBML$IDTable"}], ",", " ", "csymbols"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"unknownSymbols", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"symbolsReferenced", ",", "knownSymbols"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"mathexpression", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"subXML", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"mathexpression", "=", 
       RowBox[{"First", "[", "mathexpression", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mathexpression", "=", 
       RowBox[{"XMLOut", "[", "mathexpression", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"XMLHighlightForm", "[", 
          RowBox[{"#", ",", "Purple", ",", 
           RowBox[{"\"\<<ci>\>\"", "<>", 
            RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<</ci>\>\""}]}], 
          "]"}], "&"}], "@@", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"subXML", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\<addInitialAssignment: Unknown symbol \>\"", "//", 
           "boldBlack"}], ",", 
          RowBox[{"#", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is referenced in the initialAssignment \>\"", "//", 
           "boldBlack"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MathMLToInfix", "[", "mathexpression", "]"}], "//", 
           "boldBlue"}], ",", "\"\<\\n\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "]"}], "&"}], "/@", "unknownSymbols"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"checkFunctionCalls", "[", 
       RowBox[{
       "math", ",", "\"\<initialAssignment\>\"", ",", " ", 
        "\"\<(addInitialAssignment)\>\""}], "]"}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell["\<\
constraintToSBML, add_, delete_, remove_, modify_, get_ ... constraint\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell["constraintToSBML", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"constraintToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"constraintToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfConstraints\>\"", ",", 
           RowBox[{"{", "}"}], ",", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constraintToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"constraintToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}]}]}]], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389722116886985*^9, 3.389722131780014*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getConstraint", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getConstraint", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$Constraints", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<getConstraint: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"\"\< Constraint: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< Constraints\>\"", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"MB$Constraints", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getConstraint", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getConstraint", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getConstraint", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
        RowBox[{"\"\<getConstraint: \>\"", "//", "boldBlack"}], ",", " ", 
        RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"\"\<getConstraint[Integer]\>\"", "//", "boldBlue"}], ",", 
        " ", 
        RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<getConstraint[{x1,x2,...}]\>\"", "//", "boldBlue"}], ",", 
        RowBox[{
        "\"\< where x1,x2,... are integers\>\"", "//", "boldBlack"}]}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfConstraints", "[", "]"}], ":=", 
   RowBox[{"Length", "[", "MB$Constraints", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getConstraints", "[", "]"}], ":=", " ", 
   RowBox[{"getConstraint", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"getNumberOfConstraints", "[", "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["remove -, deleteConstraint", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteConstraint", "[", 
    RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "meta"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", ">", " ", 
         RowBox[{"Length", "[", "MB$Constraints", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\<deleteConstraint: \>\"", "//", "boldBlack"}], ",", 
           " ", 
           RowBox[{
           "\"\< requested constraint number: \>\"", "//", "boldBlack"}], ",",
            " ", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{
           "\"\< exceeds number of constraints: \>\"", "//", "boldBlack"}], 
           ",", " ", 
           RowBox[{
            RowBox[{"Length", "[", "MB$Constraints", "]"}], "//", 
            "boldBlue"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "False", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", "\[LessEqual]", " ", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\<deleteConstraint: \>\"", "//", "boldBlack"}], ",", 
           " ", 
           RowBox[{
           "\"\<argument must be a postive integer. Requested value: \>\"", "//",
             "boldBlack"}], ",", " ", 
           RowBox[{"n", "//", "boldBlue"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "False", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"getConstraint", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"MB$Constraints", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{"MB$Constraints", ",", 
         RowBox[{"{", "n", "}"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"meta", " ", "=", " ", 
       RowBox[{"getSBMLfield", "[", 
        RowBox[{"\"\<metaid\>\"", ",", "x"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"removeMetaID", "[", 
       RowBox[{"meta", ",", " ", "\"\<constraint\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeConstraint", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteConstraint", "[", "x", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Constraint \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"x", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\<Requested Constraint \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"x", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< could not be removed.\>\"", "//", "boldBlack"}]}], 
         "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addConstraint", "Subsubsection",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addConstraint", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", " ", "meta", ",", "n", ",", " ", "math"}], "}"}], 
      ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToExpression", "[", "MB$LevelVersion", "]"}], "<", "2.2"}],
          ",", " ", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<addConstraint: Constraint is not permitted in SBML \
level.version \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"MB$LevelVersion", "//", "boldBlue"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"checkConstraintExpression", "[", "r", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$Constraints", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Constraints", ",", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"math", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"r", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", " ", 
          "Infinity"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"math", "=", 
        RowBox[{"Flatten", "[", "math", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "math", "]"}], "<", "1"}], ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\<addConstraint: no Math\>\"", "//", "boldBlack"}], ",",
            " ", "\[IndentingNewLine]", 
           RowBox[{"XMLHighlightForm", "[", 
            RowBox[{"r", ",", "Purple", ",", "\"\<constraint\>\""}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"math", "=", 
        RowBox[{"MathMLToInfix", "[", 
         RowBox[{"XMLOut", "[", 
          RowBox[{"math", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"math", "=", 
        RowBox[{"stringer", "[", "math", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"\"\<constraint[\>\"", "<>", "math", "<>", "\"\<]\>\""}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{
          "meta", ",", "n", ",", " ", "\"\<constraint\>\"", ",", " ", 
           "True"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Constraint \>\"", "//", "boldGreen"}], ",", " ", 
           RowBox[{"math", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addConstraint", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"constraintToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"addConstraint", "[", "r", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addConstraint", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
     RowBox[{
     "\"\<The argument to addConstraint should be either an option list or an \
XMLElement[...] object\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 CellMargins->{{88, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceConstraint", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceConstraint", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<constraint\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "r"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Constraints", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r", "=", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<constraint\>\"", ",", "x"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MB$Constraints", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Constraints", ",", " ", "r", ",", "i"}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Constraint \>\"", ",", "i", ",", " ", 
              "\"\< replaced.\>\""}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
         RowBox[{"\"\< replaceConstraint: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{
         "\"\< unable to replace Constraint \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"i", "//", "boldBlue"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceConstraint", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
     RowBox[{"\"\<replaceConstraint: \>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{"\"\<Invalid arguments. \>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{
      RowBox[{"{", "x", "}"}], "//", "boldBlue"}], ",", " ", 
     RowBox[{"\"\< \\nCorrect format is:\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\<replaceConstraint[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{
     "\"\< XMLElement[\\\"constraint\\\",...]\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyConstraint", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyConstraint", "[", 
      RowBox[{
       RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "n", ",", "x", ",", "y", ",", "ann", ",", " ", "notes", ",", " ", 
         RowBox[{"dbg", "=", "False"}], ",", " ", "oldmat"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"x", "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"getConstraint", "[", "i", "]"}], "}"}], "//", 
          "Flatten"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<modifyConstraint: x:\>\"", ",", " ", "x"}], "]"}]}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "x", "]"}], ">", "0"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"x", "=", 
            RowBox[{"First", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", " ", "=", " ", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"x", ",", "opt"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", "notes"}], "]"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<modifyConstraint: y:\>\"", ",", "y"}], "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"xmlsub", "=", 
            RowBox[{"extractXMLSubElements", "[", "x", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"dbg", ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<modifyInitialAssignment: xmlsub: \>\"", ",", " ", 
               "xmlsub"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"oldmath", " ", "=", " ", 
            RowBox[{"Cases", "[", 
             RowBox[{"xmlsub", ",", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<math\>\"", ",", "___"}], "]"}]}], "]"}]}], ";", 
           " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "oldmath", "]"}], ">", "1"}], ",", " ", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
               "\"\<modifyConstraint: previous value of constraint for \>\"", 
                "//", "boldblack"}], ",", "\[IndentingNewLine]", 
               RowBox[{"n", "//", "boldBlue"}], ",", " ", 
               RowBox[{
               "\"\< has multiple math fields. Only the first will be \
retrieved. \>\"", "//", "boldBlack"}]}], "\[IndentingNewLine]", "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "oldmath", "]"}], "<", "1"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                "\"\<modifyConstraint: previous value of constraint for \>\"",
                  "//", "boldblack"}], ",", "\[IndentingNewLine]", 
                RowBox[{"n", "//", "boldBlue"}], ",", " ", 
                RowBox[{
                "\"\< has no math field.  \>\"", "//", "boldBlack"}]}], 
               "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
             ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"ListQ", "[", "oldmath", "]"}], " ", "\[And]", " ", 
                 RowBox[{
                  RowBox[{"Length", "[", "oldmath", "]"}], ">", "0"}]}], ",", 
                " ", 
                RowBox[{"oldmath", "=", 
                 RowBox[{"First", "[", "oldmath", "]"}]}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"dbg", ",", " ", 
                RowBox[{"Print", "[", 
                 RowBox[{
                 "\"\<modifyConstraint: oldmath: \>\"", ",", " ", "oldmath"}],
                  "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
              RowBox[{"oldmath", " ", "=", " ", 
               RowBox[{"MathMLToInfix", "[", 
                RowBox[{"XMLOut", "[", "oldmath", "]"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"dbg", ",", " ", 
                RowBox[{"Print", "[", 
                 RowBox[{
                 "\"\<modifyConstraint: oldmath: \>\"", ",", " ", "oldmath"}],
                  "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
              RowBox[{"y", " ", "=", " ", 
               RowBox[{"Append", "[", 
                RowBox[{"y", ",", " ", 
                 RowBox[{"Global`math", "\[Rule]", " ", "oldmath"}]}], 
                "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ",
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"deleteConstraint", "[", "i", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"addConstraint", "@@", "y"}], ";"}], "\[IndentingNewLine]",
           ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"addConstraint", "[", "opt", "]"}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["checkConstraintExpression", "Subsubsection",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"checkConstraintExpression", "[", 
    RowBox[{"r_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dbg", "=", "False"}], ",", "\[IndentingNewLine]", 
       "symbolsReferenced", ",", "math", ",", "options", ",", "subXML", ",", 
       " ", "XML2Symbol", ",", "knownSymbols", ",", "\[IndentingNewLine]", 
       "unknownSymbols", ",", "variable", ",", "ruleType", ",", "hf", ",", 
       " ", "csymbols", ",", " ", "mycsymbol", ",", " ", "mathexpression"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"XML2Symbol", "[", 
        RowBox[{"\"\<ci\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "x_", "}"}]}], "]"}], ":=", " ", "x"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"XML2Symbol", "[", "x___", "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"options", "=", 
       RowBox[{"extractXMLOptions", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"subXML", "=", 
       RowBox[{"extractXMLSubElements", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"math", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"subXML", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "math", "]"}], "<", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Return", "[", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "math", "]"}], ">", "1"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{
              "\"\<Multiple math objects in constraint:\\n\>\"", "//", 
               "boldBlack"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"XMLHighlightForm", "[", 
                RowBox[{"r", ",", "Purple", ",", "\"\<math\>\""}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{"ListQ", "[", "math", "]"}], ",", 
           RowBox[{"math", "=", 
            RowBox[{"First", "[", "math", "]"}]}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"math", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"symbolsReferenced", "/.", 
        RowBox[{"{", 
         RowBox[{"XMLElement", "\[Rule]", " ", "XML2Symbol"}], "}"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"Union", "[", "symbolsReferenced", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"csymbols", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"math", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "csymbols", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"mycsymbol", "[", 
           RowBox[{"\"\<csymbol\>\"", ",", 
            RowBox[{"{", "___", "}"}], ",", "x_"}], "]"}], ":=", " ", "x"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"mycsymbol", "[", "x___", "]"}], ":=", " ", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"csymbols", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"csymbols", "/.", 
              RowBox[{"{", 
               RowBox[{"XMLElement", "\[Rule]", " ", "mycsymbol"}], "}"}]}], 
             ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"XMLElement", "\[Rule]", " ", "List"}], "}"}]}], "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"csymbols", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"csymbols", ",", 
            RowBox[{"{", "\"\<ci\>\"", "}"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"knownSymbols", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"First", "/@", "$SBML$IDTable"}], ",", " ", "csymbols"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"unknownSymbols", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"symbolsReferenced", ",", "knownSymbols"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"mathexpression", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"subXML", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"mathexpression", "=", 
       RowBox[{"First", "[", "mathexpression", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mathexpression", "=", 
       RowBox[{"XMLOut", "[", "mathexpression", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"XMLHighlightForm", "[", 
          RowBox[{"#", ",", "Purple", ",", 
           RowBox[{"\"\<<ci>\>\"", "<>", 
            RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<</ci>\>\""}]}], 
          "]"}], "&"}], "@@", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"subXML", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{
          "\"\<addConstraint: Unknown symbol \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"#", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is referenced in the constraint \>\"", "//", "boldBlack"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MathMLToInfix", "[", "mathexpression", "]"}], "//", 
           "boldBlue"}], ",", "\"\<\\n\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "]"}], "&"}], "/@", "unknownSymbols"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"checkFunctionCalls", "[", 
       RowBox[{
       "math", ",", "\"\<constraint\>\"", ",", " ", 
        "\"\<(addConstraint)\>\""}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell["\<\
ruleToSBML, addRule, deleteRule, removeRule, modifyRule, checkRuleExpression, \
getRule\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell["getRule", "Subsubsection",
 CellMargins->{{87.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getRule", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"getNumberOfRules", "[", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<getRule:  Rule: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< rule definitions.\>\"", "//", "boldBlack"}]}], 
           "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$Rules", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getRuleNumber", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Map", "[", 
         RowBox[{"First", ",", "MB$Rules"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"m", ",", " ", 
          RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", 
         RowBox[{"Return", "[", "0", "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
         RowBox[{"n", "=", 
          RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getRule", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getRuleNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"m", "=", 
           RowBox[{"Last", "[", 
            RowBox[{"MB$Rules", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getRule", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getRule", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getRule", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
        RowBox[{
        "\"\<getRule: Correct format is getRule[metaid],  getRule[Integer],  \
or getRule[{x1,x2,...}], where x1,x2,... are integers.\>\"", "//", 
         "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getRules", "[", "]"}], ":=", " ", 
   RowBox[{"getRule", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "MB$Rules", "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfRules", "[", "]"}], ":=", " ", 
   RowBox[{"Length", "[", "MB$Rules", "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceRule", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ruleStringQ", "[", "\"\<assignmentRule\>\"", "]"}], "=", "True"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ruleStringQ", "[", "\"\<rateRule\>\"", "]"}], "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ruleStringQ", "[", "\"\<algebraicRule\>\"", "]"}], "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ruleStringQ", "[", "\"\<constraintRule\>\"", "]"}], "=", "True"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ruleStringQ", "[", "\"\<connectionRule\>\"", "]"}], "=", "True"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ruleStringQ", "[", "x___", "]"}], ":=", " ", "False"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceRule", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{
        RowBox[{"u_", "?", "ruleStringQ"}], ",", "x___"}], "]"}]}], "]"}], ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Rules", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<metaid\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"u", ",", "x"}], "]"}]}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Rules", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MB$Rules", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Rules", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"u", ",", "x"}], "]"}]}], ",", "i"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<rule \>\"", ",", "i", ",", " ", "\"\< replaced.\>\""}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceRule: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{"\"\< unable to replace rule \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceRule", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{
        RowBox[{"r_", "?", "ruleStringQ"}], ",", "x___"}], "]"}]}], "]"}], ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getRuleNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceRule", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"r", ",", "x"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceRule: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{"\"\< unable to replace rule \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceRule", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
     RowBox[{"\"\<replaceRule: \>\"", "//", "boldRed"}], ",", " ", 
     RowBox[{
     "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\<replaceRule[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{"\"\< XMLElement[r,...]\>\"", "//", "boldBlack"}], ",", 
     RowBox[{
     "\"\< ] where \
r=\\\"assignmentRule\\\",\\\"rateRule\\\",\\\"algebraicRule\\\",\\\"\
constraintRule\\\"(experimental:L2V2draft1), \
\\\"connectionRule\\\"(experimental:L3,arrays),\\\"initialAssignmentRule\\\"(\
experimental:L3,arrays)\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["ruleToSBML", "Subsubsection",
 CellMargins->{{91.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ruleToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"ruleToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfRules\>\"", ",", 
           RowBox[{"{", "}"}], ",", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ruleToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"ruleToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{91.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389722137175488*^9, 3.3897221515324583`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["deleteRule, removeRule", "Subsubsection",
 CellMargins->{{91.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"deleteRule", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "n", ",", "c", ",", "p", ",", " ", "number", ",", "opts", ",", " ", 
         RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"opts", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", "opt", "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<deleteRule: opts(1):\>\"", "//", "boldRed"}], ",", 
            " ", 
            RowBox[{"opts", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"opts", "=", 
         RowBox[{"checkOptions", "[", 
          RowBox[{"deleteRule", ",", " ", "opts", ",", " ", 
           RowBox[{"{", " ", "\"\<metaid\>\"", "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<deleteRule: opts(2):\>\"", "//", "boldRed"}], ",", 
            " ", 
            RowBox[{"opts", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`metaid", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//",
           "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"n", "==", "\"\<\>\""}], ",", "  ", 
          RowBox[{
           RowBox[{"Return", "[", "False", "]"}], ";"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"number", " ", "=", " ", 
         RowBox[{"getRuleNumber", "[", "n", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"number", ">", "0"}], ",", " ", 
          RowBox[{"deleteRule", "[", "number", "]"}]}], " ", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"deleteRule", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"x_", "?", 
         RowBox[{"!", 
          RowBox[{"IntegerQ", "[", "#", "]"}]}]}], "&"}], ",", " ", 
       RowBox[{"opt__", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dbg", "=", "False"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<deleteRule[x, opt]: x:\>\"", "//", "boldRed"}], ",", 
            " ", 
            RowBox[{"x", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< {opt}:\>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
             RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}]}], "]"}], 
        ";", " ", "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
        RowBox[{"deleteRule", "[", 
         RowBox[{
          RowBox[{"Global`metaid", "\[Rule]", " ", "x"}], ",", "opt"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"deleteRule", "[", 
      RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", ",", " ", "meta", ",", " ", 
         RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<deleteRule:n:\>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"n", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
           RowBox[{"n", "\[LessEqual]", " ", 
            RowBox[{"getNumberOfRules", "[", "]"}]}]}], ",", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"p", "=", 
            RowBox[{"getRule", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"meta", "=", 
            RowBox[{"getSBMLfield", "[", 
             RowBox[{"\"\<metaid\>\"", ",", "p"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"removeMetaID", "[", 
            RowBox[{"meta", ",", "\"\<rule\>\""}], "]"}], ";", "  ", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"MB$Rules", " ", "=", " ", 
            RowBox[{"Drop", "[", 
             RowBox[{"MB$Rules", ",", " ", 
              RowBox[{"{", "n", "}"}]}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "True", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]",
       "]"}]}], ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"removeRule", "[", "x___", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"flag", " ", "=", " ", 
         RowBox[{"deleteRule", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Rule \>\"", "//", "boldGreen"}], ",", 
              RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
              RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\<Requested Rule \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldRed"}], ",", 
            RowBox[{"\"\< cannot be removed.\>\"", "//", "boldBlack"}]}], 
           "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{91.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.388852138950254*^9, 3.38885219612912*^9}, {
  3.388853071119657*^9, 3.388853104528346*^9}, {3.388853147740739*^9, 
  3.3888532205298977`*^9}, {3.388853292060158*^9, 3.38885331301726*^9}, {
  3.388853503917588*^9, 3.388853512553337*^9}, {3.388853657068069*^9, 
  3.388853665940099*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["addRule", "Subsubsection",
 CellMargins->{{91.1875, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addRule", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", " ", "type", ",", " ", "var", ",", "sp", ",", 
        "par", ",", " ", "a", ",", " ", "b", ",", " ", "c", ",", " ", "chk", 
        ",", "ichk", ",", "ertype", ",", " ", "ermetaid", ",", "rhsrule", ",",
         "lhsrule", ",", "rhsvars", ",", "ruleContent", ",", " ", "ruleType", 
        ",", " ", "functions", ",", "indices", ",", " ", 
        RowBox[{"debug", "=", "False"}], ",", " ", "connection", ",", "ijk", 
        ",", "comp", ",", " ", "definedVariables", ",", " ", "ruleexpr", ",", 
        " ", "csymbols", ",", " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<*************\\naddRule: XMLElement \>\"", "//", "boldRed"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", " ", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"checkRuleExpression", "[", "r", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule: XMLElement: r: \>\"", "//", "boldRed"}], ",", 
           RowBox[{"r", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ruleType", "[", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"u_", ",", "___"}], "]"}], "]"}], ":=", " ", "u"}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"type", "=", 
        RowBox[{"First", "[", 
         RowBox[{"{", "x", "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"type", "=", 
        RowBox[{"ruleType", "[", 
         RowBox[{"XMLElement", "[", "x", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<addRule: rule type: \>\"", "//", "boldRed"}], ",", 
            " ", "type"}], "]"}], "//", "boldBlue"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"type", "==", "\"\<annotation\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ruleContent", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"XMLElement", "[", "x", "]"}], ",", " ", 
             RowBox[{"XMLElement", "[", "___", "]"}], ",", "2"}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"type", " ", "=", " ", 
           RowBox[{"ruleType", "/@", "ruleContent"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "type", "]"}], "<", "1"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{
               "\"\<Error: Unable to decode rule within annotation: \>\"", "//",
                 "boldOrange"}], ",", " ", 
               RowBox[{
                RowBox[{"XMLElement", "[", "x", "]"}], "//", "boldBlue"}]}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "type", "]"}], ">", "1"}], ",", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{
              "\"\<Warning: Too many XMLElements within the annotation - only \
the first one is used: \>\"", "//", "boldOrange"}], ",", " ", 
              RowBox[{
               RowBox[{"XMLElement", "[", "x", "]"}], "//", "boldBlue"}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"type", "=", 
           RowBox[{"First", "[", "type", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"debug", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<addrule: rule type: \>\"", "//", "boldRed"}], ",", 
              " ", 
              RowBox[{"type", "//", "boldBlue"}]}], "]"}]}], "]"}], ";"}]}], 
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"sp", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Species"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"par", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Parameters"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"comp", "=", 
        RowBox[{"First", "/@", "MB$Compartments"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"added", " ", "2.5", ".2"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", 
       RowBox[{"definedVariables", " ", "=", " ", 
        RowBox[{"Union", "[", 
         RowBox[{"sp", ",", " ", "par", ",", " ", "comp"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"connection", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<connection\>\"", ",", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<addRule:{type,sp,par,comp, definedVariables}:\>\"", "//", 
            "boldRed"}], ",", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "type", ",", "sp", ",", "par", ",", "comp", ",", 
              "definedVariables"}], "}"}], "//", "boldBlue"}]}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", "==", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", "=", 
           RowBox[{"\"\<rule\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"MB$rulecounter", "++"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}], " ", "=", " ", 
           RowBox[{"{", "x", "}"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"b", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"b", ",", " ", 
             RowBox[{"\"\<metaid\>\"", "\[Rule]", " ", "n"}]}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"r", " ", "=", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"n", " ", "=", " ", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<metaid\>\"", ",", "r"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:n:\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"n", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"var", " ", "=", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<variable\>\"", ",", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:var:\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"var", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"type", "==", "\"\<assignmentRule\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Block", "[", 
           RowBox[{
            RowBox[{"{", "iavars", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"iavars", " ", "=", " ", 
              RowBox[{"First", "/@", "MB$InitialAssignments"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", " ", "[", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{"iavars", ",", " ", "var"}], "]"}], ",", " ", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                 RowBox[{
                 "\"\<addRule: cannot have an \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{"\"\<assignmentRule\>\"", "//", "boldBlue"}], ",", 
                 " ", 
                 RowBox[{"\"\< and an \>\"", "//", "boldBlack"}], ",", " ", 
                 RowBox[{"\"\<initialAssignment\>\"", "//", "boldBlue"}], ",",
                  " ", 
                 RowBox[{
                 "\"\< for the same variable: \>\"", "//", "boldBlack"}], ",",
                  " ", 
                 RowBox[{"var", "//", "boldBlue"}]}], "]"}]}], "]"}], ";"}]}],
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"var", "\[NotEqual]", " ", "\"\<\>\""}], " ", "\[And]", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"type", "==", "\"\<assignmentRule\>\""}], " ", "\[Or]", 
            " ", 
            RowBox[{"type", "\[Equal]", " ", "\"\<rateRule\>\""}]}], ")"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          StyleBox[
           RowBox[{
           "make", " ", "sure", " ", "that", " ", "no", " ", "rule", " ", 
            "has", " ", "been", " ", "previously", " ", "defined", " ", "for",
             " ", "this", " ", "variable"}],
           FontWeight->"Plain"], 
          StyleBox[" ",
           FontWeight->"Plain"], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"debug", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<addRule:type==assignment or type==rateRule\>\"", "//", 
              "boldRed"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"chk", " ", "=", " ", 
           RowBox[{"MathSBML`Private`getXMLElement", "/@", 
            RowBox[{"(", 
             RowBox[{"Last", "/@", "MB$Rules"}], ")"}]}]}], ";", " ", 
          "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", 
            RowBox[{"allow", " ", "earlier", " ", "initialAssignmentRule"}], 
            "*)"}],
           FontWeight->"Plain"], 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain"], 
          RowBox[{"chk", " ", "=", " ", 
           RowBox[{"Select", "[", 
            RowBox[{"chk", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"First", "[", "#", "]"}], "\[NotEqual]", " ", 
               "\"\<initialAssignmentRule\>\""}], "&"}]}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"ichk", "=", 
           RowBox[{"Position", "[", 
            RowBox[{"chk", ",", "var"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "ichk", "]"}], ">", "0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             StyleBox[
              RowBox[{
               RowBox[{"ichk", " ", "has", " ", "form", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"i", ",", "j", ",", "k", ",", ".."}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "j", ",", "k", ",", ".."}], "}"}], ",", 
                  "..."}], "}"}]}], ";", " ", 
               RowBox[{
               "if", " ", "this", " ", "error", " ", "correction", " ", "is", 
                " ", "implemented", " ", "correctly", " ", "it", " ", "will", 
                " ", "actually", " ", "only", " ", "be", " ", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", "j", ",", "k", ",", "..."}], "}"}], "}"}],
                 " ", "for", " ", "a", " ", "single", " ", "prior", " ", 
                "occurance", " ", "at", " ", 
                RowBox[{"most", ":", " ", 
                 RowBox[{
                 "so", " ", "convert", " ", "to", " ", "first", " ", "index", 
                  " ", "of", " ", "first", " ", "occurrence"}]}]}]}],
              FontWeight->"Plain"], 
             StyleBox["  ",
              FontWeight->"Plain"], "*)"}], " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ichk", " ", "=", " ", 
              RowBox[{"First", "/@", "ichk"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"ichk", " ", "=", " ", 
              RowBox[{"First", "[", "ichk", "]"}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              StyleBox[
               RowBox[{
                RowBox[{"create", " ", "a", " ", "rule", " ", "ruletype"}], 
                "\[Rule]", 
                RowBox[{
                 RowBox[{"{", "options", "}"}], " ", "for", " ", "the", " ", 
                 "earlier", " ", "reference"}]}],
               FontWeight->"Plain"], 
              StyleBox[" ",
               FontWeight->"Plain"], "*)"}], " ", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"chk", " ", "=", " ", 
              RowBox[{"chk", "[", 
               RowBox[{"[", "ichk", "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"ertype", ",", " ", "ermetaid"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"ertype", " ", "=", " ", 
              RowBox[{"chk", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"ermetaid", " ", "=", " ", 
              RowBox[{"\"\<metaid\>\"", "/.", 
               RowBox[{"Last", "[", "chk", "]"}]}]}], ";", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"ifArrays", "[", "]"}], "\[And]", 
                  RowBox[{
                   RowBox[{"stringer", "[", "connection", "]"}], 
                   "\[NotEqual]", " ", "\"\<\>\""}]}], ")"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Print", "[", 
                 RowBox[{
                  RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
                  RowBox[{"\"\<addRule: \>\"", "//", "boldBlack"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"type", "//", "boldBlue"}], ",", 
                  RowBox[{"\"\< for variable \>\"", "//", "boldBlack"}], ",", 
                  " ", 
                  RowBox[{"var", "//", "boldBlue"}], ",", " ", 
                  RowBox[{
                  "\"\< is not allowed because a \>\"", "//", "boldBlack"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"ertype", "//", "boldBlue"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                  "\"\< has already been defined for this variable: \\\"No \
more than one assignment or rate rule can be defined for a given \
identifier.\\\"\>\"", "//", "boldBlack"}]}], "\[IndentingNewLine]", "]"}], 
                ";", "\[IndentingNewLine]", 
                RowBox[{"Return", "[", 
                 RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
              "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"var", "\[NotEqual]", " ", "\"\<\>\""}], " ", "\[And]", " ", 
          RowBox[{"type", "==", "\"\<assignmentRule\>\""}]}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "make", " ", "sure", " ", "that", " ", "the", " ", "variable", " ",
             "is", " ", "not", " ", "referenced", " ", "in", " ", "an", " ", 
            "earlier", " ", "rule"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"debug", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<addRule:type==assignmentRule\>\"", "//", "boldRed"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain"], 
          RowBox[{
           StyleBox["chk",
            FontWeight->"Bold"], 
           StyleBox["=",
            FontWeight->"Bold"], 
           RowBox[{"Cases", "[", 
            RowBox[{"MB$Rules", ",", " ", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "var", "}"}]}], "]"}], ",", " ", "Infinity"}], 
            "]"}]}], ";", " ", 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain"], 
          StyleBox[
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "chk", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                RowBox[{"\"\< A rule with \>\"", "//", "boldBlack"}], ",", 
                " ", 
                RowBox[{"var", "//", "boldBlue"}], ",", 
                RowBox[{
                "\"\< on its right hand side has been previously defined and \
therefore this rule can not be added. This is because a rule is not allowed \
to refer to a variable for which there is a subsequent assignment rule, and \
this would be the subsequent assignment rule.\>\"", "//", "boldBlack"}]}], 
               "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"Return", "[", 
               RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]",
             "]"}],
           FontWeight->"Bold"], 
          StyleBox[";",
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontWeight->"Bold"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "make", " ", "sure", " ", "the", " ", "rule", " ", "does", " ", 
              "not", " ", "self"}], "-", "refer"}], " ", "*)"}],
           FontWeight->"Plain"], 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain"], 
          RowBox[{
           StyleBox["chk",
            FontWeight->"Bold"], 
           StyleBox["=",
            FontWeight->"Bold"], 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"XMLElement", "[", "x", "]"}], ",", " ", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "var", "}"}]}], "]"}], ",", " ", "Infinity"}], 
            "]"}]}], ";", " ", 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain"], 
          StyleBox[
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "chk", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
                RowBox[{"type", "//", "boldBlue"}], ",", "  ", 
                RowBox[{"\"\< refers to \>\"", "//", "boldBlack"}], ",", " ", 
                RowBox[{"var", "//", "boldBlue"}], ",", 
                RowBox[{
                "\"\< on both sides of the equation.\\n\>\"", "//", 
                 "boldBlack"}], ",", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"XMLHighlightForm", "[", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", "x", "]"}], ",", "Purple", ",", 
                   RowBox[{"stringer", "[", "var", "]"}]}], "]"}]}]}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"Return", "[", 
               RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]",
             "]"}],
           FontWeight->"Bold"], 
          StyleBox[";",
           FontWeight->"Bold"]}]}], 
        StyleBox[" ",
         FontWeight->"Bold"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Bold"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Bold"], "\[IndentingNewLine]", "]"}], ";", " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Bold"], "\[IndentingNewLine]", 
       RowBox[{
        StyleBox["(*",
         FontWeight->"Bold"], 
        StyleBox[" ",
         FontWeight->"Bold"], 
        StyleBox[
         RowBox[{
         "if", " ", "connection", " ", "field", " ", "check", " ", "for", " ",
           "previous", " ", "connection", " ", "def"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Bold"], 
        StyleBox["*)",
         FontWeight->"Bold"]}], "\[IndentingNewLine]", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Bold"], 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"stringer", "[", "connection", "]"}], "\[NotEqual]", " ", 
          "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"ifArrays", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", " ", 
               RowBox[{"\"\< connection filed \>\"", "//", "boldBlack"}], ",",
                " ", 
               RowBox[{
                RowBox[{"stringer", "[", "connection", "]"}], "//", 
                "boldRed"}], ",", 
               "\"\< not allowed because Arrays are off\>\""}], "]"}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"chk", " ", "=", " ", 
              RowBox[{"MathSBML`Private`getXMLElement", "/@", 
               RowBox[{"(", 
                RowBox[{"Last", "/@", "MB$Rules"}], ")"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"chk", " ", "=", " ", 
              RowBox[{"Select", "[", 
               RowBox[{"chk", ",", 
                RowBox[{
                 RowBox[{"(", " ", 
                  RowBox[{
                   RowBox[{"First", "[", "#", "]"}], "==", 
                   "\"\<connectionRule\>\""}], ")"}], "&"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"chk", " ", "=", " ", 
              RowBox[{"Last", "/@", "chk"}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"chk", " ", "=", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"\"\<metaid\>\"", "/.", "#"}], ")"}], "&"}], ")"}], 
               "/@", "chk"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"chk", ",", 
                  RowBox[{"stringer", "[", "connection", "]"}]}], "]"}]}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                 "\"\<Specified connectionRule: \>\"", "//", "boldBlack"}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{"connection", "//", "boldRed"}], ",", 
                 RowBox[{"\"\< is undefined.\>\"", "//", "boldBlack"}]}], 
                "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "make", " ", "sure", " ", "the", " ", "variable", " ", "is", " ", 
          "previously", " ", "defined", " ", "either", " ", "as", " ", "a", 
          " ", "species", " ", "or", " ", "a", " ", "parameter"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "changed", " ", "to", " ", "\"\<definedVariables\>\"", " ", "2.5", 
         ".2"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"error", " ", "message", " ", "added", " ", "2.5", ".25"}], 
        " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"var", "\[NotEqual]", " ", "\"\<\>\""}], " ", "\[And]", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"type", "==", "\"\<assignmentRule\>\""}], " ", "\[Or]", 
            " ", 
            RowBox[{"type", "\[Equal]", " ", "\"\<rateRule\>\""}]}], ")"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"definedVariables", ",", "var"}], "]"}]}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
               RowBox[{"\"\< addRule: \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"type", "//", "boldBlue"}], ",", " ", 
               RowBox[{
                RowBox[{
                "\"\< variable=\\\"\>\"", "<>", "var", "<>", "\"\<\\\"\>\""}],
                 "//", "boldBlue"}], ",", " ", 
               RowBox[{
               "\"\< not previously defined. Offending SBML:\\n\>\"", " ", "//",
                 "boldBlack"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"XMLHighlightForm", "[", 
                 RowBox[{"r", ",", "Purple", ",", 
                  RowBox[{"\"\<variable=\\\"\>\"", "<>", 
                   RowBox[{"stringer", "[", "var", "]"}], "<>", 
                   "\"\<\\\"\>\""}]}], "]"}]}]}], "\[IndentingNewLine]", 
              "]"}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"addParameter", "[", 
              RowBox[{"var", ",", 
               RowBox[{"Global`constant", "\[Rule]", " ", "\"\<false\>\""}]}],
               "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<addRule:thyme to save the Rule\>\"", "//", "boldRed"}],
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "type", ",", "\[IndentingNewLine]", "\"\<assignmentRule\>\"", ",", 
         " ", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"MB$AssignmentRuleVariables", ",", " ", 
           RowBox[{"stringer", "[", "var", "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "\"\<rateRule\>\"", ",", " ", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"MB$RateRuleVariables", ",", " ", 
           RowBox[{"stringer", "[", "var", "]"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{"SAVE", " ", "THE", " ", "RULE"}],
         FontColor->RGBColor[0, 1, 0]], 
        StyleBox[" ",
         FontColor->RGBColor[0, 1, 0]], "*)"}], " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"num", ",", " ", "flag", ",", " ", 
           RowBox[{"debg", "=", "False"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"num", "=", 
           RowBox[{"getRuleNumber", "[", "n", "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"debg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<addRule: num:\>\"", "//", "boldRed"}], ",", 
              RowBox[{"num", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"flag", "=", 
             RowBox[{"deleteRule", "[", "num", "]"}]}], " ", ",", " ", 
            RowBox[{"If", "[", 
             RowBox[{"MB$Echo", ",", 
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{
                "\"\<Previous occurance of rule \>\"", "//", "boldGreen"}], 
                ",", 
                RowBox[{"num", "//", "boldBlue"}], ",", 
                RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"debg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<addRule: flag:\>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{"flag", "//", "boldBlue"}]}], "]"}]}], "]"}], ";"}]}], 
        " ", "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$Rules", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Rules", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "add", " ", "check", " ", "for", " ", "indices", " ", "2.3", ".26"}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"indices", " ", "=", 
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"r", ",", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<index\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
          "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule: indices (1): \>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"indices", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"indices", " ", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"getSBMLfield", "[", 
           RowBox[{"\"\<id\>\"", ",", "#"}], "]"}], "&"}], "/@", 
         "indices"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule: indices: (2)\>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"indices", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        StyleBox[" ",
         FontColor->RGBColor[0, 1, 1]], 
        StyleBox[
         RowBox[{
         "Check", " ", "symbols", " ", "on", " ", "Right", " ", "hand", " ", 
          "side"}],
         FontColor->RGBColor[0, 1, 0]], 
        StyleBox[" ",
         FontColor->RGBColor[0, 1, 1]], "*)"}], " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "extract", " ", "the", " ", "xml", " ", "for", " ", "the", " ", 
          "rule"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"rhsrule", "=", "r"}], ";", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"get", " ", "the", " ", "sub"}], "-", 
          RowBox[{"XML", " ", "elements"}]}], " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:rhsrule(-2):\>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"rhsrule", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       RowBox[{"rhsrule", "=", 
        RowBox[{"extractXMLSubElements", "[", "rhsrule", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"extract", " ", "the", " ", "mathml"}], " ", "-", " ", 
           RowBox[{
           "there", " ", "may", " ", "also", " ", "be", " ", 
            "annotations"}]}], ",", " ", 
          RowBox[{"notes", " ", "here"}]}], " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:rhsrule(-1):\>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"rhsrule", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       RowBox[{"rhsrule", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"rhsrule", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:rhsrule(0):\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"rhsrule", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ListQ", "[", "rhsrule", "]"}], " ", "\[And]", " ", 
          RowBox[{
           RowBox[{"Length", "[", "rhsrule", "]"}], ">", "0"}]}], ",", " ", 
         RowBox[{"rhsrule", "=", 
          RowBox[{"First", "[", "rhsrule", "]"}]}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"rhsrule", "\[Equal]", 
          RowBox[{"{", "}"}]}], ",", " ", 
         RowBox[{"rhsrule", "=", 
          RowBox[{"Xpression2SymbolicMathML", "[", 
           RowBox[{"{", "}"}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:rhsrule(1):\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"rhsrule", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"csymbols", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"rhsrule", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ",", " ", 
          "Infinity"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "XML2C", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"XML2C", "[", 
            RowBox[{"\"\<csymbol\>\"", ",", " ", 
             RowBox[{"{", "u__", "}"}], ",", " ", 
             RowBox[{"{", "y_", "}"}]}], "]"}], ":=", " ", "y"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"XML2C", "[", "u___", "]"}], ":=", " ", 
           RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"csymbols", " ", "=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{"csymbols", "/.", 
             RowBox[{"{", 
              RowBox[{"XMLElement", "\[Rule]", " ", "XML2C"}], "}"}]}], 
            "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<addRule: csymbols in rule: \>\"", ",", " ", "csymbols"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:rhsrule(1.5):\>\"", "//", "boldRed"}], ",", 
           " ", 
           RowBox[{"rhsrule", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rhsrule", " ", "=", 
        RowBox[{"InputForm", "[", " ", 
         RowBox[{"SymbolicSBMLMathMLToExpression", "[", "rhsrule", "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:rhsrule(2):\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"rhsrule", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rhsvars", "=", 
        RowBox[{"getSymbols", "[", "rhsrule", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<addRule:missing vars(rhsvars)(1):\>\"", "//", "boldRed"}], 
           ",", " ", 
           RowBox[{"rhsvars", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rhsvars", "=", 
        RowBox[{"ToString", "/@", 
         RowBox[{"InputForm", "/@", "rhsvars"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"functions", " ", "=", " ", 
        RowBox[{"stringer", "/@", 
         RowBox[{"(", 
          RowBox[{"First", "/@", "MB$Functions"}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{
          RowBox[{
          "determine", " ", "and", " ", "add", " ", "the", " ", "undefined", 
           " ", "variables", " ", "as", " ", "parameters"}], ";", " ", 
          RowBox[{
           RowBox[{"add", " ", "functions", " ", "5"}], "-", "19", "-", 
           "04"}]}],
         FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"rhsvars", " ", "=", " ", 
        RowBox[{"Complement", "[", 
         RowBox[{"rhsvars", ",", "definedVariables", ",", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"sp", ",", "par", ","}], "*)"}], " ", "indices", ",", " ", 
          "functions", ",", " ", "$SubsetMathML", ",", " ", "$ArrayMathML", 
          ",", " ", "csymbols"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<addRule:missing vars(rhsvars)(2):\>\"", "//", "boldRed"}], 
           ",", " ", 
           RowBox[{"rhsvars", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"addParameter", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Global`constant", "\[Rule]", " ", "\"\<false\>\""}]}], 
          "]"}], "&"}], "/@", "rhsvars"}], ";", "\[IndentingNewLine]", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "get", " ", "info", " ", "for", " ", "\"\<pretty\>\"", " ", "echo", 
          " ", "message"}], " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rhsrule", " ", "=", 
        RowBox[{"ToString", "[", "rhsrule", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"lhsrule", "=", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "type", ",", "\[IndentingNewLine]", "\"\<assignmentRule\>\"", ",", 
          RowBox[{
           RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<=\>\"", "<>", 
           "rhsrule"}], ",", "\[IndentingNewLine]", "\"\<rateRule\>\"", ",", 
          RowBox[{
           RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<'[t]\>\"", "<>", 
           "\"\<=\>\"", "<>", "rhsrule"}], ",", "\[IndentingNewLine]", 
          "\"\<algebraicRule\>\"", ",", 
          RowBox[{"\"\<0\>\"", "<>", "\"\<=\>\"", "<>", "rhsrule"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\"\<initialAssignmentRule\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ijk", " ", "=", " ", 
            RowBox[{"Cases", "[", 
             RowBox[{"r", ",", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<index\>\"", ",", "___"}], "]"}], ",", 
              "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"ijk", " ", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"getSBMLfield", "[", 
               RowBox[{"\"\<id\>\"", ",", "#"}], "]"}], "&"}], "/@", 
             "ijk"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"ijk", " ", "=", " ", 
            RowBox[{"list2CommaSeparatedString", "[", "ijk", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringLength", "[", "ijk", "]"}], ">", "0"}], ",", " ", 
             RowBox[{"ijk", " ", "=", " ", 
              RowBox[{"\"\<[\>\"", "<>", "ijk", "<>", "\"\<]\>\""}]}], ",", 
             RowBox[{"ijk", "=", "\"\<\>\""}]}], "]"}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"stringer", "[", "var", "]"}], "<>", "ijk", "<>", 
            "\"\<=\>\"", "<>", "rhsrule"}]}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\"\<constraintRule\>\"", ",", "rhsrule", 
          ",", "\[IndentingNewLine]", "\"\<connectionRule\>\"", ",", " ", 
          "rhsrule", ",", "\[IndentingNewLine]", "_", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<>>> Program Error (addRule): notify developer: type= \>\"", 
              "//", "boldRed"}], ",", 
             RowBox[{"type", "//", "boldBlue"}]}], "]"}], " ", ";", 
           "\[IndentingNewLine]", "\"\<ERROR\>\""}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", "\[IndentingNewLine]", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"type", "//", "boldGreen"}], ",", "\"\< \>\"", ",", 
            RowBox[{"n", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< added: \>\"", "//", "boldGreen"}], ",", " ", 
            RowBox[{"lhsrule", "//", "boldBlue"}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ruleexpr", "=", 
           RowBox[{
            RowBox[{"stringer", "[", "type", "]"}], "<>", "\"\<[\>\"", "<>", 
            "lhsrule", "<>", "\"\<]\>\""}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"addMetaID", "[", 
           RowBox[{
           "n", ",", "ruleexpr", ",", " ", "\"\<rule\>\"", ",", " ", "True"}],
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"type", "\[Equal]", " ", "\"\<rateRule\>\""}], " ", 
            "\[Or]", " ", 
            RowBox[{"type", "\[Equal]", " ", "\"\<assignmentRule\>\""}]}], 
           ")"}], " ", "\[And]", " ", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"MB$ReactionVariables", ",", " ", 
            RowBox[{"stringer", "[", "var", "]"}]}], "]"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"MB$BoundaryConditionSpecies", ",", " ", "var"}], 
              "]"}]}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
               RowBox[{"\"\<addRule: \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"type", "//", "boldBlue"}], ",", " ", 
               RowBox[{"\"\< for \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"var", "//", "boldBlue"}], ",", 
               RowBox[{
               "\"\< - the variable has been previously referenced in a \
reaction, even though the species is not a boundaryCondition;\\n\>\"", "//", 
                "boldBlack"}], ",", " ", "\[IndentingNewLine]", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"XMLHighlightForm", "[", 
                 RowBox[{"r", ",", " ", "Purple", ",", 
                  RowBox[{"\"\<variable=\>\"", "<>", 
                   RowBox[{"quote", "[", "var", "]"}]}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.3883414669766827`*^9, {3.388852000552897*^9, 3.388852001904004*^9}, {
   3.388852112681649*^9, 3.388852113175417*^9}, {3.388852481297935*^9, 
   3.388852491977256*^9}, {3.388852602541127*^9, 3.388852650289592*^9}, {
   3.388852700017591*^9, 3.3888527005086193`*^9}, {3.3888528009747763`*^9, 
   3.3888528931267977`*^9}, {3.388853687629394*^9, 3.3888536886979923`*^9}, {
   3.396096258412904*^9, 3.396096258884604*^9}, {3.396096638569628*^9, 
   3.396096642801722*^9}, {3.396101046216333*^9, 3.3961010473742037`*^9}, {
   3.396980192483734*^9, 3.396980211917303*^9}, {3.396980353224111*^9, 
   3.39698038235387*^9}, {3.3969826511418333`*^9, 3.396982653705574*^9}, {
   3.396982711477903*^9, 3.396982712732863*^9}, {3.396982916772607*^9, 
   3.3969829177701483`*^9}, {3.396985186904236*^9, 3.396985192397876*^9}, {
   3.3969878720730343`*^9, 3.39698787299823*^9}, {3.396993612395574*^9, 
   3.3969936400635853`*^9}, {3.3969937314725227`*^9, 3.396993753063973*^9}, {
   3.396995149078302*^9, 3.3969951529192867`*^9}, {3.396995927783227*^9, 
   3.39699593127464*^9}, {3.397048849516706*^9, 3.3970488539204473`*^9}, {
   3.506193958944393*^9, 3.5061939632032003`*^9}, {3.506194308721808*^9, 
   3.506194312731015*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addRule", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", "c", ",", "p", ",", "echo", ",", " ", "type", ",", 
        " ", "var", ",", "sp", ",", "par", ",", " ", "metaid", ",", " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"MB$Echo", " ", "=", " ", 
         RowBox[{
          RowBox[{"Global`echo", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`echo", "\[Rule]", " ", "True"}], "}"}]}]}], ";"}], 
       " ", "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<addRule:{opt}:\>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
            RowBox[{"{", "opt", "}"}], "//", "boldBlue"}]}], "]"}]}], "]"}], 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"metaid", " ", "=", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"metaid", "==", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"metaid", " ", "=", " ", 
           RowBox[{"stringer", "[", 
            RowBox[{
             RowBox[{"Global`metaid", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`metaid", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
            "]"}]}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"metaid", "==", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", "=", 
           RowBox[{"\"\<rule\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"MB$rulecounter", "++"}], "]"}]}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", "=", "metaid"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"ruleToSymbolicSBML", "[", 
         RowBox[{
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], ",", " ", "opt"}], 
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"addRule", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addRule", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addRule", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388852510782549*^9, 3.388852547723694*^9}, {
  3.3888527096162453`*^9, 3.388852717362834*^9}, {3.396096275435658*^9, 
  3.39609627640832*^9}, {3.396101062663043*^9, 3.39610106385151*^9}, {
  3.3969850896647043`*^9, 3.396985090664117*^9}, {3.396985178991734*^9, 
  3.3969851798509827`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyRule", "Subsubsection",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyRule", "[", 
      RowBox[{
       RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"r", ",", 
         RowBox[{"dbg", "=", "False"}], ",", " ", "n", ",", "x", ",", "y", 
         ",", 
         StyleBox["ruletype",
          FontColor->RGBColor[0, 0, 1]], ",", 
         StyleBox["infix",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[",",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[" ",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox["getFirst",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[",",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[" ",
          FontColor->RGBColor[0, 0, 1]], "type", ",", "math", ",", "p", ",", 
         "ann", ",", " ", "notes"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          StyleBox["ruletype",
           FontColor->RGBColor[0, 0, 1]], "[", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"a_", ",", "___"}], "]"}], "]"}], ":=", " ", "a"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["ruletype",
           FontColor->RGBColor[0, 0, 1]], "[", "a___", "]"}], ":=", " ", 
         "\"\<ERROR\>\""}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["infix",
           FontColor->RGBColor[0, 0, 1]], "[", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "a___"}], "]"}], "]"}], ":=", " ", 
         RowBox[{"SymbolicSBMLMathMLToExpression", "[", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "a"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["infix",
           FontColor->RGBColor[0, 0, 1]], "[", "a___", "]"}], ":=", " ", 
         "1"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["getFirst",
           FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "b", "}"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"b", "=", "a"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"While", " ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ListQ", "[", "b", "]"}], " ", "\[And]", " ", 
               RowBox[{
                RowBox[{"Length", "[", "b", "]"}], ">", "0"}]}], ",", " ", 
              RowBox[{"b", " ", "=", " ", 
               RowBox[{"First", "[", "b", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "b", "]"}], ";"}]}], " ", 
          "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", " ", 
         RowBox[{"getRule", "[", "i", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"r", "\[Equal]", 
           RowBox[{"{", "}"}]}], ",", " ", 
          RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"n", "=", 
         RowBox[{"getSBMLfield", "[", 
          RowBox[{"\"\<metaid\>\"", ",", " ", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<modifyRule: r: \>\"", ",", " ", "r"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Print", "[", 
            RowBox[{"\"\<modifyRule: n: \>\"", ",", " ", "n"}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"type", " ", "=", " ", 
         RowBox[{"ruletype", "[", "r", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"y", "=", 
         RowBox[{"expressionate", "[", 
          RowBox[{"globalize", "/@", 
           RowBox[{"extractAndUpdateXMLOptions", "[", 
            RowBox[{"r", ",", "opt"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"y", " ", "=", " ", 
         RowBox[{"Prepend", "[", 
          RowBox[{"y", ",", 
           RowBox[{"Global`type", "\[Rule]", " ", "type"}]}], "]"}]}], ";", 
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<modifyRule: y: \>\"", ",", " ", "y"}], "]"}]}], "]"}],
         ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"math", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"r", ",", " ", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
            "]"}], "//", "getFirst"}], "//", "infix"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"y", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"y", ",", " ", 
           RowBox[{"Global`math", "\[Rule]", " ", "math"}]}], "]"}]}], ";", 
        " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<modifyRule: y: \>\"", ",", " ", "y"}], "]"}]}], "]"}],
         ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"ann", " ", "=", " ", 
         RowBox[{"updateAnnotations", "[", 
          RowBox[{"r", ",", " ", "opt"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"notes", " ", "=", " ", 
         RowBox[{"updateNotes", "[", 
          RowBox[{"r", ",", " ", "opt"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"y", " ", "=", " ", 
         RowBox[{"Prepend", "[", 
          RowBox[{"y", ",", " ", 
           RowBox[{"globalize", "[", 
            RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}], 
          "]"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"y", " ", "=", " ", 
         RowBox[{"Prepend", "[", 
          RowBox[{"y", ",", " ", 
           RowBox[{"globalize", "[", 
            RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}], "]"}]}], 
          "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"deleteRule", "[", "i", "]"}], " ", "\[And]", " ", 
           "MB$Echo"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{
            "\"\<Previous occurance of rule \>\"", "//", "boldGreen"}], ",", 
            " ", 
            RowBox[{"i", "//", "boldBlue"}], ",", " ", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"addRule", "@@", "y"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Rule \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"i", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< modified.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"modifyRule", "[", 
       RowBox[{"id_", ",", " ", 
        RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
      RowBox[{"modifyRule", "[", 
       RowBox[{
        RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
       "]"}]}], ";"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifyRule", "[", "x___", "]"}], ":=", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
       RowBox[{
       "\"\<modifyRule: as of version 2.6.0, the correct format is: \>\"", "//",
         "boldBlack"}], ",", " ", 
       RowBox[{"\"\<modifyRule[integer, options]\>\"", "//", "boldBlue"}], 
       ",", " ", 
       RowBox[{
       "\"\<\\nTo find the integer corresponding to a particular metaid value \
use: \>\"", "//", "boldBlack"}], ",", " ", 
       RowBox[{"\"\<getRuleNumber[metaid]\>\"", "//", "boldBlue"}]}], "]"}]}],
     ";"}]}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["checkRuleExpression", "Subsubsection",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"checkRuleExpression", "[", 
    RowBox[{"r_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dbg", "=", "False"}], ",", "\[IndentingNewLine]", 
       "symbolsReferenced", ",", "math", ",", "ruleOptions", ",", "subXML", 
       ",", " ", "XML2Symbol", ",", "knownSymbols", ",", 
       "\[IndentingNewLine]", "unknownSymbols", ",", "variable", ",", 
       "ruleType", ",", "hf", ",", " ", "csymbols", ",", " ", "mycsymbol"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"XML2Symbol", "[", 
        RowBox[{"\"\<ci\>\"", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "x_", "}"}]}], "]"}], ":=", " ", "x"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"XML2Symbol", "[", "x___", "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ruleType", "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"type_", ",", "x___"}], "]"}], "]"}], ":=", " ", "type"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ruleType", "[", "x___", "]"}], ":=", 
       "\"\<??--Unknown rule type--??\>\""}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", " ", "\"\<checkRuleExpression: r\>\"", ",", "r"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ruleOptions", "=", 
       RowBox[{"extractXMLOptions", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"subXML", "=", 
       RowBox[{"extractXMLSubElements", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkRuleExpression: ruleOptions\>\"", ",", 
        "ruleOptions"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkRuleExpression: subXML\>\"", ",", 
        "subXML"}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"variable", "=", 
       RowBox[{
        RowBox[{"\"\<variable\>\"", "/.", "ruleOptions"}], "/.", 
        RowBox[{"{", 
         RowBox[{
         "\"\<variable\>\"", "\[Rule]", " ", 
          "\"\<??--UNKNOWN Variable--??\>\""}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"math", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"subXML", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "math", "]"}], "<", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<checkRuleExpression \>\"", ",", " ", 
           "\"\<no Math\>\""}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "]"}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{"ListQ", "[", "math", "]"}], ",", 
           RowBox[{"math", "=", 
            RowBox[{"First", "[", "math", "]"}]}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkRuleExpression: math\>\"", ",", " ", 
        "math"}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"math", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"symbolsReferenced", "/.", 
        RowBox[{"{", 
         RowBox[{"XMLElement", "\[Rule]", " ", "XML2Symbol"}], "}"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"symbolsReferenced", "=", 
       RowBox[{"Union", "[", "symbolsReferenced", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkRuleExpression: symbolsReferenced\>\"", ",",
         " ", "symbolsReferenced"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"csymbols", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"math", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkRuleExpression: csymbols\>\"", ",", " ", 
        "csymbols"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "csymbols", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"mycsymbol", "[", 
           RowBox[{"\"\<csymbol\>\"", ",", 
            RowBox[{"{", "___", "}"}], ",", "x_"}], "]"}], ":=", " ", "x"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"mycsymbol", "[", "x___", "]"}], ":=", " ", 
          RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"csymbols", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"csymbols", "/.", 
              RowBox[{"{", 
               RowBox[{"XMLElement", "\[Rule]", " ", "mycsymbol"}], "}"}]}], 
             ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"XMLElement", "\[Rule]", " ", "List"}], "}"}]}], "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"csymbols", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"csymbols", ",", 
            RowBox[{"{", "\"\<ci\>\"", "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", " ", "\"\<checkRuleExpression: csymbols\>\"", ",", " ", 
           "csymbols"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"knownSymbols", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"First", "/@", "$SBML$IDTable"}], ",", " ", "csymbols"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<checkRuleExpression: knownSymbols\>\"", ",", " ",
         "knownSymbols"}], "]"}], ";", 
      RowBox[{"unknownSymbols", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"symbolsReferenced", ",", "knownSymbols"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"XMLHighlightForm", "[", 
          RowBox[{"#", ",", "Purple", ",", 
           RowBox[{"\"\<<ci>\>\"", "<>", 
            RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<</ci>\>\""}]}], 
          "]"}], "&"}], "@@", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"subXML", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", "1"}], "]"}]}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\<addRule: Unknown symbol \>\"", "//", "boldBlack"}], 
          ",", 
          RowBox[{"#", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is referenced in the MathML for rule (type = \>\"", "//", 
           "boldBlack"}], " ", ",", 
          RowBox[{
           RowBox[{"ruleType", "[", "r", "]"}], "//", "boldBlue"}], ",", 
          RowBox[{"\"\<) for \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"variable", "//", "boldBlue"}], ",", 
          RowBox[{"\"\<; \>\"", "//", "boldBlack"}], ",", " ", 
          RowBox[{"\"\<\\nMathML expression:\\n\>\"", "//", "boldBlack"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "]"}], "&"}], "/@", "unknownSymbols"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"checkFunctionCalls", "[", 
       RowBox[{"math", ",", 
        RowBox[{"ruleType", "[", "r", "]"}], ",", " ", "variable"}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["checkFunctionCall", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"checkFunctionCalls", "[", 
    RowBox[{"symXML_", ",", " ", "type_", ",", " ", "id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dbg", "=", "False"}], ",", " ", "functionRefs", ",", 
       "functions", ",", " ", "fref", ",", " ", "badFunctionCalls", ",", 
       "correctType", ",", "r", ",", " ", "knownFunctions", ",", " ", 
       "usedFunctionIDs", ",", " ", "positions", ",", "pup", ",", "pup4", ",",
        "fcomp", ",", "functionsCalledAsNonFunctions", ",", "errMsg", ",", 
       " ", "getBadCall", ",", " ", "badCallXML", ",", "hf", ",", " ", 
       "countArguments", ",", " ", "argumentsUsed", ",", " ", 
       "checkArguments", ",", " ", "knownCsymbols"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"knownCsymbols", "=", 
       RowBox[{
        RowBox[{"csymbolsused", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"csymbolsused", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<--->checkFunctionCalls: knownCsymbols: \>\"", ",", " ", 
          "knownCsymbols"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"correctType", "[", "x_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "c", "}"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{"$SBML$IDTable", ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "_"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "c", "]"}], "<", "1"}], ",", " ", 
            RowBox[{"Return", "[", "\"\<undefined\>\"", "]"}]}], "]"}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"c", "=", 
           RowBox[{"c", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "c", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"check", " ", "for", " ", "non"}], "-", 
         RowBox[{
         "functions", " ", "that", " ", "are", " ", "used", " ", "as", " ", 
          "functions"}]}], " ", "*)"}],
       Background->RGBColor[1, 1, 0]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"functions", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"symXML", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<apply\>\"", ",", 
           RowBox[{"{", "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", "___"}], " ", "]"}], ",", "___"}], 
            "}"}]}], "]"}], ",", " ", "Infinity"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"fref", "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<apply\>\"", ",", 
          RowBox[{"{", "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", "_", ",", " ", "u_"}], " ", "]"}], 
            ",", "___"}], "}"}]}], "]"}], "]"}], ":=", "u"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"fref", "[", "u___", "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"functionRefs", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"fref", "/@", "functions"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"functionRefs", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"functionRefs", ",", " ", 
         RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"knownFunctions", "=", 
       RowBox[{"First", "/@", 
        RowBox[{"Select", "[", 
         RowBox[{"$SBML$IDTable", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Last", "[", "#", "]"}], "==", "\"\<function\>\""}], 
           "&"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"badFunctionCalls", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"functionRefs", ",", "knownFunctions"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"badFunctionCalls", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"badFunctionCalls", ",", " ", 
         RowBox[{"{", "\"\<AngleBracket\>\"", "}"}]}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"badFunctionCalls", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"badFunctionCalls", ",", " ", "knownCsymbols"}], "]"}]}], ";",
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"getBadCall", "[", "f_", "]"}], ":=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"functions", ",", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<apply\>\"", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<ci\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "f", "}"}]}], "]"}], ",", "___"}], "}"}]}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<debug: checkFunctionCalls: symXML:\>\"", ",", "symXML"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<debug: checkFunctionCalls: functions:\>\"", ",", "functions"}],
           "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<debug: checkFunctionCalls: functionRefs:\>\"", ",", " ", 
           "functionRefs"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<debug: checkFunctionCalls: badFunctionCalls:\>\"", ",", " ", 
           "badFunctionCalls"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<debug: checkFunctionCalls: knownFunctions:\>\"", ",", 
           "knownFunctions"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"hf", "[", "f_", "]"}], ":=", " ", 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"XMLHighlightForm", "[", 
             RowBox[{"#", ",", "Purple", ",", 
              RowBox[{"\"\<<ci>\>\"", "<>", 
               RowBox[{"stringer", "[", "f", "]"}], "<>", "\"\<</ci>\>\""}]}],
              "]"}], "&"}], "/@", 
           RowBox[{"getBadCall", "[", "f", "]"}]}], "}"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"stringer", "[", "type", "]"}], "<>", "\"\<:\>\"", "<>", 
             RowBox[{"stringer", "[", "id", "]"}], "<>", "\"\<:\>\"", "<>", 
             "#2", "<>", "\"\<:\>\"", "<>", "#1"}], "//", "boldBlue"}], ",", 
           RowBox[{"\"\< used as a function.\\n\>\"", "//", "boldBlack"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"hf", "[", "#1", "]"}]}], "\[IndentingNewLine]", "]"}], 
         "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"badFunctionCalls", ",", " ", 
          RowBox[{"correctType", "/@", "badFunctionCalls"}]}], "}"}]}], "]"}],
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", "\[IndentingNewLine]", 
       StyleBox[" ",
        Background->RGBColor[1, 1, 0]], 
       StyleBox[
        RowBox[{
         RowBox[{
         "check", " ", "for", " ", "functions", " ", "that", " ", "are", " ", 
          "used", " ", "as", " ", "non"}], "-", "functions"}],
        Background->RGBColor[1, 1, 0]], 
       StyleBox[" ",
        Background->RGBColor[1, 1, 0]], "\[IndentingNewLine]", "*)"}], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[1, 1, 0]], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[1, 1, 0]], 
      RowBox[{"usedFunctionIDs", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"symXML", ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<ci\>\"", ",", "_", ",", 
             RowBox[{"{", "#", "}"}]}], "]"}], ",", " ", "Infinity"}], "]"}], 
         "&"}], "/@", "knownFunctions"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"usedFunctionIDs", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"symXML", ",", "#", ",", "Infinity"}], "]"}], "&"}], "/@", 
        "knownFunctions"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<debug: checkFunctionCalls: usedFunctionIDs:\>\"", ",", 
           "usedFunctionIDs"}], "]"}], ";"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"positions", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#", ",", " ", 
           RowBox[{"Position", "[", 
            RowBox[{"symXML", ",", "#"}], "]"}]}], "}"}], "&"}], "/@", 
        RowBox[{"Union", "[", 
         RowBox[{"Flatten", "[", "usedFunctionIDs", "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<debug: checkFunctionCalls: positions:\>\"", ",", "positions"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pup", "[", 
        RowBox[{"{", 
         RowBox[{"f_", ",", "g_"}], "}"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "g", "]"}], "<", "1"}], ",", " ", 
            RowBox[{"Return", "[", 
             RowBox[{"{", "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"f", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"symXML", "[", 
                RowBox[{"[", 
                 RowBox[{"Sequence", "@@", 
                  RowBox[{"Drop", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"-", "4"}]}], "]"}]}], "]"}], "]"}], "&"}], "/@", 
              "g"}]}], "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"pup4", "=", 
       RowBox[{"pup", "/@", "positions"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<debug: checkFunctionCalls: pup4:\>\"", ",", "pup4"}], 
         "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"fcomp", "[", 
        RowBox[{"{", 
         RowBox[{"f_", ",", " ", "g_"}], "}"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"gkeep", ",", "gdrop"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "g", "]"}], "<", "1"}], ",", " ", 
            RowBox[{"Return", "[", 
             RowBox[{"{", "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"gdrop", " ", "=", " ", 
           RowBox[{"Cases", "[", 
            RowBox[{"g", ",", " ", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<apply\>\"", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"XMLElement", "[", 
                  RowBox[{"\"\<ci\>\"", ",", 
                   RowBox[{"{", "}"}], ",", 
                   RowBox[{"{", "f", "}"}]}], "]"}], ",", "___"}], "}"}]}], 
              "]"}], ",", "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"gkeep", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"g", ",", "gdrop"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"f", ",", "gkeep"}], "}"}], "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"functionsCalledAsNonFunctions", "=", 
       RowBox[{"fcomp", "/@", "pup4"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<debug: checkFunctionCalls: functionsCalledAsNonFunctions:\>\"", 
          ",", " ", "functionsCalledAsNonFunctions"}], "]"}]}], "]"}], ";", 
      " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"errMsg", "[", 
        RowBox[{"{", 
         RowBox[{"f_", ",", "g_"}], "}"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "g", "]"}], "<", "1"}], ",", " ", 
            RowBox[{"Return", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"stringer", "[", "type", "]"}], "<>", "\"\<:\>\"", "<>", 
                RowBox[{"stringer", "[", "id", "]"}], "<>", 
                "\"\<: function: \>\"", "<>", 
                RowBox[{"stringer", "[", "f", "]"}]}], "//", "boldBlue"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
              "\"\< referenced as a variable:\\n\>\"", "//", "boldBlack"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"XMLHighlightForm", "[", 
                RowBox[{"#", ",", "Purple", ",", 
                 RowBox[{"\"\<<ci>\>\"", "<>", 
                  RowBox[{"stringer", "[", "f", "]"}], "<>", 
                  "\"\<</ci>\>\""}]}], "]"}]}]}], "\[IndentingNewLine]", 
             "]"}], "&"}], "/@", "g"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"errMsg", "/@", "functionsCalledAsNonFunctions"}], ";", 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[1, 1, 0]], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "for", " ", "functions", " ", "that", " ", "are", " ", 
         "called", " ", "with", " ", "the", " ", "wrong", " ", "number", " ", 
         "of", " ", "arguments"}], " ", "*)"}],
       Background->RGBColor[1, 1, 0]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"countArguments", "[", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<apply\>\"", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<ci\>\"", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "f_", "}"}]}], "]"}], ",", " ", "args___"}], 
           "}"}]}], "]"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"f", ",", " ", 
           RowBox[{"Length", "[", 
            RowBox[{"{", "args", "}"}], "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"countArguments", "[", "___", "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"argumentsUsed", "=", 
       RowBox[{"countArguments", "/@", "functions"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<debug: checkFunctionCalls: argumentsUsed:\>\"", ",", " ", 
          "argumentsUsed"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkArguments", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"f_", ",", " ", "num_"}], "}"}], ",", " ", "fdef_"}], "]"}],
        ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "numExpected", "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"f", "==", "\"\<AngleBracket\>\""}], ",", " ", 
            RowBox[{"Return", "[", "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"knownCsymbols", ",", " ", "f"}], "]"}], ",", " ", 
            RowBox[{"Return", "[", "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"numExpected", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{"$SBML$function$bvars", ",", " ", 
             RowBox[{"{", 
              RowBox[{"f", ",", " ", "_"}], "}"}]}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "numExpected", "]"}], "<", "1"}], ",", 
            " ", 
            RowBox[{"numExpected", "=", "0"}], ",", " ", 
            RowBox[{"numExpected", "=", 
             RowBox[{"numExpected", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "2"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"num", "\[NotEqual]", " ", "numExpected"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"stringer", "[", "type", "]"}], "<>", "\"\<:\>\"", "<>", 
                 RowBox[{"stringer", "[", "id", "]"}], "<>", 
                 "\"\<: function: \>\"", "<>", 
                 RowBox[{"stringer", "[", "f", "]"}]}], "//", "boldBlue"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"\"\< called with \>\"", "//", "boldBlack"}], ",", " ", 
               RowBox[{"num", "//", "boldBlue"}], ",", " ", 
               RowBox[{
               "\"\< arguments (bvars), but \>\"", "//", "boldBlack"}], ",", 
               " ", 
               RowBox[{"numExpected", "//", "boldBlue"}], ",", " ", 
               RowBox[{
               "\"\< arguments were expected:\\n\>\"", "//", "boldBlack"}], 
               ",", " ", "\[IndentingNewLine]", 
               RowBox[{"XMLPrintForm", "[", 
                RowBox[{"fdef", ",", "Purple"}], "]"}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<debug: checkFunctionCalls: functions: \>\"", ",", " ", 
          "functions"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"MapThread", "[", 
       RowBox[{"checkArguments", ",", " ", 
        RowBox[{"{", 
         RowBox[{"argumentsUsed", ",", " ", "functions"}], "}"}]}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell["eventToSBML, addEvent, removeEvent, deleteEvent", "Subsubsection"],

Cell[CellGroupData[{

Cell["getEvent", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEvent", "[", 
     RowBox[{"n_", "?", "IntegerQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"Length", "[", "MB$Events", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "m"}], " ", "\[Or]", " ", 
          RowBox[{"n", "<", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: getEvent: \>\"", "//", "boldOrange"}], ",", 
            RowBox[{"\"\< Event: \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"n", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< does not exist. There are \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"m", "//", "boldRed"}], ",", 
            RowBox[{"\"\< events.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"MB$Events", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "//", "Last"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getEventNumber", "[", 
    RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "=", " ", 
       RowBox[{"First", "/@", "MB$Events"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Position", "[", 
        RowBox[{"m", ",", " ", 
         RowBox[{"stringer", "[", "id", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "n", "]"}], "<", "1"}], ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: getEventNumber: \>\"", "//", "boldOrange"}], 
           ",", 
           RowBox[{"\"\<Event: \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"id", "//", "boldRed"}], ",", 
           RowBox[{
           "\"\< does not exist. Valid events are \>\"", "//", "boldBlack"}], 
           ",", " ", 
           RowBox[{"m", "//", "boldRed"}]}], "]"}], ";", 
         RowBox[{"Return", "[", "0", "]"}], ";"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
        RowBox[{"n", "=", 
         RowBox[{"First", "[", "n", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEvent", "[", 
     RowBox[{"id_", "?", "SIDQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getEventNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"m", "=", 
           RowBox[{"Last", "[", 
            RowBox[{"MB$Events", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "m", "]"}]}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getEvent", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"getEvent", "/@", 
    RowBox[{"Flatten", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfEvents", "[", "]"}], ":=", " ", 
   RowBox[{"Length", "[", "MB$Events", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEvents", "[", "]"}], ":=", " ", 
    RowBox[{"getEvent", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"getNumberOfEvents", "[", "]"}], "]"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEvent", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: getEvent: \>\"", "//", "boldOrange"}], ",", " ", 
         RowBox[{"\"\<Correct format is: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getEvent[id]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\< where id is an integer or an SID, \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"\"\<getEvent[Integer]\>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\< or \>\"", "//", "boldBlack"}], ",", 
         RowBox[{"\"\<getEvent[{x1,x2,...}]\>\"", "//", "boldRed"}], ",", 
         RowBox[{
         "\"\< where x1,x2,... are integers or SIDs.\>\"", "//", 
          "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{89.1875, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceEvent", "Subsubsection",
 CellMargins->{{89.5625, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceEvent", "[", 
     RowBox[{
      RowBox[{"i_", "?", "IntegerQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<event\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", "MB$Events", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", ">", "0"}], " ", "\[And]", " ", 
          RowBox[{"i", "\[LessEqual]", "n"}]}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<event\>\"", ",", "x"}], "]"}]}], "]"}]}], ";", " ",
           "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"j", "==", "\"\<\>\""}], ",", " ", 
            RowBox[{"j", "=", 
             RowBox[{"MB$Events", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MB$Events", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"MB$Events", ",", 
             RowBox[{"j", "\[Rule]", " ", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<event\>\"", ",", "x"}], "]"}]}], ",", "i"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"MB$Echo", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<event \>\"", ",", "i", ",", " ", "\"\< replaced.\>\""}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceEvent: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{"\"\< unable to replace event \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"i", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceEvent", "[", 
     RowBox[{
      RowBox[{"id_", "?", "SIDQ"}], ",", " ", 
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<event\>\"", ",", "x___"}], "]"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"getEventNumber", "[", "id", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", ">", "0"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"replaceEvent", "[", 
           RowBox[{"n", ",", " ", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<event\>\"", ",", "x"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: replaceEvent: \>\"", "//", "boldOrange"}], ",", 
         RowBox[{"\"\< unable to replace event \>\"", "//", "boldBlack"}], 
         ",", 
         RowBox[{"id", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceEvent", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
     RowBox[{"\"\<replaceEvent: \>\"", "//", "boldRed"}], ",", " ", 
     RowBox[{
     "\"\<Invalid arguments. Correct format is:\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\<replaceEvent[\>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\< Integer|SID \>\"", "//", "boldBlack"}], ",", 
     RowBox[{"\"\<,\>\"", "//", "boldBlack"}], ",", " ", 
     RowBox[{"\"\< XMLElement[\\\"event\\\",...]\>\"", "//", "boldBlack"}], 
     ",", 
     RowBox[{"\"\< ]\>\"", "//", "boldBlack"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["eventToSBML", "Subsubsection",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"eventToSBML", "[", 
      RowBox[{"{", 
       RowBox[{"x__", "?", "ListQ"}], "}"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", " ", "=", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{"eventToSymbolicSBML", "/@", 
           RowBox[{"{", "x", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfEvents\>\"", ",", 
           RowBox[{"{", "}"}], ",", "r"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eventToSBML", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{"eventToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"ExportXMLString", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"sunderscore", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eventToSBML", "[", 
      RowBox[{"x_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"eventToSBML", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", " ", "opt"}], "]"}]}],
     ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}},
 InitializationCell->True,
 CellChangeTimes->{{3.389722156657435*^9, 3.3897221696864977`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["deleteEvent, removeEvent", "Subsubsection",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteEvent", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", " ", "=", 
       RowBox[{
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"Global`id", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], ")"}], "//", 
        "stringer"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"id", "==", "\"\<\>\""}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: deleteEvent\>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\< No \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"\"\<id\>\"", "/", "boldRed"}], ",", 
          "\"\< was specified.\>\""}], "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"removeID", "[", 
       RowBox[{"n", ",", "\"\<event\>\""}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "MB$Events"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"c", ",", "n"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "=", 
          RowBox[{"Position", "[", 
           RowBox[{"c", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"MB$Events", "=", " ", 
          RowBox[{"Drop", "[", 
           RowBox[{"MB$Events", ",", 
            RowBox[{"First", "[", "p", "]"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deleteEvent", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"deleteEvent", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "x"}], ",", "opt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeEvent", "[", "x___", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "flag", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"flag", " ", "=", " ", 
       RowBox[{"deleteEvent", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"MB$Echo", ",", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Event \>\"", "//", "boldGreen"}], ",", 
            RowBox[{"MB$Currentid", "//", "boldBlue"}], ",", 
            RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
          RowBox[{"\"\<Requested Event \>\"", "//", "boldBlack"}], ",", 
          RowBox[{"MB$Currentid", "//", "boldRed"}], ",", 
          RowBox[{"\"\< can not be removed.\>\"", "//", "boldBlack"}]}], 
         "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["addEvent", "Subsubsection",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addEvent", "[", 
     RowBox[{"XMLElement", "[", "x___", "]"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r", ",", "n", ",", " ", "a", ",", " ", "b", ",", " ", "c", ",", 
        RowBox[{"dbg", "=", "False"}], ",", "ea", ",", "eamath", ",", "vars", 
        ",", "modelSpecies", ",", "modelParameters", ",", "modelCompartments",
         ",", "isConstant", ",", "constants", ",", "constVal", ",", 
        "constantParameters", ",", "trueVariables", ",", " ", 
        "invalidVariables", ",", " ", "constantVariables", ",", 
        "undefinedVariables", ",", "allowedVariables", ",", "XML2Symbol", ",",
         "et", ",", " ", "etmath", ",", " ", "hf", ",", "csymbols", ",", 
        "mycsymbol", ",", "math", ",", " ", "meta"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"constVal", "[", "\"\<false\>\"", "]"}], ":=", " ", "False"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"constVal", "[", "\"\<true\>\"", "]"}], ":=", " ", "True"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"constVal", "[", "z_", "]"}], ":=", " ", "Indeterminate"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"XML2Symbol", "[", 
         RowBox[{"\"\<ci\>\"", ",", 
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "u_", "}"}]}], "]"}], ":=", " ", "u"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"XML2Symbol", "[", "u___", "]"}], ":=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<id\>\"", ",", "r"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"n", "\[Equal]", " ", "\"\<\>\""}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", " ", "=", " ", 
           RowBox[{"\"\<event\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"MB$eventcounter", "++"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}], " ", "=", " ", 
           RowBox[{"{", "x", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"b", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"b", ",", " ", 
             RowBox[{"\"\<id\>\"", "\[Rule]", " ", "n"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"r", " ", "=", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"n", "  ", "=", " ", 
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<id\>\"", ",", "r"}], "]"}]}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"deleteEvent", "[", 
          RowBox[{"Global`id", "\[Rule]", " ", "n"}], "]"}], " ", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"MB$Echo", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{
             "\"\<Previous occurance of event \>\"", "//", "boldGreen"}], ",", 
             RowBox[{"n", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< removed.\>\"", "//", "boldGreen"}]}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"addID", "[", 
        RowBox[{"n", ",", "\"\<event\>\"", ",", "True"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"meta", " ", "=", " ", 
        RowBox[{"getSBMLfield", "[", 
         RowBox[{"\"\<metaid\>\"", ",", " ", "r"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"meta", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"addMetaID", "[", 
          RowBox[{
          "meta", ",", "n", ",", " ", "\"\<event\>\"", ",", " ", "True"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"MB$Events", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"MB$Events", ",", 
          RowBox[{"n", "\[Rule]", "r"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{
         "test", " ", "to", " ", "see", " ", "if", " ", "valid", " ", 
          "variable"}],
         FontColor->RGBColor[1, 0, 0]], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<addEvent:\>\"", "//", "boldBlack"}], ",", 
            RowBox[{"\"\< r \>\"", "//", "boldRed"}], ",", 
            RowBox[{"\"\<=\>\"", "//", "boldBlack"}], ",", 
            RowBox[{"r", "//", "boldBlack"}]}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{"check", " ", "for", " ", "any", " ", "csymbols"}],
         FontColor->RGBColor[1, 0, 0]], " ", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"math", "=", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"csymbols", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"math", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "csymbols", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"mycsymbol", "[", 
            RowBox[{"\"\<csymbol\>\"", ",", 
             RowBox[{"{", "___", "}"}], ",", "xx_"}], "]"}], ":=", " ", 
           "xx"}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"mycsymbol", "[", "xx___", "]"}], ":=", " ", 
           RowBox[{"XMLElement", "[", "xx", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"csymbols", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"csymbols", "/.", 
               RowBox[{"{", 
                RowBox[{"XMLElement", "\[Rule]", " ", "mycsymbol"}], "}"}]}], 
              ")"}], "/.", 
             RowBox[{"{", 
              RowBox[{"XMLElement", "\[Rule]", " ", "List"}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"csymbols", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"csymbols", ",", 
             RowBox[{"{", "\"\<ci\>\"", "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<checkRuleExpression: csymbols\>\"", ",", " ",
             "csymbols"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<addEvent: csymbols\>\"", ",", "csymbols"}], 
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{"check", " ", "event", " ", "trigger"}],
         FontColor->RGBColor[1, 0, 0]], " ", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"et", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"r", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<trigger\>\"", ",", "___"}], "]"}], ",", " ", 
          "Infinity"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"checkFunctionCalls", "[", 
        RowBox[{"et", ",", "\"\<event-trigger\>\"", ",", 
         RowBox[{"stringer", "[", "n", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"etmath", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"et", ",", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ",", " ", "Infinity"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"etmath", "=", 
        RowBox[{"etmath", "/.", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "\[Rule]", " ", "XML2Symbol"}], "}"}]}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"invalidVariables", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"etmath", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"First", "/@", "$SBML$IDTable"}], ",", "csymbols"}], 
           "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"XMLHighlightForm", "[", 
           RowBox[{"#", ",", "Purple", ",", 
            RowBox[{"\"\<<ci>\>\"", "<>", 
             RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<</ci>\>\""}]}],
            "]"}], "&"}], "@@", " ", "et"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<addEvent: undefined variable \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"#", "//", "boldBlue"}], ",", " ", 
           RowBox[{
           "\"\< referenced in trigger for event \>\"", "//", "boldBlack"}], 
           ",", " ", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\<\\nInvalid trigger = \\n\>\"", "//", "boldBlack"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         "&"}], "/@", "invalidVariables"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        StyleBox[
         RowBox[{"check", " ", "event", " ", "assignments"}],
         FontColor->RGBColor[1, 0, 0]], " ", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"ea", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"r", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<eventAssignment\>\"", ",", "___"}], "]"}], ",", " ", 
          "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"checkFunctionCalls", "[", 
        RowBox[{"ea", ",", "\"\<event-assignment\>\"", ",", 
         RowBox[{"stringer", "[", "n", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"vars", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"getSBMLfield", "[", 
            RowBox[{"\"\<variable\>\"", ",", "#"}], "]"}], "&"}], ",", "ea"}],
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"metas", ",", " ", "ids"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"metas", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"getSBMLfield", "[", 
               RowBox[{"\"\<metaid\>\"", ",", "#"}], "]"}], "&"}], ",", " ", 
             "ea"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ids", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"contextify", "[", 
               RowBox[{
                RowBox[{"contextify", "[", 
                 RowBox[{"#", ",", "\"\<eventAssignment\>\""}], "]"}], ",", 
                "n"}], "]"}], "&"}], ",", " ", "vars"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"#1", "\[NotEqual]", " ", "\"\<\>\""}], ",", " ", 
               RowBox[{"addMetaID", "[", 
                RowBox[{
                "#1", ",", "#2", ",", " ", "\"\<eventAssignment\>\"", ",", 
                 " ", "True"}], "]"}]}], "]"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"metas", ",", "ids"}], "}"}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"check", " ", "assignment", " ", "variable"}], " ", "*)"}], 
       "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
       RowBox[{"modelSpecies", "=", 
        RowBox[{"First", "/@", "MB$Species"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"modelParameters", " ", "=", " ", 
        RowBox[{"First", "/@", "MB$Parameters"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"modelCompartments", "=", 
        RowBox[{"First", "/@", "MB$Compartments"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"allowedVariables", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
         "modelSpecies", ",", " ", "modelParameters", ",", 
          "modelCompartments"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"undefinedVariables", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"vars", ",", "allowedVariables"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"XMLHighlightForm", "[", 
           RowBox[{"#", ",", "Purple", ",", 
            RowBox[{"\"\<variable=\\\"\>\"", "<>", 
             RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<\\\"\>\""}]}], 
           "]"}], "&"}], "@@", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{"r", ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<listOfEventAssignments\>\"", ",", "___"}], "]"}], 
           ",", " ", "Infinity"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
           RowBox[{
           "\"\< unknown eventAssignment variable: \>\"", "//", "boldBlack"}],
            ",", "\[IndentingNewLine]", 
           RowBox[{"#", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< in event: \>\"", "//", "boldBlack"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{
           "\"\<\\nInvalid listOfEventAssignments:\\n\>\"", "//", 
            "boldBlack"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         "&"}], "/@", "undefinedVariables"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"isConstant", "[", "p_", "]"}], ":=", " ", 
        RowBox[{"constVal", "[", 
         RowBox[{"getSBMLfield", "[", 
          RowBox[{"\"\<constant\>\"", ",", 
           RowBox[{"Last", "[", "p", "]"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Species", " ", "default", " ", "to", " ", "non"}], "-", 
          "constant"}], ",", " ", 
         RowBox[{
          RowBox[{"parameters", " ", "&"}], " ", "compartments", " ", "to", 
          " ", 
          RowBox[{"constant", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"constants", " ", "=", " ", 
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"isConstant", "/@", "MB$Species"}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Indeterminate", "\[Rule]", " ", "False"}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"isConstant", "/@", "MB$Parameters"}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Indeterminate", "\[Rule]", " ", "True"}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"isConstant", "/@", "MB$Compartments"}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Indeterminate", "\[Rule]", " ", "True"}], "}"}]}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"constants", "=", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"allowedVariables", ",", "constants"}], "}"}], "//", 
         "Transpose"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"constants", "=", 
        RowBox[{"Select", "[", 
         RowBox[{"constants", ",", 
          RowBox[{
           RowBox[{"Last", "[", "#", "]"}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"constants", "=", 
        RowBox[{"First", "/@", "constants"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"constants", "=", 
        RowBox[{"Intersection", "[", 
         RowBox[{"vars", ",", "constants"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"check", " ", "event", " ", "assignment", " ", "expression"}],
         " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"eamath", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"ea", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<ci\>\"", ",", "___"}], "]"}], ",", "Infinity"}], 
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"eamath", "=", 
        RowBox[{"(", 
         RowBox[{"eamath", "/.", 
          RowBox[{"{", 
           RowBox[{"XMLElement", "\[Rule]", " ", "XML2Symbol"}], "}"}]}], 
         ")"}]}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"invalidVariables", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{"eamath", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"First", "/@", "$SBML$IDTable"}], ",", "csymbols"}], 
           "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"ea", " ", "=", " ", 
        RowBox[{"Cases", "[", 
         RowBox[{"r", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<listOfEventAssignments\>\"", ",", "___"}], "]"}], ",",
           " ", "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"XMLHighlightForm", "[", 
           RowBox[{"#", ",", "Purple", ",", 
            RowBox[{"\"\<variable=\\\"\>\"", "<>", 
             RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<\\\"\>\""}]}], 
           "]"}], "&"}], "@@", "ea"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<the eventAssignment variable: \>\"", "//", "boldBlack"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"#", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< in event \>\"", "//", "boldBlack"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{
           "\"\< has constant=\\\"true\\\" and may not be assigned a value as \
a result of an event.\>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{
           "\"\< Invalid listOfEventAssignments:\\n\>\"", "//", "boldBlack"}],
            ",", " ", "\[IndentingNewLine]", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         "&"}], "/@", "constants"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"hf", "[", "var_", "]"}], ":=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"XMLHighlightForm", "[", 
           RowBox[{"#", ",", "Purple", ",", 
            RowBox[{"\"\<<ci>\>\"", "<>", 
             RowBox[{"stringer", "[", "var", "]"}], "<>", "\"\<</ci>\>\""}]}],
            "]"}], "&"}], "@@", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{"r", ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<listOfEventAssignments\>\"", ",", "___"}], "]"}], 
           ",", " ", "Infinity"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{
           "\"\<addEvent: undefined variable \>\"", "//", "boldBlack"}], ",", 
           RowBox[{"#", "//", "boldBlue"}], ",", " ", 
           RowBox[{
           "\"\< referenced in eventAssignment for event \>\"", "//", 
            "boldBlack"}], ",", " ", 
           RowBox[{"n", "//", "boldBlue"}], ",", " ", 
           RowBox[{
           "\"\< Invalid listOfEventAssignments:\\n\>\"", "//", "boldBlack"}],
            ",", " ", "\[IndentingNewLine]", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"hf", "[", "#", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         "&"}], "/@", "invalidVariables"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"MB$Echo", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Event \>\"", "//", "boldGreen"}], ",", 
           RowBox[{"n", "//", "boldBlue"}], ",", 
           RowBox[{"\"\< added.\>\"", "//", "boldGreen"}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addEvent", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"MB$Echo", " ", "=", " ", 
         RowBox[{
          RowBox[{"Global`echo", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`echo", "\[Rule]", " ", "True"}], "}"}]}]}], ";"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"r", " ", "=", 
        RowBox[{"eventToSymbolicSBML", "[", "opt", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"addEvent", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addEvent", "[", 
    RowBox[{"id_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"addEvent", "[", 
    RowBox[{
     RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], "]"}]}], 
  ";"}]}], "Input",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}},
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["modifyEvent", "Subsubsection",
 CellMargins->{{90.375, Inherited}, {Inherited, Inherited}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"modifyEvent", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "n", ",", "x", ",", "y", ",", "trigger", ",", "delay", ",", " ", 
         "infix", ",", " ", "getFirst", ",", " ", "getElement", ",", 
         "getMath", ",", " ", "asg", ",", " ", "vars", ",", "maths", ",", 
         "name", ",", "ann", ",", " ", "notes", ",", "asgann", ",", 
         "asgnotes", ",", "asgmetids"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          StyleBox["infix",
           FontColor->RGBColor[0, 0, 1]], "[", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "x___"}], "]"}], "]"}], ":=", " ", 
         RowBox[{"SymbolicSBMLMathMLToExpression", "[", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<math\>\"", ",", "x"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["infix",
           FontColor->RGBColor[0, 0, 1]], "[", "x___", "]"}], ":=", " ", 
         "1"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["getFirst",
           FontColor->RGBColor[0, 0, 1]], "[", "a_", "]"}], ":=", " ", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "b", "}"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"b", "=", "a"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"While", " ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ListQ", "[", "b", "]"}], " ", "\[And]", " ", 
               RowBox[{
                RowBox[{"Length", "[", "b", "]"}], ">", "0"}]}], ",", " ", 
              RowBox[{"b", " ", "=", " ", 
               RowBox[{"First", "[", "b", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "b", "]"}], ";"}]}], " ", 
          "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["getElement",
           FontColor->RGBColor[0, 0, 1]], "[", 
          RowBox[{"element_", ",", " ", "xml_", ",", 
           RowBox[{"level_:", "Infinity"}]}], "]"}], ":=", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{"xml", ",", " ", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"element", ",", " ", "___"}], "]"}], ",", " ", "level"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["getMath",
           FontColor->RGBColor[0, 0, 1]], "[", 
          RowBox[{"element_", ",", " ", "xml_"}], "]"}], ":=", 
         RowBox[{"infix", "[", 
          RowBox[{"getFirst", "[", 
           RowBox[{"getElement", "[", 
            RowBox[{"\"\<math\>\"", ",", 
             RowBox[{"getFirst", "[", 
              RowBox[{"getElement", "[", 
               RowBox[{"element", ",", "xml"}], "]"}], "]"}]}], "]"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"n", " ", "=", 
         RowBox[{
          RowBox[{"(", " ", 
           RowBox[{
            RowBox[{"Global`id", "/.", 
             RowBox[{"{", "opt", "}"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`id", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
           ")"}], "//", "stringer"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"MB$Currentid", "=", "n"}], ";", "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"retrieveSBMLObject", "[", 
          RowBox[{"\"\<event\>\"", ",", "n"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Head", "[", "x", "]"}], "]"}], "==", 
           "\"\<XMLElement\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"globalize", "/@", 
             RowBox[{"extractAndUpdateXMLOptions", "[", 
              RowBox[{"x", ",", "opt"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"trigger", " ", "=", " ", 
            RowBox[{"getMath", "[", 
             RowBox[{"\"\<trigger\>\"", ",", "x"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"delay", " ", "=", " ", 
            RowBox[{"getMath", "[", 
             RowBox[{"\"\<delay\>\"", ",", "x"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Join", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Global`trigger", "\[Rule]", " ", "trigger"}], ",", 
                " ", 
                RowBox[{"Global`delay", "\[Rule]", " ", "delay"}]}], "}"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"asg", " ", "=", " ", 
            RowBox[{"getElement", "[", 
             RowBox[{"\"\<listOfEventAssignments\>\"", ",", " ", "x"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"asg", " ", "=", " ", 
            RowBox[{"getElement", "[", 
             RowBox[{"\"\<eventAssignment\>\"", ",", 
              RowBox[{"asg", "//", "getFirst"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"asgmetids", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"getSBMLfield", "[", 
                RowBox[{"\"\<metaid\>\"", ",", "#"}], "]"}], "&"}], ",", 
              "asg"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"asgnotes", " ", "=", " ", 
            RowBox[{"getNotes", "/@", "asg"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"asgann", "=", 
            RowBox[{"getAnnotations", "/@", "asg"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"vars", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"getSBMLfield", "[", 
                RowBox[{"\"\<variable\>\"", ",", "#"}], "]"}], "&"}], ",", 
              " ", "asg"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"maths", " ", "=", " ", 
            RowBox[{"infix", "/@", 
             RowBox[{"getFirst", "/@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Cases", "[", 
                  RowBox[{"#", ",", " ", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\"\<math\>\"", ",", "___"}], "]"}], ",", 
                   "Infinity"}], "]"}], "&"}], ",", " ", "asg"}], "]"}]}]}]}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"asg", " ", "=", " ", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Rule", "[", 
                RowBox[{"#1", ",", " ", "#2"}], "]"}], "&"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"vars", ",", " ", "maths"}], "}"}]}], "]"}]}], ";", 
           " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"Global`eventAssignment", "\[Rule]", " ", "asg"}]}], 
             "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"y", ",", 
              RowBox[{
              "Global`eventAssignmentMetaids", "\[Rule]", " ", 
               "asgmetids"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"y", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{
              "Global`eventAssignmentNotes", "\[Rule]", " ", "asgnotes"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{
              "Global`eventAssignmentAnnotations", "\[Rule]", " ", 
               "asgann"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"ann", " ", "=", " ", 
            RowBox[{"updateAnnotations", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"notes", " ", "=", " ", 
            RowBox[{"updateNotes", "[", 
             RowBox[{"x", ",", " ", "opt"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<annotation\>\"", "\[Rule]", " ", "ann"}], "]"}]}],
              "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"y", " ", "=", " ", 
            RowBox[{"Prepend", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"globalize", "[", 
               RowBox[{"\"\<notes\>\"", "\[Rule]", " ", "notes"}], "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "True"}], ";", "\[IndentingNewLine]", 
           RowBox[{"n", "=", 
            RowBox[{"Apply", "[", 
             RowBox[{"addEvent", ",", "y"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"MB$Modify", "=", "False"}], ";"}], "\[IndentingNewLine]", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{"addEvent", "[", "opt", "]"}]}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "n", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"modifyEvent", "[", 
      RowBox[{"id_", ",", " ", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"modifyEvent", "[", 
      RowBox[{
       RowBox[{"Global`id", "\[Rule]", " ", "id"}], ",", " ", "opt"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellMargins->{{88.75, Inherited}, {Inherited, Inherited}},
 InitializationCell->True],

Cell[BoxData[
 SuperscriptBox["Null", "2"]], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["replaceObject", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<compartment\>\"", ",", "x_", ",", " ", "y_"}], "]"}], ":=", 
   " ", 
   RowBox[{"replaceCompartment", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<event\>\"", ",", "x_", ",", "y_"}], "]"}], ":=", " ", 
   RowBox[{"replaceEvent", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<function\>\"", ",", "x_", ",", "y_"}], "]"}], ":=", " ", 
   RowBox[{"replaceFunction", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<parameter\>\"", ",", "x_", ",", "y_"}], "]"}], ":=", " ", 
   RowBox[{"replaceParameter", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<reaction\>\"", ",", "x_", ",", "y_"}], "]"}], ":=", " ", 
   RowBox[{"replaceReaction", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<rule\>\"", ",", "x_", ",", "y_"}], "]"}], ":=", " ", 
   RowBox[{"replaceRule", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<species\>\"", ",", "x_", ",", "y_"}], "]"}], ":=", " ", 
   RowBox[{"replaceSpecies", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<unit\>\"", ",", " ", "x_", ",", " ", "y_"}], "]"}], ":=", 
   " ", 
   RowBox[{"replaceUnit", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceObject", "[", 
    RowBox[{"\"\<initialAssignment\>\"", ",", " ", "x_", ",", " ", "y_"}], 
    "]"}], ":=", " ", 
   RowBox[{"replaceInitialAssignment", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceObject", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Print", "[", 
     RowBox[{
      RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
      RowBox[{"\"\< replaceObject:\>\"", "//", "boldBlack"}], ",", 
      RowBox[{"\"\< invalid argument: \>\"", "//", "boldBlack"}], ",", " ", 
      RowBox[{
       RowBox[{"{", "x", "}"}], "//", "boldBlue"}]}], "]"}]}], ";"}], 
  " "}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getObject", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<compartment\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getCompartment", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObject", "[", 
     RowBox[{"\"\<compartmentType\>\"", ",", " ", "x___"}], "]"}], ":=", " ", 
    RowBox[{"getCompartmentType", "[", "x", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<event\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getEvent", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<function\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getFunction", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<parameter\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getParameter", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<reaction\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getReaction", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<rule\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getRule", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<species\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getSpecies", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObject", "[", 
     RowBox[{"\"\<speciesType\>\"", ",", " ", "x___"}], "]"}], ":=", " ", 
    RowBox[{"getSpeciesType", "[", "x", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObject", "[", 
    RowBox[{"\"\<unit\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getUnit", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObject", "[", 
     RowBox[{"\"\<constraint\>\"", ",", " ", "x___"}], "]"}], ":=", " ", 
    RowBox[{"getConstraint", "[", "x", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObject", "[", 
     RowBox[{"\"\<initialAssignment\>\"", ",", " ", "x___"}], "]"}], ":=", 
    " ", 
    RowBox[{"getInitialAssignment", "[", "x", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"getObject", "[", 
      RowBox[{
       RowBox[{"s_", "?", "StringQ"}], ",", "x___"}], "]"}], ":=", " ", 
     RowBox[{"getObject", "[", 
      RowBox[{
       RowBox[{"ToLowerCase", "[", "s", "]"}], ",", "x"}], "]"}]}], ";"}], 
   " ", "*)"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObject", "[", 
     RowBox[{
      RowBox[{"x", "?", "StringQ_"}], ",", " ", "y___"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<getObject: \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{"\"\<unknown object: \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObject", "[", "x__", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<getObject: \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{
         "\"\<object must be a string, not: \>\"", "//", "boldBlack"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"{", " ", "x", "}"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "//", "boldBlue"}]}], "]"}], ";", 
       " ", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.395751053824511*^9, 3.3957510625810127`*^9}, {
  3.395752765519964*^9, 3.3957527694593897`*^9}, {3.3957528297074327`*^9, 
  3.3957529191871862`*^9}, {3.39575295798776*^9, 3.3957529956863213`*^9}, {
  3.395753026352333*^9, 3.395753031396546*^9}, {3.3957531534851513`*^9, 
  3.3957531592131453`*^9}, {3.3957544993732233`*^9, 3.395754500829965*^9}, {
  3.395754717142125*^9, 3.39575480351227*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getNumberOfObjects", "Subsubsection",
 CellChangeTimes->{{3.395755599130313*^9, 3.395755601994995*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<compartment\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfCompartments", "[", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNumberOfObjects", "[", "\"\<compartmentType\>\"", "]"}], ":=",
     " ", 
    RowBox[{"getNumberOfCompartmentTypes", "[", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<event\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfEvents", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<function\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfFunctions", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<parameter\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfParameters", "[", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<reaction\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfReactions", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<rule\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfRules", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<species\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfSpecies", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNumberOfObjects", "[", "\"\<speciesType\>\"", "]"}], ":=", 
    " ", 
    RowBox[{"getNumberOfSpeciesTypes", "[", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfObjects", "[", "\"\<unit\>\"", "]"}], ":=", " ", 
   RowBox[{"getNumberOfUnits", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNumberOfObjects", "[", "\"\<constraint\>\"", "]"}], ":=", " ", 
    RowBox[{"getNumberOfConstraints", "[", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNumberOfObjects", "[", "\"\<initialAssignment\>\"", "]"}], ":=",
     " ", 
    RowBox[{"getNumberOfInitialAssignments", "[", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNumberOfObjects", "[", 
     RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\<getNumberOfObjects: unknown Object: \>\"", "//", "boldBlack"}], 
         ",", " ", 
         RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", " ", 
       RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getNumberOfObjects", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<getNumberOfObjects: Object: \>\"", "//", "boldBlack"}], 
         ",", " ", 
         RowBox[{"x", "//", "boldBlue"}], ",", " ", 
         RowBox[{"\"\< is not a string.\>\"", "//", "boldBlack"}]}], "]"}], 
       ";", " ", 
       RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.395755714739496*^9, 3.395755787169688*^9}, 
   3.395755966471167*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["getObjectAttribute", "Subsubsection",
 CellChangeTimes->{{3.395755649554237*^9, 3.395755651852603*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getObjectAttribute", "[", 
    RowBox[{
     RowBox[{"object_", "?", "StringQ"}], ",", " ", 
     RowBox[{"attribute_", "?", "StringQ"}], ",", " ", "x_"}], "]"}], ":=", 
   " ", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"obj", ",", " ", "att"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"obj", " ", "=", " ", 
       RowBox[{"getObject", "[", 
        RowBox[{"object", ",", "x"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"obj", " ", "=", " ", 
       RowBox[{"obj", "/.", 
        RowBox[{"{", 
         RowBox[{"XMLElement", "\[Rule]", " ", "List"}], "}"}]}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "obj", "]"}], "<", "1"}], ",", " ", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"att", " ", "=", " ", 
       RowBox[{"obj", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"att", " ", "=", " ", 
       RowBox[{
        RowBox[{"attribute", "/.", "att"}], "/.", 
        RowBox[{"{", 
         RowBox[{"attribute", "\[Rule]", " ", "$Failed"}], "}"}]}]}], ";", 
      " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", "att", "]"}], "\[Equal]", 
         "\"\<$Failed\>\""}], ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\<getObjectAttribute: \>\"", "//", "boldBlack"}], ",", 
           " ", "\[IndentingNewLine]", 
           RowBox[{"\"\< attribute: \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"attribute", "//", "boldBlue"}], ",", " ", 
           RowBox[{"\"\< is not defined for object \>\"", "//", "boldBlack"}],
            ",", " ", 
           RowBox[{"object", "//", "boldBlue"}], ",", "\"\< \>\"", ",", " ", 
           RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";"}]}], "]"}], ";", " ",
       "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "att", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", " ", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectAttribute", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\< expecting getObjectAttribute[object, attribute, number] where \
object is \\\"compartment\\\", \\\"species\\\", etc, and attribute is the \
string name of the desired attribute, e.g., \\\"name\\\", \\\"id\\\", \
etc.\>\"", "//", "boldBlack"}]}], "]"}], ";", " ", "\[IndentingNewLine]", " ", 
       RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
getObjectID, get__ID, getObjectName, get__Name, getObjectNames, getObjectIDs\
\>", "Subsubsection",
 CellChangeTimes->{{3.395754393478067*^9, 3.395754397452072*^9}, {
  3.395755665813355*^9, 3.395755676901396*^9}, {3.395756524085023*^9, 
  3.3957565290410767`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectID", "[", 
     RowBox[{
      RowBox[{"object_", "?", "StringQ"}], ",", " ", "x_"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "id", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"id", "=", 
        RowBox[{"getObjectAttribute", "[", 
         RowBox[{"object", ",", " ", "\"\<id\>\"", " ", ",", " ", "x"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "id", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectID", "[", 
     RowBox[{"object_", ",", " ", "x___"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "id", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<getObjectID: \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{
         "\"\< object must be a string, not \>\"", "//", "boldBlack"}], ",", 
         " ", 
         RowBox[{"object", "//", "boldBlue"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectIDs", "[", 
    RowBox[{"object_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"id", ",", " ", "n"}], "}"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", "=", 
       RowBox[{"getNumberOfObjects", "[", "object", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", "n", "]"}], "\[Equal]", "\"\<$Failed\>\""}],
         ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\<getObjectIDs: \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"object", "//", "boldBlue"}]}], "]"}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ids", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"getObjectID", "[", 
          RowBox[{"object", ",", " ", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"Range", "[", "n", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "ids", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectIDs", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\<getObjectIDs: object must be a single string, not: \>\"", "//", 
          "boldBlack"}], ",", " ", 
         RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectName", "[", 
     RowBox[{
      RowBox[{"object_", "?", "StringQ"}], ",", " ", "x_"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "id", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"id", "=", 
        RowBox[{"getObjectAttribute", "[", 
         RowBox[{"object", ",", " ", "\"\<name\>\"", ",", " ", "x"}], "]"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "id", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectName", "[", 
     RowBox[{"object_", ",", " ", "x___"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "id", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<getObjectName: \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{
         "\"\< object must be a string, not \>\"", "//", "boldBlack"}], ",", 
         " ", 
         RowBox[{"object", "//", "boldBlue"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNames", "[", 
    RowBox[{"object_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"names", ",", " ", "n"}], "}"}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", "=", 
       RowBox[{"getNumberOfObjects", "[", "object", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", "n", "]"}], "\[Equal]", "\"\<$Failed\>\""}],
         ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\<getObjectNames: \>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"object", "//", "boldBlue"}]}], "]"}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"names", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"getObjectName", "[", 
          RowBox[{"object", ",", " ", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"Range", "[", "n", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "names", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjectNames", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{
         "\"\<getObjectNames: object must be a single string, not: \>\"", "//",
           "boldBlack"}], ",", " ", 
         RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<compartment\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEventID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<event\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunctionID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<function\>\"", ",", " ", "x"}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getParameterID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<parameter\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getRuleID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<rule\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<species\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getUnitID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<unit\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesTypeID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<speciesType\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentTypeID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<compartmentType\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getConstraintID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<constraint\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getInitialAssignmentID", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectID", "[", 
     RowBox[{"\"\<initialAssignment\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<compartment\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEventIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<event\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunctionIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<function\>\"", "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getParameterIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<parameter\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getRuleIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<rule\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<species\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getUnitIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<unit\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesTypeIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<speciesType\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentTypeIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<compartmentType\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getConstraintIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<constraint\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getInitialAssignmentIDs", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectIDs", "[", "\"\<initialAssignment\>\"", "]"}]}], ";"}], 
  " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<compartment\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEventName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<event\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunctionName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<function\>\"", ",", " ", "x"}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getParameterName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<parameter\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getRuleName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<rule\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<species\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getUnitName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<unit\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesTypeName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<speciesType\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentTypeName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<compartmentType\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getConstraintName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<constraint\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getInitialAssignmentName", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"getObjectName", "[", 
     RowBox[{"\"\<initialAssignment\>\"", ",", " ", "x"}], "]"}]}], ";"}], 
  " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<compartment\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getEventNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<event\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFunctionNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<function\>\"", "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getParameterNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<parameter\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getRuleNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<rule\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<species\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getUnitNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<unit\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSpeciesTypeNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<speciesType\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getCompartmentTypeNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<compartmentType\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getConstraintNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<constraint\>\"", "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getInitialAssignmentNames", "[", "]"}], ":=", " ", 
    RowBox[{"getObjectNames", "[", "\"\<initialAssignment\>\"", "]"}]}], 
   ";"}], " "}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3957507997244387`*^9, 3.395750881828766*^9}, {
   3.395750930193193*^9, 3.395750973115603*^9}, 3.395751043023788*^9, {
   3.395751154667879*^9, 3.3957511583952913`*^9}, {3.395751203589922*^9, 
   3.395751265804288*^9}, {3.395751306370419*^9, 3.395751313746262*^9}, {
   3.395751345107766*^9, 3.395751423293751*^9}, {3.395751595802773*^9, 
   3.3957517321823874`*^9}, {3.395753206684376*^9, 3.395753306452293*^9}, {
   3.3957533667642937`*^9, 3.395753494710863*^9}, {3.395753541453453*^9, 
   3.3957536108510923`*^9}, {3.395754420983931*^9, 3.395754590731999*^9}, {
   3.395754632358555*^9, 3.395754691469717*^9}, {3.395754826583041*^9, 
   3.395754866409731*^9}, {3.395755622856357*^9, 3.395755644084276*^9}, {
   3.395756098290991*^9, 3.395756200094098*^9}, {3.395756243123725*^9, 
   3.395756283443391*^9}, {3.395756316206674*^9, 3.395756319896356*^9}, {
   3.395756351922707*^9, 3.395756425564412*^9}, {3.395756468207653*^9, 
   3.395756506794692*^9}, {3.3957572469716797`*^9, 3.39575727252631*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getObjectNumber", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<compartment\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getCompartmentNumber", "[", "x", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<event\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getEventNumber", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<function\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getCompartmentNumber", "[", "x", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<parameter\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getParameterNumber", "[", "x", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<reaction\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getReactionNumber", "[", "x", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<rule\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getRuleNumber", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<species\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getSpeciesNumber", "[", "x", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{"\"\<unit\>\"", ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getUnitNumber", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", 
    RowBox[{
     RowBox[{"s_", "?", "StringQ"}], ",", "x___"}], "]"}], ":=", " ", 
   RowBox[{"getObjectNumber", "[", 
    RowBox[{
     RowBox[{"ToLowerCase", "[", "s", "]"}], ",", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getObjectNumber", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "xx"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\"\<getObjectNumber[\>\"", "<>", 
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{"ExportString", "[", 
                RowBox[{
                 RowBox[{"x", "//", "List"}], ",", "\"\<Text\>\""}], "]"}], 
               ",", "1"}], "]"}], ",", 
             RowBox[{"-", "1"}]}], "]"}], "<>", "\"\<]\>\""}], ")"}], "//", 
         "boldRed"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "\"\< Invalid call to getObjectNumber;  the first argument must be \
one of the following strings: \
\\\"compartment\\\",\\\"event\\\",\\\"function\\\",\\\"parameter\\\",\\\"\
reaction\\\",\\\"rule\\\",\\\"species\\\",\\\"unit\\\"\>\"", "//", 
         "boldBlack"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}]}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getObjects", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getObjects", "[", "]"}], ":=", " ", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjects", "[", 
     RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "objs"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", " ", "=", " ", 
        RowBox[{"getNumberOfObjects", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", "n", "]"}], "\[Equal]", " ", 
          "\"\<$Failed\>\""}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{"\"\<getObjects: \>\"", "//", "boldBlack"}], ",", " ", 
            RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", " ", 
          RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"objs", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"getObject", "[", 
           RowBox[{"x", ",", " ", "#"}], "]"}], "&"}], "/@", 
         RowBox[{"Range", "[", "n", "]"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "objs", "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjects", "[", 
     RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "opts", ",", "y"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"x", "=", 
        RowBox[{
         RowBox[{"{", "opt", "}"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{"First", "/@", "x"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"Join", "@@", "x"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"y", "=", 
        RowBox[{"getObjects", "@@", "x"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{"Take", "[", 
         RowBox[{"opts", ",", 
          RowBox[{"Length", "[", "y", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"opts", "=", 
        RowBox[{"ToLowerCase", "/@", "opts"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"y", "=", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"opts", ",", "y"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "y", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getObjects", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"{", "x", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OddQ", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
            RowBox[{"n", "//", "boldBlue"}], ",", 
            RowBox[{
            "\"\< arguments supplied to getObjects; an even number of \
arguments is required, or a single string argument.\>\"", "//", 
             "boldBlack"}]}], " ", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"p", " ", "=", " ", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"{", "x", "}"}], ",", "2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getObject", "@@", "#"}], "&"}], "/@", "p"}], "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.39575524533832*^9, 3.3957552764123783`*^9}, {
   3.395755374575845*^9, 3.395755380741995*^9}, {3.3957557001367483`*^9, 
   3.3957557106329727`*^9}, {3.3957557966088133`*^9, 3.395755915944129*^9}, {
   3.395756021839135*^9, 3.395756043189394*^9}, 3.395756078992034*^9}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SBMLCopy", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "SBMLCopy", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ImportOptions", "\[Rule]", " ", 
      RowBox[{"{", "}"}]}], ",", " ", 
     RowBox[{"ExportOptions", "\[Rule]", " ", 
      RowBox[{"{", "}"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLCopy", "[", 
     RowBox[{
      RowBox[{"in_", "?", "StringQ"}], ",", " ", 
      RowBox[{"out_", "?", "StringQ"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"f", ",", "s", ",", "msg", ",", " ", "iopt", ",", "eopt"}], 
       "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"iopt", " ", "=", " ", 
        RowBox[{
         RowBox[{"ImportOptions", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLCopy", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"iopt", "=", 
        RowBox[{"MyFilterOptions", "[", 
         RowBox[{"Import", ",", "iopt"}], "]"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"eopt", " ", "=", 
        RowBox[{
         RowBox[{"ExportOptions", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLCopy", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"eopt", "=", 
        RowBox[{"MyFilterOptions", "[", 
         RowBox[{"Export", ",", "eopt"}], "]"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"validInputFile", "[", "in", "]"}]}], ",", 
         RowBox[{"Return", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{"ExportXMLString", "[", 
         RowBox[{"Import", "[", 
          RowBox[{"in", ",", " ", "iopt"}], "]"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"availableOutputFile", "[", "out", "]"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"msg", "=", 
           RowBox[{"Export", "[", 
            RowBox[{"out", ",", "s", ",", "\"\<text\>\"", ",", " ", "eopt"}], 
            "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
         RowBox[{"msg", " ", "=", " ", "s"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "msg", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLCopy", "[", 
     RowBox[{
      RowBox[{"in_", "?", "StringQ"}], ",", " ", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "f", ",", "s", ",", "msg", ",", " ", "iopt", ",", " ", "eopt"}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"validInputFile", "[", "in", "]"}]}], ",", 
         RowBox[{"Return", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"iopt", " ", "=", " ", 
        RowBox[{
         RowBox[{"ImportOptions", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLCopy", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"iopt", "=", 
        RowBox[{"MyFilterOptions", "[", 
         RowBox[{"Import", ",", "iopt"}], "]"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"eopt", " ", "=", 
        RowBox[{
         RowBox[{"ExportOptions", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"Options", "[", "SBMLCopy", "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"eopt", "=", 
        RowBox[{"MyFilterOptions", "[", 
         RowBox[{"Export", ",", "eopt"}], "]"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{"ExportXMLString", "[", 
         RowBox[{"Import", "[", 
          RowBox[{"in", ",", "iopt"}], "]"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLCopy", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"boldOrange", "[", "\"\<Error: \>\"", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "boldRed", "[", 
      "\"\<SBMLCopy must have two string arguments, SBMLCopy[input-file-name, \
output-file-name].\>\"", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.38826094703897*^9, 3.3882609861887703`*^9}, 
   3.388263429240808*^9, {3.389722215291348*^9, 3.389722223996174*^9}, {
   3.389722267230929*^9, 3.389722274251177*^9}}],

Cell[CellGroupData[{

Cell["sameReaction", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sameReaction", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Plus", "[", "r1__", "]"}], "\[Rule]", " ", 
      RowBox[{"Plus", "[", "p1__", "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"Plus", "[", "r2__", "]"}], "\[Rule]", " ", 
      RowBox[{"Plus", "[", "p2__", "]"}]}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "plus", ",", " ", "R1", ",", "R2", ",", " ", "P1", ",", " ", "P2", ",", 
       "z"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"plus", "[", "x__", "]"}], ":=", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "x", "}"}], "/.", 
         RowBox[{"{", 
          RowBox[{"Plus", "\[Rule]", " ", "List"}], "}"}]}], "//", 
        "Flatten"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"R1", ",", "P1", ",", "R2", ",", " ", "P2"}], "}"}], " ", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"List", "[", "#", "]"}], "]"}], "&"}], ",", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r1", ",", " ", "p1", ",", " ", "r2", ",", " ", "p2"}], 
           "}"}], "/.", 
          RowBox[{"{", 
           RowBox[{"Plus", "\[Rule]", " ", "plus"}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"z", "=", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Complement", "[", 
           RowBox[{"R1", ",", "R2"}], "]"}], ",", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{"R2", ",", "R1"}], "]"}], ",", 
          RowBox[{"Complement", "[", 
           RowBox[{"P1", ",", "P2"}], "]"}], ",", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{"P2", ",", " ", "P1"}], "]"}]}], "]"}], "//", 
        "Flatten"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"Length", "[", "z", "]"}], "==", "0"}], "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sameReaction", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MyRightArrowLeftArrow", "[", 
      RowBox[{
       RowBox[{"Plus", "[", "r1__", "]"}], ",", " ", 
       RowBox[{"Plus", "[", "p1__", "]"}]}], "]"}], ",", " ", 
     RowBox[{"MyRightArrowLeftArrow", "[", " ", 
      RowBox[{
       RowBox[{"Plus", "[", "r2__", "]"}], ",", 
       RowBox[{"Plus", "[", "p2__", "]"}]}], "]"}]}], "]"}], ":=", 
   RowBox[{"sameReaction", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Plus", "[", "r1", "]"}], "\[Rule]", " ", 
      RowBox[{"Plus", "[", "p1", "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"Plus", "[", "r2", "]"}], "\[Rule]", " ", 
      RowBox[{"Plus", "[", "p2", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388322117610013*^9, 3.388322128958118*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["compareReactions", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compareReactions", "[", 
     RowBox[{"fileList_", ",", 
      RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "getReactions", ",", " ", "countOccurances", ",", " ", "rlist", ",", 
        "rlisted", ",", " ", "allReactions", ",", "comparison", ",", 
        "getSame", ",", "simplifyReaction", ",", "sur", ",", "fCount", ",", 
        " ", "rCount", ",", "verbose", ",", "rmod", ",", "fmod", ",", "rlast",
         ",", "tstart", ",", "tlast", ",", "tmod", ",", "tc"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"tstart", " ", "=", " ", 
        RowBox[{"TimeUsed", "[", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"verbose", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`verbose", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`verbose", "\[Rule]", " ", "False"}], "}"}]}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"fmod", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`fmod", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`fmod", "\[Rule]", " ", "1"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"rmod", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`rmod", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`rmod", "\[Rule]", " ", "1"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"tmod", " ", "=", " ", 
        RowBox[{
         RowBox[{"Global`tmod", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"Global`tmod", "\[Rule]", " ", "1"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"fCount", "=", "0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"rCount", "=", "0"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"log", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"rlast", "=", "0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"tlast", "=", "tstart"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["getReactions",
          FontColor->RGBColor[0, 0, 1]], "[", "file_", "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"returnVal", ",", "r", ",", " ", "nreactions"}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"fCount", "++"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"r", "=", 
            RowBox[{"Global`SBMLReactions", "/.", 
             RowBox[{"SBMLRead", "[", 
              RowBox[{"file", ",", 
               RowBox[{"Global`context", "\[Rule]", " ", "\"\<$$$`\>\""}], 
               ",", 
               RowBox[{"Global`evaluateParameters", "\[Rule]", " ", "False"}],
                ",", " ", 
               RowBox[{"Global`return", "\[Rule]", " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"SBMLReactions", "\[Rule]", " ", "True"}], ",", " ", 
                  RowBox[{"SBMLODES", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLIC", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLConstants", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLModelVariables", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLAlgebraicRules", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLUnitDefinitions", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLUnitAssociations", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLModelName", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLFunctions", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLEvents", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLNameIDAssociations", "\[Rule]", "False"}], ",", 
                  RowBox[{"SBMLNumericalSolution", "\[Rule]", "False"}]}], 
                 "}"}]}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"nreactions", " ", "=", " ", 
            RowBox[{"Length", "[", "r", "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"rCount", "+=", "nreactions"}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"tc", " ", "=", " ", 
            RowBox[{"TimeUsed", "[", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"verbose", " ", "&&", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"fCount", ",", "fmod"}], "]"}], "\[Equal]", "0"}], 
                "   ", "\[Or]", 
                RowBox[{"tc", ">", 
                 RowBox[{"tlast", "+", "tmod"}]}]}], ")"}]}], ",", 
             RowBox[{
              RowBox[{"tlast", "=", "tc"}], ";", " ", 
              RowBox[{"Print", "[", 
               RowBox[{
               "fCount", ",", " ", "\"\< files; (at \>\"", ",", "  ", "file", 
                ",", "\"\<); \>\"", ",", " ", "rCount", ",", 
                "\"\< reactions; \>\"", ",", 
                RowBox[{"tc", "-", "tstart"}], ",", "\"\< cpu.\>\""}], 
               "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"returnVal", "=", "r"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "returnVal", "]"}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rlist", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{"getReactions", ",", "fileList"}], "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verbose", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "fCount", ",", "\"\< files; \>\"", ",", "rCount", ",", 
           "\"\< reactions \>\"", ",", " ", 
           RowBox[{
            RowBox[{"TimeUsed", "[", "]"}], "-", "tstart"}], ",", 
           "\"\< seconds CPU.\>\""}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rlisted", "=", "rlist"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"allReactions", "=", 
        RowBox[{"Apply", "[", 
         RowBox[{"Join", ",", "rlisted"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"uniqueReactions", "=", 
        RowBox[{"Union", "[", "allReactions", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "uniqueReactions", "]"}], "\[Equal]", 
          RowBox[{"Length", "[", "allReactions", "]"}]}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", "\"\<No Repeated Reactions.\>\"", "]"}], ";", 
          " ", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"verbose", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"Length", "[", "uniqueReactions", "]"}], ",", " ", 
           "\"\< unique Reactions.\>\""}], "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["getSame",
          FontColor->RGBColor[0, 0, 1]], "[", "r_", "]"}], ":=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"allReactions", ",", 
          RowBox[{
           RowBox[{"sameReaction", "[", 
            RowBox[{"r", ",", " ", "#"}], "]"}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"rCount", "=", "0"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["countOccurances",
          FontColor->RGBColor[0, 0, 1]], "[", "r_", "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "val", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"rCount", "++"}], ";", "\[IndentingNewLine]", 
           RowBox[{"val", "=", 
            RowBox[{"Length", "[", 
             RowBox[{"getSame", "[", "r", "]"}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"tc", " ", "=", " ", 
            RowBox[{"TimeUsed", "[", "]"}]}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"rCount", "\[GreaterEqual]", " ", 
               RowBox[{"rlast", "+", "rmod"}]}], " ", "\[Or]", " ", 
              RowBox[{"tc", " ", "\[GreaterEqual]", " ", 
               RowBox[{"tlast", " ", "+", " ", "tmod"}]}]}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{"verbose", ",", 
                RowBox[{
                 RowBox[{"rlast", "=", "rCount"}], ";", 
                 RowBox[{"tlast", "=", "tc"}], ";", "  ", 
                 RowBox[{"Print", "[", 
                  RowBox[{"rCount", ",", "\"\< reactions; (current=\>\"", ",", 
                   RowBox[{"decontextify", "[", 
                    RowBox[{"r", ",", "\"\<$$$`\>\""}], "]"}], ",", 
                   "\"\<); \>\"", ",", 
                   RowBox[{
                    RowBox[{"TimeUsed", "[", "]"}], "-", "tstart"}], ",", 
                   "\"\< cpu.\>\""}], "]"}]}]}], "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "val", "]"}], ";"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["simplifyReaction",
          FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
        RowBox[{"MathSBML`Private`decontextify", "[", 
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"InputForm", "[", "x", "]"}], "]"}], ",", "\"\<$$$`\>\""}],
          "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"comparison", "=", 
        RowBox[{"countOccurances", "/@", " ", "uniqueReactions"}]}], ";", " ",
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"sur", " ", "=", " ", 
          RowBox[{"simplifyReaction", "/@", "uniqueReactions"}]}], ";"}], " ",
         "*)"}], " ", "\[IndentingNewLine]", 
       RowBox[{"comparison", "=", 
        RowBox[{"{", 
         RowBox[{"comparison", ",", "uniqueReactions"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"comparison", "=", 
        RowBox[{"comparison", "//", "Transpose"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"comparison", "=", 
        RowBox[{"Select", "[", 
         RowBox[{"comparison", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"First", "[", "#", "]"}], ">", "1"}], "&"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"comparison", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "//", "First"}], ",", " ", 
             RowBox[{"simplifyReaction", "[", 
              RowBox[{"#", "//", "Last"}], "]"}]}], "}"}], "&"}], ",", 
          "comparison"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"comparison", " ", "=", " ", 
        RowBox[{
         RowBox[{"comparison", "//", "Sort"}], "//", "Reverse"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Total CPU:\>\"", ",", " ", 
         RowBox[{
          RowBox[{"TimeUsed", "[", "]"}], "-", "tstart"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "comparison", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}], 
  " "}]], "Input",
 InitializationCell->True]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["dataTable", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataTable", "[", 
   RowBox[{"var_", ",", 
    RowBox[{"{", 
     RowBox[{"t_", ",", " ", "t0_", ",", " ", "tend_", ",", " ", "tdelta_"}], 
     "}"}], ",", " ", "r_", ",", " ", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "v", ",", "vnames", ",", " ", "results", ",", " ", "is", ",", " ", 
      "getSet", ",", "ta", ",", "tb", ",", "file", ",", "vfile", ",", " ", 
      "format", ",", " ", 
      RowBox[{"vforms", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
        "\"\<CSV\>\"", ",", "\"\<HDF\>\"", ",", "\"\<LIST\>\"", ",", " ", 
         "\"\<MAT\>\"", ",", " ", "\"\<MTX\>\"", ",", "\"\<NB\>\"", ",", 
         "\"\<TSV\>\"", ",", " ", "\"\<TABLE\>\""}], "}"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"v", "=", 
      RowBox[{
       RowBox[{"{", "var", "}"}], "//", "Flatten"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vnames", " ", "=", " ", 
      RowBox[{"MathSBML`Private`stringer", "/@", "v"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"v", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"#", "[", "t", "]"}], "&"}], ")"}], "/@", "v"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"is", " ", "=", " ", 
      RowBox[{"Position", "[", 
       RowBox[{"r", ",", " ", "InterpolationSet"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      StyleBox[
       RowBox[{"Not", " ", "an", " ", "interpolation", " ", "table"}],
       FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "is", "]"}], "<", "1"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"ta", ",", " ", "tb"}], "}"}], " ", "=", " ", 
         RowBox[{"MathSBML`Private`getPlotTimes", "[", "r", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ta", " ", "=", 
         RowBox[{"Max", "[", 
          RowBox[{"t0", ",", " ", "ta"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"tb", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"tend", ",", " ", "tb"}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tb", "<", "ta"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"results", "=", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"results", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"{", 
                RowBox[{"t", ",", 
                 RowBox[{"N", "/@", 
                  RowBox[{"(", 
                   RowBox[{"v", "/.", "r"}], ")"}]}]}], "}"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"t", ",", "ta", ",", " ", "tb", ",", " ", "tdelta"}], 
               "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}],
        " ", "\[IndentingNewLine]", ",", " ", 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"handle", " ", "interpolation", " ", "sets"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"getSet", "[", 
          RowBox[{"InterpolationSet", "[", 
           RowBox[{"start_", ",", " ", "finish_", ",", " ", "data_"}], "]"}], 
          "]"}], ":=", " ", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "tbeginset", ",", " ", "tendset", ",", " ", "setresults"}], "}"}],
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"tbeginset", " ", "=", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Ceiling", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"start", "-", "t0"}], ")"}], "/", "tdelta"}], "]"}],
                "*", "tdelta"}], "+", "t0"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"tendset", " ", "=", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Floor", "[", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"finish", "-", "t0"}], ")"}], "/", "tdelta"}], 
                "]"}], "*", "tdelta"}], "+", "t0"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"t0", ">", "tendset"}], ",", " ", 
              RowBox[{
               RowBox[{"Return", "[", 
                RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", "  ", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"tend", "<", "tbeginset"}], ",", " ", 
              RowBox[{
               RowBox[{"Return", "[", 
                RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", " ", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"tbeginset", " ", "=", " ", 
             RowBox[{"Max", "[", 
              RowBox[{"t0", ",", " ", "tbeginset"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"tendset", " ", "=", " ", 
             RowBox[{"Min", "[", 
              RowBox[{"tend", ",", " ", "tendset"}], "]"}]}], ";", " ", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"setresults", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"{", 
                 RowBox[{"t", ",", 
                  RowBox[{"N", "/@", 
                   RowBox[{"(", 
                    RowBox[{"v", "/.", 
                    RowBox[{"{", "data", "}"}]}], ")"}]}]}], "}"}], "]"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{
                "t", ",", "tbeginset", ",", " ", "tendset", ",", " ", 
                 "tdelta"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "setresults", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"results", " ", "=", " ", 
         RowBox[{"Join", "@@", 
          RowBox[{"(", 
           RowBox[{"getSet", "/@", "r"}], ")"}]}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"results", " ", "=", " ", 
      RowBox[{"Prepend", "[", 
       RowBox[{"results", ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<time\>\"", ",", " ", "vnames"}], "}"}], "]"}]}], 
       "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"file", " ", "=", 
      RowBox[{
       RowBox[{"Global`file", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"{", 
        RowBox[{"Global`file", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], ";", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"file", "=", 
      RowBox[{"stringer", "[", "file", "]"}]}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringLength", "[", "file", "]"}], ">", "0"}], ",", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"vfile", "=", 
         RowBox[{"validateOutputFileName", "[", "file", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"vfile", "==", "\"\<$Failed\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"\"\<Unable to create file \>\"", ",", "file"}], "]"}], 
           ";", " ", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "results", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"format", " ", "=", " ", 
         RowBox[{
          RowBox[{"Global`format", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"{", 
           RowBox[{"Global`format", "\[Rule]", " ", "\"\<CSV\>\""}], 
           "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"format", "=", 
         RowBox[{"stringer", "[", "format", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"vforms", ",", "format"}], "]"}]}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: dataTable: \>\"", "//", "boldOrange"}], ",", 
             " ", 
             RowBox[{"\"\<invalid format\[Rule]\>\"", "//", "boldBlack"}], 
             ",", 
             RowBox[{"format", "//", "boldRed"}], ",", 
             RowBox[{"\"\< allowed values are \>\"", "//", "boldBlack"}], ",",
              " ", 
             RowBox[{
              RowBox[{
               RowBox[{"list2CommaSeparatedString", "[", "vforms", "]"}], 
               "<>", "\"\<; \>\""}], "//", "boldBlack"}], ",", 
             RowBox[{"\"\<CSV assumed.\>\"", "//", "boldBlack"}]}], "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"format", "=", "\"\<CSV\>\""}]}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"format", "==", "\"\<HDF\>\""}], " ", "\[Or]", " ", 
           RowBox[{"format", "==", "\"\<MAT\>\""}], " ", "\[Or]", " ", 
           RowBox[{"format", "\[Equal]", " ", "\"\<MTX\>\""}]}], ",", " ", 
          RowBox[{"results", "=", 
           RowBox[{"Rest", "[", "results", "]"}]}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Export", "[", " ", 
         RowBox[{"vfile", ",", "results", ",", " ", "format"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "vfile", "]"}], ";"}]}], "\[IndentingNewLine]",
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "results", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389025392723096*^9, 3.389025393431253*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["resetIC", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"resetIC", "[", 
    RowBox[{
     RowBox[{"m_", "?", "ListQ"}], ",", " ", "var_", ",", " ", "value_"}], 
    "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "name", ",", "model", ",", "pos", ",", "ic", ",", "cases", ",", "time", 
       ",", "ctxt", ",", "argument"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"argument", "[", 
        RowBox[{"x_", "[", "y_", "]"}], "]"}], ":=", " ", "y"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"SameQ", "[", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Head", "/@", "m"}], "]"}], ",", " ", 
           RowBox[{"{", "Rule", "}"}]}], "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Error: resetIC: first argument must be the output of SBMLRead.\
\>\"", "]"}], ";", "\[IndentingNewLine]", " ", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ctxt", "=", 
       RowBox[{
        RowBox[{"Global`SBMLContext", "/.", "m"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`SBMLContext", "\[Rule]", " ", "\"\<None\>\""}], 
         "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"name", " ", "=", 
       RowBox[{"contextify", "[", " ", 
        RowBox[{
         RowBox[{"decontextify", "[", "var", "]"}], ",", "ctxt"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ic", "=", 
       RowBox[{
        RowBox[{"Global`SBMLIC", "/.", "m"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`SBMLIC", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{"m", ",", 
         RowBox[{"Global`SBMLIC", "\[Rule]", " ", "ic"}]}], "]"}]}], ";", " ",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ic", "]"}], "<", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "if", " ", "there", " ", "are", " ", "no", " ", "initial", " ", 
          "conditions", " ", "assume", " ", "time", " ", "is", " ", "zero"}], 
         " ", "*)"}], "\[IndentingNewLine]", " ", 
        RowBox[{"ic", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"name", "[", "0", "]"}], "\[Equal]", "value"}], "}"}]}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "otherwise", " ", "there", " ", "are", " ", "some", " ", "ic", " ", 
          "already", " ", "present"}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"cases", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"ic", ",", 
            RowBox[{"Equal", "[", 
             RowBox[{
              RowBox[{"name", "[", "_", "]"}], ",", "_"}], "]"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "cases", "]"}], ">", "1"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<Warning:resetIC:multiple initial conditions found for \>\"",
               ",", "name", ",", "\"\<:\>\"", ",", "cases"}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "cases", "]"}], "<", "1"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "in", " ", "this", " ", "case", " ", "name", " ", "has", " ", 
             "no", " ", "previous", " ", "initial", " ", "condition"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "use", " ", "time", " ", "of", " ", "other", " ", "initial", " ", 
             "conditions"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"time", "=", 
             RowBox[{"argument", "[", 
              RowBox[{"ic", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"ic", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"ic", ",", 
               RowBox[{
                RowBox[{"name", "[", "time", "]"}], "\[Equal]", "value"}]}], 
              "]"}]}], ";"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "in", " ", "this", " ", "case", " ", "a", " ", "previous", " ", 
             "initial", " ", "condition", " ", "for", " ", "name", " ", "was",
              " ", "found"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ic", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{"ic", ",", "cases"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"cases", "=", 
             RowBox[{"cases", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"cases", "=", 
             RowBox[{"Equal", "[", 
              RowBox[{"cases", ",", "value"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"ic", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"ic", ",", "cases"}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", " ", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ListQ", "[", "pos", "]"}], " ", "\[And]", " ", 
         RowBox[{
          RowBox[{"Length", "[", "pos", "]"}], ">", "0"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pos", "=", 
          RowBox[{"First", "[", "pos", "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"AtomQ", "[", "pos", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"model", "=", 
          RowBox[{"ReplacePart", "[", 
           RowBox[{"m", ",", 
            RowBox[{"Global`SBMLIC", "\[Rule]", " ", "ic"}], ",", "pos"}], 
           "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"model", "=", 
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"m", ",", 
             RowBox[{"Global`SBMLIC", "\[Rule]", " ", "ic"}]}], "]"}], "//", 
           "Sort"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "model", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetIC", "[", 
    RowBox[{"a_", ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"b_", ",", "c_"}], "]"}]}], "]"}], ":=", " ", 
   RowBox[{"resetIC", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetIC", "[", 
    RowBox[{"a_", ",", 
     RowBox[{"r_", "?", "ListQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{"resetIC", ",", "a", ",", "r"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetIC", "[", "a___", "]"}], ":=", " ", 
   RowBox[{
   "Print", "[", "\"\<Error: resetIC: invalid argument sequence.\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.411741971363892*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["resetParameter", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"resetParameter", "[", 
    RowBox[{
     RowBox[{"m_", "?", "ListQ"}], ",", " ", "var_", ",", " ", "value_"}], 
    "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "name", ",", "model", ",", "pos", ",", "v", ",", "cases", ",", "time", 
       ",", "ctxt", ",", "argument", ",", "vars", ",", " ", "voriginal", ",", 
       " ", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"argument", "[", 
        RowBox[{"x_", "[", "y_", "]"}], "]"}], ":=", " ", "y"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"SameQ", "[", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Head", "/@", "m"}], "]"}], ",", " ", 
           RowBox[{"{", "Rule", "}"}]}], "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Error: resetParameter: first argument must be the output of \
SBMLRead.\>\"", "]"}], ";", "\[IndentingNewLine]", " ", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ctxt", "=", 
       RowBox[{
        RowBox[{"Global`SBMLContext", "/.", "m"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`SBMLContext", "\[Rule]", " ", "\"\<None\>\""}], 
         "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<resetParameter: ctxt\>\"", ",", " ", "ctxt"}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"name", " ", "=", 
       RowBox[{"contextify", "[", " ", 
        RowBox[{"var", ",", "ctxt"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<resetParameter: name\>\"", ",", " ", "name"}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "there", " ", "was", " ", "an", " ", "extra", " ", "semicolon", " ", 
         "after", " ", "this", " ", "statement", " ", "that", " ", "caused", 
         " ", "a", " ", "break"}], "-", 
        RowBox[{"down", " ", "in", " ", "version"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"voriginal", "=", 
       RowBox[{
        RowBox[{"Global`SBMLConstants", "/.", "m"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`SBMLConstants", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"vars", "=", 
       RowBox[{"First", "/@", "voriginal"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<resetParameter: voriginal\>\"", ",", " ", 
        "voriginal"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<resetParameter: vars(1)\>\"", ",", " ", "vars"}],
        "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"vars", "=", 
       RowBox[{"Union", "[", 
        RowBox[{"Append", "[", 
         RowBox[{"vars", ",", "name"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<resetParameter: vars(2)\>\"", ",", " ", "vars"}],
        "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"v", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"{", 
          RowBox[{"vars", ",", " ", 
           RowBox[{
            RowBox[{"vars", "/.", 
             RowBox[{"{", 
              RowBox[{"name", "\[Rule]", " ", "value"}], "}"}]}], "/.", 
            "voriginal"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", " ", "\"\<resetParameter: v\>\"", ",", " ", "v"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{
         RowBox[{"First", "/@", "m"}], ",", "Global`SBMLConstants"}], "]"}]}],
       ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<resetParameter: pos\>\"", ",", " ", "pos"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ListQ", "[", "pos", "]"}], " ", "\[And]", " ", 
         RowBox[{
          RowBox[{"Length", "[", "pos", "]"}], ">", "0"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pos", "=", 
          RowBox[{"First", "[", "pos", "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"AtomQ", "[", "pos", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"model", "=", 
          RowBox[{"ReplacePart", "[", 
           RowBox[{"m", ",", 
            RowBox[{"Global`SBMLConstants", "\[Rule]", " ", "v"}], ",", 
            "pos"}], "]"}]}], ";"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"model", "=", 
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"m", ",", 
             RowBox[{"Global`SBMLConstants", "\[Rule]", " ", "v"}]}], "]"}], "//",
            "Sort"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "model", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetParameter", "[", 
    RowBox[{"a_", ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"b_", ",", "c_"}], "]"}]}], "]"}], ":=", " ", 
   RowBox[{"resetParameter", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetParameter", "[", 
    RowBox[{"a_", ",", 
     RowBox[{"r_", "?", "ListQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Fold", "[", 
    RowBox[{"resetParameter", ",", "a", ",", "r"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetParameter", "[", "a___", "]"}], ":=", " ", 
   RowBox[{
   "Print", "[", "\"\<Error: resetParameter: invalid argument sequence.\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.396710828891737*^9, 3.39671095250313*^9}, 
   3.396711083317284*^9, {3.3967111332083807`*^9, 3.396711139424551*^9}, {
   3.3967111704684563`*^9, 3.396711187613675*^9}, {3.39671122010741*^9, 
   3.396711340483611*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["End Package", "Section",
 CellChangeTimes->{{3.5049732696672983`*^9, 3.5049732726834707`*^9}}],

Cell[BoxData[
 RowBox[{"LTPrint", "[", "\"\<Public Functions Leaded.\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.504973261079807*^9, 3.5049732921445837`*^9}, {
  3.504973432208595*^9, 3.50497343335466*^9}, {3.50645222780968*^9, 
  3.506452227983473*^9}}]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{701, 858},
WindowMargins->{{Automatic, 541}, {-5, Automatic}},
FrontEndVersion->"8.0 for Linux x86 (64-bit) (February 23, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "PastelColor.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 112, 4, 121, "Title"],
Cell[694, 28, 253, 6, 50, "Text"],
Cell[CellGroupData[{
Cell[972, 38, 154, 2, 78, "Section"],
Cell[1129, 42, 2128, 39, 374, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3294, 86, 46, 0, 78, "Section"],
Cell[3343, 88, 198, 6, 40, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[3566, 98, 26, 0, 39, "Subsection"],
Cell[3595, 100, 620, 16, 136, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[4252, 121, 30, 0, 39, "Subsection"],
Cell[4285, 123, 6815, 133, 70, "Input",
 InitializationCell->True],
Cell[11103, 258, 522, 14, 70, "Input",
 InitializationCell->True],
Cell[11628, 274, 35251, 762, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[46916, 1041, 98, 1, 31, "Subsection"],
Cell[47017, 1044, 2032, 50, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[49086, 1099, 33, 0, 31, "Subsection"],
Cell[49122, 1101, 52, 0, 70, "Text"],
Cell[49177, 1103, 4884, 118, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[54098, 1226, 34, 0, 31, "Subsection"],
Cell[54135, 1228, 13273, 336, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[67445, 1569, 43, 0, 31, "Subsection"],
Cell[67491, 1571, 24, 0, 70, "Text"],
Cell[67518, 1573, 784, 22, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[68339, 1600, 39, 0, 31, "Subsection"],
Cell[68381, 1602, 24, 0, 70, "Text"],
Cell[68408, 1604, 2226, 59, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[70671, 1668, 30, 0, 31, "Subsection"],
Cell[70704, 1670, 520, 9, 40, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[71249, 1683, 55, 0, 30, "Subsubsection"],
Cell[71307, 1685, 269, 6, 70, "Text"],
Cell[71579, 1693, 39071, 940, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[110687, 2638, 59, 0, 24, "Subsubsection"],
Cell[110749, 2640, 640, 11, 70, "Text"],
Cell[111392, 2653, 54951, 1195, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[166392, 3854, 34, 0, 39, "Subsection"],
Cell[166429, 3856, 3534, 87, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[170000, 3948, 31, 0, 31, "Subsection"],
Cell[170034, 3950, 475, 12, 70, "Input",
 InitializationCell->True],
Cell[170512, 3964, 10775, 232, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[181324, 4201, 35, 0, 31, "Subsection"],
Cell[181362, 4203, 213, 6, 40, "Input",
 InitializationCell->True],
Cell[181578, 4211, 311, 9, 60, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[181914, 4224, 42, 0, 30, "Subsubsection"],
Cell[181959, 4226, 10687, 226, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[192683, 4457, 98, 2, 24, "Subsubsection"],
Cell[192784, 4461, 197, 6, 40, "Input",
 InitializationCell->True],
Cell[192984, 4469, 1974, 59, 383, "Input",
 InitializationCell->True],
Cell[194961, 4530, 103, 3, 49, "Text"],
Cell[195067, 4535, 5678, 141, 858, "Input",
 InitializationCell->True],
Cell[200748, 4678, 33344, 746, 5382, "Input",
 InitializationCell->True],
Cell[234095, 5426, 61, 0, 29, "Text"],
Cell[234159, 5428, 1378, 34, 262, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[235574, 5467, 34, 0, 24, "Subsubsection"],
Cell[235611, 5469, 198, 6, 70, "Input",
 InitializationCell->True],
Cell[235812, 5477, 6667, 151, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[242516, 5633, 57, 0, 24, "Subsubsection"],
Cell[242576, 5635, 115, 3, 70, "Text"],
Cell[242694, 5640, 1831, 44, 70, "Input",
 InitializationCell->True],
Cell[244528, 5686, 19513, 442, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[264078, 6133, 43, 0, 24, "Subsubsection"],
Cell[264124, 6135, 3303, 70, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[267464, 6210, 34, 0, 24, "Subsubsection"],
Cell[267501, 6212, 803, 25, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[268341, 6242, 51, 0, 24, "Subsubsection"],
Cell[268395, 6244, 223, 4, 70, "Text"],
Cell[268621, 6250, 961, 26, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[269597, 6279, 66, 0, 24, "Subsubsection"],
Cell[CellGroupData[{
Cell[269688, 6283, 98, 1, 24, "Subsubsection"],
Cell[269789, 6286, 5789, 149, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[275615, 6440, 102, 1, 24, "Subsubsection"],
Cell[275720, 6443, 4868, 116, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[280625, 6564, 99, 1, 24, "Subsubsection"],
Cell[280727, 6567, 3110, 76, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[283874, 6648, 115, 1, 24, "Subsubsection"],
Cell[283992, 6651, 3855, 95, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[287884, 6751, 100, 1, 24, "Subsubsection"],
Cell[287987, 6754, 34206, 769, 5171, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[322230, 7528, 96, 1, 30, "Subsubsection"],
Cell[322329, 7531, 26865, 625, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[349231, 8161, 99, 1, 24, "Subsubsection"],
Cell[349333, 8164, 24456, 568, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[373804, 8735, 103, 2, 24, "Subsubsection"],
Cell[CellGroupData[{
Cell[373932, 8741, 97, 1, 24, "Subsubsection"],
Cell[374032, 8744, 5743, 147, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[379812, 8896, 101, 1, 24, "Subsubsection"],
Cell[379916, 8899, 4643, 111, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[384596, 9015, 98, 1, 24, "Subsubsection"],
Cell[384697, 9018, 2980, 76, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[387714, 9099, 113, 1, 24, "Subsubsection"],
Cell[387830, 9102, 3836, 93, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[391703, 9200, 95, 1, 24, "Subsubsection"],
Cell[391801, 9203, 29877, 669, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[421715, 9877, 98, 1, 24, "Subsubsection"],
Cell[421816, 9880, 3484, 81, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[425349, 9967, 168, 3, 53, "Subsection"],
Cell[CellGroupData[{
Cell[425542, 9974, 101, 1, 27, "Subsubsection"],
Cell[425646, 9977, 6888, 176, 872, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[432571, 10158, 102, 1, 21, "Subsubsection"],
Cell[432676, 10161, 3017, 76, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[435730, 10242, 121, 1, 21, "Subsubsection"],
Cell[435854, 10245, 3734, 91, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[439625, 10341, 99, 1, 21, "Subsubsection"],
Cell[439727, 10344, 6067, 151, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[445831, 10500, 102, 1, 21, "Subsubsection"],
Cell[445936, 10503, 3450, 80, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[449401, 10586, 108, 2, 21, "Subsubsection"],
Cell[CellGroupData[{
Cell[449534, 10592, 98, 1, 21, "Subsubsection"],
Cell[449635, 10595, 5702, 147, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[455374, 10747, 102, 1, 21, "Subsubsection"],
Cell[455479, 10750, 4802, 117, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[460318, 10872, 96, 1, 21, "Subsubsection"],
Cell[460417, 10875, 2999, 74, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[463453, 10954, 112, 1, 21, "Subsubsection"],
Cell[463568, 10957, 3777, 92, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[467382, 11054, 93, 1, 21, "Subsubsection"],
Cell[467478, 11057, 15248, 349, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[482763, 11411, 96, 1, 21, "Subsubsection"],
Cell[482862, 11414, 5351, 126, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[488228, 11543, 68, 0, 21, "Subsubsection"],
Cell[CellGroupData[{
Cell[488321, 11547, 94, 1, 21, "Subsubsection"],
Cell[488418, 11550, 5555, 145, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[494010, 11700, 98, 1, 21, "Subsubsection"],
Cell[494111, 11703, 4754, 117, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[498902, 11825, 92, 1, 21, "Subsubsection"],
Cell[498997, 11828, 2314, 58, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[501348, 11891, 104, 1, 21, "Subsubsection"],
Cell[501455, 11894, 7852, 180, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[509344, 12079, 89, 1, 21, "Subsubsection"],
Cell[509436, 12082, 6689, 157, 853, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[516162, 12244, 95, 1, 21, "Subsubsection"],
Cell[516260, 12247, 8884, 198, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[525193, 12451, 188, 3, 45, "Subsection"],
Cell[CellGroupData[{
Cell[525406, 12458, 105, 1, 30, "Subsubsection"],
Cell[525514, 12461, 7328, 186, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[532879, 12652, 106, 1, 24, "Subsubsection"],
Cell[532988, 12655, 2993, 74, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[536018, 12734, 129, 1, 24, "Subsubsection"],
Cell[536150, 12737, 3912, 95, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[540099, 12837, 103, 1, 24, "Subsubsection"],
Cell[540205, 12840, 6983, 170, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[547225, 13015, 106, 1, 24, "Subsubsection"],
Cell[547334, 13018, 3474, 80, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[550823, 13101, 141, 3, 43, "Subsubsection"],
Cell[550967, 13106, 126, 1, 24, "Subsubsection"],
Cell[CellGroupData[{
Cell[551118, 13111, 101, 1, 24, "Subsubsection"],
Cell[551222, 13114, 5784, 151, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[557043, 13270, 105, 1, 24, "Subsubsection"],
Cell[557151, 13273, 4879, 117, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[562067, 13395, 99, 1, 24, "Subsubsection"],
Cell[562169, 13398, 314, 9, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[562520, 13412, 99, 1, 24, "Subsubsection"],
Cell[562622, 13415, 2404, 59, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[565063, 13479, 118, 1, 24, "Subsubsection"],
Cell[565184, 13482, 8855, 199, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[574076, 13686, 96, 1, 24, "Subsubsection"],
Cell[574175, 13689, 6522, 148, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[580734, 13842, 102, 1, 24, "Subsubsection"],
Cell[580839, 13845, 3550, 82, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[584404, 13930, 96, 2, 24, "Subsubsection"],
Cell[CellGroupData[{
Cell[584525, 13936, 99, 1, 24, "Subsubsection"],
Cell[584627, 13939, 6001, 155, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[590665, 14099, 103, 1, 24, "Subsubsection"],
Cell[590771, 14102, 4790, 114, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[595598, 14221, 97, 1, 24, "Subsubsection"],
Cell[595698, 14224, 2367, 58, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[598102, 14287, 114, 1, 24, "Subsubsection"],
Cell[598219, 14290, 3768, 92, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[602024, 14387, 94, 1, 24, "Subsubsection"],
Cell[602121, 14390, 6531, 158, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[608689, 14553, 100, 1, 24, "Subsubsection"],
Cell[608792, 14556, 4939, 112, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[613746, 14671, 121, 3, 39, "Subsubsection"],
Cell[CellGroupData[{
Cell[613892, 14678, 107, 1, 22, "Subsubsection"],
Cell[614002, 14681, 6321, 160, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[620360, 14846, 105, 1, 22, "Subsubsection"],
Cell[620468, 14849, 2431, 58, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[622936, 14912, 115, 1, 22, "Subsubsection"],
Cell[623054, 14915, 5123, 120, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[628214, 15040, 102, 1, 22, "Subsubsection"],
Cell[628319, 15043, 4725, 110, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[633081, 15158, 111, 1, 22, "Subsubsection"],
Cell[633195, 15161, 5079, 122, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[638311, 15288, 108, 1, 22, "Subsubsection"],
Cell[638422, 15291, 8262, 181, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[646721, 15477, 108, 1, 22, "Subsubsection"],
Cell[646832, 15480, 14916, 335, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[661763, 15818, 103, 2, 22, "Subsubsection"],
Cell[CellGroupData[{
Cell[661891, 15824, 98, 1, 22, "Subsubsection"],
Cell[661992, 15827, 2000, 49, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[664029, 15881, 100, 1, 22, "Subsubsection"],
Cell[664132, 15884, 3128, 79, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[667297, 15968, 108, 1, 22, "Subsubsection"],
Cell[667408, 15971, 3985, 95, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[671430, 16071, 95, 1, 22, "Subsubsection"],
Cell[671528, 16074, 5080, 118, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[676645, 16197, 104, 1, 22, "Subsubsection"],
Cell[676752, 16200, 2888, 67, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[679677, 16272, 101, 1, 22, "Subsubsection"],
Cell[679781, 16275, 7295, 160, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[687113, 16440, 111, 1, 22, "Subsubsection"],
Cell[687227, 16443, 7961, 185, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[695203, 16631, 120, 3, 39, "Subsubsection"],
Cell[CellGroupData[{
Cell[695348, 16638, 94, 1, 22, "Subsubsection"],
Cell[695445, 16641, 4835, 130, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[700317, 16776, 98, 1, 22, "Subsubsection"],
Cell[700418, 16779, 5718, 143, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[706173, 16927, 97, 1, 22, "Subsubsection"],
Cell[706273, 16930, 2010, 49, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[708320, 16984, 109, 1, 22, "Subsubsection"],
Cell[708432, 16987, 7458, 172, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[715927, 17164, 94, 1, 22, "Subsubsection"],
Cell[716024, 17167, 49310, 1101, 6995, "Input",
 InitializationCell->True],
Cell[765337, 18270, 3622, 87, 459, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[768996, 18362, 95, 1, 22, "Subsubsection"],
Cell[769094, 18365, 9262, 218, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[778393, 18588, 105, 1, 22, "Subsubsection"],
Cell[778501, 18591, 9139, 211, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[787677, 18807, 42, 0, 22, "Subsubsection"],
Cell[787722, 18809, 21001, 491, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[808738, 19303, 72, 0, 22, "Subsubsection"],
Cell[CellGroupData[{
Cell[808835, 19307, 95, 1, 22, "Subsubsection"],
Cell[808933, 19310, 5728, 148, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[814698, 19463, 99, 1, 22, "Subsubsection"],
Cell[814800, 19466, 4682, 112, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[819519, 19583, 97, 1, 22, "Subsubsection"],
Cell[819619, 19586, 2345, 58, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[822001, 19649, 110, 1, 22, "Subsubsection"],
Cell[822114, 19652, 3738, 91, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[825889, 19748, 94, 1, 22, "Subsubsection"],
Cell[825986, 19751, 23682, 547, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[849705, 20303, 97, 1, 22, "Subsubsection"],
Cell[CellGroupData[{
Cell[849827, 20308, 10492, 236, 70, "Input",
 InitializationCell->True],
Cell[860322, 20546, 54, 1, 70, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[860425, 20553, 38, 0, 22, "Subsubsection"],
Cell[860466, 20555, 2640, 70, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[863143, 20630, 34, 0, 22, "Subsubsection"],
Cell[863180, 20632, 4895, 128, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[868112, 20765, 109, 1, 22, "Subsubsection"],
Cell[868224, 20768, 3691, 100, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[871952, 20873, 109, 1, 22, "Subsubsection"],
Cell[872064, 20876, 3116, 74, 70, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[875217, 20955, 275, 5, 39, "Subsubsection"],
Cell[875495, 20962, 17480, 482, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[893012, 21449, 40, 0, 22, "Subsubsection"],
Cell[893055, 21451, 3324, 89, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[896416, 21545, 35, 0, 22, "Subsubsection"],
Cell[896454, 21547, 4854, 123, 70, "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[901357, 21676, 30, 0, 37, "Subsection"],
Cell[901390, 21678, 5171, 130, 822, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[906586, 21812, 37, 0, 27, "Subsubsection"],
Cell[906626, 21814, 3041, 80, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[909704, 21899, 41, 0, 21, "Subsubsection"],
Cell[909748, 21901, 12261, 270, 1702, "Input",
 InitializationCell->True]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[922058, 22177, 31, 0, 29, "Subsection"],
Cell[922092, 22179, 10612, 253, 1422, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[932741, 22437, 29, 0, 29, "Subsection"],
Cell[932773, 22439, 8135, 202, 70, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[940945, 22646, 36, 0, 29, "Subsection"],
Cell[940984, 22648, 6799, 165, 932, "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[947832, 22819, 100, 1, 76, "Section"],
Cell[947935, 22822, 282, 5, 40, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
