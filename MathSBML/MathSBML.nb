(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[   1002140,      23429]
NotebookOptionsPosition[    970392,      22410]
NotebookOutlinePosition[    973381,      22494]
CellTagsIndexPosition[    972677,      22475]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "MathSBML for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " version 8"
}], "Title",
 CellChangeTimes->{{3.395408067048665*^9, 3.395408068170067*^9}, {
  3.504973075539194*^9, 3.504973083254636*^9}}],

Cell[CellGroupData[{

Cell["MathSBML Description", "Section",
 CellChangeTimes->{{3.395408039119268*^9, 3.395408049088715*^9}}],

Cell[TextData[{
 StyleBox["Copyright 2004-2012 California Institute of Technology and Japan \
Science and Technology Corporation.\n \n",
  FontSize->12],
 "    This file is part of MathSBML.\n \n    MathSBML is free software: you \
can redistribute it and/or modify\n    it under the terms of the GNU Lesser \
General Public License as published by\n    the Free Software Foundation, \
either version 3 of the License, or\n    (at your option) any later version.\n\
\n    This program is distributed in the hope that it will be useful,\n    \
but WITHOUT ANY WARRANTY; without even the implied warranty of\n    \
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU \
General Public License for more details.\n\n    You should have received a \
copy of the GNU Lesser General Public License\n    along with this program.  \
If not, see <http://www.gnu.org/licenses/>.",
 "\n    ",
 StyleBox["\n The original code contained here was initially developed by:\n\n\
 \tBruce E. Shapiro\n \tBiological Network Modeling Center\n \tThe Beckman \
Institute at Caltech\n \tMail Code 139-74\n \tCalifornia Institute of \
Technology\n \tPasadena, CA, 91125-7400, USA\n \t\nThe conservation matrix \
code was developed Joanna Murakami.\n\nThe SBML Validator was developed by \
Ben Bornstein.\n\nThe inverse eigenvalue plug-in was developed by James Lu.\n\
\nSupport was provided by the Japan Science and Technology Corporation,  the \
US National Science Foundation, the US National Institutes of Health, DARPA, \
and the Beckman Institute at Caltech..",
  FontSize->12],
 StyleBox["\n \n",
  FontFamily->"Helvetica",
  FontSize->12],
 StyleBox[ButtonBox["http://www.sbml.org",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://www.cds.caltech.edu/erato"], None}],
  FontSize->12],
 StyleBox["     ",
  FontFamily->"Helvetica",
  FontSize->12]
}], "Text",
 CellChangeTimes->{{3.388248302205469*^9, 3.388248304035112*^9}, 
   3.388264681197356*^9, {3.3882668683761797`*^9, 3.388266875242931*^9}, 
   3.388353386077384*^9, {3.388363325911048*^9, 3.3883633263870773`*^9}, 
   3.3883996477410192`*^9, {3.388761163736053*^9, 3.38876116441009*^9}, {
   3.389125922604425*^9, 3.389125923136166*^9}, {3.390045172241888*^9, 
   3.39004517571679*^9}, {3.39019850450497*^9, 3.3901985115655603`*^9}, {
   3.392748682342765*^9, 3.392748683344193*^9}, {3.3954080212118177`*^9, 
   3.395408027048024*^9}, {3.395690507776781*^9, 3.3956905087487507`*^9}, {
   3.3973955266739798`*^9, 3.397395527497595*^9}, {3.401465824219963*^9, 
   3.401465836954739*^9}, 3.506217737019514*^9, {3.5062177764407835`*^9, 
   3.506217778375187*^9}, 3.506217826938072*^9, {3.537136743343328*^9, 
   3.537136789754133*^9}, {3.5371370651615067`*^9, 3.5371370706334133`*^9}},
 FontSize->10,
 Background->None]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialize package, Needs, Versions", "Section",
 CellChangeTimes->{{3.4254108831925707`*^9, 3.425410885688064*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BeginPackage", "[", "\"\<MathSBML`\>\"", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"$VersionNumer", "<", "6"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Off", "[", "DiscreteMath`Combinatorica`Star", "]"}], ";"}]}], 
    " ", "\[IndentingNewLine]", "]"}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"$VersionNumber", "<", "6"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Needs", "[", "\"\<Graphics`\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Needs", "[", "\"\<Graphics`Legend`\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
      "Needs", "[", "\"\<LinearAlgebra`MatrixManipulation`\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Needs", "[", "\"\<Utilities`\>\"", "]"}], ";"}], 
     "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<JLink`\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"$VersionNumber", "\[GreaterEqual]", " ", "6"}], ",", " ", 
     RowBox[{"Needs", "[", "\"\<XML`\>\"", "]"}]}], "]"}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "XML`", " ", "is", " ", "loaded", " ", "automatically", " ", "in", " ", 
      "versions", " ", "4"}], " ", "&"}], " ", "5"}], " ", "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"$VersionNumber", ">", "5"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "Needs", "[", "\"\<DifferentialEquations`NDSolveProblems`\>\"", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
     "Needs", "[", "\"\<DifferentialEquations`NDSolveUtilities`\>\"", "]"}], 
     ";", " ", "\[IndentingNewLine]", 
     RowBox[{
     "Needs", "[", 
      "\"\<DifferentialEquations`InterpolatingFunctionAnatomy`\>\"", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"$VersionNumber", "<", "6"}], ",", " ", 
       RowBox[{"Needs", "[", "\"\<DiscreteMath`GraphPlot`\>\"", "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"$VersionNumber", ">", "5.3"}], ",", " ", 
     RowBox[{"Needs", "[", "\"\<GraphUtilities`\>\"", "]"}]}], "]"}], ";"}], 
  " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"$VersionNumber", "<", "6"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"On", "[", "DiscreteMath`Combinatorica`Star", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"versions", "=", 
   RowBox[{"Names", "[", "\"\<$MathSBML$Version\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "versions", "]"}], ">", "0"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"TEMP$OLDVERSION", "=", "$MathSBML$Version"}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"TEMP$FIRST", "=", "False"}], ";"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"TEMP$FIRST", "=", "True"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "versions", "]"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$MathSBML$Version", " ", "=", " ", "\"\<2.12\>\""}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388248548576055*^9, 3.388248569492051*^9}, {
   3.388248707326572*^9, 3.3882487628029327`*^9}, 3.388248865085994*^9, {
   3.388248977027114*^9, 3.388248993879266*^9}, {3.388249098507065*^9, 
   3.3882491220602207`*^9}, {3.388250101489167*^9, 3.3882501474392548`*^9}, {
   3.388258979097616*^9, 3.388258985394498*^9}, {3.3882590853853903`*^9, 
   3.3882591013521967`*^9}, {3.388263277082396*^9, 3.388263294597416*^9}, {
   3.3882635568835793`*^9, 3.3882635691074877`*^9}, 3.388264664168457*^9, {
   3.388317780726945*^9, 3.38831787538726*^9}, {3.388341060682313*^9, 
   3.388341069813336*^9}, {3.38834114727112*^9, 3.388341183642233*^9}, {
   3.388761171894932*^9, 3.388761172031823*^9}, 3.388849824550602*^9, {
   3.389448908648963*^9, 3.3894489091904373`*^9}, {3.3896481502383747`*^9, 
   3.389648151034506*^9}, {3.389720811204567*^9, 3.389720815684699*^9}, {
   3.389720854006125*^9, 3.3897208831318197`*^9}, {3.389971204073234*^9, 
   3.389971204406377*^9}, {3.390045181449581*^9, 3.390045181762401*^9}, {
   3.3901985181249228`*^9, 3.390198530236154*^9}, {3.391978189863998*^9, 
   3.391978190637377*^9}, {3.39274040955623*^9, 3.392740412140213*^9}, {
   3.395406281912328*^9, 3.395406290771956*^9}, {3.39559973620365*^9, 
   3.395599778799263*^9}, {3.395682807991674*^9, 3.395682811586755*^9}, {
   3.395688161600572*^9, 3.3956884308695087`*^9}, {3.3956884790120068`*^9, 
   3.395688542938944*^9}, {3.3956885822888308`*^9, 3.395688596782929*^9}, {
   3.395688636923279*^9, 3.3956887297122393`*^9}, {3.395688779766666*^9, 
   3.395688815880417*^9}, {3.395688902463764*^9, 3.395688945860214*^9}, {
   3.395689408638329*^9, 3.395689425831634*^9}, {3.395689469079154*^9, 
   3.3956894726710176`*^9}, {3.39568950814224*^9, 3.3956895168979073`*^9}, {
   3.395690034264151*^9, 3.3956901381219187`*^9}, {3.395690185939787*^9, 
   3.395690198112216*^9}, {3.395759194695792*^9, 3.395759270625581*^9}, {
   3.395759346213975*^9, 3.395759405123802*^9}, {3.3960247597264442`*^9, 
   3.3960247598285923`*^9}, {3.396710996742703*^9, 3.396710997309052*^9}, {
   3.3970542180868483`*^9, 3.397054218178204*^9}, 3.397157838958803*^9, {
   3.397395190384419*^9, 3.39739521114931*^9}, {3.3973952473034983`*^9, 
   3.39739525142546*^9}, {3.397849430072652*^9, 3.3978494359933987`*^9}, {
   3.401465214949129*^9, 3.401465221873023*^9}, {3.402664398222392*^9, 
   3.4026644005608263`*^9}, {3.4027741771105824`*^9, 
   3.4027741776798964`*^9}, {3.40404976065163*^9, 3.4040497659419737`*^9}, {
   3.405356635594486*^9, 3.405356652551941*^9}, {3.4053594068339367`*^9, 
   3.405359407021535*^9}, {3.406036418616741*^9, 3.406036424043865*^9}, {
   3.411742053557279*^9, 3.411742056604155*^9}, 3.411743615917605*^9, {
   3.411757328743842*^9, 3.411757330982657*^9}, {3.411758688514841*^9, 
   3.4117586899128113`*^9}, {3.4159901463400583`*^9, 3.415990146627426*^9}, {
   3.416066293982541*^9, 3.4160662940968227`*^9}, {3.418732332940359*^9, 
   3.418732333458404*^9}, {3.418732689683013*^9, 3.418732693418069*^9}, {
   3.424633696224984*^9, 3.424633703593542*^9}, {3.424644268123768*^9, 
   3.424644276074462*^9}, {3.425407337047584*^9, 3.425407345685905*^9}, {
   3.425408294370283*^9, 3.425408313331703*^9}, {3.425409216303158*^9, 
   3.425409233976719*^9}, 3.4254092961337147`*^9, {3.425411750974175*^9, 
   3.425411785775255*^9}, {3.425424974018103*^9, 3.425424976461056*^9}, {
   3.432490647498948*^9, 3.432490656590308*^9}, {3.5061896948890996`*^9, 
   3.5061897075875216`*^9}, 3.506212189773366*^9, {3.50645247826178*^9, 
   3.506452478597303*^9}, {3.537126714711898*^9, 3.537126737738482*^9}, {
   3.5404911851342497`*^9, 3.540491187242916*^9}, 3.5404949883491592`*^9, {
   3.55857285755581*^9, 3.558572861045154*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Revision Log", "Section"],

Cell[TextData[{
 StyleBox["6 Oct 2012 - Fork copy to LaunchPad for Cellerator Compatibility. \
Resume old versioning. Call this one 2.12\n2 Feb 2012 - 12-02-01 (ubuntu-like \
versioning) - fix conservation matrix in MathSBML-Computation;\nadd ",
  FontSize->12],
 "\[Cent]Header$",
 StyleBox["... default values (they were lost in the 2.9 --> 2.10 revision\n\
11 Feb 2011 - 2.10.1 - Set default values for debug colors in debugPrint.\n\
Revised def. of ",
  FontSize->12],
 "Xpression2SymbolicMathML ",
 StyleBox["in MathSBML-Utilities.nb for M8 compatibility. \nallow L2V4 models \
to be read. Do not error check them.\n\n25 Jan 2011 - 2.10.0 - Split for ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" 8\nOct 8 08 - 2.9.0: (a) Use Correct Format of \
ExpressionToSymbolicMathML for version 7. The version identification code in \
MathSBML had a bug for $Version>6 which would identify higher versions as \
Version 6.01. (b) remove some error messages that print inappropriately \
regarding L2V3. \nJuly 18 08 - Correcut use of FLAGS`ECHOLOAD for xlr8r \
compatibility. \nInclude help[context], Help[], AddHelp[] that checks for \
help files for the specified context.When help[\"foo\"] is called,  If the \
context \"foo`\" is listed in the list ",
  FontSize->12],
 "$HelpContexts",
 StyleBox[", then foo`Private`foohelp[] is executed. If not, a list of the \
available files is printed. The file MathSBMLhelp[] is always available \
through help[\"MathSBML\"]. This supercedes the earlier \
mathSBMLhelpreference. \nJuly 9 08 - 2.8 - fix use of difrent calling \
sequence in version 6.0.2/6.0.3 compared to 6.0.1 for \
ExpressionToSymbolicMathML. Version 6.0.1 used a different syntax; 6.02 \
appears to revert to the version 5 syntax, An increase in major version \
number was needed for automated version number checking by other programs (if \
6.02 or 6.03 must have version 2.8 or higher)\nMay 2 08 - 2.7.5 - allow \
rational numbers and mathematica scientific notation in value fields, such as \
value->1/400000, value-> \"3/270000\", 3*10^-23, 3.5*10^-23, 3.5*^-14 re bug ",
  FontSize->12],
 "1956215",
 StyleBox["\n\nApril 1 08 - 2.7.4 - fixed bug 1887544 - Initial assignments \
were not applied to constant compartments. Required change to \
SBMLNDSolveModel and neededCompartmentSizeDefined.\n\nMar 31 08 - 2.7.3 - \
fixed bug 1982076: SBMLPlot[s, variables->list] plots all variables rather \
than just selected variables if the model has an event in it. \nFeb 11 08 - \
2.7.2b - disallow \"timeUnits\" or \"substanceUnits\" in L2V3 kinetic law\n\
Reb 11 08 - 2.7.2a fixed applicaiton of stoichiometryMath in getReaction - \
include parenthesis around\nmath expression to force correct evaluation \
priorities. \nFeb 11 08 - 2.7.2a fixed conversion of stoichiometry to \
reaction format in the case of stoichiometry math (result was a combination \
of strings and expressions)\nFeb 11 08 - 2.7.2. fixed duplicated semicolon in \
resetIC\nDec 7 07 - renumber 2.7.0.5 --> 2.7.1 to bundle as file release\nNov \
29 07 - 2.7.0.5 - keep SBMLNDSolve from crashing noisily with undefined \
compartments in L1. Default to a size of 1 but print error message. \nNov 14 \
07 - 2.7.0.4 - print name as well as id for indeterminate ICS; remove debug \
message that is printed when some variables are constant (i.e, they are \
missing their ODES); remove duplicate messages when a compartment is \
undefined in SBMLNDSolve (just print it the first time). Correct spelling and \
clarify wording in several other error/warning messages.\nNew function \
getBiomodel[integer, options] (like SBMLRead but directly for BMDB)\nOct 29 \
07 - 2.7.0.3 - revised ",
  FontSize->12],
 "eMailAddressQ",
 StyleBox[" to more closely match RFC 2822 in repsonse to error report ",
  FontSize->12],
 "1822176",
 StyleBox[".\nIn Level 1 SBMLRead Assign ",
  FontSize->12],
 "$SBML$Species$IDs",
 StyleBox[" = SpeciesNames so that species are returned in Level 1 to fix bug \
report ",
  FontSize->12],
 "1822178",
 StyleBox["\nIn Level 1 return compartments as list of identifiers rather \
than list of strings (same as in L2, so that they can be plotted) as part of \
fix for bug report ",
  FontSize->12],
 "1822178",
 StyleBox[".\nIn Level 1, fix conversion of parameters in e-format: add \
conversion to InputForm before conversion to string (in response to bug \
report ",
  FontSize->12],
 "1822207",
 StyleBox[")\n\nOct 15 07 - 2.7.0. 2 - fix minor bug in contextify - when the \
global $SBML$Context is a non-string could cause error message (only occured \
if an external program such as cellerator sets the variable to a non-string). \
Minor fix in functionate to allow SBMLPlot to be \nused by external programs \
such as cellerator that have array variables (allow functionate[x[1,2,3] to \
work, e.g.). Fix bug in SBMLPlot that sometimes caused clipping of variables' \
plots when multiple variables are plotted together. Fix bug that did not pass \
correct options through SBMLPlot to Graphics. \n\nSept 3 07 - 2.7.0.1 - fix \
SBMLWrite: was replacing \\[ CenterEllipsis ] (\[CenterEllipsis]) with \
untranslatable html character. Fix error in SBMLGridPlot that caused failue \
to plot any local variables that were duplicated by system variables. Fix \
error in SBMLPlot/SBMLGridPlot that failed when the plto variable was \
specified as a string adn not a symbol. Fix error message in processing \
SBMLWrite that occurs with names that have embedded commas.  Modify \
definition of numerizedList to reduce number of global entry points (n, zz). \
\n\nAug 29 o7 - reversion to 2.7.0 for release with updated version 6 \
compatible layout.m\n\nAug 26 07 - fix problem in which items were not \
recognized as a unit of substance. Fix occasional bug where plot variables \
which are found and plotted were still flagged as not found and generate \
incorrect error messages.\nAug 24/25 - 07 - fix problems in conversion of \
expressions from MathML to algebraic expressions that convert all expressions \
to global variables, thereby substituting in their values. This caused \
problems when: Algebraic rules refer to variables that exist in some ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" context. For example, if a variable n is predefined then there is \
a rule that refers to a species or parameter named n, that caused a conflict. \
Included auto-recovery that clears preexisting variables of the same name. \
Similar bug occurs during SBMLPlot. Additional informaiton provided on \
possible conflicts with function arguments and reaction parameters\nAug 21 07 \
- modify resetParameter - remove a single semicolon at the end of a statement \
that had two - this caused a catastrophic failure in version 6 only.\nAug 13 \
07 - modify createModel option removeEmptySBML to string \"removeEmptySBML\" \
for consistency with other new createModel options. Make SBMLNDSolve failure \
more graceful for models with delay. Allow use of csymbol time within \
function defintions to work with any context, not just context->None.\nAug 10 \
07 - add getObjectAttribute, getObjectID, getObjectName, getObjectNames, \
getObjectIDs, get_ID, get_Name, get_Names, get_IDs. New options \"annotations\
\", \"notes\", \"comments\" to suppress these fields in creaetModel[]\nallow \
sbml plot variable names to be strings as well as variables\n2.666 Aug 8-9 - \
Patch visualizeSBMLModel to work in Version 6, albeit not very attractively. \
catch errors generated by EdgeRenderingFunction for no apparent reason.\n\
2.666 Aug 6 (renumber for version 6, the number of the beast)\nMake \
SBMLGridPlot work in version 6\nRemove SBMLValidate to separate package\n\
2.6.3 - preliminary SBML version 2.3 changes. New function textODES. More \
Version 6 fixes. Plotting of events in the form SBMLPlot[n, {A,B},...]\n2.6.2 \
- preliminary version 6 changes. Flatten return value of SBMLNDSolveModel \
after adding species & compartments. SBMLPlot fixes & changes for Version 6. \
Replace ExportString with ExportXMLString. Make createModel[] work. Make \
XMLOut work. Fix eventToSymbolicSBML. Make plotting across events work (but \
only in the form SBMLPlot[n])\n\n2.6.0.16 - add SBMLBoundaryConditions to \
SBMLRead return value\n2.6.0.15 - fix bug in SBMLPlot that ignored {tmin, \
tmax} in in SBMLPlot[n, variables, {tmin, tmax}] in models with events\n\
2.6.0.14 - fix bug in \"unitofthespeciescorrection\" that gives multiple \
divisions by the compartment volume when unit of the species is concentration\
\n2.6.0.13 - don't allow event triggers to be  lists, they must be boolean \
expressions\n2.6.0.12 - get$visdata[]. Option ignoreSpecies for \
visualizeSBMLModel\n2.6.0.10 - 15 Nov 06 - allow visualization of rule-only \
models. include visualizeByName option (default false) in visualizeSBMLModel\n\
2.6.0.9 - 11 Nov 06 - updates to visualizeSBMLModel: (a) fix but that caused \
crash when a a reacation has no products OR (no modifiers or reactants); \n\
(b) search for \"hidden\" species through assignment rules - look a variables \
in kinetic law and check against assignment rules for any species that are \
really modifiers ;\nthrough the assignment rule. These are visualized as \
modifiers. (c) fix bug that causes crashes when a model has no reactions at \
all: print a warning message. ;\n(c) visualize rate & assignment rules as \
species to species arrows.\n2.6.0.8 - bug fix -SBMLNDSolve (with events) \
sometimes include species twice\n2.6.0.7 - 03 Nov 2006 allow more general \
handling of mathml namespce to allow models with <math:math> elements where \
the namespace is specified in the header. Also update several error and \
warning messages \n2.6.0.6 - visualizeSBMLModel has options; boxs surrond \
reactons and ovals surrond species\n2.6.0.5 - icScan, parametricScan\n2.6.0.4 \
- 25 Oct 2006 - variableToParameter\n2.6.0.3 - 15 Oct 2006  @40000 feet on \
way home from ICSB7 in Yokohama- visualizeSBMLModel\n2.6.0 (released 1 \
October 2006) \n2,.6.0.p960926 (2.6.0.2) Fix problem with time as a variable \
(attempting to define t'[t]==0, poor formed ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" ode syntax). \nBug fixes: identification of \"AngleBracket\" as \
an undefined function in addReaction; identification of csymbols as invalid \
mathsbml in addFunction; problem with addConstraint where no message \
specified generates error messages with constraints; bug in addRule \
identifying the csymbol \"delta\" as a parameter. Problem in addReaction \
where csymbol \"delay\" is identified as a function with the wrong number of \
arguments\n2.6.0.p960928 - (2.6.0.1) fix bugs in SBMLNDSolve: generation of \
error message when checking to see if required compartment volumes are \
defined, and saying that they are not when they really are. \n2.6.0.p960927 - \
print error message if both a reaction and a rule change a species that is \
not boundary condition; default model builder to SBML Level 2 Version 2 if \
not otherwise specified by user\n2.6.0.p960926 - fix bug in printing of \
constraint violation message\n2.6.0.p960925 - fix format of error messages in \
getCompartmentType, fix spelling in getCompartmentTypes, improve help in \
__CompartmentType in modelBuilder.\n2.6.0.p960924 - allow \"+\" in mantissa \
or exponent of scientfic notation\n2.6.0.p960921 - bugs in handling of \
csymbols in model builder XtoSBML - in math elements they were added as\n\
<csymbol ..><ci>x</ci></csymbol> instead of <csymbol ...>x</csymbol>\n\
2.6.0.p960918 - fix bug in addCompartmentType (typo).\nfix removeID to also \
remove and metaid's pointing to it.\nfix bug in all add___'s:  addID and \
addMetaID in wrong orde with respect to deleting old objectr; need to be \
after delete, so new metaid is not added and old is not deleted\n\nfix bug in \
addSpecies that lost track of the metaid\nfkx bug in modifyUnit that \
invalidated used of option \"kind\"\nfix bug in modifyReaction that reordered \
options and sometimes confused new with old. (Complement [..., {invokedBy}] \
reorders!)\nfix bug in modifyInitialAssignment & addInitialAssignment that \
forgets to remove original version when a change is made\nfix bug in \
modifyInitialAssignment that fails to remove old metaid from tables when \
metaid is changed\nfix bug in removeConstraint that fails to remove old \
metaid when constraints are deleted\nfix modifyRule to respond to metaid \
option and not id option\nadd modifyRule[n, options] (n is integer)\nfix bug \
in modifyEvent that forgot that \"name\" is an option\n\n2.6.0.0 - 9/15 - \
rename 2.5.28b for pre-release of 2.6\n2.5.28b - 9/15/06 - check for wrong \
number lambda elements in function definition (none, more than one, not \
starting with). Add check for initialAssignment to undefined or invalide \
(e.g., event or function) symbol. Check for correct ordering of top-level \
elements in a model (previously not checked), models with repeated top-level \
elements (previously the second and later object was ignored), and unknown \
top-level elements (previously ignored). Print error message on multiple or \
missing model or unknown object in SBML container.\n2.5.28a - 9/14/06 - \
handle constaints in SBMLNDSolve\n2.5.28 - 9/13/06 - handle \
initialAssignments in SBMLNDSolve. Check during addInitialAssignment, addRule \
for inconsistency. Check during SBMLRead for possible assignmentRule or \
initialAssignment to same variable. \n2.5.27 - 9/12/06 - several bugs in \
check Kinetic Law and addReaction when the form \
addReaction[reaction-expression, opts] is used\n2.5.27 - 9/11/06 - add \
SBOTerm to function definition.\nOption checking & SBOTerm support for \
functionToSymbolicSBML, unitToSymbolicSBML, compartmentTypeToSymbolicSBML, \
speciesTypeToSymbolicSBML (compartment, species already done); \
parameterToSymbolicSBML,initialAssignment, ruleToSymbolicSBML, \
constraintToSymbolicSBML, reactionToSymbolicSBML\n2.5.27 -  28 Aug - 9 Sept \
2006: SBMLRead initialAssignments; metaid tracking for  all sbml objects; \
sboTerm in verbose output for all objects;\nchecking redefinition of  \
built-in units for allowed scalings; new SBMLRead  return field \
SBMLMetaIDAssocitions.\n2.6.26 - 25 Aug add, delete, remove, get, getNumberOf \
for Constraint. \nFound generic problem in modifyX needs to be fixed - all \
modifies need to be disparaged. \n2.6.26 - 24 Aug. constraintToSymbolicSBML, \
constraintToSBML\n2.6.26 - 22 Aug 06. Disallow offset in 2.2 units. Disallow \
Celsius in 2.2. Improved error messages in getLevel2Units.\n\
initialAssignmentToSymbolicSBML. initialAssignmentToSBML. add, remove, \
modify, delete, get, getNumberOf, etc. for initialAssignment. \nfix bugs in \
most modfy_ in model builder that referred to \"id\"->value rather than \
\"Global`id\"-> Value for default value\n2.5.25-1-Aug-06, include \
SBMLKineticLaws as a return option to SBMLRead. SBMLNDSolve treats them as \
assignment rules so that the fluxes can all be plotted. \nSBMLConstants \
should include anything that is marked as \"constant\" in SBMLRead.\n\
SBMLModelVariables should only include items that are not \"constant\" \n\
SBMLNDSolve can plot any species (even constant), any compartment (even \
constant) and any non-constant parameter.\n2.5.25 24-July-2006 error message \
when undefined variable is referenced in a variable field of a rule. \nError \
message when a function is referenced as a variable or a variable is \
referenced as a function in either a rule, a kinetic law, or an event \
assignment or event trigger. Error message when a function is referenced as a \
variable in a function definition. Error message when a function is called \
with the wrong number of arguments.\n2.5.24 21-July-2006 add csymbol support \
to model builder as angle bracket \[LeftAngleBracket]var,url\
\[RightAngleBracket] in place of var. Fix bug in variable declarations in \
getSBMLLevel2 that allowed some variables to go undeclared and be \
initializaed with globals of the same names\n2.5.24 20-July-2006 bug in \
addEvent: thinks species default to constant = True fixed; \nfixed bug in \
which csymbol time was sometimes ignored: namely, allowed URL and encoding to \
be in either order\nimproved type-checking in xml cn elements; add \
type-checking in cn elements to functions (previously skipped)\nfix bug in \
xmlHighlightForm in which \[UnderBracket] was not converted to an underscore\n\
fix bugs in addEvent that say variables are undefined when really they are \
defined\n2.5.23 14 July 06 check for identifier collisions in modelBuilder \
(previously only in SBMLRead).\nChecking of rule math to make sure all \
variables have been previously defined;\nChecking of events triggers and \
assignments for unknown symbols. Highlighting of errors in XMLHighlightForm.\n\
Highlighting of errors in events during addevent\nuse of proper mathml subset \
in functions. TBD: everything else\n2.5.22 12 July 2006 - correct \
initialization of reactants and products in check kinetic law (addReation \
failed when a rule)\n2.5.21 8 July 2006 - fix bug in eMailAddressQ that did \
not allow 1-charcter sub-domains as in either f in  name.f.smith@john.f.com\n\
2.5.20 30 June 2005 - let SBMLRead read a full file path rather than a \
subdirectory of its current path\n2.5.19 28 June 2005 - distinguish between \
local parameterts with the same name in different reactons in Berkeley \
Madonna output\n2.5.18 22 June - speed up context checking. Add support for \
Level 1 predefined mathematical functions (e.g., pow, cos, etc.); correct \
checkKineticLaw for problems with local parameters; E-format & functions in \
berkeley madonna output format; fix typo vcard in given (for vCard). Make \
checking of model context for collision an OPTION checkModelContext->False in \
newModel. Add support for MOST Berkeley Madonna functions (all that are \
immediately compatible with ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[").\n2.5.17.b 16 June check for atempts to use <cn \
type=\"real\">3.5e17<cn> etc. and repair. Print error message that this is \
non-standard xml.\nReject non-numerical strings in <cn>. Fix bug in SIDQ that \
was choking on the \"context backquote\". \n2.5.17 12 June MathSBML \
annotation with author information\n2.5.16 9 June MIRIAM creator annotation\n\
2.5.16 8 June completely rewrite fromEForm using Regular Expressions to \
handle correct syntax (version 5.1++ only). Remove support for Fortran \
exponentials not found in MathML, notable D,d,E,q,Q format (e ok). New \
private functions numericalFormQ, mantissaFormQ, exponentFormQ, eFormQ. \n\
Check for variable collisions with predefined (e.g., System) variables. \n\
IgnoreCollisions[\"context`\"];\nCheck for model id collision with other \
contexts; remember previous model contexts. New varialbe \
PreviousModelContexts\n2.5.16. 6 June completely rewrite \
annotationToSymbolicSBML to have more flexibility in handling both inline \
tags and heirarchical tags, at any level, and to correctly indicate both the \
URI and the package tag in the right location. Additional error checking in \
model builder for building annotations. Side effects required modificaiton of \
setModelAnnotation, setSBMLAnnotation, optionToAnnotation and array \
processing functions. Changed setAnnotationURL to setAnnotationURI. \n2.5.15d \
remove Global`t from list of variables checke by checkKineticLaw.\n2.5.15 - \
May 30 - a/ SBMLContext in SBMLRead return value. resetIC. resetParameter.\n\
2.5.15b/ New internal function checkKineticLaw, called from \
addReaction[options] and\n2.5.15c. checkKineticLaw in SBMLRead (SBML Level \
2), adds checking of kinetic law for undefined symbols or undeclared \
modifiers. Forces loadModelBuilder->True in SBMLRead to ensure the checks are \
not skipped.\n2.5.14 - May 21 - use FLAGS`ECHOLOAD to determine if a message \
is to be printed when the file is loaded, and check for previous versions of \
being loaded.\n2.5.13-04 May 06 - (1) bug: event flags persist in repeated \
runs so events trigger differently; fixed; (2) bug: SBMLConstants not applied \
to event triggers so they evaluate as false & trigger infinite loop in find \
event time; fixed; (3) bug: in SBML NDSolve with events, some variables that \
are determined by funtions are added to the system after NDSolve is called, \
but the functions are not evaluated; Bug appears in subsequent call to \
plotting. Fixed. \n2.5.12- 22 April 06 - Fix compartmentToSymbolicSBML which \
writes spatialDimensions twice when it is not equal to 3. \n2.5.11 - 07 April \
06 - in Nove Hrady, Czech Republic\nL2.2: missing ids->names in species \
types; fix several bugs in speciesType. compartmentType. \nL2.1: stop from \
returning speciesTypes\nL2.2 namespace as \
http://www.sbm.org/sbml/level2/version2 \n2.5.10 - 21 March 06 - \
SBMLValidate, and automatically checking for full installation of validator \
components when loaded.\n2.5.9 - 16 March 06 - handle unitsOfTheSpecies in \
reactions; allow for variable concentrations. New functions internally: \
hasOnlySubstanceUnitsIndicator[S[t]]=True/False for all species and False for \
all other variables, and SBMLSpeciesCompartment[SpeciesId[t]] = compartment \
id, assigned in getLevel2Species.  Summary of correction: if a species has \
units of the species concentration, then ",
  FontSize->12],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FormBox[
      RowBox[{
       RowBox[{
        RowBox[{"x", "'"}], "[", "t", "]"}], "=", 
       RowBox[{
        RowBox[{"r", "(", 
         RowBox[{"x", ",", "t"}], ")"}], "+", 
        FractionBox["1", "C"]}]}],
      TraditionalForm], 
     FormBox[
      RowBox[{"\[Sum]", "klaw"}],
      TraditionalForm]}], "-", 
    FractionBox[
     RowBox[{"dC", "/", "dt"}], "C"]}], TraditionalForm]]],
 "where C is the volume of the compartment, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Sum]", 
    RowBox[{"klaw", " ", "is", " ", "the", " "}]}], TraditionalForm]]],
 "sum of the kinetic laws, and r is any rate law for x. If x has units of the \
species amount then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FormBox[
     RowBox[{
      RowBox[{
       RowBox[{"x", "'"}], "[", "t", "]"}], "=", 
      RowBox[{
       RowBox[{"r", "(", 
        RowBox[{"x", ",", "t"}], ")"}], "+"}]}],
     TraditionalForm], 
    FormBox[
     RowBox[{"\[Sum]", "klaw"}],
     TraditionalForm]}], TraditionalForm]]],
 StyleBox["\n2.5.8 - 9 Feb 2006 - fix typo in definitionURL for csymbol time \
should be  ",
  FontSize->12],
 Cell[BoxData[
  RowBox[{
   RowBox[{"http", ":"}], "//", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"www", ".", "sbml", ".", "org"}], "/", "sbml"}], "/", 
     "symbols"}], "/", "time"}]}]], "Input",
  InitializationCell->True],
 StyleBox[" was ",
  FontSize->12],
 Cell[BoxData[
  RowBox[{
   RowBox[{"http", ":"}], "//", 
   RowBox[{
    RowBox[{
     RowBox[{"www", ".", "sbml", ".", "org"}], "/", "symbols"}], "/", 
    "time"}]}]], "Input",
  InitializationCell->True],
 StyleBox["\n2.5.7 - 2 Feb 2006 - fix bug in stoichiometry matrix \
calculation: only occurs when reactions like 2A-> 3B are input as A+A->B+B+B \
and only affected calculation of stoichiometry matrix itself and not odes - \
namely, when the same speciesReference occurs more than once on the same side \
of the reaction.\n2.5.6 - 12 Jan 2006 - include conservation Matrix \
calculation code from Joanna Murakami; 1/13: allow option to work with \
reaction-less systems.\n2.5.5 - 9 Nov 2005 - listOfIndicesFrom, \
listOfIndicesTo in connectionRule.\n2.5.5 - 1 Nov 2005 - allow \
addParameter[id\[Rule]value] form (value must be a number). \
InitialAssignmentRule in experimental array support does not require a math \
field.Allow getRule[metaid]. getCompartmentNumber, getUnitNumber, \
getRuleNumber, getSpeciesNumber, getFunctionNumber, getParameterNumber, \
getEventNumber,; getObjectNumber; replaceFunction,replaceUnit,replaceSpecies, \
replaceCompartment, replaceReaction, replaceParameter,replaceEvent \
replaceRule, replaceObject. \n\n2.5.4 - 8 Aug 2005 - Bug fix in getLevel2 \
Reaction - does not recognize math stoichiometry\n2.5.2 - 27 June 05 -  Bug \
fixes (a)in addRule: Auto generation of addParameter in rule does not check \
for compartments on either rhs or lhs (two places in code). (b)In \
getLevel2Species, make sure that non-constant compartments are functionated \
in SBML$SpeciesCompartmentAssociations. (c) Typo in error message in \
getMinMax (d) treat variables as variables (with [t]) in  ",
  FontSize->12],
 "neededCompartmentSizesDefined",
 StyleBox[". ; (e) Check in SBMLLogPlot for variables that are always zero \
(previously only check for variables that are negative). \n2.5.1.1 - 22 June \
05 - remove cellerator-specific experimental functions\n2.5.1 - 10 June 05 - \
add PlotStyles option to SBMLPlot; make holdLegend global (option to \
SBMLPlot)\n2.5.0- 30 May 05 - release version 2.4.18 as version 2.5.0\n2.4.18 \
-28 May 05 nest units allowed in model builder & SBMLRead. Units may only \
refer to previously defined units, and not to themselves or units that have \
not yet been defined - the order is important.. Constraint rules in \
ruletosbml and addrule, and SBMLRead. Print message in SBMLNDSolve when a \
constraint is violated, but do not halt processing. Change SBMLSpecies to \
SBMLModelVariables; SBMLSPecies now just returns species, not all variables. \
Change SBMLParameters to SBMLConstants; SBMLParameters now just returns \
global paramters. SBMLRead returns a sorted model.Add \
SBMLSpeciesCompartmentAssociations to Level 1 SBMLRead and allow SBMLNDSolve \
to work on level 1 (bug introduced in 2.4.1). Return SBMLLevelVersion in \
SBMLRead.\n2.4.17 - allow SBMLGridPlot for models with events; allow \
selection of individual variables, not just entire variable set for \
SBMLGridPlot and SBMLPlot for models with events; don't require context to be \
stated for variable names to be plotted; allow options to be passed to \
SBMLGridPlot; if the derived Units of a species are 1, call this \
\"dimensionless\" (whether this is valid SBML or not!)\n2 .4.16 - check for \
shadowing of global parameters by reaction parameters & print message \
(SBMLRead) (2) add_, modify_, remove_, get_ for SpeciesType; \
speciesTypeToSymbolicSBML, speciesTypeToSBML; (3) SBMLRead, createModel \
recognizes speciesTypes; (4) fix scientific notation of single numbers in \
html output (vs *^ notation)\n2.4.15 - check for identifier collisions when \
loading a model.(2) halt simulation if compartments that enclose species have \
undefined volumes; (3)  halt simulation if odes are missing initial condition \
(previously assumed volumes were 1 and ics were otherwise zero).(4) fix \
random bug in SBMLPlot that occurs when different variables have minutely \
different solution spans because of roundoff error (e.g., one goes from 0 to \
5 (integer) and the other from 0 to 5.0 (real). \n2.4.14 - fix bug introduced \
in 2.4.4 - when a variable is constant make sure NDSolve still returns an \
interpolatingFunction (one line change to ",
  FontSize->12],
 "NDSolveSBMLModel",
 StyleBox["\n2.4.13 - used corrected L2V1 units formula \
[(multiplier)(10^scale)(u)]^exponent + offset instead of \
(multiplier)(10^scale)( u^exponent) + offset\n2.4.12 - run each term in ODEs \
through Cancel before adding them in (to get rid of compartments on top & \
bottom) of kinetic law; mostly due to how v5.1 is simplifying things now; \
change message printed when default units are overridden;  \n2.4.11 - \
maintain stack of compartment referrals so that the most recently referred \
one is used when new species are added without referencing a compartment; fix \
XMLOut to handle underscores (only used in array & cellerator support); \
addReaction forgets to check for modifiers being in model\n2.4.10 - implement \
events with delay is SBMLNDSolve \n2.4.9 - checks in event simulation for \
event occuring at beginning of run span - due to change in how ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" 5.1 handles StoppingTest; use throw/catch instead of StoppingTest \
in 5.1; \nError message will be printed in 4.2 but still seems to work.\n\
2.4.8- fix Piecewise.In ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" 5.1, Piecewise function exists and is translated to/from MathML \
automaticallly. Prior to 5.1 need to use If expressions, and the <apply/> was \
used improperly.\n2.4.7 - fix bug in getSymbol that sometimes causes problems \
when math expressions are specified as strings rather than expressons\nfix \
bug in NDSolveSBMLModel that neglected to set Indeterminate IC's (only in ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" \[GreaterEqual]5.0, for \"added\" assignment rules that are added \
to create a DAE system)\n\
getFunction,getUnit,getSpecies,getParameter,getReaction,getRule,getEvent\n\
getFunctions, getUnits, getParameters, getReactions, getRules, getEvents, \
getCompartments\ngetNumberOfFunctions, getNumberOfUnits, \
getNumberOfParameters, getNumberOfReactions,getNumberOfRules, \
getNumberOfEvents, getNumberofCompartments\ngetModel, getSBMLModel\nFlatten \
Solution in SBMLPlot[interpolating Function] because of change in how \
PlotLegend's are handled in ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" 5.1 (otherwise adds extra variable in the legend).\nInclude \
annotation package in annotations as in <foo:x=\"b\"> rather than just <x=\"b\
\">\ngetObject, getObjects\n\n\n2.4.6 - bug in getParameter (printing \
\"Indeterminate\" for missing units); debug verboseSave\ncorrect use of \
evaluateParameters in printing of odes to web page\ncorrect use of \
verboseContext->False in printing of odes to web page\n\n2.4.5 - \
getCompartment[n]\n\n2.4.4 - SBMLNDSolve - apply assignment rules as ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" Rules and do not solve for them explicitly. Then return the \
variables as functions of interpolating funcitons.\n\n\n2.4.3 - modified \
event handler in SBMLNDSolve: \n",
  FontSize->12],
 StyleBox["Each event\[NonBreakingSpace]e in E\[NonBreakingSpace]has a\
\[NonBreakingSpace]trigger expression Te and assignments Ae.",
  FontFamily->"Arial",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\n",
  FontFamily->"Arial"],
 StyleBox["For each event e we create in mathematica",
  FontFamily->"Arial",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\n\t\[Bullet] \t",
  FontFamily->"Arial"],
 StyleBox["a variable Ve with initial value false (-1) \n\t\[Bullet] \ta \
mathematica event with trigger (NOT Ve (Ve<0)) AND Te and assignments Ae and \
Ve = true (1)",
  FontFamily->"Arial",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\n",
  FontFamily->"Arial"],
 StyleBox["\t\[Bullet] \ta mathematica event with trigger Ve (Ve>0) AND (NOT \
Te) and assignment Ve = false (-1)",
  FontFamily->"Arial",
  FontColor->RGBColor[0, 0, 1]],
 "\n\n",
 StyleBox["2.4.2 - (a) return-> {SBMLStoichiometryMatrix-> True} option  in \
SBMLRead (level 2) calcluates stoichiometry matrix based purely on reactions; \
(b) return-> {SBMLMassBalanceEquations-> True} and ",
  FontSize->12],
 "SBMLMassBalanceRateVector",
 StyleBox["-> Automatic calculates mass balance eequations based on the \
equation dC/dt=N.v where C is the vector of concentrations; N is the \
stoichiometry matrix; and v is a vector {var[1],var[2],...,var[n]}, var is \
the value of the parameter ",
  FontSize->12],
 "SBMLMassBalanceRateVector",
 StyleBox[" (or a unique variable starting with the letter v, if the value is \
Automatic) and n is the number of reactions; (c) return-> \
{SBMLMassActionEquations->True} for mass action equations; (d) corresponding \
verbose options verboseStoichiometryMatrix->, \
verboseMassBalanceEquations->False, verboseMassActonEquations-> False\n\n\
2.4.1 - (1) allow transport reactions like S1 (in c1)-->S2 (in c2) to be \
calculated correctly. ODE term is now d(X)/dt = (1/compartment)*kinetic law \
if X is a \"concentration\"; (2) fix SBMLLogPlot so that negative & zero \
values are ignored.\n\n2.4.0 - bug fixes: printing of null eventAssignment \
metaids prevented. New function SBMLListPlot.; add external function points \
for low-level array support; \n2.3.28 - turn off units option to SBMLRead \
(default->False) in preparation for v.2.4.0 release (turn off since not \
working yet!)\n2.3.37 - option units - preliminary unit conversion for odes. \
Check for NDSolve::nderr in SBMLNDSolve and reduce precision/accuracy goal.\n\
2.3.36 - fix loss of default units (turned into strings) when no units are \
added. Option verboseBuiltInUnits->False for SBMLWrite & SBMLRead [.. \
verbose->True] to include built in units in verbosity tables of units \
defiitions.\nAllow functions to call functions.\nAllow event triggers to call \
functions.\nSBMLRead option verboseNormalizedValues\[Rule] False\nin \
unitToSBML allow[unit-> {kind1, kind2, ...} where kindj is either a Rule or \
just the name of a predefined unit (previously only rules allowed)\nmaintain \
integer stoichiometries as integer (and do not convert to real)\nFix \
background color in html tables from #white to white (typo, # was not \
supposed to be there).",
  FontSize->12],
 StyleBox["\n",
  FontSize->16],
 StyleBox["2.3.35 - wrap XML`MathML`SymbolicMathMLToExpression",
  FontSize->12],
 StyleBox[" ",
  FontSize->16],
 StyleBox["with SymbolicSBMLMathMLToExpression to procuess csymbol time\n\
2.3.34 - log plots and plot options for interpolation sets. Option \"zero\" \
for interpolation set log plots.\n2.3.33 - new function dataTable; modify \
error message that is printed when event-based files are plotted with \
options. Fix bug in events that reset some variables to their initial initial \
conditions (",
  FontSize->12],
 StyleBox["NDSolveSBMLWithEvents",
  FontSize->10],
 StyleBox[")\n2.3.32 - constant=\"true\" species are included in SBMLSpecies \
(return value) with an ode as id'[t]==0. This ensures ths SBMLNDSolve will \
solve for them and hence they can be plotted.  Add dummy variable to \
SBMLNDSolve that is not returned when no ODES are in model (because of bug \
that causes NDSolve to crash when there are no ODEs).\n2.3.31 - make <cn \
type=\"e-notation\" ...> work - because of bug in ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" that gives \"",
  FontSize->12],
 "System`Convert`MathMLDump`$Falied",
 StyleBox["\" - added function ",
  FontSize->12],
 "fixXMLeNotation",
 StyleBox[" to preprocessSBML; allow floating point and e-notation \
stoichiometry=\"value\" (level2); reactionToSymbolicSBML- put any NumberQ \
stoichiometry inline, not just integers. similar problem in addReaction.\n\
2.3.30 -fixed species & compartment initial conditions fail to be saved \
correctely in Level 1 with eForm; change reaction arrow in html to &rarr; \
code; change mathematica sci. notation 6*^42 notation to \
6&times;10<sup>42</sup> in html output\n2.3.29 - heirarchical annotations via \
\"symbolicXMLForm\"; setModelAnnotation; sentSBMLAnnotation\n2.3.28 - \
explainSIDError; replace LetterQ with latinLetterQ in SIDQ because it allows \
Greek letters.functionQ for compatibility with Cellerator CSBML plugin; fix \
use of default notes string introduced in 2.3.25 to turn model name  into a \
string before applying <> operator.\n2.3.27 - redefine arguments x and z in \
bulletize to avoid that pesky x::shdw message when x or z is previously \
defined.\n2.3.26 - check for valid SIDQ in id field of ___ToSymbolicSBML\n\
check for MB$Echo==True in echo: remove___\naddRule: check for id field then \
metaid field.\ndon't add dummy indices as parameters when referenced in array \
rules\n2.3.25 - default notesstring uses now[] before it is defined \
(introduced in 2.3.24) - now [] moved. Spelling of spatialDimensions fixed \
(sometimes missing the final \"s\")\n2.3.24 - integer stoichiometry as inline \
tag in addReaction; option notes->False in SBMLWrite[format->\"html\"];  \
default notestring in modelBuilder; if notes->\"\" in newModel, do not \
enclose by <body...>\n2.3.23 - substanceUnits, spatialSizeUnits, \
hasOnlySubstanceUnits in a species (level 2 only)\n2.3.22 - fixed bug in \
createSymbolicModel in interpretation of notes read by SBMLRead\n2.3.21 - in \
expression2SBML replace Dot[x,y] with a Global`scalarproduct[x,y] instead of \
the MathML function scalarproduct.\nAdd new option rationals->False to \
SBMLRead and newModel. If True, treats fractions as rational numbers and not \
as real numbers (mod to SBMLRead and fromEForm).\n2.3.20 - in level 2, ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" v5.0++, assignment rules cause variables to be added to DAE \
system instead of being treated as ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" parameter replacement rules. \nAdd new structures \
\"AssignmentRules\", \"SBMLSpeciesCompartmentAssociations\" to SBMLRead \
return value.\nChange SBMLNDSolve in L2, ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" V.5 to process variables that do not have odes as algebraic \
expressions x[i] = initial condition value of x[i] rather than adding an ode \
x'[t] = 0 as is done in ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" V.4.\nCorrect SBMLCompartments return value of SBMLRead to \
correctly show context of compartment.\n2.3.19 - don't print \[EmptySet] in \
html output in reactions from SBMLWrite[]; replace arrows (",
  FontSize->12],
 Cell[BoxData["\[Rule]"], "Input",
  InitializationCell->True],
 ") ",
 StyleBox["with unicode #x2192 arrow; replace arrows (<-> with #x21CC; \
arrow); allow SBML files to contain \"Piecewise ... Piece ... Otherwise\" \
MathML that is interpreted as nested If statements (via the new function \
piecwise) and vice-verse, convert nested If's in expressions to piecewise via \
piecewiseIf and if2piecewise.\n2.3.17 - parse references to array indices \
x[[i]] as \"incorrect\" MathML applying a function selector[x,i] rather than \
a mathml operator selector.This should be fixed if arrays are every allowed \
in SBML; for compatibility with computable plant. \n2.3.15 -Fix autoscale of \
log plots to check for negative ranges and then make educated guess at ranges \
of positive values. Also modify  <dimension id upperlimit lowerlimit/>\n\
2.3.14 - fix sometimes conversion of underscore character to unicode \
expression in sbml character strings, i.e., x\[UnderBracket]y becomes \
x&#9141;y instead of x_y\n2.3.13 - fix experimetnal initialAssignmentRule \
when the data is atomic (not a vector or matrix)\n2.3.12 - automate axis \
scale determination in SBMLLogPlot instead of using PlotRange-> All\n2.3.11 - \
experimental connectionRule, indices field for rules, connection field for \
rules, to support computable plant project.\n2.3.10 - force   <body \
xmlns=\"http://www.w3.org/1999/xhtml\"> ...</body> around model notes.\n2.3.9 \
- add SBMLCompartments to end of return value for SBMLRead. New SBMLRead \
return flag return-> {... SBMLCompartments->True ...}\n2.3.8 - createModel no \
longer fails when file exists, instead creates new file name with a number \
added just before the \"dot\"; add MathML subset to list of names excluded \
from right-hand-side variable existence checking in addRule when \
autogenerating parameter definitions.\nAdd BerkeleyMadonna as an option for \
SBMLWrite\n2..3.7 - fix bugs in level 2 stoichiometry\n(1) In model builder, \
enclose matml in <stoichiometryMath><math ....> ... </stoichiometryMath>\n\
instead of just stand-alone <math>\n(2) In sbmlread, allow stoichiometry to \
be an inline tag as well as mathsbml\n2.3.6 - replace hardcoded html format \
with style sheets\n2.3.5 - fix bug in rhs rule check that treats function \
names as undefined parameters.Allow matrixResult in a rule when arrays are \
allowed. When checking for earlier rules for a given variable, allow earlier \
initialAssignmentRule.\n2.3.3 fix several bugs that arise from premature use \
of stringer before it is defined - errors occur during load. \nAdd \
\"MathSBML`Private`$$LoadBug to aid debugging. \nReplace validIdentifier with \
more elegant SIDQ code\n2.3.2. Check SID of model ID in newModel[] and \
suggest correction if invalid.\nChange getSBMLfield[field, XML[...]] to have \
\"field\"->\"field\" as a legal option (previously would return value of \"\" \
rather than \"field\"). \nChange getLevel2compartments to use getSBMLfield \
for compartment rather than just checking the option list for \"compartment\"\
\n2.3.1\naddRule: (1) check variables on RHS of rules to make sure they have \
been defined, and if not, add them as parameter; (2) Don't allow \
assignment/rate rule for variable that has been previously referenced on teh \
RHS of an earlier rule; (3) Don't allow rules to self reference; (4) print \
rule name and formulat under echo=True \ndon't include emptly \
<listOfCompartments/> if there are no compartments in the model\nCorrect bug \
that allowed multiple compartments with same name.\nEnhanced option checking \
(checkOptions)\nReplace option annotations with annotation globally (more or \
less)\n\n\n*** NOTE *** generic problem -- need to replace option checking \
with getSBMLfield for the general \"tag\"->\"tag\" problem (where the value \
and the tag are the same string)\n\n2.3.0\n(a) Processing of events in \
SBMLNDSolve\n(b) Skip printing of empty tables in versbose listings when \
listOf_ is empty or nonexistent.\n(c) Option RemoveEmptySBML->True for \
createModel (comments out blank <listOf__ /> tags\n(d) Add comments and notes \
to newModel.\n(e) Allow notes, annotations, and metaid whereever allowed in \
SBML in model Builder.\n(f) Experimental array support in Model Builder for \
compartments, species, parameters, and rules.\n\n\nBug fixes.\n(1) All \
redefining of default units (e.g., time)\n",
  FontSize->12],
 "(2)  ",
 StyleBox["correct bug that incorrectly displayed the unit definition when a \
unit is added during MB$Echo \n(3)fix bug in parameter null annotation/notes \
within reaction (was writing string\"annotationnotes\"\n(4) all model names \
and id's to be symbols or strings\n(5) fix bugs that lost value of MB$Echo \
during loadModelBuilder, showModelBuilder, loadSimulator\n\n\
objectLinkToSymbolicSBML, listOfIndicesToSymbolicSBML, getArrayDimensions, \
dimensionToSymbolicSBML, getObjectLink\n\n2.2.1 - restrictions on \
assignmentRules only applied only to assignmentRules, and not rateRules\n\
2.2.0 (same as 2.1.5) - Represent non-reversible reactions with Rule arrow \
(->) instead of LongRightArrow; xToSBML and xToSymbolicSBML; where x = \
compartment, event, function, parameter, reaction, rule, species,unit. addx, \
removex, modifyx here x = Compartment, Event, Function, Parameter, Reaction, \
Rule, Species, Unit\nnewModel; createModel; showModel; loadSimulator; \
loadModelBuilder;\nFix error processing species which are not assigned \
initial conditions. (level 2)\nAutogenerate missing compartments on species. \
(level 2)\nAutogenerate rule metaid (level 2)\nAdd SBMLGridPlot; add ability \
of SBMLPlot to plot single variables without context being specified. \n\n\
10-7-03 prerelease 2.2.0 fix bug in handling of compartmentVolumeRules and \
ParameterRules with formulas.\n\n\n2.1.4 -  correct errors in several \
predefined functions in SBML Level 1 version 2; add several model builder \
functions; speciesToSBML, reactionToSBML, functionToSBML; infix/MathSBML \
conversion\n\n2.1.3- options passing to Import and Export for SBMLCopy;  \
options return->{SBMLNumericalSolution->number}, NDSolveOptions in SBMLRead; \
make SBMLPlot compatible with either output of SBMLNDSolve OR a model with \
SBMLNumericalSolution incorporated within it.; correct contextification of \
units in level 1 (already implemented in level 2); fixed bug ins SBMLRead in \
processing PlotOptions->True; fixed bugs in SBMLWrite, SBMLFunctions not \
initialized correctly to {} in level 1 for XPP; Variables names not fully \
substituted in calculation of Jacobian for Fortran;  removed call to \
check4missingODEs;\n\nVersion 2.1.2 release- correct error in preprocessing \
underscores - missing stuff inside mathml\n\nThe following were included in \
Version 2.1.0 release:\n reaction Builder developmental functions;  Fortran77 \
format for SBMLWrite. Fixed error in removeReplacementRule; fix loss of \
context in level-2 constant=\"false\" parameters.  Fixed handling of Constant \
and Boundary Conditions on Parameters, Species, and compartments. Fix bug in \
default units for \"length\" (not quoted previously). Fix erroneous display \
of function id context in verbose listing when verboseContext->False. Add \
missing ellipsis in verbose listing of reaction. Fix handling of modifiers \
and parameters when there are none (vs a blank space).  Fix incorrect \
processing of \"_\" in MathML expressions. Change SBMLNDSolve to treat \
variables without ODEs as constants by x'[t]==0.  Preprocess all symbolic xml \
by replacing underscores with the default underscore replacement character \
immediately upon reading the file. In SBMLNDSolve, include algebraic rules \
(Mathematica version >= 5) and check for undefined symbols in the model. HTML \
format for SBMLWrite; Predefined rate laws. \nVersion 2.0.0 beta rename of \
version 1.1.16 for SF Tarball release.\nVersion 1.1.16 - minimal error \
recovery in SBMLNDSolve - check for indetermiante or missing IC's, variables \
(species) without ODES\nVersion 1.1.11 - Level 2 rules; 12-14: reactions; 15: \
events; \nVersion 1.1.8,9 - Units context for species, compartments, units\n\
Version 1.1.7 - Level 2 species, parameters.\nVersion 1.1.6 - Indeterminate \
values are represented with \"\[CenterEllipsis]\" character in verbose \
listing (\\ [CenterEllipsis])\nVersion 1.1.5 - Level 2 id->name associations \
returned; check for liter/litre, meter/metre misspellings; SIdify units name \
if id is missing; \nVersion 1.1.4 - Level 2 model, function, unit \
definitions. \nVersion 1.1.1 - June 6.  SBMLModelName returned by SBMLRead. \
1.1.2: SBMLWrite has XPP capability. 1.1.3 -bug fix, loss of ode table in \
verbose listing. \nVersion 1.1 - 30 May 03: option 'return' to SBMLRead; \
return SBMLReactions;  allow underscore character in global parameter \
(earlier bug caused crash); . put model variables in a local context, which \
is the same as the model name, unless otherwise specified by the context \
option to SBMLRead; put reaction parameters in a sub context \
model`reactionname`parameter; for unnamed reactions, the context is \
model`UnNamedReaction$n` where n is a counter into the list of reactions, \
e.g., if third and 14th reactions are missing names the contexts are \
model`UnNamedReaction$3` and model`UnNamedReaction$14`.    PlotType-> \"Log\" \
added. verbose mode align option added. Default verbose alignment changed \
from center to left because of loss off data off screen to left.  The context \
is not indicated in the verbose listing unless verboseContext->True.  Fix bug \
in local parameter processing that caused error when processing large \
constant value (>10^5) parameters. FIx bug that caused embedded exponentials \
with signed exponents in reaction kinetic formulas such as 1.5E-3 to be \
interpreted incorrectly. Fix bug that causes occasional omission of global \
parameter table in verbose listing. Fix misinterpretation of formulas in \
rules that could ignore embedded underscores in variables. \nVersion 1.0.9 - \
2 May 03:  duplicate speciesReferences on same side of reaction: \
stoichiometery -> Sum (stoichiometries/denominators) for individual \
references; fix bug introduced in 1.0.8: \"specie\" keyword was lost from \
L1V1 under certain conditions; add number of warnings issued to statistics \
when stats->True; message when 0/0, 1/0, or any infinite form is encountered \
and evaluateParameters->True; fix bug where underscores in variable names in \
rules were not replaced correctly. Observe that a variable name of \"E\" in a \
model will conflict with the mathematica \"exponential\" E.\nVersion 1.0.8 - \
30 April 03: reactions mission kineticLaws produce \"Indeterminate\" ODES; \
previously, errors; allow repeats of same species in speciesReferences in \
<listOfProducts>, <listOfReactants> - but ignore all but first & print \
warning; fix error that translates e-form numbers with missing decimal points \
into mathematica fractions instead of mathematica decimal expressions.  \
Observed additional concern (not fixed): if a ",
  FontSize->12],
 StyleBox["Mathematica",
  FontSize->12,
  FontSlant->"Italic"],
 StyleBox[" variable in the Global` context has the same name as a parameter, \
species, or compartment in the model, a conflict can occur. \nVersion 1.0.7 - \
29 April 03: error recovery in unit table; default species units->substance \
instead of Indeterminate as per spec. Derived units in unit table and minimal \
unit checking.  Return SBMLUnitDefintions and SBMLUnitAssociations. Fix bug \
that could misinterpret identifiers in kinetic rules when one identifier is a \
substring of another idenetifier. \nVersion 1.0.6 - 28 April Basic Unit table\
\nVersion 1.0.5 - Global change of $ followed by Header to \[Cent]Header (the \
cent sign) to avoid being clobbered by CVS\nVersion 1.0.4 - 15 April 03 - \
unassigned parameters, missing initial conditions, missing compartments are \
labeled Indeterminate. Option defaultIC.\nVersion 1.0.3 - 11 April 03 - fix \
error message that occurred when compartments are given a name of \"",
  FontSize->12],
 StyleBox["compartment",
  FontFamily->"Courier",
  FontSize->12],
 StyleBox["\"; ",
  FontSize->12],
 StyleBox["defaultParameterValue",
  FontFamily->"Courier",
  FontSize->12],
 StyleBox[" option; ",
  FontSize->12],
 StyleBox["underscore",
  FontFamily->"Courier",
  FontSize->12],
 StyleBox[" option;  rename ",
  FontSize->12],
 StyleBox["SBMLGet",
  FontFamily->"Courier",
  FontSize->12],
 StyleBox[" to ",
  FontSize->12],
 StyleBox["SBMLRead",
  FontFamily->"Courier",
  FontSize->12],
 StyleBox[";\nVersion 1.0..2 - 10 April 03 - include Algebraic rules\nVersion \
1.0.1.2  - 9 April 03 - Level 1.2 compatibility; check for consistency of \
xmlns with specified level & version.\nVersion 1.0.1.1 -  9 April 03 - Added \
SBML graphic and edited opening text\nVersion 1.0.1 - 4 April 03 - Added \
limited compatibility with predefined rate laws: they are recognized as \
functions but not implemented. Includes SBW/SBML standard headers and license \
information.\n\nVersion 1.0 - April 3, 2003",
  FontSize->12],
 "\n"
}], "Text",
 CellChangeTimes->CompressedData["
1:eJwd0GFQ03UcBnAEhE7XpIIYJI30YlyXp4Gip4j8gkYpurIERE62AQnLAdeu
BbjIIBLEYoYSLs6muFk7cFFYNDm4IN0FuDDQSuSgbXL8h2CDKUnu7Pvw4rnP
PW+eF89z8qLdeb4+Pj5iCrTO9cw8kcixDwqcszB3oNkZQrZEBUzAhfAMr4xx
LOfUG75ycq5VZPiLTI4LNsKu2IKJJS9zbFi7chLytjcrUklParISqlqbvlud
wrEbY2Xfw6zHT54QkbdaHzRC/Zvdyzenckyyo5cPFRp5fgJZV5xfAI0LI6Gn
yHtbzOGQV1N39GeyUy/7FMaOr1jiIKuiVvrDUYFb6STfDh4pgoUxFXqo8996
Bh4UfvHebVJ2d3UJvD4yXSzdybGb/MNqeFy+LuYAKRbfWH9gsX99X0H67mtY
gM6zYWU/7OLYrKmpHL6lvcbPknDsfXWvEK5hpfH7Sb/BhK1wyGzfoyQbC3v2
we5vLqi1ZOlSewkUx2hnYFqLyQ3zond+7P86/ZOfeQRWrHHXOqBubT08PSMx
3iZDOlZcgGujfKtdZF/y/FFYWDb/G5QGrB+CCZPyE9Z0jgVFhX4J223zo7+S
Pa5dDvjUlfYz/eQrKbbz8JOhzEphJsfi26KrYHj2QA0MiFz6GTR6M56OJCOv
hoXB0M02Jfwn0aOC9qltH8FVcTcrYfFLEYNi0swe/Q43FmVMwYPLxu7ANNnf
fj9mccygHnsMJs2GBMEXI5RPQs+mR3vgf5G16dDvXHdOB6kPzM6DrqmHvA3Z
HFPHSYIh3xBh+VDKsXzBa50w3sYMsnc4Vv3MCyYo0wTO5JC6wUAPTLtc4YWC
qja/XLLx7GVrAbmpQdAHOxJK7xxSceynDQ+noUbE26sh63mS/VDzqshwjozY
UmSCl678YYam3FvfQqNq9yVLCe0aEnuh8ZdyGyyctiy6MVp7+N9Kjg1cnKiF
1xWJjV4yWcI/DbviY59/t4pjwYJ4EdQ1Nw+ryJQg4QRcPj4qPEQmlatWwSz3
Na/nc47VnB8PvEeWOfrFD8g591fboVN6v+2I0MWkOy5aoG463XqcPJb051XY
aV5nryeb+vY64MncOmttpos13B3sh/xtdS3HyK4efTscdj5rgdUK0aJZ9r7s
4koXm2xZlgf/B/k2Oow=
  "],
 FontSize->9]
}, Closed]],

Cell[CellGroupData[{

Cell["Usage for Public functions", "Section"],

Cell[CellGroupData[{

Cell["temporary formatting functions ", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"bulletize", "[", 
     RowBox[{
      RowBox[{"mystring$$$_", "?", "StringQ"}], ",", 
      RowBox[{"bullet$$$_", "?", "StringQ"}]}], "]"}], ":=", 
    RowBox[{
    "\"\<\\n\\n\>\"", "<>", "bullet$$$", "<>", "\"\< \>\"", "<>", 
     "mystring$$$"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numerize", "[", 
    RowBox[{
     RowBox[{"mystring$$$_", "?", "StringQ"}], ",", " ", 
     RowBox[{"number$$$_", "?", "IntegerQ"}]}], "]"}], ":=", " ", 
   RowBox[{"bulletize", "[", 
    RowBox[{"mystring$$$", ",", " ", 
     RowBox[{"\"\<(\>\"", "<>", 
      RowBox[{"ToString", "[", "number$$$", "]"}], "<>", "\"\<)\>\""}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numerizedList", "[", 
    RowBox[{"myzstring$$$_", "?", "ListQ"}], "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"StringJoin", ",", " ", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"numerize", "[", 
         RowBox[{"#1", ",", " ", "#2"}], "]"}], "&"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"myzstring$$$", ",", " ", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "myzstring$$$", "]"}], "]"}]}], "}"}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.397048362735148*^9, 3.397048415716061*^9}, {
   3.397866675003785*^9, 3.397866691384036*^9}, 3.397866799856724*^9, {
   3.397866870404738*^9, 3.3978668728874826`*^9}, {3.397866998320249*^9, 
   3.3978670820558863`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLRead Usage", "Subsection"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.397866921264427*^9, 3.397866922106667*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sbmlReadLimitations", " ", "=", " ", 
    RowBox[{"numerizedList", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"\"\<\!\(\*
StyleBox[\"SBMLRead\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)does not perform XML or SBML validation.  If \
invalid SBML or XML is supplied, unexpected results can occur.  In general, \
incorrectly formatted XML will cause \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\)'s \!\(\*
StyleBox[\"Import\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"[\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"..\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"]\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)function to print an error message indicating \
the line number for the first error and then \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\"]\)will terminate.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<\!\(\*
StyleBox[\"SBMLRead\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)is currently only compatible with SBML Level 1 \
(versions 1 and 2) and Level 2 (version 1). Subsequent releases will support \
higher levels.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<In SBML Level 1, all of the mathematical functions (e.g., \!\(\*
StyleBox[\"abs\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\), \!\(\*
StyleBox[\"acos\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\), etc.) are fully supported.  Thus \!\(\*
StyleBox[\"cos\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"(\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"x\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\")\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)becomes\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"Cos\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"[\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"x\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"]\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\), etc.  Predefined rate law functions are \
recognized as functions but are not implemented. Thus,if the function \!\(\*
StyleBox[\"umr\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"(\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"argument\",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"list\",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\")\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)is specified in the SBML,it will be recognized \
as a predefined function and will be expanded in the \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\"]\)model as \!\(\*
StyleBox[\"umr\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"[\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"argument\",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"list\",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"]\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\).  However, unlike the mathematical \
functions,no implementation is provided.Thus if the model contains ths \
functions,the user must supply a \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\)i mplementation for \!\(\*
StyleBox[\"umr\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\),etc.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<By default, all parameters are replaced with their numerical \
values as specified in the model. This can be switched off using the option \
\!\(\*
StyleBox[\"evaluateParameters\",
FontColor->RGBColor[0, 0, 1]]\), in which case \!\(\*
StyleBox[\"SBMLRead\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)will return a list of \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\"]\)replacement rules of the form \!\(\*
StyleBox[\"name\",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"\[Rule]\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"value\",
FontSlant->\"Italic\",
FontColor->RGBColor[0, 0, 1]]\).\>\"", ",", "\[IndentingNewLine]", 
       "\"\<The topological relationship specified by the \!\(\*
StyleBox[\"outside\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)attribute in a compartment definition is \
ignored, although \!\(\*
StyleBox[\"SBMLRead\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)will display the relationship in the verbose \
listing.  If no outside component exists, the \!\(\*
StyleBox[\"Mathematica\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\"]\)variable \!\(\*
StyleBox[\"Indeterminate\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)is displayed.\>\"", ",", 
       "\[IndentingNewLine]", "\"\<The \!\(\*
StyleBox[\"reversible\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)parameter of the \!\(\*
StyleBox[\"reaction\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)type is ignored with the following exception: \
reversible reactions in the list of reactions returned (SBMLReactions) will \
use the double arrow (\[RightArrowLeftArrow]) instead of the single forward \
arrow (\[Rule] or ->, same arrow used for rules).\>\"", ",", " ", 
       "\[IndentingNewLine]", 
       "\"\<In SBML Level 1, Unspecified initial conditions and parameter \
values will be labeled as \!\(\*
StyleBox[\"Indeterminate\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)if they are not specified,and a warning \
message will be printed. Models with \!\(\*
StyleBox[\"Indeterminate\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)parameters and initial conditions will cause \
an error in\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"NDSolve\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\).  To prevent this from happening,the user can \
optionally specify the options \!\(\*
StyleBox[\"defaultParameterValue\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)and \!\(\*
StyleBox[\"defaultIC\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)to set all \!\(\*
StyleBox[\"Indeterminate\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)parameter values and initial conditions.For \
example, \!\(\*
StyleBox[\"defaultParameterValue\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"->\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"1\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)will set all \!\(\*
StyleBox[\"Indeterminate\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)parameters equal to 1. Unspecified units will \
be labeled as \!\(\*
StyleBox[\"Indeterminate\",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontFamily->\"Courier\",
FontColor->RGBColor[0, 0, 1]]\)in the verbose listing,but no association will \
be returned for indeterminate units.\>\"", ",", 
       "\"\<Annotations and notes are ignored.\>\""}], "\[IndentingNewLine]", 
      "}"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sbmlReadOptions", " ", "=", " ", 
    RowBox[{
    "\"\<\\n\\nOptions for SBMLRead are:\\n\>\"", "<>", 
     "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"align\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\\\"Left\\\", alignment of verbose \
output on screen. Any valid values of TextAlignment may be used; since the \
value is passed directly to TextAlignment without error checking invalid \
values will result in the default value of TextAlignment (\\\"Left\\\"). This \
option is ignored unless verbose\[Rule]True.\>\"", "<>", 
     "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"concise\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]False. When  True, overrides whatever \
values are set to verbose, warnings, and stats to set all of them to False. \
This option minimizes the written output.\>\"", "<>", "\[IndentingNewLine]", 
     "\"\<\\n\!\(\*
StyleBox[\"context\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\\\"Automatic\\\" (default), assign all \
global model variables to a context given by the model name; thus variables \
x,y,z in them SBML become modelname`x, modelname`y, modelname`z in the \
Mathematica representation.  Local parameters in reactions will be assigned a \
context modelname`reactionname, i.e., if reaction20 in model foo has a \
parameter k it will be called foo`reaction20`k. \>\"", "<>", 
     "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"context\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]str, where str is any string.  All \
variables will be assigned to the context str` (reaction parameters to \
context str`reactioname`)  instead of modelname`. The terminating \\\"`\\\" \
character is optional.\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"context\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\\\"None\\\", all model variables are \
placed in the Global` context. Be aware that this could be dangerous, as \
symbols in the model could collide with other variables previously defined in \
the Mathematica environment and lead to unexpected results. \>\"", "<>", 
     "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"defaultIC\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]Indeterminate, if reassigned, then all \
unspecified initial conditions will be set to the value of defaultIC.  \
Otherwise they will remain Indeterminate.\>\"", "<>", "\[IndentingNewLine]", 
     "\"\<\\n\!\(\*
StyleBox[\"defaultParameterValue\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]Indeterminate, if reassigned, then all \
unspecified parameter values will be set to the value of defaultIC.  \
Otherwise they will remain Indeterminate.\>\"", "<>", "\[IndentingNewLine]", 
     "\"\<\\n\!\(\*
StyleBox[\"EchoLoad\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]False, if True, a message will be \
printed as each SBML object is loaded into the Model Builder. Ignored unlese \
LoadModelBuilder\[Rule]True\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"evaluateParameters\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]True, immediately evaluate parameters \
in reactions, otherwise return reactions with symbolic parameters.  \>\"", "<>",
      "\[IndentingNewLine]", "\"\<\\nL\!\(\*
StyleBox[\"oadModelBuilder\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]True, loads model into the Model \
Builder.\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"NDSolveOptions\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]{}, options to be passed to NDSolve; \
ignored unless SBMLNumericalSolution\[Rule]n, withing return, as in return\
\[Rule]{SBMLNumericalSolution\[Rule] 25, ...}, where n>0 is a number.\>\"", "<>",
      "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"PlotOptions\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]{} contains a list of options to be \
passed to SBMLPlot, including any options to be passed to Plot.  If this \
option is omitted or a null list, no plot is generated. A warning message \
will be generated if the user does not also request a numerical solution by \
setting SBMLNumericalSolution to a positive value as part of the return \
options.\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"return\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]{SBMLODES\[Rule]True, \
SBMLIC\[Rule]True, SBMLConstants\[Rule]True, SBMLModelVariables\[Rule]True, \
SBMLAlgebraicRules\[Rule]True, SBMLUnitDefinitions\[Rule]True, \
SBMLUnitAssociations\[Rule]True, SBMLReactions\[Rule]True, SBMLFunctions\
\[Rule]True,  SBMLEvents\[Rule]True, SBMLNameIDAssociations\[Rule]True, \
SBMLModelName\[Rule]True, SBMLNumericalSolution\[Rule]0}; this option allows \
the user to control the return value of SBMLRead.  All boolean items are \
returned except for those set to False. A numerical solution is only returned \
if SBMLNumericalSolution evaluates to a positive number. Setting \
return\[Rule]None is equivalent to setting everything to False.\>\"", "<>", 
     "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"shortenODES\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]False, ignored unless \
verbose\[Rule]True and showKineticlaw\[Rule]True. If shortenODES\[Rule]False \
(default), then the entire differential equation will be displayed in the \
verbose listing; if shortenODES\[Rule]True then the Mathematica Short[..] \
version will be used.\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"showKineticLaw\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]True, ignored unless \
verbose\[Rule]True; if showKineticLaw\[Rule]True(default), the SBML kinetic \
law is shown in the reaction-listing of the verbose display; otherwise  the \
kinetic laws are not displayed in the reactions table\>\"", "<>", 
     "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"showReactionParameters\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]True,  ignored unless \
verbose\[Rule]True; if showReactionParameters\[Rule]True(default), the local \
parameters in each reaction are  shown in the reaction-listing of the verbose \
display; otherwise  the local parameters are not displayed in the reactions \
table\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"stats\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]False, print a statistical summary of \
the file\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"underscore\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\\\"\[UnderBracket]\\\", character (or \
string) that is used to replace the underscore (\\\"_\\\") charcter in SBML \
indentifiers.\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"verbose\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]False, if True, print an interpretive \
table of the SBML\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"verbosecontext\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]False, if True, the context (scope) of \
all variables will be indicated in the verbose display. If False, only the \
pure model variable will be indicated. This option will be ignored unless \
verbose\[Rule]True.\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"warnings\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule] True, if False, warning messages will \
be suppressed.\>\""}]}], ";"}], " "}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.397866695183435*^9, 3.397866697072324*^9}, 
   3.397866878792985*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SBMLRead", "::", "usage"}], "=", 
  RowBox[{
  "\"\<SBMLRead[filename, options]\>\"", "<>", "\[IndentingNewLine]", 
   "\"\< returns an option list of the \
form:\\n\\n{\\nSBMLODES\[Rule]{v1'[t]==expression, \
v2'[t]==expression,...},\\nSBMLConstants\[Rule]{k1\[Rule]value,k2\[Rule]value,\
...},\\nSBMLIC\[Rule]{v1[0]==value,v2[0]==value,...},\\nSBMLModelVariables\
\[Rule]{v1[t],v2[2],..},\\nSBMLAlgebraicRules\[Rule]{expression1==0, \
expression2==0, \
...},\\nSBMLUnitDefinitions\[Rule]{unitName1\[Rule]unitDefinition1, unitName2\
\[Rule]unitDefinition2,...},\\nSBMLUnitAssociations\[Rule]{var1\[Rule]units1,\
var2\[Rule]units2,...},\\nSBMLReactions\[Rule]{reaction1, \
reaction2,...},\\nSBMLModelName\[Rule]name,\\nSBMLNameIDAssociations\[Rule]{\
id1\[Rule]name1,id2\[Rule]name2},\\nSBMLFunctions\[Rule]{function1\[Rule]def, \
function2\[Rule]def,...},\\nSBMLEvents\[Rule]{event1def1, \
eventdef2,,..},\\nSBMLNumericalSolution\[Rule]numerical \
solution,\\nSBMLCompartments\[Rule]{c1,c2,...}\\n}\\n\\nwhere v1,v2,... give \
all of the species in the SBML file; c1,c2,... are the compartments in the \
model; the expression gives the derived differential equation for that \
species; value (following SBMLConstants or SBMLIC) is the SBML value of the \
associated parameter or initial condition; unitName1,... are user-defined \
units; unitDefinition1,... are expressions that give the unit definitions in \
terms of pre-defined units; units1,... are the units that correspond to \
variable var1,..., which can be either species, parameter, or compartment; \
reaction1,reaction2,... are the reactions in standard biochemical form \
\!\(\*SubscriptBox[\(\[CapitalSigma]\), \(i\)]\)\!\(\*SubscriptBox[\(R\), \(i\
\)]\)\[Rule]\!\(\*SubscriptBox[\(\[CapitalSigma]\), \
\(j\)]\)\!\(\*SubscriptBox[\(P\), \(j\)]\), where R and P are the reactants \
and products in each reaction.\\nSBMLFunctions, SBMLEvents, and \
SBMLNameIDAssociations only apply for Level 2.\\nEvent definitions have the \
form id\[Rule]{\\\"trigger\\\"\[Rule]expression,\\\"delay\\\"\[Rule]\
expression,\\\"events\\\"\[Rule]{var1\[Rule]exp1,var2\[Rule]exp2,...}} where \
id is the event id (assigned to Event\[UnderBracket]n if not provided); and \
expression, etc., are Mathematica expressions.\\nSBMLFunctions have the form \
{id\[Rule]Function[...], id\[Rule]Function[...],..} where Function[...] gives \
a pure Mathematica Function definition and id is the corresponding SBML id \
for the function. \\nAny portion of the returned option list may be turned \
off with the option return.\\nSBMLNumericalSolution is the output of \
SBMLNDsolve, if a numerical solution is requested.\\n\\nThe intention is that \
this format contains all information necessary to pass the model to NDSolve \
in the following manner:\\n\\n\>\"", "<>", 
   "\"\<r=SBMLRead[filename,options]\\n\>\"", "<>", "\[IndentingNewLine]", 
   "\"\<Apply[NDSolve,{Join[SBMLODES/.r, SBMLIC/.r]/.(SBMLConstants/.r), \
SBMLModelVariables/.r,{t,0,tmax},NDSolveOptions}]\>\"", "<>", 
   "\[IndentingNewLine]", 
   "\"\<\\n\\nwhere NDSolveOptions are any valid options for NDSolve and tmax \
is the duration of the NDSolve Rule.\>\"", "<>", "sbmlReadOptions", "<>", 
   "\[IndentingNewLine]", 
   "\"\<\\n\\nAdditional Notes and Limitations of SBMLRead\>\"", "<>", 
   "sbmlReadLimitations"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"SBMLRead[filename, options] returns an option list of the \
form:\\n\\n{\\nSBMLODES\[Rule]{v1'[t]==expression, \
v2'[t]==expression,...},\\nSBMLConstants\[Rule]{k1\[Rule]value,k2\[Rule]value,\
...},\\nSBMLIC\[Rule]{v1[0]==value,v2[0]==value,...},\\nSBMLModelVariables\
\[Rule]{v1[t],v2[2],..},\\nSBMLAlgebraicRules\[Rule]{expression1==0, \
expression2==0, \
...},\\nSBMLUnitDefinitions\[Rule]{unitName1\[Rule]unitDefinition1, unitName2\
\[Rule]unitDefinition2,...},\\nSBMLUnitAssociations\[Rule]{var1\[Rule]units1,\
var2\[Rule]units2,...},\\nSBMLReactions\[Rule]{reaction1, \
reaction2,...},\\nSBMLModelName\[Rule]name,\\nSBMLNameIDAssociations\[Rule]{\
id1\[Rule]name1,id2\[Rule]name2},\\nSBMLFunctions\[Rule]{function1\[Rule]def, \
function2\[Rule]def,...},\\nSBMLEvents\[Rule]{event1def1, \
eventdef2,,..},\\nSBMLNumericalSolution\[Rule]numerical \
solution,\\nSBMLCompartments\[Rule]{c1,c2,...}\\n}\\n\\nwhere v1,v2,... give \
all of the species in the SBML file; c1,c2,... are the compartments in the \
model; the expression gives the derived differential equation for that \
species; value (following SBMLConstants or SBMLIC) is the SBML value of the \
associated parameter or initial condition; unitName1,... are user-defined \
units; unitDefinition1,... are expressions that give the unit definitions in \
terms of pre-defined units; units1,... are the units that correspond to \
variable var1,..., which can be either species, parameter, or compartment; \
reaction1,reaction2,... are the reactions in standard biochemical form \\!\\(\
\[CapitalSigma]\\_i\\)\\!\\(R\\_i\\)\[Rule]\\!\\(\[CapitalSigma]\\_j\\)\\!\\(\
P\\_j\\), where R and P are the reactants and products in each \
reaction.\\nSBMLFunctions, SBMLEvents, and SBMLNameIDAssociations only apply \
for Level 2.\\nEvent definitions have the form id\[Rule]{\\\"trigger\\\"\
\[Rule]expression,\\\"delay\\\"\[Rule]expression,\\\"events\\\"\[Rule]{var1\
\[Rule]exp1,var2\[Rule]exp2,...}} where id is the event id (assigned to Event\
\[UnderBracket]n if not provided); and expression, etc., are Mathematica \
expressions.\\nSBMLFunctions have the form {id\[Rule]Function[...], \
id\[Rule]Function[...],..} where Function[...] gives a pure Mathematica \
Function definition and id is the corresponding SBML id for the function. \
\\nAny portion of the returned option list may be turned off with the option \
return.\\nSBMLNumericalSolution is the output of SBMLNDsolve, if a numerical \
solution is requested.\\n\\nThe intention is that this format contains all \
information necessary to pass the model to NDSolve in the following \
manner:\\n\\nr=SBMLRead[filename,options]\\nApply[NDSolve,{Join[SBMLODES/.r, \
SBMLIC/.r]/.(SBMLConstants/.r), \
SBMLModelVariables/.r,{t,0,tmax},NDSolveOptions}]\\n\\nwhere NDSolveOptions \
are any valid options for NDSolve and tmax is the duration of the NDSolve \
Rule.\\n\\nOptions for SBMLRead are:\\n\\n\\!\\(\\* \
StyleBox[\\\"align\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\[Rule]\\\"Left\\\", alignment of verbose output on screen. Any valid \
values of TextAlignment may be used; since the value is passed directly to \
TextAlignment without error checking invalid values will result in the \
default value of TextAlignment (\\\"Left\\\"). This option is ignored unless \
verbose\[Rule]True.\\n\\!\\(\\* \
StyleBox[\\\"concise\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]False. \
When  True, overrides whatever values are set to verbose, warnings, and stats \
to set all of them to False. This option minimizes the written \
output.\\n\\!\\(\\* StyleBox[\\\"context\\\",\\nFontColor->RGBColor[0, 0, 1]]\
\\)\[Rule]\\\"Automatic\\\" (default), assign all global model variables to a \
context given by the model name; thus variables x,y,z in them SBML become \
modelname`x, modelname`y, modelname`z in the Mathematica representation.  \
Local parameters in reactions will be assigned a context \
modelname`reactionname, i.e., if reaction20 in model foo has a parameter k it \
will be called foo`reaction20`k. \\n\\!\\(\\* \
StyleBox[\\\"context\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]str, where \
str is any string.  All variables will be assigned to the context str` \
(reaction parameters to context str`reactioname`)  instead of modelname`. The \
terminating \\\"`\\\" character is optional.\\n\\!\\(\\* StyleBox[\\\"context\
\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]\\\"None\\\", all model \
variables are placed in the Global` context. Be aware that this could be \
dangerous, as symbols in the model could collide with other variables \
previously defined in the Mathematica environment and lead to unexpected \
results. \\n\\!\\(\\* StyleBox[\\\"defaultIC\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\[Rule]Indeterminate, if reassigned, then all unspecified initial \
conditions will be set to the value of defaultIC.  Otherwise they will remain \
Indeterminate.\\n\\!\\(\\* \
StyleBox[\\\"defaultParameterValue\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\
\[Rule]Indeterminate, if reassigned, then all unspecified parameter values \
will be set to the value of defaultIC.  Otherwise they will remain \
Indeterminate.\\n\\!\\(\\* \
StyleBox[\\\"EchoLoad\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]False, if \
True, a message will be printed as each SBML object is loaded into the Model \
Builder. Ignored unlese LoadModelBuilder\[Rule]True\\n\\!\\(\\* \
StyleBox[\\\"evaluateParameters\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\[Rule]True, immediately evaluate parameters in reactions, otherwise \
return reactions with symbolic parameters.  \\nL\\!\\(\\* \
StyleBox[\\\"oadModelBuilder\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\[Rule]True, loads model into the Model Builder.\\n\\!\\(\\* \
StyleBox[\\\"NDSolveOptions\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]{}, \
options to be passed to NDSolve; ignored unless \
SBMLNumericalSolution\[Rule]n, withing return, as in \
return\[Rule]{SBMLNumericalSolution\[Rule] 25, ...}, where n>0 is a \
number.\\n\\!\\(\\* StyleBox[\\\"PlotOptions\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\[Rule]{} contains a list of options to be passed to SBMLPlot, \
including any options to be passed to Plot.  If this option is omitted or a \
null list, no plot is generated. A warning message will be generated if the \
user does not also request a numerical solution by setting \
SBMLNumericalSolution to a positive value as part of the return \
options.\\n\\!\\(\\* StyleBox[\\\"return\\\",\\nFontColor->RGBColor[0, 0, 1]]\
\\)\[Rule]{SBMLODES\[Rule]True, SBMLIC\[Rule]True, SBMLConstants\[Rule]True, \
SBMLModelVariables\[Rule]True, SBMLAlgebraicRules\[Rule]True, \
SBMLUnitDefinitions\[Rule]True, SBMLUnitAssociations\[Rule]True, \
SBMLReactions\[Rule]True, SBMLFunctions\[Rule]True,  SBMLEvents\[Rule]True, \
SBMLNameIDAssociations\[Rule]True, SBMLModelName\[Rule]True, \
SBMLNumericalSolution\[Rule]0}; this option allows the user to control the \
return value of SBMLRead.  All boolean items are returned except for those \
set to False. A numerical solution is only returned if SBMLNumericalSolution \
evaluates to a positive number. Setting return\[Rule]None is equivalent to \
setting everything to False.\\n\\!\\(\\* \
StyleBox[\\\"shortenODES\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]False, \
ignored unless verbose\[Rule]True and showKineticlaw\[Rule]True. If \
shortenODES\[Rule]False (default), then the entire differential equation will \
be displayed in the verbose listing; if shortenODES\[Rule]True then the \
Mathematica Short[..] version will be used.\\n\\!\\(\\* \
StyleBox[\\\"showKineticLaw\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\[Rule]True, ignored unless verbose\[Rule]True; if \
showKineticLaw\[Rule]True(default), the SBML kinetic law is shown in the \
reaction-listing of the verbose display; otherwise  the kinetic laws are not \
displayed in the reactions table\\n\\!\\(\\* \
StyleBox[\\\"showReactionParameters\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\
\[Rule]True,  ignored unless verbose\[Rule]True; if showReactionParameters\
\[Rule]True(default), the local parameters in each reaction are  shown in the \
reaction-listing of the verbose display; otherwise  the local parameters are \
not displayed in the reactions table\\n\\!\\(\\* \
StyleBox[\\\"stats\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]False, print \
a statistical summary of the file\\n\\!\\(\\* \
StyleBox[\\\"underscore\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]\\\"\
\[UnderBracket]\\\", character (or string) that is used to replace the \
underscore (\\\"_\\\") charcter in SBML indentifiers.\\n\\!\\(\\* StyleBox[\\\
\"verbose\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule]False, if True, print \
an interpretive table of the SBML\\n\\!\\(\\* \
StyleBox[\\\"verbosecontext\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\[Rule]False, if True, the context (scope) of all variables will be \
indicated in the verbose display. If False, only the pure model variable will \
be indicated. This option will be ignored unless verbose\[Rule]True.\\n\\!\\(\
\\* StyleBox[\\\"warnings\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\[Rule] \
True, if False, warning messages will be suppressed.\\n\\nAdditional Notes \
and Limitations of SBMLRead\\n\\n(1) \\!\\(\\* \
StyleBox[\\\"SBMLRead\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)does \
not perform XML or SBML validation.  If invalid SBML or XML is supplied, \
unexpected results can occur.  In general, incorrectly formatted XML will \
cause \\!\\(\\* \
StyleBox[\\\"Mathematica\\\",\\nFontSlant->\\\"Italic\\\"]\\)'s \\!\\(\\* \
StyleBox[\\\"Import\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[\
0, 0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"[\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"..\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"]\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)function to print an error message indicating the line number for the \
first error and then \\!\\(\\* \
StyleBox[\\\"Mathematica\\\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\* \
StyleBox[\\\" \\\",\\nFontSlant->\\\"Italic\\\"]\\)will terminate.\\n\\n(2) \
\\!\\(\\* \
StyleBox[\\\"SBMLRead\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)is \
currently only compatible with SBML Level 1 (versions 1 and 2) and Level 2 \
(version 1). Subsequent releases will support higher levels.\\n\\n(3) In SBML \
Level 1, all of the mathematical functions (e.g., \\!\\(\\* \
StyleBox[\\\"abs\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\), \\!\\(\\* \
StyleBox[\\\"acos\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0,\
 0, 1]]\\), etc.) are fully supported.  Thus \\!\\(\\* \
StyleBox[\\\"cos\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"(\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"x\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\")\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)becomes\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\
\\* StyleBox[\\\"Cos\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"[\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"x\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"]\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\), etc.  Predefined rate law functions are recognized as functions \
but are not implemented. Thus,if the function \\!\\(\\* StyleBox[\\\"umr\\\",\
\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"(\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"argument\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[\
0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\\!\\(\\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\")\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)is \
specified in the SBML,it will be recognized as a predefined function and will \
be expanded in the \\!\\(\\* \
StyleBox[\\\"Mathematica\\\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\* \
StyleBox[\\\" \\\",\\nFontSlant->\\\"Italic\\\"]\\)model as \\!\\(\\* \
StyleBox[\\\"umr\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"[\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"argument\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[\
0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\\!\\(\\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"]\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\).  However, unlike the mathematical functions,no implementation is \
provided.Thus if the model contains ths functions,the user must supply a \
\\!\\(\\* StyleBox[\\\"Mathematica\\\",\\nFontSlant->\\\"Italic\\\"]\\)i \
mplementation for \\!\\(\\* StyleBox[\\\"umr\\\",\\nFontFamily->\\\"Courier\\\
\",\\nFontColor->RGBColor[0, 0, 1]]\\),etc.\\n\\n(4) By default, all \
parameters are replaced with their numerical values as specified in the \
model. This can be switched off using the option \\!\\(\\* \
StyleBox[\\\"evaluateParameters\\\",\\nFontColor->RGBColor[0, 0, 1]]\\), in \
which case \\!\\(\\* \
StyleBox[\\\"SBMLRead\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)will \
return a list of \\!\\(\\* \
StyleBox[\\\"Mathematica\\\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\* \
StyleBox[\\\" \\\",\\nFontSlant->\\\"Italic\\\"]\\)replacement rules of the \
form \\!\\(\\* \
StyleBox[\\\"name\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* StyleBox[\\\"\[Rule]\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\\!\\(\\* StyleBox[\\\" \\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\\!\\(\\* \
StyleBox[\\\"value\\\",\\nFontSlant->\\\"Italic\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\).\\n\\n(5) The topological relationship specified by the \\!\\(\\* \
StyleBox[\\\"outside\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)attribute in a compartment definition is ignored, although \\!\\(\\* \
StyleBox[\\\"SBMLRead\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)will \
display the relationship in the verbose listing.  If no outside component \
exists, the \\!\\(\\* StyleBox[\\\"Mathematica\\\",\\nFontSlant->\\\"Italic\\\
\"]\\)\\!\\(\\* StyleBox[\\\" \\\",\\nFontSlant->\\\"Italic\\\"]\\)variable \
\\!\\(\\* \
StyleBox[\\\"Indeterminate\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)is \
displayed.\\n\\n(6) The \\!\\(\\* StyleBox[\\\"reversible\\\",\\nFontFamily->\
\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \\\
\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)parameter of the \\!\\(\\* \
StyleBox[\\\"reaction\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)type \
is ignored with the following exception: reversible reactions in the list of \
reactions returned (SBMLReactions) will use the double arrow (\
\[RightArrowLeftArrow]) instead of the single forward arrow (\[Rule] or ->, \
same arrow used for rules).\\n\\n(7) In SBML Level 1, Unspecified initial \
conditions and parameter values will be labeled as \\!\\(\\* \
StyleBox[\\\"Indeterminate\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)if \
they are not specified,and a warning message will be printed. Models with \\!\
\\(\\* StyleBox[\\\"Indeterminate\\\",\\nFontFamily->\\\"Courier\\\",\\\
nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \\\",\\nFontFamily->\
\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)parameters and initial \
conditions will cause an error in\\!\\(\\* StyleBox[\\\" \\\",\\nFontFamily->\
\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"NDSolve\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\).  To prevent this from happening,the user can \
optionally specify the options \\!\\(\\* StyleBox[\\\"defaultParameterValue\\\
\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)and \
\\!\\(\\* \
StyleBox[\\\"defaultIC\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)to set \
all \\!\\(\\* \
StyleBox[\\\"Indeterminate\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)parameter values and initial conditions.For example, \\!\\(\\* \
StyleBox[\\\"defaultParameterValue\\\",\\nFontFamily->\\\"Courier\\\",\\\
nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\\* \
StyleBox[\\\"->\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, \
0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\
\\* StyleBox[\\\"1\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[\
0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)will \
set all \\!\\(\\* StyleBox[\\\"Indeterminate\\\",\\nFontFamily->\\\"Courier\\\
\",\\nFontColor->RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, \
1]]\\)parameters equal to 1. Unspecified units will be labeled as \\!\\(\\* \
StyleBox[\\\"Indeterminate\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->\
RGBColor[0, 0, 1]]\\)\\!\\(\\* StyleBox[\\\" \
\\\",\\nFontFamily->\\\"Courier\\\",\\nFontColor->RGBColor[0, 0, 1]]\\)in the \
verbose listing,but no association will be returned for indeterminate \
units.\\n\\n(8) Annotations and notes are ignored.\"\>"], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["textODES usage", "Subsection",
 CellChangeTimes->{{3.3927411641911907`*^9, 3.392741168124852*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"textODES", "::", "usage"}], "=", 
  "\"\<textODES[model] returns the differential equations in a model as a \
list of strings that can be copied to a text file.\\ntextODES[model,filename] \
writes the result to filename.\\nmodel Should be the output of SBMLRead or \
loadSimulator.\>\""}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.392740361421677*^9, 3.392740390262582*^9}, {
  3.392740773697343*^9, 3.3927408047725286`*^9}, {3.392741130929758*^9, 
  3.392741159337181*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLNDSolve Usage", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SBMLNDSolve", "::", "usage"}], "=", 
   RowBox[{
   "\"\<SBMLNDSolve[model, tmax,options]\>\"", "<>", "\[IndentingNewLine]", 
    "\"\< evaluates NDSolve on an SBML model, where model is the ouptput of \
SBMLRead, tmax is the duration of the NDSolve run, and options are any valid \
options for NDSolve.\\n\\nAdditional Notes and Limitations:\>\"", "<>", 
    RowBox[{"numerizedList", "[", 
     RowBox[{"{", " ", 
      RowBox[{"\"\<units are ignored by \!\(\*
StyleBox[\"SBMLNDSolve\",
FontColor->RGBColor[0, 0, 1]]\)\>\"", ",", "\[IndentingNewLine]", 
       "\"\<The inclusion of algebraic constraints (rules) along with \
differential equations to produce a system of Differential-Algebraic \
Equations requires Mathematica Version \[GreaterEqual] 5.0; version checking \
is performed dynamically.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<If the model does not contain any events then the return value of \
SBMLNDSolve is identical to the corresponding return value from NDSolve, \
notably, a list of InterpolatingFunctions's\>\"", ",", "\[IndentingNewLine]", 
       "\"\<If the model does contain events, a list of InterpolationSet's is \
returned\>\"", ",", "\[IndentingNewLine]", 
       "\"\<At the present time delay and timeUnits fields in events are not \
supported by SBMLNDSolve. It is anticipated that this functionality will be \
added in a later version.\>\""}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3978667083112803`*^9, 3.397866710090539*^9}, 
   3.39786687884546*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["dataTable", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dataTable", "::", "usage"}], "=", 
   "\"\<dataTable[variable,{t, t1, t2, dt}, solution, options] returns a \
table of data values for a given variable or set of variables from a solution \
set at times t=t1, t1+dt, t1+2dt,...,[t2]; a point at t2 will only be in the \
data if (t2-t1)/dt is an integer.\\nsolution is the output of \
SBMLNDSolve\\nvariable is the name of the variable, or a list of variables to \
be tabulated\\nExample:\\ncvsTable[{A,B,C},{t,0,1, 0.2}, r]\\nwill list the \
variables A, B and C from the solution r\\n\\nOptions:\\nfile\[Rule]output \
file name; write the output to the specified file instead of the screen. If \
the file already exists, an similar file name is used.\\nformat\[Rule]output \
format to use. Allowed values are:\\n\\\"CSV\\\", comma separated values\\n\\\
\"HDF\\\",heirarchical data format (column headers deleted)\\n\\\"LIST\\\",a \
text file containing Mathematica lists\\n \\\"MAT\\\", MAT matrix file format \
(column headers deleted)\\n\\\"NB\\\",as a Mathematica \
Notebook\\n\\\"TSV\\\",tab separated values\\n\\\"TABLE\\\",white-space \
separated values.\\n\>\""}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["conservation/link matrix", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"conservationMatrix", "::", "usage"}], "=", 
   "\"\<conservationMatrix[s] returns the conservation matrix, given the \
stoichiometry matrix s.\>\""}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLPlot, SBMLGridPlot, Usage", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SBMLPlot", "::", "usage"}], "=", 
   RowBox[{
   "\"\<SBMLPlot[solution, {var1, var2,...}, {tbegin, tend}, options] plots \
the results of a simulation.\\nsolution is either the output of SBMLNDSolve \
or the output of an SBMLRead run with numerical solution enabled.\\nThe \
variables named var1, var2,.. are plotted from t=tbegin to t=tend on a single \
plot. The context of the variable name must be specified, i.e., if the model \
identifier is foo, to plot variables A and C only but not any other variable, \
one would invoke SBMLPlot[solution, {foo`A,foo`C}, {tbegin,tend}].\\n\>\"", "<>",
     "\[IndentingNewLine]", 
    "\"\<SBMLPlot[solution,{tbegin,tend}, options] plots all variables in the \
solution set for the specified time range.\\n\>\"", "<>", 
    "\[IndentingNewLine]", 
    "\"\<SBMLPlot[solution,variable,options] and \
\\nSBMLPlot[solution,variable,{tbegin,tend},options], where the context of \
the variable is omitted, will Plot a single variable in the solution.\\n\>\"",
     "<>", "\[IndentingNewLine]", 
    "\"\<SBMLPlot[solution,options] plots all variables for the entire \
duration of the run.\\n\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<SBMLPLot[InterpolationSet[..], arguments] where any of the above \
formats for the arguments following solution is valid\\n\>\"", "<>", 
    "\"\<SBMLPlot[{InterpolationSet[..],InterpolationSet[...],...}] plots the \
solution of all variables across a set of sequential InterpolationSet's \
produced by SBMLNDSolve\\n \>\"", "<>", 
    "\"\<\\nAny valid option for Plot may be used.\\n\\n\!\(\*
StyleBox[\"Additional\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"options\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\":\",
FontVariations->{\"Underline\"->True}]\)\\n\>\"", "<>", 
    "\[IndentingNewLine]", 
    "\"\<variables\[Rule] var or {var1, var2, ...} or \\\"All\\\"; gives the \
names of the variables to be plotted. If this option is omitted all variables \
are plotted. The context of the variable name must be specified, i.e., if the \
model identifier is foo, to plot variables A and C only but not any other \
variable, one would specify variables\[Rule]{foo`A,foo`C}. If any of the \
variable names is All then all variables will be plotted. Note: This option \
is only available in SBMLPlot[solution,options] form. \\n\>\"", "<>", 
    "\"\<holdLegend->False, if True, don't print the legend.\\n\>\"", "<>", 
    "\"\<PlotStyles->{styles1,styles2,...} where each of styles1,styles2,... \
is a list of styles (values for PlotStyle) for variable1, variable2,...,e.g., \
SBMLPlot[...,PlotStyles-> {{Green},{Blue,Dashing[{.02}]}},...] will plot the \
first variable as a solid green line, and the second variable as a dashed \
blue line. The length of the list given to PlotStyles must be the same as the \
number of variables being plotted.\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<\\ntype\[Rule]\\\"Log\\\", if specified, the y-axis is logarithmic. \
\>\""}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SBMLGridPlot", "::", "usage"}], "=", 
   "\"\<SBMLGridPlot[solution,options]\\nSBMLGridPlot[Solution,{var1,var2,...}\
,options]\\nSBMLGridPlot[solution,variable,{tbegin,tend},options]\\nThese \
functions will plot each specified variable (or the entire solution set) for \
the specified times (or the entire time span) on a separate graph, with the \
top of the graph labeled with the variable name. The plots will be arranged \
on a grid with three plots per line. The context of the variables should not \
be included in the list of variable names. \\nOptions include:\\ncolumns->3, \
number of plots per line\\nAny valid option for Plot may also be used.\>\""}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SBMLListPlot", "::", "usage"}], "=", 
  "\"\<\[IndentingNewLine]SBMLListPlot[vars,{t,tmin,tmax, dt}, sol, opt] \
interpolates the output of SBMLNDSolve (with or without events) and generates \
a plot using Mathematica's ListPlot function rather than Plot.\\nvars is a \
list of variables.\\nt is the time variable\\ntmin is the lower plot \
limit\\ntmax is the upper plot limit\\ndt is the interpolation interval\\nsol \
is the the output of SBMLNDSolve\\nopt is a sequence of options that may \
contain any valid options for ListPlot or Graphics. Since the default option \
of ListPlot is PlotJoined->False, the points will not be connected with a \
line unless PlotJoined->True.\\nEach variable will be plotted a different \
color.\\nIn the present version no legend is printed.\>\""}]}], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"\[IndentingNewLine]SBMLListPlot[vars,{t,tmin,tmax, dt}, \
sol, opt] interpolates the output of SBMLNDSolve (with or without events) and \
generates a plot using Mathematica's ListPlot function rather than \
Plot.\\nvars is a list of variables.\\nt is the time variable\\ntmin is the \
lower plot limit\\ntmax is the upper plot limit\\ndt is the interpolation \
interval\\nsol is the the output of SBMLNDSolve\\nopt is a sequence of \
options that may contain any valid options for ListPlot or Graphics. Since \
the default option of ListPlot is PlotJoined->False, the points will not be \
connected with a line unless PlotJoined->True.\\nEach variable will be \
plotted a different color.\\nIn the present version no legend is \
printed.\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLWrite Usage", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SBMLWrite", "::", "usage"}], "=", 
   RowBox[{
   "\"\<SBMLWrite[optons] will write a model in a specified format as \
determined by the options. \\n\\nOptions are:\\n\>\"", "<>", 
    "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"inputfile\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\!\(\*
StyleBox[\"string\",
FontSlant->\"Italic\"]\), name of SBML file that is to be converted (read).An \
inputfile is required. \>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"output\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"file\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\!\(\*
StyleBox[\"string\",
FontSlant->\"Italic\"]\), name of file that output is written to. If not \
specified, the output is written to the screen\>\"", "<>", 
    "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"format\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\!\(\*
StyleBox[\"string\",
FontSlant->\"Italic\"]\), type of output to produce. If no format is \
specified or an invalid format is specified the original model will be \
returned. Valid formats are:\\\"BerkeleyMadonna\\\", \\\"Fortran\\\", \
\\\"HTML\\\", \\\"XPP\\\" (the value of format is case-insensitve). It is \
anticipated that other formats will be added in future releases.\>\"", "<>", 
    "\[IndentingNewLine]", 
    "\"\<\\nThere are additional options for some formats.\\n\>\"", "<>", 
    "\[IndentingNewLine]", "\"\<\\n\!\(\*
StyleBox[\"Notes\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"for\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"BerkeleyMadonma\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"format\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\":\",
FontColor->RGBColor[0, 0, 1]]\)\>\"", "<>", "\[IndentingNewLine]", 
    RowBox[{"numerizedList", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<The following additional options are available:DT, \
METHOD,STARTIME, STOPTIME. These correspond to the values of the Berkeley \
Madonna control variables by the same name.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<The output is a text file that contains text that can be pasted \
into a Berkeley Madonna Equation window. It is not a \\\"clickable\\\" \
Berkeley Madonna input file, which does not have text format.\>\"", ",", 
       "\[IndentingNewLine]", 
       "\"\<All reactions are translated into differential equations and \
combined with rules, in the same manner that this is normally performed by \
SBMLRead. Only the resulting differential equations are written to the output \
file, and not the reactions.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<Events and units are not processed in the current version.\>\"", 
       ",", "\"\<Parameters or initial conditions that are not set in the \
model will be assigned a value of zero in the Berkeley Madonna file.\>\""}], 
      "}"}], "]"}], "<>", "\[IndentingNewLine]", "\"\<\\n\\n\!\(\*
StyleBox[\"Notes\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"for\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"XPP\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"format\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\":\",
FontColor->RGBColor[0, 0, 1]]\)\>\"", "<>", 
    RowBox[{"numerizedList", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<XPP implmentation is limited to ODEs, parameters, and intial \
condtions. It is anticipated that more complex forms will be allowed in \
future release of MathSBML.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<SBML functions are not implemented in XPP files. Instead, they \
are instantiated in place.\>\"", ",", 
       "\"\<By default, assignment rules are not instantiated before \
evaluation. To force evaluate of assignment rules, use the option \
evaluateParameters\[Rule]True. This will also force evaluation of all \
parameters.\>\"", ",", 
       "\"\<SBML events are not implemented in XPP files.\>\"", ",", 
       "\"\<Parameters or initial conditions that are not set in the model \
will be assigned a value of Indeterminate in the XPP file, which is not a \
valid XPP value.\>\""}], "}"}], "]"}], "<>", "\"\<\\n\\n\!\(\*
StyleBox[\"Notes\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"for\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"Fortran\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"Format\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\":\",
FontColor->RGBColor[0, 0, 1]]\)\>\"", "<>", 
    RowBox[{"numerizedList", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Fortran format is developmental\>\"", ",", " ", 
       "\[IndentingNewLine]", 
       "\"\<The output file will contain the three subroutines res, addp, and \
jac required by lsodi\>\"", ",", " ", 
       "\"\<Documentation of lsodi can be found at \
http://netlib.org/alliant/ode/prog/lsodi.f\>\"", ",", 
       "\"\<The output file will also contain a subroutine init that sets the \
initial condition.\>\"", ",", "\[IndentingNewLine]", 
       "\"\<The output file also contains two modules for each event in the \
file, a logical function trigger_\!\(\*
StyleBox[\"<\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"event\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\">\",
FontSlant->\"Italic\"]\) that returns the boolean value of the event's \
trigger given the values of all the system's state variables, and a \
subroutine activate_\!\(\*
StyleBox[\"<\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"event\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\">\",
FontSlant->\"Italic\"]\) that modifies the system's state variables as per \
the event.\>\"", ",", 
       "\"\<The user is expected implement his/her own driver software that \
utilizes the event files and calls lsodi or some other solver as required. An \
example (without events) is provided in the lsodi documentation.\>\"", ",", 
       "\"\<Because lsodi does not directly support events, if the model \
contains events the user will need to write wrappers for the subroutines \
provided that make them compatible with his/her chosen solver.\>\"", ",", 
       "\[IndentingNewLine]", 
       "\"\<Parameters in the model such as foo`k and foo`r1`k will become \
fooxk and fooxr1xk\>\""}], "}"}], "]"}], "<>", "\"\<\\n\\n\!\(\*
StyleBox[\"Notes\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"on\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"HTML\",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\" \",
FontColor->RGBColor[0, 0, 1]]\)\!\(\*
StyleBox[\"Format\",
FontColor->RGBColor[0, 0, 1]]\)\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<\\nThe following addtional options is available:\>\"", "<>", 
    "\"\<\\n\!\(\*
StyleBox[\"stylesheet\",
FontColor->RGBColor[0, 0, 1]]\)\[Rule]\!\(\*
StyleBox[\"string\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"(\",
FontSlant->\"Plain\"]\)\!\(\*
StyleBox[\"only\",
FontSlant->\"Plain\"]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Plain\"]\)\!\(\*
StyleBox[\"when\",
FontSlant->\"Plain\"]\)\!\(\*
StyleBox[\" \",
FontSlant->\"Plain\"]\)\!\(\*
StyleBox[\"format\",
FontSlant->\"Plain\"]\)\[Rule]\\\"HTML\\\"),Name of style sheet to reference \
for HTML output.\\nstylesheet\[Rule]\\\"none\\\" do not include styles and do \
not refer to a style sheet\\nstylesheet\[Rule]\\\"inline\\\" (default) means \
include the contents of a default style sheet within the file itself rather \
than referring to an external style sheet.\\n\>\"", "<>", 
    "\"\<The following styles are used and may be defined by the user in the \
user-defined style sheet: \>\"", "<>", 
    "\"\<body,div,td.sbml-tag-title, \
td.sbml-model-notes,td.sbml-column-data,td.sbml-column-head, \
table.sbml-table,p.file-information, span.file-information-label. See the \
examples on the mathsbml web page for more details.\>\""}]}], ";"}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.397866716190542*^9, 3.397866736487173*^9}, {
  3.397866878875149*^9, 3.3978668789467983`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLCopy Usage", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SBMLCopy", "::", "usage"}], "=", 
    "\"\<SBMLCopy[input, output, options] makes a copy of an SBML file to \
another SBML file, filtering the file through Mathematica's XML support to \
pretty-print the output in a more readable form.  The content of the XML is \
unchanged, but the formatting/indentation is standardized. The names of the \
file must be specified as strings.\\nIf the output file already exists the \
output will be displayed on the screen. When checking for a pre-existing \
output file, the comparison is case-insensitive.\\nSBMLCopy[input] will write \
the output to the screen instead of to a file.\\n\\n\!\(\*
StyleBox[\"Options\",
FontVariations->{\"Underline\"->True}]\):\\nExportOptions\[Rule]option \
list\\nImportOptions\[Rule]option list\\n\\n\!\(\*
StyleBox[\"Example\",
FontVariations->{\"Underline\"->True}]\):SBMLCopy[\\\"myfile.xml\\\", \
\\\"yourfile.xml\\\", ImportOptions\[Rule]{CharacterEncoding\[Rule] \
\\\"UTF8\\\", ExportOptions\[Rule]{CharacterEncoding-> \
\\\"PrintableASCII\\\"}]\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportOptions", "::", "usage"}], "=", 
   "\"\<ImportOptions is an option for SBMLCopy, specifying a list of options \
that should be passed to Import\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportOptions", "::", "usage"}], "=", 
   "\"\<ExportOptions is an option for SBMLCopy, specifying a list of options \
that should be passed to Export\>\""}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["predefined Rate Laws for Level 1", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mass", "::", "usage"}], "=", 
   "\"\<mass[\!\(\*SubscriptBox[\(S\), \(1\)]\),\!\(\*SubscriptBox[\(S\), \(2\
\)]\),...,\!\(\*SubscriptBox[\(S\), \(n\)]\),k] is a predefined rate law for \
Irreversible Mass Action Kinetics that returns a velocity \
v=k*\!\(\*SubscriptBox[\(S\), \(1\)]\)*\!\(\*SubscriptBox[\(S\), \
\(2\)]\)*\!\(\*SubscriptBox[\(S\), \(3\)]\)\!\(\*SubscriptBox[\(\
\[CenterEllipsis]S\), \(n\)]\);\\nmass[k] returns v=k; \\nmass[] returns v=1.\
\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"uui", "::", "usage"}], "=", 
     "\"\<uui[S,\!\(\*SubscriptBox[\(V\), \(m\)]\),\!\(\*SubscriptBox[\(K\), \
\(m\)]\)] is  is a predefined rate law for Irreversible Simple \
Michaelis-Mentin Kinetics that returns a velocity \
v=\!\(\*FractionBox[\(\*SubscriptBox[\(V\), \(m\)]*S\), \
\(\*SubscriptBox[\(K\), \(m\)] + S\)]\).\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"uur", "::", "usage"}], "=", 
    "\"\<uur[S,P,\!\(\*SubscriptBox[\(V\), \(f\)]\),\!\(\*SubscriptBox[\(V\), \
\(r\)]\),\!\(\*SubscriptBox[\(K\), \(ms\)]\),\!\(\*SubscriptBox[\(K\), \
\(mp\)]\)] is a predefined rate law for Uni-Uni Reversible Simple \
Michaelis-Menten Kinetics that returns a velocity \
v=\!\(\*FractionBox[\(SubscriptBox[V, f] \((S/\*SubscriptBox[\(K\), \
\(ms\)])\) - SubscriptBox[V, r] \((P/\*SubscriptBox[\(K\), \(mp\)])\)\), \(1 \
+ \((P/\*SubscriptBox[\(K\), \(mp\)])\) + \((S/\*SubscriptBox[\(K\), \(ms\)])\
\)\)]\).\>\""}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uur[S,P,\\!\\(V\\_f\\),\\!\\(V\\_r\\),\\!\\(K\\_ms\\),\\!\\(\
K\\_mp\\)] is a predefined rate law for Uni-Uni Reversible Simple \
Michaelis-Menten Kinetics that returns a velocity v=\\!\\(\\(\\(V\\_f\\) \
\\((S/K\\_ms)\\) - \\(V\\_r\\) \\((P/K\\_mp)\\)\\)\\/\\(1 + \\((P/K\\_mp)\\) \
+ \\((S/K\\_ms)\\)\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uuhr", "::", "usage"}], "=", 
  "\"\<uuhr[S,P,\!\(\*SubscriptBox[\(V\), \(f\)]\),\!\(\*SubscriptBox[\(K\), \
\(m1\)]\),\!\(\*SubscriptBox[\(K\), \(m2\)]\),\!\(\*SubscriptBox[\(K\), \
\(eq\)]\)] is a predefined rate law for Uni-Uni Reversible Simple \
Michaelis-Menten Kinetics with Haldane Adjustment. The rate law returned is \
v=\!\(\*FractionBox[\(\((\*SubscriptBox[\(V\), \(f\)]/m1)\) \((S - \
P/\*SubscriptBox[\(K\), \(eq\)])\)\), \(1 + S/m1 + P/\*SubscriptBox[\(K\), \
\(m2\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uuhr[S,P,\\!\\(V\\_f\\),\\!\\(K\\_m1\\),\\!\\(K\\_m2\\),\\!\
\\(K\\_eq\\)] is a predefined rate law for Uni-Uni Reversible Simple \
Michaelis-Menten Kinetics with Haldane Adjustment. The rate law returned is \
v=\\!\\(\\(\\((V\\_f/m1)\\) \\((S - P/K\\_eq)\\)\\)\\/\\(1 + S/m1 + \
P/K\\_m2\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"isouur", "::", "usage"}], "=", 
  "\"\<isouur[S, P, \!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(K\), \(ms\)]\), \!\(\*SubscriptBox[\(K\), \(mp\)]\), \
\!\(\*SubscriptBox[\(K\), \(ii\)]\), \!\(\*SubscriptBox[\(K\), \(eq\)]\)]is a \
predefined rate law for Iso Uni-Uni kinetics. The rate law returned is  \
\!\(\*FractionBox[\(SubscriptBox[V, f] \((S - P/\*SubscriptBox[\(K\), \
\(eq\)])\)\), \((S \((1 + P/\*SubscriptBox[\(K\), \(ii\)])\) + \
SubscriptBox[K, ms] \((1 + P/\*SubscriptBox[\(K\), \(mp\)])\))\)]\).\>\""}]], \
"Input",
 InitializationCell->True],

Cell[BoxData["\<\"isouur[S, P, \\!\\(V\\_f\\), \\!\\(K\\_ms\\), \
\\!\\(K\\_mp\\), \\!\\(K\\_ii\\), \\!\\(K\\_eq\\)]is a predefined rate law \
for Iso Uni-Uni kinetics. The rate law returned is  \\!\\(\\(\\(V\\_f\\) \
\\((S - P/K\\_eq)\\)\\)\\/\\((S \\((1 + P/K\\_ii)\\) + \\(K\\_ms\\) \\((1 + \
P/K\\_mp)\\))\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"hilli", "::", "usage"}], "=", 
  "\"\<hilli[S, V, K,h] is a predefined rate law for Hill Kinetics. The rate \
law returned is v= \!\(\*FractionBox[\(V*\*SuperscriptBox[\(S\), \(h\)]\), \(\
\*SuperscriptBox[\(K\), \(h\)] + \*SuperscriptBox[\(S\), \
\(h\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"hilli[S, V, K,h] is a predefined rate law for Hill \
Kinetics. The rate law returned is v= \\!\\(\\(V*S\\^h\\)\\/\\(K\\^h + \
S\\^h\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"hillr", "::", "usage"}], "=", 
  "\"\<hillr[S, P,\!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(S\), \(half\)]\),\!\(\*SubscriptBox[\(P\), \
\(half\)]\),h, \!\(\*SubscriptBox[\(K\), \(eq\)]\)] is a predefined rate law \
for reversible Hill kinetics.  The rate law is \!\(\*FractionBox[\(S\\\ \((1 \
- \*FractionBox[\(P\), \(S\\\ \*SubscriptBox[\(K\), \(eq\)]\)])\)\\\ \
\*SuperscriptBox[\((\*FractionBox[\(P\), SubscriptBox[\(P\), \(half\)]] + \
\*FractionBox[\(S\), SubscriptBox[\(S\), \(half\)]])\), \(\(-1\) + h\)]\\\ \
\*SubscriptBox[\(V\), \(f\)]\), \(\((1 + \
\*SuperscriptBox[\((\*FractionBox[\(P\), SubscriptBox[\(P\), \(half\)]] + \
\*FractionBox[\(S\), SubscriptBox[\(S\), \(half\)]])\), \(h\)])\)\\\ \
\*SubscriptBox[\(S\), \(half\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"hillr[S, P,\\!\\(V\\_f\\), \\!\\(S\\_half\\),\\!\\(P\\_half\
\\),h, \\!\\(K\\_eq\\)] is a predefined rate law for reversible Hill \
kinetics.  The rate law is \\!\\(\\(S\\\\ \\((1 - P\\/\\(S\\\\ \
K\\_eq\\))\\)\\\\ \\((P\\/P\\_half + S\\/S\\_half)\\)\\^\\(\\(-1\\) + \
h\\)\\\\ V\\_f\\)\\/\\(\\((1 + \\((P\\/P\\_half + \
S\\/S\\_half)\\)\\^h)\\)\\\\ S\\_half\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"hillmr", "::", "usage"}], "=", 
  "\"\<hillmr[S, P, M, \!\(\*SubscriptBox[\(S\), \(0.5\)]\), \
\!\(\*SubscriptBox[\(P\), \(0.5\)]\), \!\(\*SubscriptBox[\(M\), \(0.5\)]\), \
Vf, Keq, h, \[Alpha]] is a predefined rate law for reversible Hill kinetics \
with one modifier. The rate law is \!\(\*FractionBox[\(S\\\ \((1 - \
\*FractionBox[\(P\), \(S\\\ \*SubscriptBox[\(K\), \(eq\)]\)])\)\\\ \
\*SuperscriptBox[\((\*FractionBox[\(P\), SubscriptBox[\(P\), \(0.5\)]] + \
\*FractionBox[\(S\), SubscriptBox[\(S\), \(0.5\)]])\), \(\(-1\) + h\)]\\\ \
\*SubscriptBox[\(V\), \(f\)]\), \(\((\*SubscriptBox[\(K\), \(1\)] + \
\*SubscriptBox[\(K\), \(2\)])\)\\\ \*SubscriptBox[\(S\), \(0.5`\)]\)]\) where \
\!\(\*SubscriptBox[\(K\), \(1\)]\)=(\!\(\*FractionBox[\(P\), SubscriptBox[\(P\
\), \(0.5\)]]\)+\!\(\*FractionBox[\(S\), SubscriptBox[\(S\), \
\(0.5\)]]\)\!\(\*SuperscriptBox[\()\), \(h\)]\)  and \
\!\(\*SubscriptBox[\(K\), \(2\)]\)=\!\(\*FractionBox[\(1 + \
\*SuperscriptBox[\((\*FractionBox[SubscriptBox[\(V\), \(f\)], \
SubscriptBox[\(M\), \(0.5`\)]])\), \(h\)]\), \(1 + \[Alpha]\\\ \
\*SuperscriptBox[\((\*FractionBox[SubscriptBox[\(V\), \(f\)], \
SubscriptBox[\(M\), \(0.5\)]])\), \(h\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"hillmr[S, P, M, \\!\\(S\\_0.5\\), \\!\\(P\\_0.5\\), \\!\\(M\
\\_0.5\\), Vf, Keq, h, \[Alpha]] is a predefined rate law for reversible Hill \
kinetics with one modifier. The rate law is \\!\\(\\(S\\\\ \\((1 - P\\/\\(S\\\
\\ K\\_eq\\))\\)\\\\ \\((P\\/P\\_0.5 + S\\/S\\_0.5)\\)\\^\\(\\(-1\\) + h\\)\\\
\\ V\\_f\\)\\/\\(\\((K\\_1 + K\\_2)\\)\\\\ S\\_0.5`\\)\\) where \
\\!\\(K\\_1\\)=(\\!\\(P\\/P\\_0.5\\)+\\!\\(S\\/S\\_0.5\\)\\!\\(\\()\\^h\\)\\) \
 and \\!\\(K\\_2\\)=\\!\\(\\(1 + \\((V\\_f\\/M\\_0.5`)\\)\\^h\\)\\/\\(1 + \
\[Alpha]\\\\ \\((V\\_f\\/M\\_0.5)\\)\\^h\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"hillmmr", "::", "usage"}], "=", 
  "\"\<hillmmr[S, P, M, \!\(\*SubscriptBox[\(S\), \(0.5\)]\), \
\!\(\*SubscriptBox[\(P\), \(0.5\)]\), \!\(\*SubscriptBox[\(M\), \(0.5\)]\), \
\!\(\*SubscriptBox[\(M\), \(a\)]\), \!\(\*SubscriptBox[\(M\), \
SubscriptBox[\(a\), \(0.5\)]]\), \!\(\*SubscriptBox[\(M\), \(b\)]\), \
\!\(\*SubscriptBox[\(M\), SubscriptBox[\(b\), \(0.5\)]]\), \
\!\(\*SubscriptBox[\(V\), \(f\)]\), \!\(\*SubscriptBox[\(K\), \(eq\)]\), h, \
a, b, \!\(\*SubscriptBox[\(\[Alpha]\), \(1\)]\),\!\(\*SubscriptBox[\(\[Alpha]\
\), \(2\)]\),\!\(\*SubscriptBox[\(\[Alpha]\), \(12\)]\)] is a predefined rate \
law for reversible Hill Kinetics with Two Modifiers. The Rate Law is \
\!\(\*FractionBox[\(S\\\ \((1 - \*FractionBox[\(P\), \(S\\\ \
\*SubscriptBox[\(K\), \(eq\)]\)])\)\\\ \
\*SuperscriptBox[\((\*FractionBox[\(P\), SubscriptBox[\(P\), \(0.5`\)]] + \
\*FractionBox[\(S\), SubscriptBox[\(S\), \(0.5`\)]])\), \(\(-1\) + h\)]\\\ \
\*SubscriptBox[\(V\), \(f\)]\), \(\*SubscriptBox[\(S\), \(0.5`\)]\\\ \
\((\*SubscriptBox[\(K\), \(1\)] + \*SubscriptBox[\(K\), \(2\)])\)\)]\) where \
\!\(\*SubscriptBox[\(K\), \(1\)]\)=(P/\!\(\*SubscriptBox[\(P\), \(0.5\)]\)+S/\
\!\(\*SubscriptBox[\(S\), \(0.5\)]\)\!\(\*SuperscriptBox[\()\), \(h\)]\)  and \
\!\(\*SubscriptBox[\(K\), \(2\)]\)=\!\(\((1 + \
\*SuperscriptBox[\((\*SubscriptBox[\(M\), \(a\)]/\*SubscriptBox[\(M\), \
SubscriptBox[\(a\), \(0.5\)]])\), \(h\)] + \
\*SuperscriptBox[\((\*SubscriptBox[\(M\), \(b\)]/\*SubscriptBox[\(M\), \
SubscriptBox[\(b\), \(0.5\)]])\), \(h\)])\)/\((1 + \
\*SuperscriptBox[\((\*SubscriptBox[\(M\), \(a\)]/\*SubscriptBox[\(M\), \
SubscriptBox[\(a\), \(0.5\)]])\), \(h\)]\\\ \*SubscriptBox[\(\[Alpha]\), \
\(1\)] + \*SuperscriptBox[\((\*SubscriptBox[\(M\), \
\(b\)]/\*SubscriptBox[\(M\), SubscriptBox[\(b\), \(0.5\)]])\), \(h\)]\\\ \
\*SubscriptBox[\(\[Alpha]\), \(2\)] + \
\*SuperscriptBox[\((\*SubscriptBox[\(M\), \(a\)]/\*SubscriptBox[\(M\), \
SubscriptBox[\(a\), \(0.5\)]])\), \(h\)]\\\ \
\*SuperscriptBox[\((\*SubscriptBox[\(M\), \(b\)]/\*SubscriptBox[\(M\), \
SubscriptBox[\(b\), \(0.5\)]])\), \(h\)]\\\ \*SubscriptBox[\(\[Alpha]\), \
\(1\)]\\\ \*SubscriptBox[\(\[Alpha]\), \(2\)]\\\ \*SubscriptBox[\(\[Alpha]\), \
\(12\)])\)\)\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"hillmmr[S, P, M, \\!\\(S\\_0.5\\), \\!\\(P\\_0.5\\), \
\\!\\(M\\_0.5\\), \\!\\(M\\_a\\), \\!\\(M\\_\\(a\\_0.5\\)\\), \\!\\(M\\_b\\), \
\\!\\(M\\_\\(b\\_0.5\\)\\), \\!\\(V\\_f\\), \\!\\(K\\_eq\\), h, a, b, \\!\\(\
\[Alpha]\\_1\\),\\!\\(\[Alpha]\\_2\\),\\!\\(\[Alpha]\\_12\\)] is a predefined \
rate law for reversible Hill Kinetics with Two Modifiers. The Rate Law is \\!\
\\(\\(S\\\\ \\((1 - P\\/\\(S\\\\ K\\_eq\\))\\)\\\\ \\((P\\/P\\_0.5` + \
S\\/S\\_0.5`)\\)\\^\\(\\(-1\\) + h\\)\\\\ V\\_f\\)\\/\\(S\\_0.5`\\\\ \
\\((K\\_1 + K\\_2)\\)\\)\\) where \
\\!\\(K\\_1\\)=(P/\\!\\(P\\_0.5\\)+S/\\!\\(S\\_0.5\\)\\!\\(\\()\\^h\\)\\)  \
and \\!\\(K\\_2\\)=\\!\\(\\((1 + \\((M\\_a/M\\_\\(a\\_0.5\\))\\)\\^h + \
\\((M\\_b/M\\_\\(b\\_0.5\\))\\)\\^h)\\)/\\((1 + \
\\((M\\_a/M\\_\\(a\\_0.5\\))\\)\\^h\\\\ \[Alpha]\\_1 + \
\\((M\\_b/M\\_\\(b\\_0.5\\))\\)\\^h\\\\ \[Alpha]\\_2 + \
\\((M\\_a/M\\_\\(a\\_0.5\\))\\)\\^h\\\\ \\((M\\_b/M\\_\\(b\\_0.5\\))\\)\\^h\\\
\\ \[Alpha]\\_1\\\\ \[Alpha]\\_2\\\\ \[Alpha]\\_12)\\)\\)\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"usii", "::", "usage"}], "=", 
  "\"\<usii[S,V,\!\(\*SubscriptBox[\(K\), \(m\)]\),\!\(\*SubscriptBox[\(K\), \
\(i\)]\)] is a predefined rate law for substrate inhibition kinetics \
(irreversible).  The rate law returned is \!\(\*FractionBox[\(S\\\ V\), \
\(\((1 + \*FractionBox[SuperscriptBox[\(S\), \(2\)], SubscriptBox[\(K\), \
\(i\)]] + \*FractionBox[\(S\), SubscriptBox[\(K\), \(m\)]])\)\\\ \
\*SubscriptBox[\(K\), \(m\)]\)]\). \>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"usii[S,V,\\!\\(K\\_m\\),\\!\\(K\\_i\\)] is a predefined \
rate law for substrate inhibition kinetics (irreversible).  The rate law \
returned is \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + S\\^2\\/K\\_i + \
S\\/K\\_m)\\)\\\\ K\\_m\\)\\). \"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"usir", "::", "usage"}], "=", 
  "\"\<usir[S,P,\!\(\*SubscriptBox[\(V\), \(f\)]\),\!\(\*SubscriptBox[\(V\), \
\(r\)]\),\!\(\*SubscriptBox[\(K\), \(ms\)]\),\!\(\*SubscriptBox[\(K\), \
\(mp\)]\),\!\(\*SubscriptBox[\(K\), \(i\)]\)] is a predefined rate law for \
substrate inhibition kinetics (reversible). The rate law returned is \
\!\(\*FractionBox[\(\*FractionBox[\(S\\\ \*SubscriptBox[\(V\), \(f\)]\), \
SubscriptBox[\(K\), \(ms\)]] + \*FractionBox[\(P\\\ \*SubscriptBox[\(V\), \(r\
\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \*FractionBox[SuperscriptBox[\(S\
\), \(2\)], SubscriptBox[\(K\), \(i\)]] + \*FractionBox[\(P\), \
SubscriptBox[\(K\), \(mp\)]] + \*FractionBox[\(S\), SubscriptBox[\(K\), \
\(ms\)]]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"usir[S,P,\\!\\(V\\_f\\),\\!\\(V\\_r\\),\\!\\(K\\_ms\\),\\!\\\
(K\\_mp\\),\\!\\(K\\_i\\)] is a predefined rate law for substrate inhibition \
kinetics (reversible). The rate law returned is \\!\\(\\(\\(S\\\\ \
V\\_f\\)\\/K\\_ms + \\(P\\\\ V\\_r\\)\\/K\\_mp\\)\\/\\(1 + S\\^2\\/K\\_i + \
P\\/K\\_mp + S\\/K\\_ms\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uai", "::", "usage"}], "=", 
  "\"\<uai[S,V,\!\(\*SubscriptBox[\(K\), \(sa\)]\),\!\(\*SubscriptBox[\(K\), \
\(sc\)]\)] is a predefined rate law for substrate activation. The rate law \
returned is \!\(\*FractionBox[\(\*SuperscriptBox[\(S\), \(2\)]\\\ V\), \
\(\*SubsuperscriptBox[\(K\), \(sa\), \(2\)]\\\ \((1 + \
\*FractionBox[SuperscriptBox[\(S\), \(2\)], SubsuperscriptBox[\(K\), \(sa\), \
\(2\)]] + \*FractionBox[\(S\), SubscriptBox[\(K\), \(sa\)]] + \
\*FractionBox[\(S\), SubscriptBox[\(K\), \(sc\)]])\)\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uai[S,V,\\!\\(K\\_sa\\),\\!\\(K\\_sc\\)] is a predefined \
rate law for substrate activation. The rate law returned is \
\\!\\(\\(S\\^2\\\\ V\\)\\/\\(K\\_sa\\%2\\\\ \\((1 + S\\^2\\/K\\_sa\\%2 + \
S\\/K\\_sa + S\\/K\\_sc)\\)\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ucii", "::", "usage"}], "=", 
  "\"\<ucii[S,V,Inh, \!\(\*SubscriptBox[\(K\), \
\(m\)]\),\!\(\*SubscriptBox[\(K\), \(i\)]\)] is a predefined rate law for \
competitive inhibition (irreversible). The rate law returned is \
\!\(\*FractionBox[\(S\\\ V\), \(\((1 + Inh/\*SubscriptBox[\(K\), \(i\)] + \
S/\*SubscriptBox[\(K\), \(m\)])\)\\\ \*SubscriptBox[\(K\), \
\(m\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"ucii[S,V,Inh, \\!\\(K\\_m\\),\\!\\(K\\_i\\)] is a \
predefined rate law for competitive inhibition (irreversible). The rate law \
returned is \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + Inh/K\\_i + S/K\\_m)\\)\\\\ \
K\\_m\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ucir", "::", "usage"}], "=", 
  "\"\<ucir[S, P,Inh, \!\(\*SubscriptBox[\(V\), \(f\)]\), \!\(\*SubscriptBox[\
\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \(ms\)]\), \
\!\(\*SubscriptBox[\(K\), \(mp\)]\), \!\(\*SubscriptBox[\(K\), \(i\)]\)] is a \
predefined rate law for competitive inhibition (reversible). The rate law \
returned is \!\(\*FractionBox[\(\*FractionBox[\(S\\\ \*SubscriptBox[\(V\), \
\(f\)]\), SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\(P\\\ \*SubscriptBox[\
\(V\), \(r\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \*FractionBox[\(Inh\), \
SubscriptBox[\(K\), \(i\)]] + \*FractionBox[\(P\), SubscriptBox[\(K\), \
\(mp\)]] + \*FractionBox[\(S\), SubscriptBox[\(K\), \(ms\)]]\)]\).\>\""}]], \
"Input",
 InitializationCell->True],

Cell[BoxData["\<\"ucir[S, P,Inh, \\!\\(V\\_f\\), \\!\\(V\\_r\\), \\!\\(K\\_ms\
\\), \\!\\(K\\_mp\\), \\!\\(K\\_i\\)] is a predefined rate law for \
competitive inhibition (reversible). The rate law returned is \\!\\(\\(\\(S\\\
\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ V\\_r\\)\\/K\\_mp\\)\\/\\(1 + Inh\\/K\\_i + P\
\\/K\\_mp + S\\/K\\_ms\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"unii", "::", "usage"}], "=", 
  "\"\<unii[S, Inh, V, \!\(\*SubscriptBox[\(K\), \(m\)]\),\!\(\*SubscriptBox[\
\(K\), \(i\)]\)]is a predefined rate law for noncompetitive inhibition \
(irreversible). The rate law returned is \!\(\*FractionBox[\(S\\\ V\), \(\((1 \
+ \*FractionBox[\(Inh\), SubscriptBox[\(K\), \(i\)]] + \*FractionBox[\(S\\\ \
\((1 + \*FractionBox[\(Inh\), SubscriptBox[\(K\), \(i\)]])\)\), SubscriptBox[\
\(K\), \(m\)]])\)\\\ \*SubscriptBox[\(K\), \(m\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"unii[S, Inh, V, \\!\\(K\\_m\\),\\!\\(K\\_i\\)]is a \
predefined rate law for noncompetitive inhibition (irreversible). The rate \
law returned is \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + Inh\\/K\\_i + \\(S\\\\ \\((1 \
+ Inh\\/K\\_i)\\)\\)\\/K\\_m)\\)\\\\ K\\_m\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"unir", "::", "usage"}], "=", 
  "\"\<unir[S, P, Inh, \!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(V\), \(\(r\)\(,\)\(\\\ \)\)]\)\!\(\*SubscriptBox[\(K\), \
\(ms\)]\), \!\(\*SubscriptBox[\(K\), \(mp\)]\), \!\(\*SubscriptBox[\(K\), \(i\
\)]\)] is a predefined rate law for noncompetitive inhibition (reversible). \
The rate law returned is \!\(\*FractionBox[\(\*FractionBox[\(S\\\ \
\*SubscriptBox[\(V\), \(f\)]\), SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\
\(P\\\ \*SubscriptBox[\(V\), \(r\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \
\*FractionBox[\(Inh\), SubscriptBox[\(K\), \(i\)]] + \((1 + \
\*FractionBox[\(Inh\), SubscriptBox[\(K\), \(i\)]])\)\\\ \((\*FractionBox[\(P\
\), SubscriptBox[\(K\), \(mp\)]] + \*FractionBox[\(S\), SubscriptBox[\(K\), \
\(ms\)]])\)\)]\) .\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"unir[S, P, Inh, \\!\\(V\\_f\\), \\!\\(V\\_\\(\\(r\\)\\(,\\)\
\\(\\\\ \\)\\)\\)\\!\\(K\\_ms\\), \\!\\(K\\_mp\\), \\!\\(K\\_i\\)] is a \
predefined rate law for noncompetitive inhibition (reversible). The rate law \
returned is \\!\\(\\(\\(S\\\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ \
V\\_r\\)\\/K\\_mp\\)\\/\\(1 + Inh\\/K\\_i + \\((1 + Inh\\/K\\_i)\\)\\\\ \\((P\
\\/K\\_mp + S\\/K\\_ms)\\)\\)\\) .\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uuci", "::", "usage"}], "=", 
  "\"\<uuci[S,Inh,V,\!\(\*SubscriptBox[\(K\), \(m\)]\),\!\(\*SubscriptBox[\(K\
\), \(i\)]\)] is a predefined rate law for uncompetitive inhibition \
(irreversible). The rate law returned is  \!\(\*FractionBox[\(S\\\ V\), \
\(\((1 + \*FractionBox[\(S\\\ \((1 + \*FractionBox[\(Inh\), \
SubscriptBox[\(K\), \(i\)]])\)\), SubscriptBox[\(K\), \(m\)]])\)\\\ \
\*SubscriptBox[\(K\), \(m\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uuci[S,Inh,V,\\!\\(K\\_m\\),\\!\\(K\\_i\\)] is a predefined \
rate law for uncompetitive inhibition (irreversible). The rate law returned \
is  \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + \\(S\\\\ \\((1 + \
Inh\\/K\\_i)\\)\\)\\/K\\_m)\\)\\\\ K\\_m\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uucr", "::", "usage"}], "=", 
  "\"\<uucr[S,P,Inh,\!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \
\(ms\)]\),\!\(\*SubscriptBox[\(K\), \(mp\)]\), \!\(\*SubscriptBox[\(K\), \
\(i\)]\)] is a predefined rate law for uncompetitive inhibition (reversible). \
The rate law returned is \!\(\*FractionBox[\(\*FractionBox[\(S\\\ \
\*SubscriptBox[\(V\), \(f\)]\), SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\
\(P\\\ \*SubscriptBox[\(V\), \(r\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \
\((1 + \*FractionBox[\(Inh\), SubscriptBox[\(K\), \(i\)]])\)\\\ \
\((\*FractionBox[\(P\), SubscriptBox[\(K\), \(mp\)]] + \*FractionBox[\(S\), \
SubscriptBox[\(K\), \(ms\)]])\)\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uucr[S,P,Inh,\\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_ms\\),\\!\\(K\\_mp\\), \\!\\(K\\_i\\)] is a predefined rate law for \
uncompetitive inhibition (reversible). The rate law returned is \\!\\(\\(\\(S\
\\\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ V\\_r\\)\\/K\\_mp\\)\\/\\(1 + \\((1 + \
Inh\\/K\\_i)\\)\\\\ \\((P\\/K\\_mp + S\\/K\\_ms)\\)\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"umi", "::", "usage"}], "=", 
  "\"\<umi[S,Inh,V,\!\(\*SubscriptBox[\(K\), \(m\)]\), \!\(\*SubscriptBox[\(K\
\), \(is\)]\), \!\(\*SubscriptBox[\(K\), \(ic\)]\)] is a predefined rate law \
for mixed inhibition kinetics (irreversible). The rate law returned is \
\!\(\*FractionBox[\(S\\\ V\), \(\((1 + \*FractionBox[\(Inh\), \
SubscriptBox[\(K\), \(is\)]] + \*FractionBox[\(S\\\ \((1 + \
\*FractionBox[\(Inh\), SubscriptBox[\(K\), \(ic\)]])\)\), SubscriptBox[\(K\), \
\(m\)]])\)\\\ \*SubscriptBox[\(K\), \(m\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"umi[S,Inh,V,\\!\\(K\\_m\\), \\!\\(K\\_is\\), \
\\!\\(K\\_ic\\)] is a predefined rate law for mixed inhibition kinetics \
(irreversible). The rate law returned is \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + Inh\
\\/K\\_is + \\(S\\\\ \\((1 + Inh\\/K\\_ic)\\)\\)\\/K\\_m)\\)\\\\ K\\_m\\)\\).\
\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"umr", "::", "usage"}], "=", 
  "\"\<umr[S,P,Inh,\!\(\*SubscriptBox[\(V\), \
\(f\)]\),\!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \
\(ms\)]\),\!\(\*SubscriptBox[\(K\), \(mp\)]\),  \!\(\*SubscriptBox[\(K\), \
\(is\)]\), \!\(\*SubscriptBox[\(K\), \(ic\)]\)] is a predefined rate law for \
mixed inhibition kinetics (reversible). The rate law returned is \
\!\(\*FractionBox[\(\*FractionBox[\(S\\\ \*SubscriptBox[\(V\), \(f\)]\), \
SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\(P\\\ \*SubscriptBox[\(V\), \(r\
\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \*FractionBox[\(Inh\), \
SubscriptBox[\(K\), \(is\)]] + \((1 + \*FractionBox[\(Inh\), SubscriptBox[\(K\
\), \(ic\)]])\)\\\ \((\*FractionBox[\(P\), SubscriptBox[\(K\), \(mp\)]] + \
\*FractionBox[\(S\), SubscriptBox[\(K\), \(ms\)]])\)\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"umr[S,P,Inh,\\!\\(V\\_f\\),\\!\\(V\\_r\\), \\!\\(K\\_ms\\),\
\\!\\(K\\_mp\\),  \\!\\(K\\_is\\), \\!\\(K\\_ic\\)] is a predefined rate law \
for mixed inhibition kinetics (reversible). The rate law returned is \
\\!\\(\\(\\(S\\\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ V\\_r\\)\\/K\\_mp\\)\\/\\(1 + \
Inh\\/K\\_is + \\((1 + Inh\\/K\\_ic)\\)\\\\ \\((P\\/K\\_mp + \
S\\/K\\_ms)\\)\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uaii", "::", "usage"}], "=", 
  "\"\<uaii[S, \!\(\*SubscriptBox[\(A\), \(c\)]\),V,\!\(\*SubscriptBox[\(K\), \
\(m\)]\),\!\(\*SubscriptBox[\(K\), \(a\)]\)] is a predefined rate law for \
specific action kinetics (irreversible). The rate law returned is \
\!\(\*FractionBox[\(S\\\ V\), \(\((1 + \*FractionBox[SubscriptBox[\(K\), \
\(a\)], SubscriptBox[\(A\), \(c\)]] + \*FractionBox[\(S\), \
SubscriptBox[\(K\), \(m\)]])\)\\\ \*SubscriptBox[\(K\), \(m\)]\)]\).\>\""}]], \
"Input",
 InitializationCell->True],

Cell[BoxData["\<\"uaii[S, \\!\\(A\\_c\\),V,\\!\\(K\\_m\\),\\!\\(K\\_a\\)] is \
a predefined rate law for specific action kinetics (irreversible). The rate \
law returned is \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + K\\_a\\/A\\_c + \
S\\/K\\_m)\\)\\\\ K\\_m\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uar", "::", "usage"}], "=", 
  "\"\<uar[S,P,\!\(\*SubscriptBox[\(A\), \(c\)]\),\!\(\*SubscriptBox[\(V\), \
\(f\)]\), \!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \
\(ms\)]\), \!\(\*SubscriptBox[\(K\), \(mp\)]\), \!\(\*SubscriptBox[\(K\), \(a\
\)]\)] is a predefined rate law for specific action kinetics (reversible). \
The rate law returned is \!\(\*FractionBox[\(\*FractionBox[\(S\\\ \
\*SubscriptBox[\(V\), \(f\)]\), SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\
\(P\\\ \*SubscriptBox[\(V\), \(r\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \
\*FractionBox[SubscriptBox[\(K\), \(a\)], SubscriptBox[\(A\), \(c\)]] + \
\*FractionBox[\(P\), SubscriptBox[\(K\), \(mp\)]] + \*FractionBox[\(S\), \
SubscriptBox[\(K\), \(ms\)]]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uar[S,P,\\!\\(A\\_c\\),\\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_ms\\), \\!\\(K\\_mp\\), \\!\\(K\\_a\\)] is a predefined rate law \
for specific action kinetics (reversible). The rate law returned is \\!\\(\\(\
\\(S\\\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ V\\_r\\)\\/K\\_mp\\)\\/\\(1 + K\\_a\\/A\
\\_c + P\\/K\\_mp + S\\/K\\_ms\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ucti", "::", "usage"}], "=", 
  "\"\<ucti[S, \!\(\*SubscriptBox[\(A\), \(c\)]\), V, \
\!\(\*SubscriptBox[\(K\), \(m\)]\), \!\(\*SubscriptBox[\(K\), \(a\)]\)] is a \
predefined rate law for catalytic activation (irreversible). The rate law \
returned is \!\(\*FractionBox[\(S\\\ V\), \(\((1 + \
\*FractionBox[SubscriptBox[\(K\), \(a\)], SubscriptBox[\(A\), \(c\)]] + \
\*FractionBox[\(S\\\ \((1 + \*FractionBox[SubscriptBox[\(K\), \(a\)], \
SubscriptBox[\(A\), \(c\)]])\)\), SubscriptBox[\(K\), \(m\)]])\)\\\ \
\*SubscriptBox[\(K\), \(m\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"ucti[S, \\!\\(A\\_c\\), V, \\!\\(K\\_m\\), \\!\\(K\\_a\\)] \
is a predefined rate law for catalytic activation (irreversible). The rate \
law returned is \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + K\\_a\\/A\\_c + \\(S\\\\ \
\\((1 + K\\_a\\/A\\_c)\\)\\)\\/K\\_m)\\)\\\\ K\\_m\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uctr", "::", "usage"}], "=", 
  "\"\<uctr[S, P, \!\(\*SubscriptBox[\(A\), \(c\)]\), \
\!\(\*SubscriptBox[\(V\), \(f\)]\), \!\(\*SubscriptBox[\(V\), \(r\)]\), \
\!\(\*SubscriptBox[\(K\), \(ms\)]\), \!\(\*SubscriptBox[\(K\), \(mp\)]\), \
\!\(\*SubscriptBox[\(K\), \(a\)]\)] is a predefined rate law for catalytic \
activation (reversible). The rate law returned is \
\!\(\*FractionBox[\(\*FractionBox[\(S\\\ \*SubscriptBox[\(V\), \(f\)]\), \
SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\(P\\\ \*SubscriptBox[\(V\), \(r\
\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \
\*FractionBox[SubscriptBox[\(K\), \(a\)], SubscriptBox[\(A\), \(c\)]] + \((1 \
+ \*FractionBox[SubscriptBox[\(K\), \(a\)], SubscriptBox[\(A\), \(c\)]])\)\\\ \
\((\*FractionBox[\(P\), SubscriptBox[\(K\), \(mp\)]] + \*FractionBox[\(S\), \
SubscriptBox[\(K\), \(ms\)]])\)\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uctr[S, P, \\!\\(A\\_c\\), \\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_ms\\), \\!\\(K\\_mp\\), \\!\\(K\\_a\\)] is a predefined rate law \
for catalytic activation (reversible). The rate law returned is \\!\\(\\(\\(S\
\\\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ V\\_r\\)\\/K\\_mp\\)\\/\\(1 + K\\_a\\/A\\_c \
+ \\((1 + K\\_a\\/A\\_c)\\)\\\\ \\((P\\/K\\_mp + S\\/K\\_ms)\\)\\)\\).\"\>"], \
"Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"umai", "::", "usage"}], "=", 
  "\"\<umai[S, \!\(\*SubscriptBox[\(A\), \(c\)]\), V, \
\!\(\*SubscriptBox[\(K\), \(m\)]\), \!\(\*SubscriptBox[\(K\), \(as\)]\), \!\(\
\*SubscriptBox[\(K\), \(ac\)]\)] is a predefined rate law for mixed \
activation kinetics (irreversible). The rate law returned is \
\!\(\*FractionBox[\(S\\\ V\), \(\((1 + \*FractionBox[SubscriptBox[\(K\), \(as\
\)], SubscriptBox[\(A\), \(c\)]] + \*FractionBox[\(S\\\ \((1 + \
\*FractionBox[SubscriptBox[\(K\), \(ac\)], SubscriptBox[\(A\), \(c\)]])\)\), \
SubscriptBox[\(K\), \(m\)]])\)\\\ \*SubscriptBox[\(K\), \(m\)]\)]\).\>\""}]], \
"Input",
 InitializationCell->True],

Cell[BoxData["\<\"umai[S, \\!\\(A\\_c\\), V, \\!\\(K\\_m\\), \\!\\(K\\_as\\), \
\\!\\(K\\_ac\\)] is a predefined rate law for mixed activation kinetics \
(irreversible). The rate law returned is \\!\\(\\(S\\\\ V\\)\\/\\(\\((1 + \
K\\_as\\/A\\_c + \\(S\\\\ \\((1 + K\\_ac\\/A\\_c)\\)\\)\\/K\\_m)\\)\\\\ K\\_m\
\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"umar", "::", "usage"}], "=", 
  "\"\<umar[S, P, \!\(\*SubscriptBox[\(A\), \(c\)]\), \
\!\(\*SubscriptBox[\(V\), \(f\)]\), \!\(\*SubscriptBox[\(V\), \(r\)]\), \
\!\(\*SubscriptBox[\(K\), \(ms\)]\), \!\(\*SubscriptBox[\(K\), \(mp\)]\), \
\!\(\*SubscriptBox[\(K\), \(as\)]\), \!\(\*SubscriptBox[\(K\), \(ac\)]\)] is \
a predefined rate law for mixed activation kinetics (reversible). The rate \
law returned is \!\(\*FractionBox[\(\*FractionBox[\(S\\\ \
\*SubscriptBox[\(V\), \(f\)]\), SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\
\(P\\\ \*SubscriptBox[\(V\), \(r\)]\), SubscriptBox[\(K\), \(mp\)]]\), \(1 + \
\*FractionBox[SubscriptBox[\(K\), \(as\)], SubscriptBox[\(A\), \(c\)]] + \((1 \
+ \*FractionBox[SubscriptBox[\(K\), \(ac\)], SubscriptBox[\(A\), \(c\)]])\)\\\
\ \((\*FractionBox[\(P\), SubscriptBox[\(K\), \(mp\)]] + \*FractionBox[\(S\), \
SubscriptBox[\(K\), \(ms\)]])\)\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"umar[S, P, \\!\\(A\\_c\\), \\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_ms\\), \\!\\(K\\_mp\\), \\!\\(K\\_as\\), \\!\\(K\\_ac\\)] is a \
predefined rate law for mixed activation kinetics (reversible). The rate law \
returned is \\!\\(\\(\\(S\\\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ \
V\\_r\\)\\/K\\_mp\\)\\/\\(1 + K\\_as\\/A\\_c + \\((1 + K\\_ac\\/A\\_c)\\)\\\\ \
\\((P\\/K\\_mp + S\\/K\\_ms)\\)\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uhmi", "::", "usage"}], "=", 
  "\"\<uhmi[S, M, V, \!\(\*SubscriptBox[\(K\), \(m\)]\), \
\!\(\*SubscriptBox[\(K\), \(d\)]\), a, b] is a predefined rate law for \
general hyperbolic modifier kinetics (irreversible). The rate law returned is \
\!\(\*FractionBox[\(S\\\ V\\\ \((1 + \*FractionBox[\(b\\\ M\), \(a\\\ \
\*SubscriptBox[\(K\), \(d\)]\)])\)\), \(\((1 + \*FractionBox[\(M\), \
SubscriptBox[\(K\), \(d\)]] + \*FractionBox[\(S\\\ \((1 + \
\*FractionBox[\(M\), \(a\\\ \*SubscriptBox[\(K\), \(d\)]\)])\)\), \
SubscriptBox[\(K\), \(m\)]])\)\\\ \*SubscriptBox[\(K\), \(m\)]\)]\).\>\""}]], \
"Input",
 InitializationCell->True],

Cell[BoxData["\<\"uhmi[S, M, V, \\!\\(K\\_m\\), \\!\\(K\\_d\\), a, b] is a \
predefined rate law for general hyperbolic modifier kinetics (irreversible). \
The rate law returned is \\!\\(\\(S\\\\ V\\\\ \\((1 + \\(b\\\\ \
M\\)\\/\\(a\\\\ K\\_d\\))\\)\\)\\/\\(\\((1 + M\\/K\\_d + \\(S\\\\ \\((1 + \
M\\/\\(a\\\\ K\\_d\\))\\)\\)\\/K\\_m)\\)\\\\ K\\_m\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"uhmr", "::", "usage"}], "=", 
  "\"\<uhmr[S, P, M,\!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \(ms\)]\), \!\(\
\*SubscriptBox[\(K\), \(mp\)]\), \!\(\*SubscriptBox[\(K\), \(d\)]\), a, b] is \
a predefined rate law for general hyperbolic modifier kinetics (reversible). \
The rate law returned is \!\(\*FractionBox[\(\((1 + \*FractionBox[\(b\\\ M\), \
\(a\\\ \*SubscriptBox[\(K\), \(d\)]\)])\)\\\ \((\*FractionBox[\(S\\\ \
\*SubscriptBox[\(V\), \(f\)]\), SubscriptBox[\(K\), \(ms\)]] - \*FractionBox[\
\(P\\\ \*SubscriptBox[\(V\), \(r\)]\), SubscriptBox[\(K\), \(mp\)]])\)\), \(1 \
+ \*FractionBox[\(M\), SubscriptBox[\(K\), \(d\)]] + \((1 + \*FractionBox[\(M\
\), \(a\\\ \*SubscriptBox[\(K\), \(d\)]\)])\)\\\ \((\*FractionBox[\(P\), \
SubscriptBox[\(K\), \(mp\)]] + \*FractionBox[\(S\), SubscriptBox[\(K\), \
\(ms\)]])\)\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"uhmr[S, P, M,\\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_ms\\), \\!\\(K\\_mp\\), \\!\\(K\\_d\\), a, b] is a predefined rate \
law for general hyperbolic modifier kinetics (reversible). The rate law \
returned is \\!\\(\\(\\((1 + \\(b\\\\ M\\)\\/\\(a\\\\ K\\_d\\))\\)\\\\ \
\\((\\(S\\\\ V\\_f\\)\\/K\\_ms - \\(P\\\\ V\\_r\\)\\/K\\_mp)\\)\\)\\/\\(1 + M\
\\/K\\_d + \\((1 + M\\/\\(a\\\\ K\\_d\\))\\)\\\\ \\((P\\/K\\_mp + S\\/K\\_ms)\
\\)\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ualii", "::", "usage"}], "=", 
  "\"\<ualii[S, Inh, V, \!\(\*SubscriptBox[\(K\), \(s\)]\), \
\!\(\*SubscriptBox[\(K\), \(ii\)]\), n, L] is a predefined rate law for \
allosteric inhibition (irreversible). The rate law returned is \
\!\(\*FractionBox[\(S\\\ V\\\ \*SuperscriptBox[\((1 + \*FractionBox[\(S\), \
SubscriptBox[\(K\), \(s\)]])\), \(\(-1\) + n\)]\), \(\((L\\\ \
\*SuperscriptBox[\((1 + \*FractionBox[\(Inh\), SubscriptBox[\(K\), \
\(ii\)]])\), \(n\)] + \*SuperscriptBox[\((1 + \*FractionBox[\(S\), \
SubscriptBox[\(K\), \(s\)]])\), \(n\)])\)\\\ \*SubscriptBox[\(K\), \
\(s\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"ualii[S, Inh, V, \\!\\(K\\_s\\), \\!\\(K\\_ii\\), n, L] is \
a predefined rate law for allosteric inhibition (irreversible). The rate law \
returned is \\!\\(\\(S\\\\ V\\\\ \\((1 + S\\/K\\_s)\\)\\^\\(\\(-1\\) + \
n\\)\\)\\/\\(\\((L\\\\ \\((1 + Inh\\/K\\_ii)\\)\\^n + \\((1 + \
S\\/K\\_s)\\)\\^n)\\)\\\\ K\\_s\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ordubr", "::", "usage"}], "=", 
  "\"\<ordubr[A, P, Q, \!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \(ma\)]\), \!\(\
\*SubscriptBox[\(K\), \(mq\)]\), \!\(\*SubscriptBox[\(K\), \(mp\)]\), \
\!\(\*SubscriptBox[\(K\), \(ip\)]\),\!\(\*SubscriptBox[\(K\), \(eq\)]\)] is a \
predefined rate for Ordered Uni-Bi Kinetics. The rate law returned is \
\!\(\*FractionBox[\(\((A - \*FractionBox[\(P\\\ Q\), SubscriptBox[\(K\), \(eq\
\)]])\)\\\ \*SubscriptBox[\(V\), \(f\)]\), \(A\\\ \((1 + \*FractionBox[\(P\), \
SubscriptBox[\(K\), \(ip\)]])\) + \*SubscriptBox[\(K\), \(ma\)] + \
\*FractionBox[\(\((P\\\ Q + Q\\\ \*SubscriptBox[\(K\), \(mp\)] + P\\\ \
\*SubscriptBox[\(K\), \(mq\)])\)\\\ \*SubscriptBox[\(V\), \(f\)]\), \
\(\*SubscriptBox[\(K\), \(eq\)]\\\ \*SubscriptBox[\(V\), \
\(r\)]\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"ordubr[A, P, Q, \\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_ma\\), \\!\\(K\\_mq\\), \\!\\(K\\_mp\\), \
\\!\\(K\\_ip\\),\\!\\(K\\_eq\\)] is a predefined rate for Ordered Uni-Bi \
Kinetics. The rate law returned is \\!\\(\\(\\((A - \\(P\\\\ \
Q\\)\\/K\\_eq)\\)\\\\ V\\_f\\)\\/\\(A\\\\ \\((1 + P\\/K\\_ip)\\) + K\\_ma + \
\\(\\((P\\\\ Q + Q\\\\ K\\_mp + P\\\\ K\\_mq)\\)\\\\ V\\_f\\)\\/\\(K\\_eq\\\\ \
V\\_r\\)\\)\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ordbur", "::", "usage"}], "=", 
  "\"\<ordbur[A, B, P, \!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \(ma\)]\), \!\(\
\*SubscriptBox[\(K\), \(mb\)]\), \!\(\*SubscriptBox[\(K\), \(mp\)]\), \
\!\(\*SubscriptBox[\(K\), \(ia\)]\), \!\(\*SubscriptBox[\(K\), \(eq\)]\)] is \
a predefined rate for Ordered Bi-Uni Kinetics. The rate law returned is \
\!\(\*FractionBox[\(\((A\\\ B - \*FractionBox[\(P\), SubscriptBox[\(K\), \(eq\
\)]])\)\\\ \*SubscriptBox[\(V\), \(f\)]\), \(A\\\ B + B\\\ \*SubscriptBox[\(K\
\), \(ma\)] + A\\\ \*SubscriptBox[\(K\), \(mb\)] + \*FractionBox[\(\((P\\\ \
\((1 + \*FractionBox[\(A\), SubscriptBox[\(K\), \(ia\)]])\) + \*SubscriptBox[\
\(K\), \(mp\)])\)\\\ \*SubscriptBox[\(V\), \(f\)]\), \(\*SubscriptBox[\(K\), \
\(eq\)]\\\ \*SubscriptBox[\(V\), \(r\)]\)]\)]\) .\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"ordbur[A, B, P, \\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_ma\\), \\!\\(K\\_mb\\), \\!\\(K\\_mp\\), \\!\\(K\\_ia\\), \
\\!\\(K\\_eq\\)] is a predefined rate for Ordered Bi-Uni Kinetics. The rate \
law returned is \\!\\(\\(\\((A\\\\ B - P\\/K\\_eq)\\)\\\\ V\\_f\\)\\/\\(A\\\\ \
B + B\\\\ K\\_ma + A\\\\ K\\_mb + \\(\\((P\\\\ \\((1 + A\\/K\\_ia)\\) + \
K\\_mp)\\)\\\\ V\\_f\\)\\/\\(K\\_eq\\\\ V\\_r\\)\\)\\) .\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ordbbr", "::", "usage"}], "=", 
  "\"\<ordbbr[A, B, P, Q, \!\(\*SubscriptBox[\(V\), \(f\)]\), \
\!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \
\(mA\)]\),\!\(\*SubscriptBox[\(K\), \(mB\)]\), \!\(\*SubscriptBox[\(K\), \(mP\
\)]\), \!\(\*SubscriptBox[\(K\), \(mQ\)]\), \!\(\*SubscriptBox[\(K\), \(iA\)]\
\),  \!\(\*SubscriptBox[\(K\), \(iB\)]\), \!\(\*SubscriptBox[\(K\), \
\(iP\)]\), \!\(\*SubscriptBox[\(K\), \(eq\)]\)] is a predefined rate for \
Ordered Bi-Bi Kinetics. The rate law returned is \!\(\*FractionBox[\(\((A\\\ \
B - PQ/\*SubscriptBox[\(K\), \(eq\)])\)\\\ \*SubscriptBox[\(V\), \(f\)]\), \
\(A\\\ B\\\ \((1 + P/\*SubscriptBox[\(K\), \(iP\)])\) + B\\\ \
\*SubscriptBox[\(K\), \(mA\)] + \((A + \*SubscriptBox[\(K\), \(iA\)])\)\\\ \
\*SubscriptBox[\(K\), \(mB\)] + \*SubscriptBox[\(K\), \(1\)]\)]\) where \
\!\(\*SubscriptBox[\(K\), \(1\)]\)=(\!\(\*SubscriptBox[\(V\), \
\(f\)]\)/(\!\(\*SubscriptBox[\(K\), \(eq\)]\)\!\(\*SubscriptBox[\(V\), \(r\)]\
\)))(Q \!\(\*SubscriptBox[\(K\), \(2\)]\)+P (1+A/\!\(\*SubscriptBox[\(K\), \
\(iA\)]\)) \!\(\*SubscriptBox[\(K\), \(mQ\)]\)) and \!\(\*SubscriptBox[\(K\), \
\(2\)]\)=(1+P (1+B/\!\(\*SubscriptBox[\(K\), \
\(iB\)]\))+\!\(\*SubscriptBox[\(BK\), \(mA\)]\)/(\!\(\*SubscriptBox[\(K\), \
\(iA\)]\)\!\(\*SubscriptBox[\(K\), \(mB\)]\))) \!\(\*SubscriptBox[\(K\), \(mP\
\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"ordbbr[A, B, P, Q, \\!\\(V\\_f\\), \\!\\(V\\_r\\), \
\\!\\(K\\_mA\\),\\!\\(K\\_mB\\), \\!\\(K\\_mP\\), \\!\\(K\\_mQ\\), \
\\!\\(K\\_iA\\),  \\!\\(K\\_iB\\), \\!\\(K\\_iP\\), \\!\\(K\\_eq\\)] is a \
predefined rate for Ordered Bi-Bi Kinetics. The rate law returned is \
\\!\\(\\(\\((A\\\\ B - PQ/K\\_eq)\\)\\\\ V\\_f\\)\\/\\(A\\\\ B\\\\ \\((1 + \
P/K\\_iP)\\) + B\\\\ K\\_mA + \\((A + K\\_iA)\\)\\\\ K\\_mB + K\\_1\\)\\) \
where \\!\\(K\\_1\\)=(\\!\\(V\\_f\\)/(\\!\\(K\\_eq\\)\\!\\(V\\_r\\)))(Q \
\\!\\(K\\_2\\)+P (1+A/\\!\\(K\\_iA\\)) \\!\\(K\\_mQ\\)) and \
\\!\\(K\\_2\\)=(1+P \
(1+B/\\!\\(K\\_iB\\))+\\!\\(BK\\_mA\\)/(\\!\\(K\\_iA\\)\\!\\(K\\_mB\\))) \
\\!\\(K\\_mP\\).\"\>"], "Output"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ppbr", "::", "usage"}], "=", 
  "\"\<ppbr[A, B, P, Q, \!\(\*SubscriptBox[\(V\), \
\(f\)]\),\!\(\*SubscriptBox[\(V\), \(r\)]\), \!\(\*SubscriptBox[\(K\), \
\(ma\)]\), \!\(\*SubscriptBox[\(K\), \(mb\)]\), \!\(\*SubscriptBox[\(K\), \
\(mp\)]\), \!\(\*SubscriptBox[\(K\), \(mq\)]\), \!\(\*SubscriptBox[\(K\), \
\(ia\)]\),\!\(\*SubscriptBox[\(K\), \(iq\)]\), \!\(\*SubscriptBox[\(K\), \(eq\
\)]\)] is a predefined rate for Ping-Pong Bi-Bi Kinetics. The rate law \
returned is \!\(\*FractionBox[\(\((A\\\ B - \*FractionBox[\(P\\\ Q\), \
SubscriptBox[\(K\), \(eq\)]])\)\\\ \*SubscriptBox[\(V\), \(f\)]\), \(A\\\ B + \
B\\\ \((1 + \*FractionBox[\(Q\), SubscriptBox[\(K\), \(iq\)]])\)\\\ \
\*SubscriptBox[\(K\), \(ma\)] + A\\\ \*SubscriptBox[\(K\), \(mb\)] + \
\*FractionBox[\(\((Q\\\ \((P + \*SubscriptBox[\(K\), \(mp\)])\) + P\\\ \((1 + \
\*FractionBox[\(A\), SubscriptBox[\(K\), \(ia\)]])\)\\\ \*SubscriptBox[\(K\), \
\(mq\)])\)\\\ \*SubscriptBox[\(V\), \(f\)]\), \(\*SubscriptBox[\(K\), \(eq\)]\
\\\ \*SubscriptBox[\(V\), \(r\)]\)]\)]\).\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"ppbr[A, B, P, Q, \\!\\(V\\_f\\),\\!\\(V\\_r\\), \
\\!\\(K\\_ma\\), \\!\\(K\\_mb\\), \\!\\(K\\_mp\\), \\!\\(K\\_mq\\), \
\\!\\(K\\_ia\\),\\!\\(K\\_iq\\), \\!\\(K\\_eq\\)] is a predefined rate for \
Ping-Pong Bi-Bi Kinetics. The rate law returned is \\!\\(\\(\\((A\\\\ B - \
\\(P\\\\ Q\\)\\/K\\_eq)\\)\\\\ V\\_f\\)\\/\\(A\\\\ B + B\\\\ \\((1 + \
Q\\/K\\_iq)\\)\\\\ K\\_ma + A\\\\ K\\_mb + \\(\\((Q\\\\ \\((P + K\\_mp)\\) + \
P\\\\ \\((1 + A\\/K\\_ia)\\)\\\\ K\\_mq)\\)\\\\ V\\_f\\)\\/\\(K\\_eq\\\\ \
V\\_r\\)\\)\\).\"\>"], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["model builder functions ", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"setEcho", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hideEcho", "::", "usage"}], "=", "\"\<\>\""}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["newModel", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"newModel", "::", "usage"}], "=", 
   RowBox[{
   "\"\<newModel[options] resets all counters and variables used by the \
MathSBML Model Builder. If any previous model has been constructed using add_ \
functions, it is erased.\\nnewModel[x,options], where x is an identifier or \
string, is interpreted as newModel[id->x, options].\\nOptions \
include:\\nid->string, model id\\nname->string, model name\\nnotes->string, \
model notes\\ncomments->string, comments to add to beginning of file.\>\"", 
    "<>", "\"\<\\ncreator\[Rule]{family, given, email, org} data for MIRIAM \
creator annotation. Overrides MIRIAM` \
options\\nMIRIAM`Given\[Rule]string\\nMIRIAM`Family\[Rule]string\\nMIRIAM`\
EMAIL\[Rule]string\\nMIRIAM`Orgname\[Rule]string\>\""}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["reactionToSBML", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"reactionToSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<reactionToSBML[options] returns the SBML for a \
<reaction.../>.\\nreactionToSBML[r,options] is identical to \
reactionToSBML[reaction-> r, \
options].\\nreactionToSBML[{{options},{options},...}] returns a \
<listOfReactions.../>, where each option list describes a different reaction. \
Alternatively the first argument in any option list may be a reaction, which \
in this case does not have be preceded by the reaction keyword.\\n\\nEach \
{options} is either {optionList} or {reaction, optionList}, where reaction \
has the form \!\(\*SubscriptBox[\(\[CapitalSigma]e\), \
\(i\)]\)\!\(\*SubscriptBox[\(r\), \(i\)]\)->\!\(\*SubscriptBox[\(\
\[CapitalSigma]s\), \(i\)]\)\!\(\*SubscriptBox[\(p\), \(i\)]\). If any option \
list does not have either the reactions option or at least one the reactants \
or products options,the first element in options is assumed to be a rule \
describing the reaction.\\n\\nAvailable Options:\\n\>\"", "<>", 
    "\[IndentingNewLine]", 
    "\"\<reaction->(\!\(\*SubscriptBox[\(\[CapitalSigma]e\), \
\(i\)]\)\!\(\*SubscriptBox[\(r\), \(i\)]\)->\!\(\*SubscriptBox[\(\
\[CapitalSigma]s\), \(i\)]\)\!\(\*SubscriptBox[\(p\), \(i\)]\)), where \
\!\(\*SubscriptBox[\(r\), \(i\)]\) and \!\(\*SubscriptBox[\(p\), \(i\)]\) are \
names of of reactants and products; and \!\(\*SubscriptBox[\(e\), \(i\)]\) \
and \!\(\*SubscriptBox[\(s\), \(\(i\)\(\\\ \)\)]\)are the corresponding \
stoichiometry expressions. The stoichiometry expressions must be either a \
number or have the form Stoichiometry[expr] where expr is any expression. If \
the option reaction is used then the options reactants, products, \
reactantStoichiometry, and productStoichiometry are ignored.\\n\>\"", "<>", 
    "\[IndentingNewLine]", 
    "\"\<id \[Rule]string - required reaction identifier, no default\\n\>\"", 
    "<>", "\"\<name\[Rule] string - reaction name.\\n\>\"", "<>", 
    "\"\<reactants\[Rule] {} (none, default), r,  or \
{\!\(\*SubscriptBox[\(r\), \(1\)]\), \!\(\*SubscriptBox[\(r\), \(2\)]\), \
....}, names of reactants. This option is ignored if the option reaction is \
used.\\n\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<products\[Rule] {} (none, default), p,  or \
{\!\(\*SubscriptBox[\(p\), \(1\)]\), \!\(\*SubscriptBox[\(p\), \(2\)]\), \
....}, names of products. This option is ignored if the option reaction is \
used.\\n\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<modifiers\[Rule] {} (none, default), m,  or \
{\!\(\*SubscriptBox[\(m\), \(1\)]\), \!\(\*SubscriptBox[\(m\), \(2\)]\), \
....}, names of modifiers\\n\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<reactantStoichiometry\[Rule]integer, expression, \
{\!\(\*SubscriptBox[\(e\), \(1\)]\),\!\(\*SubscriptBox[\(e\), \(2\)]\),..}, \
where  \!\(\*SubscriptBox[\(e\), \(j\)]\) is any expression. The \
stoichiometries are listed in the same order as the names of the reactants. \
If fewer stoichiometries then reactants are specified the remaining reactants \
are assigned a stoichiometry of 1. . This option is ignored if the option \
reaction is used.\\n\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<productStoichiometry\[Rule]integer, expression, {\!\(\*SubscriptBox[\
\(e\), \(1\)]\),\!\(\*SubscriptBox[\(e\), \(2\)]\),..}, where  \
\!\(\*SubscriptBox[\(e\), \(j\)]\) is any expression. The stoichiometries are \
listed in the same order as the names of the products. If fewer \
stoichiometries then producrts are specified the remaining products are \
assigned a stoichiometry of 1.. This option is ignored if the option reaction \
is used. \\n\>\"", "<>", 
    "\"\<kineticLaw\[Rule] any expression (no default); if no kinetic law is \
specified, none is included in the SBML; alternatively, \
kineticLaw\[Rule]{\\\"math\\\"\[Rule]expression, \
\\\"annotation\\\"\[Rule]list of symbolic XML containing annotations.\\n\>\"",
     "<>", 
    "\"\<parameters->{\!\(\*SubscriptBox[\(i\), \
\(1\)]\)\[Rule]\!\(\*SubscriptBox[\(o\), \(1\)]\),\!\(\*SubscriptBox[\(i\), \
\(2\)]\)\[Rule]\!\(\*SubscriptBox[\(o\), \(3\)]\),...}, where \
\!\(\*SubscriptBox[\(i\), \(1\)]\),\!\(\*SubscriptBox[\(i\), \(2\)]\),... are \
the ids of the parameters, and \!\(\*SubscriptBox[\(o\), \
\(1\)]\),\!\(\*SubscriptBox[\(o\), \(2\)]\),... are option lists of the form \
{name\[Rule]\!\(\*SubscriptBox[\(v\), \
\(1\)]\),value\[Rule]\!\(\*SubscriptBox[\(v\), \(2\)]\), \
units\[Rule]\!\(\*SubscriptBox[\(v\), \(3\)]\), \
constant\[Rule]\!\(\*SubscriptBox[\(v\), \(4\)]\), \
annotation\[Rule]\!\(\*SubscriptBox[\(v\), \(5\)]\)}, or any subset thereof, \
where \!\(\*SubscriptBox[\(v\), \(1\)]\),etc., are the values of the name, \
value, units and constant field.\\n\>\"", "<>", 
    "\"\<reversible\[Rule]True\\nfast\[Rule]False\\n\\nExample:\\\
nreactionToSBML[reaction\[Rule] (A+2B\[Rule] C),kineticLaw\[Rule] \
k*A*B,parameters\[Rule] {k\[Rule] {value\[Rule] 12,name\[Rule] \\\"Rate \
Constant\\\"}}]\\n\\n\>\"", "<>", 
    "\"\<<reaction id=\\\"reaction2\\\"\\n    name=\\\"reaction2\\\"\\n    \
reversible=\\\"true\\\"\\n    fast=\\\"false\\\">\\n <listOfReactants>\\n  \
<speciesReference species=\\\"A\\\"/>\\n  <speciesReference \
species=\\\"B\\\">\\n   <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n    <cn \
type=\\\"integer\\\">2</cn>\\n   </math>\\n  </speciesReference>\\n \
</listOfReactants>\\n <listOfProducts>\\n  <speciesReference \
species=\\\"C\\\"/>\\n </listOfProducts>\\n <listOfModifiers/>\\n <kineticLaw \
timeUnits=\\\"time\\\"\\n     substanceUnits=\\\"substance\\\">\\n  <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n   <apply>\\n    <times/>\
\\n    <ci>A</ci>\\n    <ci>B</ci>\\n    <ci>k</ci>\\n   </apply>\\n  </math>\
\\n  <listOfParameters>\\n   <parameter id=\\\"k\\\"\\n       \
value=\\\"12\\\"\\n       name=\\\"Rate Constant\\\"/>\\n  \
</listOfParameters>\\n </kineticLaw>\\n</reaction>\>\""}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["speciesToSBML", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"speciesToSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<speciesToSBML[options] returns an SBML <species ... /> \
definition\\nspeciesToSBML[x,options], where x is an identifier or string, is \
interpreted as speciesToSBML[id->x,options]\\n\>\"", "<>", 
    "\"\<speciesToSBML[{{options}, {options},...}] returns an SBML \
<listOfSpecies .../> block for a set of species described by the option \
lists.\\n\>\"", "<>", 
    "\"\<Options have the same names as the SBML fields for species: id, \
name, metaid, compartment, initialAmount, initialConcentration, units, \
boundaryCondition, charge, constant, annotation, notes. If both a \
concentration and an amount are given, the first one in the option list is \
assumed to be the correct one.\>\"", "<>", "\[IndentingNewLine]", 
    "\"\<\\n\\nThe following PROPOSED LEVEL 3 option is allowed if \
Arrays->True is set by an call to \
newModel[]:\\nArrayDimensions->{i->{min,max},j->{min,max},...} or {} \
(default).\>\"", "<>", "\[IndentingNewLine]", "\"\<\\n\\n\!\(\*
StyleBox[\"Example\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"1\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"(\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"single\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"species\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\")\",
FontVariations->{\"Underline\"->True}]\):\\n\\n\>\"", "<>", 
    "\"\<speciesToSBML[id\[Rule] \\\"fred\\\", name\[Rule] \\\"Fred \
Flintstone\\\", compartment\[Rule] \\\"bedrock\\\" , boundaryCondition\[Rule] \
\\\"false\\\", constant\[Rule] \\\"true\\\", initialConcentration\[Rule]5, \
units\[Rule] \\\"rocks\\\" , charge\[Rule]17]\\n\\n\>\"", "<>", 
    "\"\<returns the string\\n\\n\>\"", "<>", 
    "\"\<<species id=\\\"fred\\\" name=\\\"Fred Flintstone\\\" compartment=\\\
\"bedrock\\\" boundaryCondition=\\\"false\\\" constant=\\\"true\\\" \
initialConcentration=\\\"5\\\" units=\\\"rocks\\\" charge=\\\"17\\\"/>\>\"", 
    "<>", "\"\<\\n\\n\!\(\*
StyleBox[\"Example\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"2\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"(\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"multiple\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\" \",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\"species\",
FontVariations->{\"Underline\"->True}]\)\!\(\*
StyleBox[\")\",
FontVariations->{\"Underline\"->True}]\):\\n\\n\>\"", "<>", 
    "\"\<speciesToSBML[{{id\[Rule] \\\"fred\\\", compartment\[Rule] \
\\\"bedrock\\\"}, {id\[Rule] \\\"barney\\\",compartment\[Rule] \
\\\"bedrock\\\"}}]\\n\\nreturns the string\\n\\n\>\"", "<>", 
    "\"\<<listOfSpecies>\\n <species id=\\\"fred\\\"\\n     name=\\\"fred\\\"\
\\n     compartment=\\\"bedrock\\\"\\n     boundaryCondition=\\\"false\\\"\\n \
    constant=\\\"false\\\"/>\\n <species id=\\\"barney\\\"\\n     \
name=\\\"barney\\\"\\n     compartment=\\\"bedrock\\\"\\n     \
boundaryCondition=\\\"false\\\"\\n     \
constant=\\\"false\\\"/>\\n</listOfSpecies>\>\""}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["speciesTypeToSBML", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"speciesTypeToSBML", "::", "usage"}], "=", 
  RowBox[{
  "\"\<speciesTypeToSBML[options] returns the SBML for a speciesType. Options \
include:\>\"", "<>", 
   "\"\<\\nid->Sid\\nname->optional string.\>\""}]}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"speciesTypeToSBML[options] returns the SBML for a \
speciesType. Options include:\\nid->Sid\\nname->optional string.\"\>"], \
"Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["functionToSBML", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"functionToSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<functionToSBML[options] returns an SBML string for a \
<functionDefinition ... /> definition.\\n\>\"", "<>", 
    "\"\<functionToSBML[{{options}, {options},...}] returns an SBML string \
for a <listOfFunctionDefinitions ... />\\n\\nOptions:\\narguments\[Rule]x or \
{\!\(\*SubscriptBox[\(x\), \(1\)]\),\!\(\*SubscriptBox[\(x\), \(2\)]\),...}, \
names of the function arguments. At least one argument must be supplied. If \
no arguments are given a single dummy argument will be \
generated.\\nid\[Rule]string, value of SBML id field; if not specified, a \
name functionk, where k is an incrementing integer, will be \
supplied.\\nmetaid->string,if different from \\\"\\\" the metaid will be \
assigned to the value of the given string.\\nmath\[Rule]expression, \
Mathematica expression for the function return value in terms of the \
arguments. If not specified, the value of 1 will be \
returned.\\nname\[Rule]string, value of SBML name field if not specified, the \
value of the id field will be used.\\n\\nExample 1, <functionDefinition ...>:\
\\n\\nfunctionToSBML[id\[Rule] alfafa, arguments\[Rule] {horse, grass}, math\
\[Rule] ( 1/(horse*grass))]\\n\\nreturns the string:\\n\\n\>\"", "<>", 
    "\"\<<functionDefinition id=\\\"alfafa\\\"\\n    name=\\\"alfafa\\\">\\n \
<math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n  <lambda>\\n   \
<bvar>\\n    <ci>horse</ci>\\n   </bvar>\\n   <bvar>\\n    <ci>grass</ci>\\n  \
 </bvar>\\n   <apply>\\n    <times/>\\n    <cn type=\\\"integer\\\">1</cn>\\n \
   <apply>\\n     <power/>\\n     <apply>\\n      <times/>\\n      \
<ci>grass</ci>\\n      <ci>horse</ci>\\n     </apply>\\n     <cn \
type=\\\"integer\\\">-1</cn>\\n    </apply>\\n   </apply>\\n  </lambda>\\n \
</math>\\n</functionDefinition>\>\"", "<>", 
    "\"\<\\n\\nExample 2, <listOfFunctionDefintions ...>\\n\\n\>\"", "<>", 
    "\"\<functionToSBML[{{id\[Rule] QRT,arguments\[Rule] {x}, math\[Rule] \
x^(1/4)},{id\[Rule] sinc, arguments\[Rule] {x}, math\[Rule] Sin[x]/x}}]\>\"", 
    "<>", "\"\<\\n\\nreturns the string:\\n\\n\>\"", "<>", 
    "\"\<<listOfFunctionDefinitions>\\n <functionDefinition id=\\\"QRT\\\"\\n \
    name=\\\"QRT\\\">\\n  <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n   <lambda>\\n    \
<bvar>\\n     <ci>x</ci>\\n    </bvar>\\n    <apply>\\n     <power/>\\n     \
<ci>x</ci>\\n     <cn type=\\\"rational\\\">1<sep/>4</cn>\\n    </apply>\\n   \
</lambda>\\n  </math>\\n </functionDefinition>\\n <functionDefinition \
id=\\\"sinc\\\"\\n     name=\\\"sinc\\\">\\n  <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n   <lambda>\\n    \
<bvar>\\n     <ci>x</ci>\\n    </bvar>\\n    <apply>\\n     <times/>\\n     \
<apply>\\n      <sin/>\\n      <ci>x</ci>\\n     </apply>\\n     <apply>\\n   \
   <power/>\\n      <ci>x</ci>\\n      <cn type=\\\"integer\\\">-1</cn>\\n    \
 </apply>\\n    </apply>\\n   </lambda>\\n  </math>\\n \
</functionDefinition>\\n</listOfFunctionDefinitions>\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{" "}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["unitToSBML", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"unitToSBML", "::", "usage"}], "=", 
   "\"\<unitToSBML[options] returns an SBML <unitDefinition \
.../>.\\nunitToSBML[x,options], where x is an identifier or string, is the \
same as unitToSBML[id->x,options].\\nunitToSBML[{{options},{options},...}] \
returns a <listOfUnitDefinitions ...> where each sub-option list corresponds \
to the option list of the first form.\\nOptions:\\nid->no default, value of \
id field of unitDefiniton, if not specified, supplied by program as unitn, \
where n is an integer\\nname->no default, if not supplied, value of id  is \
used\\nunit->{}, contains an option list of the form \
\\\"string\\\"->{scale->0, exponent->1, multiplier->1, offset->1}, where \
\\\"string\\\" is a quote-delimited string indicated the value of the kind \
field of the <unit ...> expression.\\n\\nExample:\\n\\nunitToSBML[id\[Rule] \
\\\"mmlh\\\",name\[Rule] \\\"millimoles_per_liter_per_hour\\\",unit\[Rule] \
{\\\"mole\\\"\[Rule] {scale\[Rule] -3}, \\\"litre\\\"\[Rule] {exponent\[Rule] \
-1}, \\\"second\\\"\[Rule] {multiplier\[Rule] 0.000277778, exponent\[Rule] \
-1}}]\>\""}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["compartmentToSBML", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compartmentToSBML", "::", "usage"}], "=", 
    RowBox[{
    "\"\<compartmentToSBML[options] returns a <compartment \
.../>\\ncompartmentToSBML[x, options], where x is an identifier or string, is \
the same as \
compartmentToSBML[id->x,options]\\ncompartmentToSBML[{{options},{options},...}\
] returns a <listOfCompartments .../> where each option list corresponds to a \
single <compartment .../> definition.\\nOptions are the same as valid \
compartment fields: id, name, spatialDimensions, size, untis, outside, \
constant. Default values are set as per the SBML Level 2 spec.\>\"", "<>", 
     "\"\<\\n\\nThe following PROPOSED LEVEL 3 option is allowed if \
Arrays->True is set by an call to \
newModel[]:\\nArrayDimensions->{i->{min,max},j->{min,max},...} or {} \
(default).\>\"", "<>", 
     "\"\<\\n\\nExample:\\n\\ncompartmentToSBML[id\[Rule] \\\"bedrock\\\", \
size\[Rule] \\\"40000\\\"]\\n\\nreturns the string:\\n\\<compartment \
id=\\\"bedrock\\\" name=\\\"bedrock\\\" size=\\\"40000\\\"/>\\n\\nThe \
input:\\n\\ncompartmentToSBML[{{id\[Rule] \\\"c1\\\",size\[Rule] \
5},{id\[Rule] \\\"c2\\\",spatialDimensions\[Rule] 2},{id\[Rule] \
\\\"c3\\\",name\[Rule] \\\"unsized_compartment_3\\\"}}]\\n\\nreturns the \
string:\\n\\n<listOfCompartments>\\n <compartment id=\\\"c1\\\"\\n     \
name=\\\"c1\\\"\\n     size=\\\"5\\\"/>\\n <compartment id=\\\"c2\\\"\\n     \
name=\\\"c2\\\"\\n     spatialDimensions=\\\"2\\\"/>\\n <compartment \
id=\\\"c3\\\"\\n     \
name=\\\"unsized_compartment_3\\\"/>\\n</listOfCompartments>\>\""}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setCompartment", "::", "usage"}], "=", 
  "\"\<setCompartment[name] sets the current compartment to name in the model \
builder. \\nAny subsequent call to addSpecies that specifies a compartment \
will override this setting.\\nAll subsequent calls to addSpecies, until the \
option compartment is used, will place the species in compartment \
\\\"name\\\".\\nsetCompartment[Null] will clear the compartment name stack. \
The result will be that subsequent species will be added to the first \
compartment of the model.\>\""}]}], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"setCompartment[name] sets the current compartment to name \
in the model builder. \\nAny subsequent call to addSpecies that specifies a \
compartment will override this setting.\\nAll subsequent calls to addSpecies, \
until the option compartment is used, will place the species in compartment \
\\\"name\\\".\\nsetCompartment[Null] will clear the compartment name stack. \
The result will be that subsequent species will be added to the first \
compartment of the model.\"\>"], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["initialAssignmentToSBML", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"initialAssignmentToSBML", "::", "usage"}], "=", 
  "\"\<initialAssignmentToSBML[options] returns the SBML for an \
<initiaAssignment>...<../> object. Options are: symbol, math, SBOTerm, \
metaid, notes, annotation.\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"initialAssignmentToSBML[options] returns the SBML for an \
<initiaAssignment>...<../> object. Options are: symbol, math, SBOTerm, \
metaid, notes, annotation.\"\>"], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["compartmentTypeToSBML", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"compartmentTypeToSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<compartmentTypeToSBML[options] returns the SBML for a \
compartmentTYPE. Options include:\>\"", "<>", 
    "\"\<\\nid->Sid\\nname->optional string.\>\""}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"compartmentTypeToSBML[options] returns the SBML for a \
compartmentTYPE. Options include:\\nid->Sid\\nname->optional string.\"\>"], \
"Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["parameterToSBML", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"parameterToSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<parameterToSBML[options] returns a <parameter.../> \
definition.\\nparameterToSBML[x,options], where x is an identifier or string, \
is interpreted as \
parameterToSBML[id->x,options].\\nparameterToSBML[id\[Rule]value] can be used \
if value is a number (name will be set to \
id).\\nparameterToSBML[{{options},{options},...}] returns a \
<listOfParameters.../> where each option list corresponds to a single \
<parameter.../> definiton. Options are identical to those for a parameter: \
id, name, value, units, constant.\>\"", "<>", 
    "\"\<\\n\\nThe following PROPOSED LEVEL 3 options are allowed if \
Arrays->True is set by an call to \
newModel[]:\\nArrayDimensions->{i->{min,max},j->{min,max},...} or {} \
(default).\\nforeach->name of compartment array for implied parameter \
array.\>\"", "<>", 
    "\"\<\\n\\nExample:\\n\\nparameterToSBML[id\[Rule] \\\"Pi\\\", \
name\[Rule] \\\"pi\\\",  value\[Rule] 3.14]\\n\\nreturns\\n\\n<parameter \
id=\\\"Pi\\\" name=\\\"pi\\\" value=\\\"3.14\\\"/>\\n\\nparameterToSBML[{{id\
\[Rule]\\\"pi\\\", value->3.14}, {id\[Rule]\\\"e\\\",value\[Rule]2.718}, {id\
\[Rule]\\\"E\\\",name\[Rule]\\\"Enzyme_Concentration\\\",constant\[Rule]\\\"\
false\\\",value\[Rule]1}}]\\n\\nreturns\\n\\n<listOfParameters>\\n <parameter \
id=\\\"pi\\\"\\n     name=\\\"pi\\\"\\n     value=\\\"3.14\\\"/>\\n \
<parameter id=\\\"e\\\"\\n     name=\\\"e\\\"\\n     value=\\\"2.718\\\"/>\\n \
<parameter id=\\\"E\\\"\\n     name=\\\"Enzyme_Concentration\\\"\\n     \
value=\\\"1\\\"\\n     \
constant=\\\"false\\\"/>\\n</listOfParameters>\>\""}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["ruleToSBML", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ruleToSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<ruleToSBML[options] returns a rule definition.\\nruleToSBML[x, \
options] is the same as \
ruleToSBML[id->x,options].\\nruleToSBML[{{options},{options},...}] returns a \
<listOfRules.../>, where each option list corresponds to a separate \
rule.\\n\\nOptions:\\nid-> Optional identifier to ading the rule. Since SBML \
does not define an \\\"id\\\" field for rules, ids are placed as a metaid \
within the rule definition.\\ntype->algebraicRule,assignmentRule,or rateRule \
(no default)\\nvariable->name of variable (variable n) if not \
specified.\\nmath->formula for the rule.\>\"", "<>", 
    "\"\<\\n\\nThe following PROPOSED LEVEL 3 options are allowed if \
Arrays->True is set by an call to \
newModel[]:\\nArrayDimensions->{i->{min,max},j->{min,max},...} or {} \
(default).\\nvariableLInk->{variable->{index1,index2,...}} or {} (default). \
If variableLink is specified then the variable field is \
ignored.\\nruleToSBML[type->initialAssignmentRule,variableLink->{x->i},\
ArrayDimensions->{i->{1,3}},data->{5,10,15}] for a vector, assigns the data \
{5,10,15} to the vector x with an index of i that runs from 1 to \
3\\nruleToSBML[type->initialAssignmentRule,variableLink->{x->{i,j}},\
ArrayDimensions->{i->{1,3},j->{1,3}, data->{{5,10,15},{20,25,30},{35,40,50}}] \
for a matrix, assigns the data to a matrix with indices i and j that each run \
from 1 to 3.\>\"", "<>", 
    "\"\<\\n\\nExample 1: ruleToSBML[type\[Rule] assignmentRule, variable\
\[Rule] x, math\[Rule] x+y]\\nreturns:\\n<assignmentRule \
variable=\\\"x\\\">\\n <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n  <apply>\\n   <plus/>\\n \
  <ci>x</ci>\\n   <ci>y</ci>\\n  </apply>\\n \
</math>\\n</assignmentRule>\\n\\nExample2:\\nruleToSBML[{{type->\\\"\
algebraicRule\\\",math->x^2}, \
{type->\\\"rateRule\\\",variable->y,math->2*x}}]\\nreturns:\\n<listOfRules>\\\
n <algebraicRule>\\n  <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\
\\n   <apply>\\n    <power/>\\n    <ci>x</ci>\\n    <cn \
type=\\\"integer\\\">2</cn>\\n   </apply>\\n  </math>\\n </algebraicRule>\\n \
<rateRule variable=\\\"y\\\">\\n  <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n   <apply>\\n    <times/>\
\\n    <cn type=\\\"integer\\\">2</cn>\\n    <ci>x</ci>\\n   </apply>\\n  \
</math>\\n </rateRule>\\n</listOfRules>\>\""}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["constraintToSBML", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"constraintToSBML", "::", "usage"}], "=", 
  "\"\<constraintToSBML[options] returns the SBML for a <constraint>...<../> \
object. Options are: message, math, SBOTerm, metaid, notes, \
annotation.\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"constraintToSBML[options] returns the SBML for a \
<constraint>...<../> object. Options are: message, math, SBOTerm, metaid, \
notes, annotation.\"\>"], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["eventToSBML", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"eventToSBML", "::", "usage"}], "=", 
   "\"\<eventToSBML[options] returns a single <event.../> \
definition.\\neventToSBML[{{options},{options},...}] returns a \
<listOfEvents.../>, where each option list corresponds to a single \
event.\\n\\nOptions:\\nid\[Rule]event id, if not provided, defaults to eventn \
where n is an integer.\\nname\[Rule]event name, if not provided, defaults to \
value of event.\\ntrigger->expression, required,any Mathematica expression \
that evaluates to True or False.\\ndelay->expression, optional, any \
expression that evaluates to a number.\\ntimeUnits->units, optional units to \
use for time.\\neventAssignment->{\!\(\*SubscriptBox[\(var\), \(1\)]\)\[Rule]\
\!\(\*SubscriptBox[\(expr\), \(1\)]\),\!\(\*SubscriptBox[\(var\), \(2\)]\)\
\[Rule]\!\(\*SubscriptBox[\(expr\), \(2\)]\),...}, what should happen when \
the event is triggered, each variable \!\(\*SubscriptBox[\(var\), \(i\)]\) is \
assigned to the value of expression \!\(\*SubscriptBox[\(expr\), \(i\)]\).\\n\
\\nExample 1: single event:\\neventToSBML[id\[Rule]\\\"foo\\\", name\[Rule]\\\
\"A basic event\\\", timeUnits\[Rule] \\\"hours\\\",trigger\[Rule] (x>5), \
eventAssignment\[Rule] {x\[Rule] y+x, y\[Rule] 0}]\\nreturns:\\n<event \
id\\\"foo\\\" name=\\\"A basic event\\\" timeUnits=\\\"hours\\\">\\n \
<trigger>\\n  <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n   \
<apply>\\n    <gt/>\\n    <ci>x</ci>\\n    <cn>5</cn>\\n   </apply>\\n  \
</math>\\n </trigger>\\n <listOfEventAssignments>\\n  <eventAssignment \
variable=\\\"x\\\">\\n   <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\
\">\\n    <apply>\\n     <plus/>\\n     <ci>x</ci>\\n     <ci>y</ci>\\n    \
</apply>\\n   </math>\\n  </eventAssignment>\\n  <eventAssignment variable=\\\
\"y\\\">\\n   <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n    \
<cn>0</cn>\\n   </math>\\n  </eventAssignment>\\n \
</listOfEventAssignments>\\n</event>\\n\\nExample 2: \
listOfEvents:\\neventToSBML[{{id\[Rule]\\\"yon\\\", name\[Rule]\\\"y turned \
on\\\", trigger\[Rule] x>17, eventAssignment\[Rule]{y\[Rule]0, z\[Rule]100}}, \
{id\[Rule]\\\"yoff\\\",name\[Rule]\\\"y turned off\\\", trigger\[Rule]x>20, \
eventAssignment\[Rule]{y\[Rule]100, \
z\[Rule]0}}}]\\n\\nreturns:\\n<listOfEvents>\\n <event id=\\\"yon\\\" name=\\\
\"y turned on\\\">\\n  <trigger>\\n   <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n    <apply>\\n     \
<gt/>\\n     <ci>x</ci>\\n     <cn>17</cn>\\n    </apply>\\n   </math>\\n  \
</trigger>\\n  <listOfEventAssignments>\\n   <eventAssignment \
variable=\\\"y\\\">\\n    <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n     <cn>0</cn>\\n    \
</math>\\n   </eventAssignment>\\n   <eventAssignment variable=\\\"z\\\">\\n  \
  <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n     <cn>100</cn>\
\\n    </math>\\n   </eventAssignment>\\n  </listOfEventAssignments>\\n \
</event>\\n <event id=\\\"yoff\\\" name=\\\"y turned off\\\">\\n  \
<trigger>\\n   <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n    \
<apply>\\n     <gt/>\\n     <ci>x</ci>\\n     <cn>20</cn>\\n    </apply>\\n   \
</math>\\n  </trigger>\\n  <listOfEventAssignments>\\n   <eventAssignment \
variable=\\\"y\\\">\\n    <math \
xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n     <cn>100</cn>\\n    \
</math>\\n   </eventAssignment>\\n   <eventAssignment variable=\\\"z\\\">\\n  \
  <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n     \
<cn>0</cn>\\n    </math>\\n   </eventAssignment>\\n  \
</listOfEventAssignments>\\n </event>\\n</listOfEvents>\>\""}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Symbolic SBML", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"reactionToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<reactionToSymbolicSBML returns Symbolic SBML for a reaction or \
listOfReactions. Usage is identical to reactionToSBML.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"speciesToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<speciesToSymbolicSBML returns Symbolic SBML for a species or \
listOfSpecies. Usage is identical to speciesToSBML.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"speciesTypeToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<speciesTypeToSymbolicSBML returns Symbolic SBML for a speciesType or \
listOfSpeciesTypes. Usage is identical to speciesTypeToSBML.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"functionToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<functionToSymbolicSBML returns Symbolic SBML for a function or \
listOfFunctions. Usage is identical to functionToSBML.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unitToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<unitToSymbolicSBML returns Symbolic SBML for a unit or a listOfUnits. \
Usage is identical to unitToSBML.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compartmentToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<compartmentToSymbolicSBML returns Symbolic SBML for a compartment or \
listOfCompartments. Usage is identical to compartmentToSBML.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compartmentTypeToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<compartmentTypeToSymbolicSBML returns Symbolic SBML for a \
compartmentType or listOfcompartmentTypes. \>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"parameterToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<parameterToSymbolicSBML returns Symbolic SBML for a parameter or \
listOfParameters. Usage is identical to parameterToSBML.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ruleToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<ruleToSymbolicSBML returns Symbolic SBML for a rule or listOfRules. \
Usage is identical to ruleToSBML.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"constraintToSymbolicSBML", "::", "usage"}], "=", 
  "\"\<constraintToSymbolicSBML[options] returns the symbolic SBML for a \
<constraint>...<../> object. Options are: message, math, SBOTerm, metaid, \
notes, annotation.\>\""}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"eventToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<eventToSymbolicSBML returns Symbolic SBML for an event or a \
listOfEvents. Usage is identical to eventToSBML.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"initialAssignmentToSymbolicSBML", "::", "usage"}], "=", 
   "\"\<initialAssignmentToSymbolicSBML returns Symbolic SBML for an \
initialAssignment. Usage is idential to initialAssignmentToSBML\>\""}], 
  ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"constraintToSymbolicSBML[options] returns the symbolic SBML \
for a <constraint>...<../> object. Options are: message, math, SBOTerm, \
metaid, notes, annotation.\"\>"], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["add_, get_, modify_, remove_, replace_", "Subsubsection"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"getObjectAttribute", "::", "usage"}], "=", 
     "\"\<getObjectAttribute[object, attribute, number]\\nobject is an sbml \
object such as \\\"species\\\", and attribute is one of its attributes, such \
as \\\"id\\\" or \\\"name\\\", e.g., getObjectAttribute[\\\"compartment\\\", \
\\\"size\\\", 1]. The value returned will always be a string because it is \
coming from xml.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getObjectID", "::", "usage"}], "=", 
     "\"\<getObjectID[sbmlobject, n] returns the ID of the nth SBML object \
sbmlobject, e.g., getObjectID[\\\"species\\\", 2]. The value returned will \
always be a string because it is coming from xml.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getObjectIDs", "::", "usage"}], "=", 
     "\"\<getObjectIds[ojbect]\>\""}], ";"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getObjectName", "::", "usage"}], "=", 
     "\"\<getObjectName[sbmlobject, n] returns the name of the nth SBML \
object sbmlobject, e.g., getObjecName[\\\"species\\\", 3].  The value \
returned will always be a string because it is coming from xml.\>\""}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getObjectNames", "::", "usage"}], "=", 
     "\"\<getObjectNames[object]\>\""}], ";"}], " ", "\[IndentingNewLine]", 
   " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getNumberOfObjects", "::", "usage"}], "=", 
     "\"\<getNumberOfObjects[object] where object is a string such as \
\\\"compartment\\\"\>\""}], ";"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentID", "::", "usage"}], "=", 
     "\"\<getCompartmentID[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEventID", "::", "usage"}], "=", 
     "\"\<getEventID[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getFunctionID", "::", "usage"}], "=", 
     "\"\<getFunctionID[number]\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"getParameterID", "::", "usage"}], "=", 
     "\"\<getParameterID[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getRuleID", "::", "usage"}], "=", "\"\<getRuleID[number]\>\""}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesID", "::", "usage"}], "=", 
     "\"\<getSpeciesID[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getUnitID", "::", "usage"}], "=", "\"\<getUnitID[number]\>\""}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesTypeID", "::", "usage"}], "=", 
     "\"\<getSpeciesTypeID[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentTypeID", " ", "::", "usage"}], "=", 
     "\"\<getCompartmentTypeID[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getConstraintID", "::", "usage"}], "=", 
     "\"\<getConstraintID[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getInitialAssignmentID", "::", "usage"}], "=", 
     "\"\<getInitialAssignmentID[number]\>\""}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentName", "::", "usage"}], "=", 
     "\"\<getCompartmentName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEventName", "::", "usage"}], "=", 
     "\"\<getEventName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getFunctionName", "::", "usage"}], "=", 
     "\"\<getFunctionName[number]\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"getParameterName", "::", "usage"}], "=", 
     "\"\<getParameterName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getRuleName", "::", "usage"}], "=", 
     "\"\<getRuleName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesName", "::", "usage"}], "=", 
     "\"\<getSpeciesName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getUnitName", "::", "usage"}], "=", 
     "\"\<getUnitName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesTypeName", "::", "usage"}], "=", 
     "\"\<getSpeciesTypeName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentTypeName", "::", "usage"}], "=", 
     "\"\<getCompartmentTypeName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getConstraintName", "::", "usage"}], "=", 
     "\"\<getConstraintName[number]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getInitialAssignmentName", "::", "usage"}], "=", 
     "\"\<getInitialAssignmentName[number]\>\""}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentNames", "::", "usage"}], "=", 
     "\"\<getCompartmentNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEventNames", "::", "usage"}], "=", 
     "\"\<getEventNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getFunctionNames", "::", "usage"}], "=", 
     "\"\<getFunctionNames[]\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"getParameterNames", "::", "usage"}], "=", 
     "\"\<getParameterNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getRuleNames", "::", "usage"}], "=", "\"\<getRuleNames[]\>\""}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesNames", "::", "usage"}], "=", 
     "\"\<getSpeciesNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getUnitNames", "::", "usage"}], "=", "\"\<getUnitNames[]\>\""}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesTypeNames", "::", "usage"}], "=", 
     "\"\<getSpeciesTypeNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentTypeNames", "::", "usage"}], "=", 
     "\"\<getCompartmentTypeNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getConstraintNames", "::", "usage"}], "=", 
     "\"\<getConstraintNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getInitialAssignmentNames", "::", "usage"}], "=", 
     "\"\<getInitialAssignmentNames[]\>\""}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentIDs", "::", "usage"}], "=", 
     "\"\<getCompartmentIDs[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEventIDs", "::", "usage"}], "=", "\"\<getEventIDs[]\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getFunctionIDs", "::", "usage"}], "=", 
     "\"\<getFunctionIDs[]\>\""}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"getParameterIDs", "::", "usage"}], "=", 
     "\"\<getParameterIDs[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getRuleIDs", "::", "usage"}], "=", "\"\<getRuleIDs[]\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesIDs", "::", "usage"}], "=", 
     "\"\<getSpeciesIDs[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getUnitIDs", "::", "usage"}], "=", "\"\<getUnitIDs[]\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSpeciesTypeIDs", "::", "usage"}], "=", 
     "\"\<getSpeciesTypeIDs[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getCompartmentTypeIDs", "::", "usage"}], "=", 
     "\"\<getCompartmentTypeIDs[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getConstraintIDs", "::", "usage"}], "=", 
     "\"\<getConstraintIDs[]\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getInitialAssignmentIDs", "::", "usage"}], "=", 
     "\"\<getInitialAssignmentIDs[]\>\""}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getObject", "::", "usage"}], "=", 
     "\"\<getObject[type,arguments] retrieves the specified object type. See \
also getObjects.\\ntype must be one of the following strings: \\\"compartment\
\\\",\\\"event\\\",\\\"function\\\",\\\"parameter\\\",\\\"reaction\\\",\\\"\
rule\\\"\\\"species\\\",\\\"unit\\\"\\narguments may be a single integer, id, \
or a list of integers and/or ids. \>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getObjectNumber", "::", "usage"}], "=", 
     "\"\<getObjectNumber[type,arguments] retrieves the number of the \
specified object type.\\ntype must be one of the following strings: \
\\\"compartment\\\",\\\"event\\\",\\\"function\\\",\\\"parameter\\\",\\\"\
reaction\\\",\\\"rule\\\"\\\"species\\\",\\\"unit\\\"\\nargument must be a \
valid sid\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getObjects", "::", "usage"}], "=", 
     "\"\<getObject[type1,args1,type2,args2,...] returns a list of the \
specified objects as symbolic XML.  See \
getObject.\\ngetObject[type1\[Rule]arg1,type2\[Rule]arg2,...] returns the \
objects as a rule \
list\\nexamples:\\ngetObject[\\\"event\\\",A,\\\"Species\\\",B]\\ngetObject[\\\
\"rule\\\"\[Rule]{1,3},\\\"function\\\"\[Rule]1,\\\"species\\\"\[Rule]{x,y,z}]\
\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"replaceObject", "::", "usage"}], "=", "\"\<\>\""}], 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.395750760013318*^9, 3.395750769787632*^9}, {
  3.395753504121726*^9, 3.395753514509787*^9}, {3.395754025833393*^9, 
  3.395754243241749*^9}, {3.395755006007793*^9, 3.395755006533113*^9}, {
  3.3957550851745853`*^9, 3.3957551245515423`*^9}, {3.395755460912979*^9, 
  3.3957554680913563`*^9}, {3.395756709824147*^9, 3.395756896614653*^9}, {
  3.395757141607168*^9, 3.395757143451951*^9}, {3.395757183717589*^9, 
  3.3957571841609583`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getReaction", "::", "usage"}], "=", 
   "\"\<getReaction[x] returns the selected reaction (in symbolic XML) from \
the model. The argument may be either an SID or an integer n to retrieve the \
nth reaction in the model.\\ngetReaction[{x1,x2,...}] returns the list of \
reactions x1, x2, ..., which can be specified in any combination of \
identifying SIDs or integers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfReactions", "::", "usage"}], "=", 
   "\"\<getNumberOfReactions returns the number of reactions in the \
model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getReactions", "::", "usage"}], "=", 
   "\"\<getReactions[] returns all of the reactions in the model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getReactionNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceReaction", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getRule", "::", "usage"}], "=", 
   "\"\<getRule[x] returns the selected rule (in symbolic XML) from the \
model. The argument must be an integer n, to retrieve the nth rule in the \
model, or a list of integers,to retrieve a list of rules.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getRules", "::", "usage"}], "=", 
   "\"\<getRules[] returns a list of all the rules in the model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfRules", "::", "usage"}], "=", 
   "\"\<getNumberOfRules[] returns the number of rules in the model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getRuleNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceRule", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getConstraint", "::", "usage"}], "=", 
   "\"\<getConstraint[n] returns the selected Constraint (in symbolic XML) \
from the model. The argument must be an integer n.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getConstraints", "::", "usage"}], "=", 
   "\"\<getConstraints[] returns a list of all the <Constraint> objects in \
the model (in symbolic SBML).\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfConstraints", "::", "usage"}], "=", 
   "\"\<getNumberOfConstraints[] returns the number of <Constraint> objects \
in the model.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getConstraintNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceConstraint", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addConstraint", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeConstraint", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyConstraint", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}]}], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getInitialAssignment", "::", "usage"}], "=", 
   "\"\<getInitialAssignment[n] returns the selected initialAssignment (in \
symbolic XML) from the model. The argument must be an integer n or an SID \
referring to the symbol field of the initialAssignment.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInitialAssignments", "::", "usage"}], "=", 
   "\"\<getInitialAssignments[] returns a list of all the <initialAssignment> \
objects in the model (in symbolic SBML).\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfInitialAssignments", "::", "usage"}], "=", 
   "\"\<getNumberOfInitialAssignments[] returns the number of \
<initialAssignment> objects in the model.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getInitialAssignmentNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"replaceInitialAssignment", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addInitialAssignment", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeInitialAssignment", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyInitialAssignment", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}]}], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getCompartment", "::", "usage"}], "=", 
   "\"\<getCompartment[x] returns the selected compartment (in symbolic XML) \
from the model. The argument may be either an SID or an integer n to retrieve \
the nth compartment in the model.\\ngetCompartment[{x1,x2,...}] returns the \
list of compartments x1, x2, ..., which can be specified in any combination \
of identifying SIDs or integers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfCompartments", "::", "usage"}], "=", 
   "\"\<getNumberOfCompartments[] returns the number of compartments in the \
model\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartments", "::", "usage"}], "=", 
   "\"\<getCompartments[] returns a list of all the compartments in the model\
\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartmentNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceCompartment", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getUnit", "::", "usage"}], "=", 
   "\"\<getUnit[x] returns the selected unit (in symbolic XML) from the \
model. The argument may be either an SID or an integer n to retrieve the nth \
unit in the model.\\ngetUnit[{x1,x2,...}] returns the list of unit x1, x2, \
..., which can be specified in any combination of identifying SIDs or \
integers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getUnits", "::", "usage"}], "=", 
   "\"\<getUnits[] returns a list of all the units in the model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfUnits", "::", "usage"}], "=", 
   "\"\<getNumberOfUnits[] returns the number of units in the model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getUnitNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceUnit", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getParameter", "::", "usage"}], "=", 
   "\"\<getParameter[x] returns the selected parameter (in symbolic XML) from \
the model. The argument may be either an SID or an integer n to retrieve the \
nth parameter in the model.\\ngetParameter[{x1,x2,...}] returns the list of \
parameters x1, x2, ..., which can be specified in any combination of \
identifying SIDs or integers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfParameters", "::", "usage"}], "=", 
   "\"\<getNumberOfParameters[] returns the number of global parameters in \
the model\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getParameters", "::", "usage"}], "=", 
   "\"\<getParameters[] returns a list of all the global parameters in the \
model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getParameterNumber", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceParameter", "::", "usage"}], "=", "\"\<\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpecies", "::", "usage"}], "=", 
   "\"\<getSpecies[x] returns the selected species (in symbolic XML) from the \
model. The argument may be either an SID or an integer n to retrieve the nth \
species in the model.\\ngetSpecies[{x1,x2,...}] returns the list of species \
x1, x2, ..., which can be specified in any combination of identifying SIDs or \
numbers.\\ngetSpecies[] returns a list of all the species in the \
model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfSpecies", "::", "usage"}], "=", 
   "\"\<getNumberOfSpecies[] returns the number of species in the \
model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpeciesNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceSpecies", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getFunction", "::", "usage"}], "=", 
   "\"\<getFunction[x] returns the selected function (in symbolic XML) from \
the model. The argument may be either an SID or an integer n to retrieve the \
nth function in the model.\\ngetFunction[{x1,x2,...}] returns the list of \
functions x1, x2, ..., which can be specified in any combination of \
identifying SIDs or integers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfFunctions", "::", "usage"}], "=", 
   "\"\<getNumberOfFunctions[] returns the number of functions in the model\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getFunctions", "::", "usage"}], "=", 
   "\"\<getFunctions[] returns a list of all the functions in the \
model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getFunctionNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceFunction", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getEvent", "::", "usage"}], "=", 
   "\"\<getEvent[x] returns the selected event (in symbolic XML) from the \
model. The argument may be either an SID or an integer n to retrieve the nth \
event in the model.\\ngetEvent[{x1,x2,...}] returns the list of events x1, \
x2, ..., which can be specified in any combination of identifying SIDs or \
integers.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfEvents", "::", "usage"}], "=", 
   "\"\<getNumberOfFunctions[] returns the number of events in the \
model\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getEvents", "::", "usage"}], "=", 
   "\"\<getFunctions[] returns a list of all the events in the model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getEventNumber", "::", "usage"}], "=", 
   "\"\<No information is available about this function at the present \
time.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceEvent", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addSpecies", "::", "usage"}], "=", 
    "\"\<addSpecies[id, options] adds a species to the current model. Options \
are the same as speciesToSBML. If the species previously exists, the previous \
information about it in the model is replaced. If the required compartment is \
not specified for the species it is assigned to \\\"Indeterminate.\\\" If any \
units are specified for the species and they have not been previously defined \
in the model or are not predefined units, new units are added to the model \
without any <unit kind...> information.\\naddSpecies[{s1,s2,..}, options] \
adds the set of species to the model.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeSpecies", "::", "usage"}], "=", 
    "\"\<removeSpecies[id] removes a species from the model.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addCompartment", "::", "usage"}], "=", 
   "\"\<addCompartment[id, options] adds a new compartment to the model. \
Options are the same as compartmentToSBML. If the compartment previously \
exists, the previous information about it in the model is replaced.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeCompartment", "::", "usage"}], "=", 
   "\"\<removeCompartment[id] removes a compartment from the model. If the \
compartment contains any species, the compartment may not be removed.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compartmentCreate", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"compartmentCreateWith", "::", "usage"}], "=", "\"\<\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addEvent", "::", "usage"}], "=", 
   "\"\<addEvent[id, options] adds a new event to the model. Options are the \
same as eventToSBML. If an event with the same id already exists in the \
model, it will be replaced with the new event.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeEvent", "::", "usage"}], "=", 
    "\"\<removeEvent[id] removes the event from the model.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addFunction", "::", "usage"}], "=", 
   "\"\<addFunction[id, options] adds a new function to the model. Options \
are the same as functionToSBML. If a function with the same id has been \
previously defined, the old definition is replaced with the new definition.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeFunction", "::", "usage"}], "=", 
    "\"\<removeFunction[id] removes a function from the model.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addParameter", "::", "usage"}], "=", 
   "\"\<addParameter[id, options] adds a new parameter to the model. Options \
are the same as parameterTOSBML. If the parameter has been previously \
defined, the old definition is replaced with the new definiton.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeParameter", "::", "usage"}], "=", 
    "\"\<removeParameter[id] removes a parameter from the model.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addReaction", "::", "usage"}], "=", 
   "\"\<addReaction[reaction, options] adds a reaction to the current model. \
Options are the same as reactionToSBML. If the id is specified and a reaction \
with the same id already exists in the model then the previous information \
about that reaction is replaced. If any of the reactants, products, or \
modifiers in the reaction have not been previously defined in the model, they \
are added to compartment \\\"Indeterminate.\\\"\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeReaction", "::", "usage"}], "=", 
    "\"\<removeReaction[id] removes a reaction from the current model.\>\""}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addRule", "::", "usage"}], "=", 
   "\"\<addRule[options] adds a rule to the current model. Options are the \
same as ruleToSBML.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeRule", "::", "usage"}], "=", 
    "\"\<removeRule[id] removes a rule from the current model.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addUnit", "::", "usage"}], "=", 
   "\"\<addUnit[unit, options] adds a unit to the current model. If a unit by \
the same name has been previously defined, it is replaced.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeUnit", "::", "usage"}], "=", 
    "\"\<removeUnit[id] removes a unit from the current model. If the unit is \
referenced by a species or parameter in the model it may not be \
removed.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpeciesType", "::", "usage"}], "=", 
   "\"\<gets a speciesType as symbolic SBML by number or name\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSpeciesTypeNumber", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfSpeciesTypes", "::", "usage"}], "=", 
   "\"\<getNumberOfSpeciesTypes[] returns the number of speciesTypes that \
have  been defined in the current model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addSpeciesType", "::", "usage"}], "=", 
   "\"\<addSpeciesType adds a speciesType to the model. Options are the same \
speciesTypeToSBML\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeSpeciesType", "::", "usage"}], "=", 
   "\"\<removeSpeciesType[id] removes a speciesType from the model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifySpeciesType", "::", "usage"}], "=", 
   "\"\<modifySpeciesType[id, options] modifies a species in the current \
model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceSpeciesType", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartmentType", "::", "usage"}], "=", 
   "\"\<gets a CompartmentType as symbolic SBML by number or name\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartmentTypeNumber", "::", "usage"}], "=", 
   "\"\<getCompartmentTypeNumber[id] returns the integer number of the \
compartmentType with the specified id\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getCompartmentTypes", "::", "usage"}], "=", 
   "\"\<gets a list of all compartmentTypes as symbolic SBML\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getNumberOfCompartmentTypes", "::", "usage"}], "=", 
   "\"\<getNumberOfCompartmentTypes[] returns the number of CompartmentTypes \
that have  been defined in the current model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addCompartmentType", "::", "usage"}], "=", 
   "\"\<addCompartmentType adds a CompartmentType to the model. Options are \
the same CompartmentTypeToSBML\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"removeCompartmentType", "::", "usage"}], "=", 
   "\"\<removeCompartmentType[id] removes a CompartmentType from the model.\>\
\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyCompartmentType", "::", "usage"}], "=", 
   "\"\<modifyCompartmentType[id, options] modifies a Compartment in the \
current model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceCompartmentType", "::", "usage"}], "=", 
    "\"\<No information is available about this function at the present time.\
\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"resetDefaultUnits", "::", "usage"}], "=", 
    "\"\<resetDefaultUnits[] resets the set of predefined units to the \
default set in the spec. Some of these units may have been overridden in a \
model definition.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"createModel", "::", "usage"}], "=", 
   "\"\<createModel[] returns the SBML text for the current \
model.\\ncreateModel[filename] writes the SBML to a \
file.\\nOptions:\\n\\\"annotations\\\"\[Rule]True, If False, suppresses all \
annotations\\n\\\"notes\\\"\[Rule]True, If False, suppresses all \
annotations\\n\\\"comments\\\"\[Rule]True, If False, suppresses all comments.\
\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"createSymbolicModel", "::", "usage"}], "=", 
   "\"\<createSymbolicModel[] returns Symbolic XML for the current \
model.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getModel", "::", "usage"}], "=", 
   "\"\<getModel[] is the same as createSymbolicModel.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLModel", "::", "usage"}], "=", 
   "\"\<getSBMLModel[] is the same as createModel.\>\""}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"showModel", "::", "usage"}], "=", 
   "\"\<showModel[] gives a verbose listing of the current model similar to \
the verbose listing provided by SBMLRead\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dumpModel", "::", "usage"}], "=", 
   "\"\<dumpModel performs a debugging dumpt of the current model.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"loadSimulator", "::", "usage"}], "=", 
   "\"\<loadSimulator[] loads the current model into simulator-readable form, \
i.e, the same form returned by SBMLREAD. Thus functions such as SBMLNDSolve \
can be run on it. SBMLRead automatically loads both the simulator  (unless \
return->False) and the model builder (unless LoadModelBuilder->False) when it \
reads a file. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"loadModelBuilder", "::", "usage"}], "=", 
    "\"\<loadModelBuilder[file,options] reads an SBML file into the model \
builder.\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyCompartment", "::", "usage"}], "=", 
   "\"\<modifyCompartment[id,options] or modifyCompartments[options] modifies \
the specified compartment in the current model. The compartment must be \
identified by the value of its id tag. Any options that are specified in the \
call to modifyCompartment replace the previously existing values for the \
corresponding SBML tag. All other tags retain their original values.Any valid \
options for compartmentToSBML may be used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyModel", "::", "usage"}], "=", 
   "\"\<modifyModel[options] changes properties of a model. Valid options \
are:id, name.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyFunction", "::", "usage"}], "=", 
   "\"\<modifyFunction[id, options] or modifyFunction[options] modifies the \
specified function in the current modmel. The function must be identified by \
the value of its id tag. Any options that are specified in the call to \
modifyFunction replace the previously existing values for the corresponding \
SBML tag. All other tags retain their original values. Any valid option for \
functionToSBML or addFunction may be used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyUnit", "::", "usage"}], "=", 
   "\"\<modifyUnit[id, options] or modifyUnit[options] modifies the specified \
unit definition in the current model. The unit definition must be identified \
by the value of its id tag. Any options that are specified in the call to \
modifyUnit replace the previously existing values for the corresponding SBML \
tag. All other tags retain their original values. Any valid options for \
unitToSBML may be used.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyParameter", "::", "usage"}], "=", 
   "\"\<modifyParameter[id, options] or modifyParameter[options] modifies the \
specified parameter definition in the current model.  The parameter must be \
identified by the value of its id tag. Any options that are specified in the \
call to modifyParameter replace the previously existing values for the \
corresponding SBML tag. All other tags retain their original values.  Any \
valid option for parameterToSBML or addParameter may be used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifySpecies", "::", "usage"}], "=", 
   "\"\<modifySpecies[id, options] or modifySpecies[options] modifies the \
specified species in the current model. The species must be identified by the \
value of its id tag. Any options that are specified in the call to \
modifySpecies replace the previously existing values for the corresponding \
SBML tag. All other tags retain their original values. Any valid option for \
speciesToSBML or addSpecies may be used.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyReaction", "::", "usage"}], "=", 
   "\"\<modifyReaction[id, options] or modifyReaction[options] modifies the \
specified reaction in the current model. The reaction must be identified by \
the value of its id tag. Any options that are specified in the call to \
modifyReaction replace the previously existing values for the corresponding \
SBML tag. All other tags retain their original values. Any valid option for \
reactionToSBML or addReaction may be used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyRule", "::", "usage"}], "=", 
   "\"\<modifyRule[id, options] or modifyRule[options] modifies the specified \
rule in the current model.  The reaction must be identified by the value of \
its metaid tag, which is specified with the id option. Any options that are \
specified in the call to modifyRule replace the previously existing values \
for the corresponding SBML tag. All other tags retain their original values.  \
Any valid options for ruleToSBML or addRule may be used.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modifyEvent", "::", "usage"}], "=", 
   "\"\<modifyEvent[id, options] or modifyEvent[options] modifies the \
specified event definition in the current model. The event must be identified \
by the value of its id tag. Any options that are specified in the call to \
modifyEvent replace the previously existing values for the corresponding SBML \
tag. All other tags retain their original values. Any valid options for \
eventToSBML or addEvent may be used.\>\""}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.395758898312842*^9, 3.395759003370222*^9}}],

Cell[BoxData["\<\"getSBMLModel[] is the same as createModel.\"\>"], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["inifx \[LongLeftRightArrow] mathml", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MathMLToInfix", "::", "usage"}], "=", 
   "\"\<MathMLToInfix[string_] converts a MathML content string into an infix \
expression.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InfixToMathML", "::", "usage"}], "=", 
   "\"\<InfixToMathML[expression_] returns a MathML string representing the \
given Mathematica expression.\>\""}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
reaction comparison: sameReaction, compareReaction: ultra-developmental\
\>", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sameReaction", "::", "usage"}], "=", "\"\<TBD\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compareReactions", "::", "usage"}], "=", "\"\<TBD\>\""}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["annotation control", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setAnnotationNamespace", "::", "usage"}], "=", 
    "\"\<setAnnotationNamespace[URI] sets the URI to be used in subsequent \
annotations. setAnnotationNamespace is identical to setAnnotationURI\>\""}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setAnnotationURI", "::", "usage"}], "=", 
   "\"\<setAnnotationURI[URI] sets the URI to be used in subsequent \
annotations. setAnnotationURI is identical to setAnnotationNamespace.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setAnnotationURL", "::", "usage"}], "=", 
    "\"\<setAnnotationURL has been replaced by setAnnotationURI.\>\""}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setAnnotationPackage", "::", "usage"}], "=", 
   "\"\<setAnnotationPackage[name] sets the name of the package to be used in \
subsequent annotations. The annotation block is formatted as\\n<annotation \
xmlns:package=\\\"url\\\">...</annotation>\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annotationToSymbolicSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<annotationToSymbolicSBML[a\[Rule]b] returns Symbolic SBML for an \
annotation that is specified heirarchically; a is a string, and b is either a \
string, a list consisting of a single string, or a list of rules of the same \
form as a\[Rule]b. The annotation uses the package and URI most recently \
defined by setAnnotationPackage and setAnnotationURI. Curly brackets {} \
around a single string on the right hand side of any arrow indicate that the \
string should be represented heirarchically as \\n\\n\\t<foo:tag>\\n\\t \
<foo:f>v</foo:f>\\n\\t ...\\n\\t</foo:tag>\\n\\nrather than inline \
as\\n\\n\\t <foo:tag \\\"foo:f\\\"=\\\"g\\\" .../> \\n\\nin the ultimate XML.\
\\n\\n\>\"", "<>", 
    "\"\<annotationToSymbolicSBML[a\[Rule]b,package,URI] returns the Symbolic \
SBML using the specified package and URI.\\n\\n\>\"", "<>", 
    "\"\<annotationToSymbolicSBML[XMLElement[\\\"annotation\\\",...]] returns \
the argument passed to it.\\n\\n\>\"", "<>", 
    "\"\<annotationToSymbolicSBML[XMLElement[...]] encapsulates the XML in an \
annotation block.\\n\\nSee annotationToSBML for examples.\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"annotationToSBML", "::", "usage"}], "=", 
   RowBox[{
   "\"\<annotationToSBML returns text SBML. The arguments are the same as \
annotationToSymbolicSBML.\\n\\n\>\"", "<>", 
    "\"\<annotationToSBML[\\\"a\\\"\[Rule] \
\\\"b\\\",\\\"foo\\\",\\\"http://woo.com\\\"] returns\\n\\n\>\"", "<>", 
    "\"\<<annotation>\\n <foo:a \
xmlns:foo=\\\"http://woo.com\\\">b</foo:a>\\n</annotation>\\n\\n\>\"", "<>", 
    "\"\<annotationToSBML[\\\"a\\\"\[Rule] {\\\"b\\\"\[Rule] \
\\\"c\\\",\\\"d\\\"\[Rule] {\\\"e\\\"},\\\"f\\\"\[Rule] {\\\"g\\\"\[Rule]{ \\\
\"h\\\"},\\\"p\\\"\[Rule] {\\\"q\\\"}, \\\"f1\\\"\[Rule] \\\"f2\\\"}},\\\"foo\
\\\",\\\"http://woo.com\\\"] returns \\n\\n\>\"", "<>", 
    "\"\<<annotation>\\n <foo:a xmlns:foo=\\\"http://woo.com\\\"\\n     \
foo:b=\\\"c\\\">\\n  <foo:d>e</foo:d>\\n  <foo:f foo:f1=\\\"f2\\\">\\n   \
<foo:g>h</foo:g>\\n   <foo:p>q</foo:p>\\n  </foo:f>\\n \
</foo:a>\\n</annotation>\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setSBMLAnnotation", "::", "usage"}], "=", 
   RowBox[{
   "\"\<setSBMLAnnotation[annotation,package,URI] defines the annotations for \
the current SBML file; these annotations are outside of the model. The \
annotations may be listed heirarchically as rules. For example:\\n\\n\>\"", 
    "<>", "\"\<\\tsetSBMLAnnotation[\\\"A\\\"\[Rule] {\\\"b\\\"\[Rule] {\\\"c\
\\\"},\\\"d\\\"\[Rule] \\\"f\\\"}, \\\"foo\\\", \
\\\"http:/foo.com/ns\\\"]\\n\\n\>\"", "<>", 
    "\"\<returns the symbolic XML (and saves the information for later use by \
createModel[]) for the following SBML fragment:\\n\\n\>\"", "<>", 
    "\"\<<annotation>\\n <foo:A xmlns:foo=\\\"http:/foo.com/ns\\\" \
foo:d=\\\"f\\\">\\n  <foo:b>c</foo:b>\\n </foo:A>\\n</annotation>\>\""}]}], 
  " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setModelAnnotation", "::", "usage"}], "=", 
   RowBox[{
   "\"\<setModelAnnotation[annotation,package,URI] defines the annotations \
for the current SBML file; these annotations are outside of the model. The \
annotations may be listed heirarchically as rules. For example:\\n\\n\>\"", 
    "<>", "\"\<\\tsetModelAnnotation[\\\"A\\\"\[Rule] {\\\"b\\\"\[Rule] \
{\\\"c\\\"},\\\"d\\\"\[Rule] \\\"f\\\"}, \\\"foo\\\", \
\\\"http:/foo.com/ns\\\"]\\n\\n\>\"", "<>", 
    "\"\<returns the symbolic XML (and saves the information for later use by \
createModel[]) for the following SBML fragment:\\n\\n\>\"", "<>", 
    "\"\<<annotation>\\n <foo:A xmlns:foo=\\\"http:/foo.com/ns\\\" \
foo:d=\\\"f\\\">\\n  <foo:b>c</foo:b>\\n </foo:A>\\n</annotation>\>\""}]}], 
  " ", ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["expt'l array support - low level functions", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"dimensionToSymbolicSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dimensionToSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indexToSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indicesToSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indexToSymbolicSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indicesToSymbolicSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"vectorToSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"vectorToSymbolicSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"matrixToSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"matrixToSymbolicSBML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["other functions ", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"XMLOut", "::", "usage"}], "=", 
  "\"\<XMLOut[symbolicXML] returns a an XML string corresponding to symbolic \
SBML.\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"XMLOut[symbolicXML] returns a an XML string corresponding \
to symbolic SBML.\"\>"], "Output"]
}, Closed]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"init", "::", "usage"}], "=", 
    "\"\<init resets certain global parameters used by MathSBML.\>\""}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"mathSBMLHelpReference", "::", "usage"}], "=", 
     "\"\<mathSBMLHelpReference[options] returns a reference manual - list of \
all basic usage strings in MathSMBL.\>\""}], ";"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"help", "::", "usage"}], " ", "=", " ", 
    "\"\<help[context] prints the help strings for the specified \
contexts.\\nhelp[] returns a list of the available contexts.\>\""}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Help", "::", "usage"}], "=", "\"\<Help[context], Help[]\>\""}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"$HelpContexts", "::", "usage"}], "=", "\"\<\>\""}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AddHelp", "::", "usage"}], "=", 
  "\"\<AddHelp[\\\"context`\\\"]. To set up the Help[context] system for \
context foo`,\\n(1) Somewhere in the context foo`, call \
AddHelp[\\\"foo`\\\"]. This will tell the Help system that the help function \
you define in step (2) exists.\\n(2) Somewhere in context foo define the \
function foo`Private`foohelp[]. This function will be called by \
Help[context].\>\""}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4254081090925093`*^9, 3.425408163086344*^9}, {
  3.425425016612532*^9, 3.425425053580292*^9}, {3.425425135921077*^9, 
  3.425425149424333*^9}, {3.425425225270248*^9, 3.42542522803251*^9}, {
  3.425425461998088*^9, 3.425425478019801*^9}, {3.425425717324525*^9, 
  3.425425869674383*^9}, {3.425426339925717*^9, 3.425426384261426*^9}, {
  3.425426427738911*^9, 3.42542642826159*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", " ", 
    RowBox[{
    "bulletize", ",", "\[IndentingNewLine]", "numerize", ",", 
     "\[IndentingNewLine]", "numerizedList", ",", "sbmlReadLimitations", ",", 
     "sbmlReadOptions"}], "]"}], ";"}], " "}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.397866743569713*^9, 3.397866746133809*^9}, {
  3.397866961679385*^9, 3.397866965469021*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"addCelleratorReaction", "::", "usage"}], "=", 
    RowBox[{
    "\"\<addCelleratorReaction[reaction, options] is a wrapper for \
addReaction. All rate constants must be specified. Options may contain values \
for rate constants. \\nAll mass action reaction are broken down into their \
constituitive parts. Names for intermediate compounds are generated \
automatically. The reaction \>\"", "<>", 
     "\"\<\!\(\*OverscriptBox[\(a \[RightArrowLeftArrow] b\), \(c\)]\), \>\"",
      "<>", "\"\<for example, is stored as three separate reactions: \>\"", 
     "<>", "\"\<a+c\[ShortRightArrow]a\[UnderBracket]c, a\[UnderBracket]c\
\[ShortRightArrow]a+c, a\[UnderBracket]c\[ShortRightArrow]b+c; the compound \
name a\[UnderBracket]c is automatically generated from the constituent \
species, and the underbracket character may be replaced by any other \
character with the option MolecularDelimiter. Note that the underbracket \
character (\[UnderBracket]) is replaced with the underscore (_) before being \
written to SBML. Only valid SID characters are allowed. \\n\>\"", "<>", 
     "\"\<\\nThe following forms for reaction have been implemented:\\n\>\"", 
     "<>", "\"\<\\t{a\[ShortRightArrow]b,k}\\n\>\"", "<>", 
     "\"\<\\t{\!\(\*SubscriptBox[\(\[CapitalSigma]\), \
\(i\)]\)\!\(\*SubscriptBox[\(p\), \(i\)]\)\!\(\*SubscriptBox[\(A\), \(i\)]\)\
\[ShortRightArrow]\!\(\*SubscriptBox[\(\[CapitalSigma]\), \
\(j\)]\)\!\(\*SubscriptBox[\(q\), \(j\)]\)\!\(\*SubscriptBox[\(B\), \
\(j\)]\),k} (p,q stoichiometries)\\n\>\"", "<>", 
     "\"\<\\t{\!\(\*OverscriptBox[\(a \[ShortRightArrow] b\), \(c\)]\), k}\\n\
\>\"", "<>", 
     "\"\<\\t{a\[RightArrowLeftArrow]b, \!\(\*SubscriptBox[\(k\), \(f\)]\), \
\!\(\*SubscriptBox[\(k\), \(r\)]\)}\\n\>\"", "<>", 
     "\"\<\\t{\!\(\*OverscriptBox[\(a \[RightArrowLeftArrow] b\), \(enzyme\)]\
\), a, d, k}\\n\>\"", "<>", 
     "\"\<\\t{\!\(\*OverscriptBox[\(a \[RightArrowLeftArrow] b\), \(enzyme\)]\
\), a, d, \!\(\*SubscriptBox[\(k\), \(f\)]\),\!\(\*SubscriptBox[\(k\), \(r\)]\
\)}\\n\>\"", "<>", 
     "\"\<\\t{\!\(\*UnderoverscriptBox[\(a \[RightArrowLeftArrow] b\), \
\(reverse\), \(forward\)]\), \!\(\*SubscriptBox[\(a\), \(f\)]\), \
\!\(\*SubscriptBox[\(d\), \(f\)]\), \!\(\*SubscriptBox[\(k\), \(f\)]\), \
\!\(\*SubscriptBox[\(a\), \(r\)]\), \!\(\*SubscriptBox[\(d\), \(r\)]\), \
\!\(\*SubscriptBox[\(k\), \(r\)]\)}\\n\>\"", "<>", 
     "\"\<The following cascades have been implemented:\\n\>\"", "<>", 
     "\"\<\\t{a\[ShortRightArrow]b\[ShortRightArrow]c\[ShortRightArrow]...,\!\
\(\*SubscriptBox[\(k\), \(1\)]\),\!\(\*SubscriptBox[\(k\), \(2\)]\),...}\\n\>\
\"", "<>", 
     "\"\<\\t{\!\(\*OverscriptBox[\(a \[RightArrowLeftArrow] b \
\[RightArrowLeftArrow] c \[RightArrowLeftArrow] \), \
\(enzyme\)]\),\!\(\*SubscriptBox[\(a\), \(1\)]\),\!\(\*SubscriptBox[\(d\), \
\(1\)]\),\!\(\*SubscriptBox[\(k\), \(1\)]\),...}\\n\>\"", "<>", 
     "\"\<See Cellerator documentation for an explanation of these reactions.\
\\n\\nExample:\\n\>\"", "<>", 
     "\"\<addCelleratorReaction[{\!\(\*OverscriptBox[\(substrate \
\[RightArrowLeftArrow] product\), \(enzyme\)]\), a, d, k}, a\[Rule]0.001, d\
\[Rule].1, k\[Rule]1]\>\""}]}], ";"}], " ", "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4254074693827972`*^9, 3.425407472349567*^9}}],

Cell[CellGroupData[{

Cell["interpoloationSets", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"InterpolationSet", "::", "usage"}], "=", 
   "\"\<InterpolationSet is an uninstantiated function that encapsulates a \
set of InterpolatingFunction's, as in:\\n\\n\nInterpolationSet[tstart, tend, \
{x[t]\[Rule] InterpolatingFunction[..][t], \
y[t]\[Rule]InterpolatingFunction[..][t],..}].\\n\\n SBMLNDSolve returns a \
list of InterpolationSet's when events occur in the model.\\nThe list of \
InterpolatingFunction's may be recovered from teh InterpolationSet using \
getInterpolationFunction\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getInterpolatingFunction", "::", "usage"}], "=", 
   "\"\<getInterpolatingFunction[InterpolationSet[tstart,tend,f]], returns f, \
where f is the list of InterpolationFunctions encapsulated in the \
InterpolationSet.\>\""}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["ignoreCollisions", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"IgnoreCollisions", "::", "usage"}], "=", 
   "\"\<IgnoreCollisions[\\\"context`\\\"] means that potential variable \
collisions between model variables and previously defined Mathematica \
variables in the specified context are to be ignored (not reported as errors) \
by SBMLRead.\\n\\nIgnoreCollisions[] means that all potential variable \
collisions are reported.\\n\\nIgnoreCollisions[\\\"Global`\\\"] is the \
default setting.\\n\\nOnly potential collisions with Mathematica Variables \
can be inhibited in this manner; IgnoreCollisions has no affect upon checking \
for collisions between model variables, which cannot be \
inhibited.\\n\\nCollisions with a Mathematica Variable do not necessarily \
indicate an SBML model error. However, they may cause MathSBML to produce \
unexpected and incorrect results. \\n\\nMost model collisions occur as a \
result of using SBMLRead[... context\[Rule]None ...]. If the option context\
\[Rule]None is not used then collisions will be unlikely.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["resetIC,resetParameter", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"resetIC", "::", "usage"}], "=", 
    "\"\<resetIC[m,var,value]\\nresetIC[m,var\[Rule]value]\\nresetIC[m,{var1\
\[Rule]val1,...}]\\n\\nThis function will typically be used when a modeler \
wants to perform multiple simulations with different initial conditions, and \
does not want to create a different SBML file for each set of initial \
conditions.\\n\\nThe function resetIC will return a modified version of model \
m (where m is the original output of SBMLRead or an equivalent function) with \
the specified initial conditions reset.It is not necessary to specify the \
model id, name, or context, as that is auto-determined and any context \
specified will be ignored. Compare with resetParameter.\\n\\nIntroduced in \
version 2.5.15-\[Alpha]\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"resetParameter", "::", "usage"}], "=", 
   "\"\<resetParameter[m,var,value]\\nresetParameter[m,var\[Rule]value]\\\
nresetParameter[m,{var1\[Rule]val1,...}]\\n\\nThe function resetParameter \
will return a modified version of the model m (where m is the original output \
of SBMLRead or an equivalent function) with the specified parameter (in \
SBMLConstants) reset to the specified value. Note that resetParameter will \
not have any effect unless the original model was input with \
evaluateParameters\[Rule]False, because otherwise all parameter values will \
have already been replaced with their corresponding values in the \
differential equations. Compare with resetIC.\\nIntroduced in version 2.5.15-\
\[Alpha]\>\""}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["MIRIAM", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMcreatorFamily", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMcreatorGiven", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMcreatorEMAIL", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMcreatorOrgname", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMcreatedTime", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMmodifiedTime", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setMIRIAMcreator", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"resetMIRIAMcreator", "::", "usage"}], "=", "\"\<\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"vCardToSymbolicXML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"createBag", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getBagSize", "::", "usage"}], "=", "\"\<\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MIRIAMCreateTimeToSymbolicXML", "::", "usage"}], "=", 
   "\"\<\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MIRIAMmodifiedTimeToSymbolicXML", "::", "usage"}], "=", 
   "\"\<\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MIRIAMcreatorToSymbolicXML", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Biomodels", "Subsection",
 CellChangeTimes->{{3.404054583345326*^9, 3.4040545856730623`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getBiomodel", "::", "usage"}], "=", 
  "\"\<getBiomodel[n: integer, opt: options (any SBMLRead options) ]\>\""}]], \
"Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4040545913488073`*^9, 3.404054611075636*^9}, {
  3.404054886885449*^9, 3.404054898900949*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["visualizeSBMLModel", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"visualizeSBMLModel", "::", "usage"}], "=", 
  "\"\<visualizeSBMLModel[filename, options] uses GraphPlot to generate a \
visualization of the model species, including reactions and rules. Species \
are indicated by ovals and reactions by rectangles. Species-Species \
connections are rules. (Events are not included). Options are any Plot \
options, By default the annotations are the species and reaction ids, and the \
image is labeled by the model id. If  visualizeByName->True, the name field \
is used instead.\>\""}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"visualizationArrowLength", "::", "usage"}], "=", 
   "\"\<An option for visualizeSBMLModel. Length of arrow in pixels\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"visualizationBoxWidth", "::", "usage"}], "=", 
  "\"\<An option for visualizeSBMLModel. Width of reaction box in relative \
coordinates.\>\""}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"visualizationBoxHeight", "::", "usage"}], "=", 
   "\"\<An option for visualizeSBMLModel. Height of reaction box in relative \
coordinates.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"visualizationRadius", "::", "usage"}], "=", 
   "\"\<An option for visualizeSBMLModel. Radius of species oval in relative \
coordinates.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"visualizationFontSize", "::", "usage"}], "=", 
   "\"\<An option for visualizeSBMLModel. Font size for visualization \
content.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"visualizationHeaderFontSize", "::", "usage"}], "=", 
   "\"\<An option for visualizeSBMLModel. Font size for visualization header.\
\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"visualizationFontFamily", "::", "usage"}], "=", 
   "\"\<An option for visualizeSBMLModel. Font family used for visualization.\
\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"visualizeByName", "::", "usage"}], "=", 
   "\"\<True/False, default is False, use ids.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ignoreSpecies", "::", "usage"}], "=", 
    "\"\<An option for visualizedSBMLModel. A list of species id's to ignore, \
e.g., emptySet\>\""}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["analysis extensions", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"variableToParameter", "::", "usage"}], "=", 
    "\"\<variableToParameter[model, variable]\\nvariableToParameter[filename, \
variable, options]\\nreturns an SBML Model (same format as the output of \
SBMLRead) where the specified variable has been changed to a constant \
parameter. In the first form, model is the output of SBMLRead. In the second \
format, options are any valid options for SBMLRead.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"parametricScan", "::", "usage"}], "=", 
    "\"\<parametricScan[model, parameter, min, max, delta, X, \
time]\\nparametricScan[filename, parameter, min, max, delta, X, \
time]\\nreturns a list containing the values {{min,X[time]}, {min+delta, \
X[time]}, .., {max, X[time]}}, where the values are obtained by solving the \
model with the value of the specified parameter set to the values min, \
min+delta,..., max. Here is any model variable, and time is the duration of \
the SBMLNDSolve run.\\nNote: in the first type of invocation, the model was \
be orignally imported using the option evaluateParameters\[Rule]False (the \
default is True).\>\""}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"icScan", "::", "usage"}], "=", 
   "\"\<icScan[model, var, min, max, delta, X, time]\\nicScan[filename, var, \
min, max, delta, X, time]\\nreturns a list containing the values \
{{min,X[time]}, {min+delta, X[time]}, .., {max, X[time]}}, where the values \
are obtained by solving the model with the value of the specified initial \
conditin var[0] set to the values min, min+delta,..., max. Here is any model \
variable, and time is the duration of the SBMLNDSolve run.\>\""}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["globals for headers", "Subsection",
 CellChangeTimes->{{3.5371349064446173`*^9, 3.5371349086755867`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Cent]Header$Alignment", " ", "=", " ", "\"\<Center\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Cent]Header$Alignment", "::", "usage"}], " ", "=", " ", "\n", 
   "  ", "\"\<\[Cent]Header$Alignment is a global parameter that sets the \
alignment value used \\\nto print headers. See TextAlignment.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"$Column\[Cent]Header$Color", " ", "=", " ", 
   RowBox[{"RGBColor", "[", 
    RowBox[{"0.415693`", ",", " ", "0.352901`", ",", " ", "0.803903`"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Cent]Header$Color", " ", "=", " ", 
    RowBox[{"RGBColor", "[", 
     RowBox[{"0.`", ",", " ", "0.`", ",", " ", "0.501999`"}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Cent]Header$Title$Color", " ", "=", " ", 
    TagBox[
     StyleBox[
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.239998`", ",", "0.569994`", ",", "0.250008`"}], "]"}],
      ShowSpecialCharacters->False,
      ShowStringCharacters->True,
      NumberMarks->True],
     FullForm]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"\[Cent]Header$Color", "::", "usage"}], " ", "=", " ", "\n", 
    "  ", "\"\<\[Cent]Header$Color is a global parameter that sets the color \
of headers used to \\\nprint headers. See FontColor.\>\""}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"\[Cent]Header$Size", " ", "=", " ", "16"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"\[Cent]Header$Size", "::", "usage"}], " ", "=", " ", "\n", "  ", 
    "\"\<\[Cent]Header$Size is a global parameter that sets the font size \
used to print \\\nheaders.See FontSize\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"\[Cent]Header$Weight", " ", "=", " ", "\"\<Bold\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"\[Cent]Header$Weight", "::", "usage"}], " ", "=", " ", "\n", 
    "  ", 
    "\"\<\[Cent]Header$Weight is a global parameter that sets the font weight \
used to \\\nprint headers. See FontWeight\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"\[Cent]Header$Font", " ", "=", " ", "\"\<Times\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"\[Cent]Header$Font", "::", "usage"}], " ", "=", " ", "\n", "  ", 
    "\"\<\[Cent]Header$Font is a global parameter that sents the font used to \
print \\\nheaders. See FontFamily.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"$Column\[Cent]HeaderSize", " ", "=", " ", "14"}], ";"}]}], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.537134890122505*^9, 3.537134919148871*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Private Section", "Section",
 CellChangeTimes->{{3.395414494069941*^9, 3.395414495177623*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$$LoadBug", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"LTPrint", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"If", "[", 
     RowBox[{"$$LoadBug", ",", " ", 
      RowBox[{"Print", "[", "x", "]"}]}], "]"}]}], ";"}], " "}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388263681597781*^9, 3.388263685918632*^9}, {
  3.3883222024684753`*^9, 3.388322203838818*^9}, {3.506452129533597*^9, 
  3.506452155109335*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "csymbolTimeURL", "=", "\"\<http://www.sbml.org/sbml/symbols/time\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "csymbolDelayURL", "=", "\"\<http://www.sbml.org/sbml/symbols/delay\>\""}], 
  ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell["Preliminary Includes", "Section",
 CellChangeTimes->{{3.504973786465857*^9, 3.5049737908301067`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "[", "\"\<MathSBML-Utilities.m\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Get", "[", "\"\<MathSBML-Public.m\>\"", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5049730983244977`*^9, 3.5049731123943024`*^9}, {
   3.5049735267079997`*^9, 3.504973534941471*^9}, {3.5049742681244063`*^9, 
   3.504974299848221*^9}, 3.504974506423036*^9}],

Cell[CellGroupData[{

Cell["Private function definitions", "Section"],

Cell[CellGroupData[{

Cell["checkForSymbolCollision, IgnoreCollisions", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:private functions\>\"", "]"}]}], "]"}],
   ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Contexts2IgnoreCollisions", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"IgnoreCollisions", "[", "context_", "]"}], ":=", " ", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"Contexts2IgnoreCollisions", ",", "context"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"IgnoreCollisions", "[", "]"}], ":=", " ", 
     RowBox[{"(", 
      RowBox[{"Contexts2IgnoreCollisions", "=", 
       RowBox[{"{", "}"}]}], ")"}]}], ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"IgnoreCollisions", "[", "\"\<Global`\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"previouslyDefinedNamesInTheMathematicaEnvirnoment", "=", 
     RowBox[{"Names", "[", "\"\<*\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"previouslyDefinedContextsInTheMathematicaEnvironment", "=", 
     RowBox[{"Contexts", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkForSybmolCabollision", "[", 
      RowBox[{"var_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"checkForSymbolCollision", "[", 
      RowBox[{"var", ",", "\"\<symbol\>\""}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkForSymbolCollision", "[", 
      RowBox[{
       RowBox[{"var_", "?", "StringQ"}], ",", 
       RowBox[{"type_", "?", "StringQ"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"u", ",", "contexts"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"contexts", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{
          "previouslyDefinedContextsInTheMathematicaEnvironment", ",", 
           "Contexts2IgnoreCollisions"}], "]"}]}], ";", "\[IndentingNewLine]",
         "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{
           "previouslyDefinedNamesInTheMathematicaEnvirnoment", ",", "var"}], 
           "]"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{"contexts", ",", 
               RowBox[{"Context", "[", "var", "]"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", " ", 
                RowBox[{"\"\<The \>\"", "//", "boldBlack"}], ",", 
                RowBox[{
                 RowBox[{"type", "<>", "\"\< \>\""}], "//", "boldBlack"}], 
                ",", 
                RowBox[{"var", "//", "boldBlue"}], ",", 
                RowBox[{
                "\"\< may collide with the previously defined symbol \>\"", "//",
                  "boldBlack"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Context", "[", "var", "]"}], "<>", "var"}], "//", 
                 "boldRed"}], ",", " ", 
                RowBox[{
                "\"\< and cause unexpected results.\>\"", "//", 
                 "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"u", "=", 
               RowBox[{"ToExpression", "[", 
                RowBox[{"var", "<>", "\"\<::usage\>\""}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"StringQ", "[", "u", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"StringLength", "[", "u", "]"}], ">", "80"}], ",",
                    " ", 
                   RowBox[{"u", "=", 
                    RowBox[{
                    RowBox[{"StringTake", "[", 
                    RowBox[{"u", ",", "75"}], "]"}], "<>", 
                    "\"\<... (use ?\>\"", "<>", "var", "<>", 
                    "\"\< for more information).\>\""}]}]}], "]"}], ";", 
                 "\[IndentingNewLine]", " ", 
                 RowBox[{"Print", "[", 
                  RowBox[{"MyStyle", "[", 
                   RowBox[{"u", ",", 
                    RowBox[{"FontColor", "\[Rule]", " ", "Purple"}]}], "]"}], 
                  "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
           ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], " "}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388261475535796*^9, 3.388261477006152*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["File-checking functions", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{
    "Print", "[", "\"\<Loading:private: File-checking functions\>\"", "]"}]}],
    "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["fileExists", "Subsubsection"],

Cell["\<\
fileExists returns T/F if the file exists. Case-sensitivity is \
system-dependent. However, the option IgnoreCase->True will override the \
system default.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fileExists", "[", 
    RowBox[{"fname_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "f", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"f", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "[", "fname", "]"}], ",", " ", "fname", ",", " ", 
         
         RowBox[{"ToString", "[", "fname", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"FileNames", "[", 
          RowBox[{"f", ",", " ", "opt"}], "]"}], "]"}], ">", "0"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["validInputFile", "Subsubsection"],

Cell["\<\
an input file is valid if a file by that precise name exists. \
Case-sensitivity is system dependent.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"validInputFile", "[", 
    RowBox[{"in_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "ok", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ok", " ", "=", " ", 
       RowBox[{"fileExists", "[", "in", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "ok"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"boldOrange", "[", "\"\<Error: \>\"", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "boldRed", "[", "\"\<The requested input file: \\\"\>\"", "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"boldBlack", "[", " ", "in", " ", "]"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
           "boldRed", "[", "\"\<\\\" does not exist. No file read.\>\"", 
            "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "ok", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"validInputFile", "[", "x___", "]"}], ":=", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"boldOrange", "[", "\"\<Error:\>\"", "]"}], ",", 
     RowBox[{
     "boldRed", "[", 
      "\"\< the argument to validInputFile must be a string.\>\"", "]"}]}], 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["availableOutputFile", "Subsubsection"],

Cell["\<\
a file is considered available if no file by the same name exists. The \
function is not case-sensitive - i.e., if you ask for \"out.dat\"  then if \
the file \"out.Dat\" or \"oUT.dAT\" etc., already exist, then return value \
will be False. It will return True only if no files that are almost-exactly \
-like the requested file already exist, almost meaning the same except for \
case.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"availableOutputFile", "[", 
      RowBox[{"out_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ok", ",", "fn"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ok", "=", 
         RowBox[{"!", 
          RowBox[{"fileExists", "[", 
           RowBox[{"out", ",", " ", 
            RowBox[{"IgnoreCase", "\[Rule]", " ", "True"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", "ok"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"fn", " ", "=", " ", 
            RowBox[{"FileNames", "[", 
             RowBox[{"out", ",", " ", 
              RowBox[{"IgnoreCase", "\[Rule]", " ", "True"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{"fn", ",", "out"}], "]"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"boldRed", "[", "\"\<Error: \>\"", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                "boldBlack", "[", "\"\<The requested output file: \>\"", 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"boldBlue", "[", " ", "out", " ", "]"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{
                "boldBlack", "[", "\"\< already exists. No file written.\>\"",
                  "]"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
             "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"boldRed", "[", "\"\<Error: \>\"", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                "boldBlack", "[", "\"\<The requested output file: \>\"", 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"boldBlue", "[", " ", "out", " ", "]"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{
                "boldBlack", "[", 
                 "\"\< is similar in name to the existing file: \>\"", "]"}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"boldBlue", "[", 
                 RowBox[{"First", "[", "fn", "]"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                "boldBlack", "[", "\"\<. No file written.\>\"", "]"}]}], 
               "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "ok", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"availableOutputFile", "[", "x___", "]"}], ":=", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"boldRed", "[", "\"\<Error:\>\"", "]"}], ",", 
       RowBox[{
       "boldBlack", "[", 
        "\"\< the argument to availableOutputFile must be a string.\>\"", 
        "]"}]}], "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["validateOutputFileName", "Subsubsection"],

Cell["\<\
added 26 May 04
Input: a string file name
Output: a string file name. The same file name if the file does not \
previously exist. A string file name with an integer added to the end of the \
name if the file already exists. If a file \"type\" is part of the name then \
the integer is placed just before the dot.
validateOutputFileName[foo.dat]: If \"foo.dat\" exists \"foo1.dat\" is \
returned. 
validateOutputFileName[foo]: If \"foo\" and \"foo1\" exist then \"foo2\" is \
returned.
If more than one \".\" exist in the file name the dot furthest to the right \
is used.
If \"foo1\", \"foo2\", ...,\"foomaxtry\" exist then the string \"$Failed\" is \
returned.
\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"validateOutputFileName", "[", 
     RowBox[{"out_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ok", ",", "fn", ",", "vout", ",", "itry", ",", 
        RowBox[{"maxtry", "=", "100000"}], ",", " ", "dot", ",", "front", ",",
         "rear", ",", 
        RowBox[{"debug", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"vout", " ", "=", " ", "out"}], ";", "\[IndentingNewLine]", 
       RowBox[{"ok", "=", 
        RowBox[{"!", 
         RowBox[{"fileExists", "[", 
          RowBox[{"vout", ",", " ", 
           RowBox[{"IgnoreCase", "\[Rule]", " ", "True"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<validateOutputFileName: ok:\>\"", ",", "ok"}], "]"}]}],
         "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"ok", ",", " ", 
         RowBox[{"Return", "[", "out", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"itry", "=", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"dot", "=", 
        RowBox[{"StringPosition", "[", 
         RowBox[{"out", ",", "\"\<.\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<validateOutputFileName: dot:\>\"", ",", "dot"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "dot", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"dot", "=", 
           RowBox[{"First", "[", 
            RowBox[{"Last", "[", "dot", "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"front", " ", "=", " ", 
           RowBox[{"StringTake", "[", 
            RowBox[{"out", ",", 
             RowBox[{"dot", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"rear", " ", "=", " ", 
           RowBox[{"StringDrop", "[", 
            RowBox[{"out", ",", "dot"}], "]"}]}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"front", "=", "out"}], ";", "\[IndentingNewLine]", 
          RowBox[{"rear", "=", "\"\<\>\""}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<validateOutputFileName: {front,rear}:\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"front", ",", "rear"}], "}"}]}], "]"}]}], "]"}], ";", " ",
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"!", "ok"}], " ", "\[And]", " ", 
          RowBox[{"itry", "<", "maxtry"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"vout", " ", "=", " ", 
           RowBox[{"front", "<>", 
            RowBox[{"ToString", "[", "itry", "]"}], "<>", "\"\<.\>\"", "<>", 
            "rear"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ok", "=", 
           RowBox[{"!", 
            RowBox[{"fileExists", "[", 
             RowBox[{"vout", ",", " ", 
              RowBox[{"IgnoreCase", "\[Rule]", " ", "True"}]}], "]"}]}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"itry", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"debug", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<validateOutputFileName: vout:\>\"", ",", "vout"}], 
          "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"ok", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"boldRed", "[", "\"\<Warning: \>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "boldBlack", "[", "\"\<The requested output file: \>\"", "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"boldBlue", "[", " ", "out", " ", "]"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
            "boldBlack", "[", 
             "\"\< already exists. The following file name was used instead: \
\>\"", "]"}], ",", " ", 
            RowBox[{"boldBlue", "[", "vout", "]"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "vout", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"boldOrange", "[", "\"\<Error: \>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "boldBlack", "[", "\"\<Unable to create the file: \>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"boldBlue", "[", " ", "out", " ", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "\"\<$Failed\>\"", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["checkForFullInstallation", "Subsection"],

Cell["\<\
added 21.march.06 2.5.10 to look for installed components for validator
SBML Validate has been moved to a separate package\
\>", "Text",
 CellChangeTimes->{{3.3954084085808897`*^9, 3.395408417300536*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"$$LoadBug", ",", " ", 
     RowBox[{
     "Print", "[", "\"\<Loading:checkForFullInstallation\>\"", "]"}]}], "]"}],
    ";"}], " ", "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3954083606867647`*^9, 3.395408364436366*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"$SBMLValidatorInstalled", "=", "False"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"$SBMLValidate", "=", "Indeterminate"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"checkForFullInstallation", ":=", " ", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"base", "=", "$UserBaseDirectory"}], ",", "f", ",", " ", 
         "checkfor", ",", " ", "ok"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"checkfor", "[", "q_", "]"}], ":=", " ", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "ok", "}"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ok", "=", 
             RowBox[{"fileExists", "[", "q", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", "ok"}], ",", " ", 
              RowBox[{"Print", "[", 
               RowBox[{
               "\"\<Warning: \>\"", ",", "q", ",", 
                "\"\< not installed.\>\""}], "]"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "ok", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"f", "=", 
         RowBox[{"ToFileName", "[", 
          RowBox[{"base", ",", "\"\<Applications\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"checkfor", "[", "f", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "check", " ", "for", " ", "SBMLValidator", " ", "Installation"}], 
         " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"f", "=", 
         RowBox[{"ToFileName", "[", 
          RowBox[{"f", ",", "\"\<SBMLValidator\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"fileExists", "[", "f", "]"}]}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"checkfor", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ok", "=", 
            RowBox[{
             RowBox[{"checkfor", "[", 
              RowBox[{"ToFileName", "[", 
               RowBox[{"f", ",", "\"\<SBMLValidator.class\>\""}], "]"}], 
              "]"}], " ", "\[And]", "\[IndentingNewLine]", 
             RowBox[{"checkfor", "[", 
              RowBox[{"ToFileName", "[", 
               RowBox[{"f", ",", "\"\<MultipartPost.class\>\""}], "]"}], 
              "]"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"ok", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"InstallJava", "[", "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"AddToClassPath", "[", "f", "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"$SBMLValidatorInstalled", "=", "True"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"$SBMLValidate", "=", 
               RowBox[{"JavaNew", "[", "\"\<SBMLValidator\>\"", "]"}]}]}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "checkForFullInstallation", 
    ";"}], " ", "*)"}], " ", "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.395408367766508*^9, 3.395408371525831*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLValidate", "Subsection"],

Cell["SBML Validate has been moved to a separate package", "Text",
 CellChangeTimes->{{3.395408396638542*^9, 3.395408402092024*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"$$LoadBug", ",", " ", 
     RowBox[{"Print", "[", "\"\<Loading:SBMLValidate\>\"", "]"}]}], "]"}], 
   ";"}], " ", "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.395408375277102*^9, 3.395408378012774*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"SBMLValidate", "[", "file_", "]"}], ":=", 
    RowBox[{"SBMLValidate", "[", 
     RowBox[{"file", ",", "\"\<text\>\""}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SBMLValidate", "[", 
     RowBox[{"file_", ",", 
      RowBox[{"format_", "?", "StringQ"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "ok", "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"$SBMLValidatorInstalled", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ok", "=", 
           RowBox[{"fileExists", "[", "file", "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"!", "ok"}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<Error: unable to find \>\"", ",", "file"}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "Indeterminate", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "format", ",", "\[IndentingNewLine]", "\"\<text\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ok", "=", 
              RowBox[{"$SBMLValidate", "@", 
               RowBox[{"validateSBML", "[", 
                RowBox[{"file", ",", "format"}], "]"}]}]}], ";"}], ",", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", "\"\<xml\>\"", ",", 
            "  ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ok", "=", 
              RowBox[{"$SBMLValidate", "@", 
               RowBox[{"validateSBML", "[", 
                RowBox[{"file", ",", "format"}], "]"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"ok", "=", 
              RowBox[{"ImportString", "[", 
               RowBox[{"ok", ",", "\"\<xml\>\""}], "]"}]}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "_", ",", " ", 
            
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<Warning: SBMLValidate: requested format \>\"", ",", 
               "format", ",", 
               "\"\< not recognized - valid formats are \
\\\"xml\\\",\\\"text\\\"\>\""}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"ok", "=", "Indeterminate"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "ok", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{
       "Print", "[", 
        "\"\<Error: one or more validator components are not installed. An \
error message indicating the missing component should be displayed when you \
load MathSBML.\>\"", "]"}], ";", "\[IndentingNewLine]", 
       "checkForFullInstallation", ";"}]}], "\[IndentingNewLine]", "]"}]}]}], 
  " ", "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.395408380781434*^9, 3.3954083844893713`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["checkOptions", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"checkOptions", "[", 
    RowBox[{"module_", ",", " ", 
     RowBox[{"{", "requestedoption__", "}"}], ",", " ", "allowedoptions_"}], 
    "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "req", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"req", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", "requestedoption", "}"}], "//", "Flatten"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Apply", "[", "\[IndentingNewLine]", 
       RowBox[{"And", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"checkOptions", "[", 
           RowBox[{"module", ",", "#", ",", "allowedoptions"}], "]"}], "&"}], 
         "/@", "req"}]}], "\[IndentingNewLine]", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"checkOptions", "[", 
    RowBox[{"module_", ",", "requestedoption_", ",", " ", "allowedoptions_"}],
     "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"allowedopts", ",", "requestedopt"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allowedopts", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "allowedoptions", "}"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"allowedopts", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"OptionQ", "[", "#", "]"}], ",", " ", 
            RowBox[{"First", "[", "#", "]"}], ",", " ", "#"}], "]"}], "&"}], 
         ",", " ", "allowedopts"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"allowedopts", " ", "=", " ", 
       RowBox[{"stringer", "/@", "allowedopts"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"requestedopt", "=", "requestedoption"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"requestedopt", "\[Equal]", 
         RowBox[{"{", "}"}]}], ",", " ", 
        RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionQ", "[", "requestedopt", "]"}], ",", " ", 
        RowBox[{"requestedopt", "=", 
         RowBox[{"First", "[", "requestedopt", "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"requestedopt", "=", 
       RowBox[{"stringer", "[", "requestedopt", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"allowedopts", ",", " ", "requestedopt"}], "]"}], ",", " ", 
        RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
        RowBox[{"requestedopt", "//", "boldBlue"}], ",", 
        RowBox[{"\"\< is not an option for \>\"", "//", "boldBlack"}], ",", 
        RowBox[{"module", "//", " ", "boldBlue"}], ",", "\"\< -- \>\"", ",", 
        RowBox[{"\"\< allowed options are: \>\"", "//", "boldBlack"}], ",", 
        " ", 
        RowBox[{
         RowBox[{"list2CommaSeparatedString", "[", "allowedopts", "]"}], "//",
          "boldBlue"}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["XMLOut", "Subsection"],

Cell["add call to sunderscorce 2.4.11", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:XMLOut\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"XMLOut", "[", "symbolicXML_", "]"}], ":=", " ", 
   RowBox[{"sunderscore", "[", 
    RowBox[{"ExportXMLString", "[", "symbolicXML", "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389722290946039*^9, 3.389722296717155*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["makeString", "Subsection"],

Cell["\<\
Force an object to be a string but only if it is not one already; this takes \
out the embedded quotes.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"makeString", "[", 
    RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", "x"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeString", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"ToString", "[", 
    RowBox[{"InputForm", "[", "x", "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Output styles", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"boldRed", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"MyStyle", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"FontColor", "\[Rule]", " ", 
       RowBox[{"RGBColor", "[", 
        RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], ",", " ", 
      RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"boldOrange", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"MyStyle", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"FontColor", "\[Rule]", " ", 
       RowBox[{"RGBColor", "[", 
        RowBox[{"1", ",", "0.5", ",", " ", "0"}], "]"}]}], ",", 
      RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], "]"}]}], ";", 
   
   RowBox[{
    RowBox[{"boldBlue", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"MyStyle", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"FontColor", "\[Rule]", " ", 
       RowBox[{"RGBColor", "[", 
        RowBox[{"0", ",", " ", "0", ",", " ", "1"}], "]"}]}], ",", " ", 
      RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"boldBlack", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"MyStyle", "[", 
    RowBox[{"x", ",", " ", 
     RowBox[{"FontColor", "\[Rule]", " ", 
      RowBox[{"GrayLevel", "[", "0", "]"}]}], ",", " ", 
     RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"boldGray", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"MyStyle", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"FontColor", "\[Rule]", " ", 
       RowBox[{"GrayLevel", "[", "0.5", "]"}]}], ",", " ", 
      RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], "]"}]}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"boldGreen", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"MyStyle", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"FontColor", "\[Rule]", " ", 
       RowBox[{"RGBColor", "[", 
        RowBox[{".2", ",", "0.9", ",", ".6"}], "]"}]}], ",", " ", 
      RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], "]"}]}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hiBlackOnYellow", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"MyStyle", "[", 
    RowBox[{"x", ",", " ", 
     RowBox[{"Background", "\[Rule]", " ", 
      TagBox[
       StyleBox[
        RowBox[{"RGBColor", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}],
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
       FullForm]}], ",", 
     RowBox[{"FontColor", "\[Rule]", " ", 
      RowBox[{"GrayLevel", "[", "0", "]"}]}], ",", " ", 
     RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hiRedOnYellow", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"MyStyle", "[", 
    RowBox[{"x", ",", " ", 
     RowBox[{"Background", "\[Rule]", " ", 
      TagBox[
       StyleBox[
        RowBox[{"RGBColor", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}],
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
       FullForm]}], ",", 
     RowBox[{"FontColor", "\[Rule]", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], ",", " ", 
     RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388261491030408*^9, 3.3882615084415483`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["stringulate", "Subsection"],

Cell["\<\
Check first to make sure someting is a string; if it is a string, leave it \
be; if it is NOT a string, convert it to a string of its InputForm. 
Reason: converting strings to InputForm will embed the quotations WITHIN the \
string so the InputForm[\"x\"] is the string \"\\\"x\\\"\" and not the string \
\"x\". \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"stringulate", "[", 
    RowBox[{"s_", "?", "StringQ"}], "]"}], ":=", " ", "s"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stringulate", "[", 
    RowBox[{"s_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"stringulate", "/@", "s"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stringulate", "[", "s_", "]"}], ":=", " ", 
   RowBox[{"ToString", "[", 
    RowBox[{"InputForm", "[", "s", "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["cpu calculation Functions", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"cpuPush", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"$SBML$CPU", "=", " ", 
       RowBox[{"Prepend", "[", 
        RowBox[{"$SBML$CPU", ",", " ", 
         RowBox[{"TimeUsed", "[", "]"}]}], "]"}]}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cpuPop", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "f", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"f", "=", 
       RowBox[{"First", "[", "$SBML$CPU", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$CPU", "=", 
       RowBox[{"Rest", "[", "$SBML$CPU", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Return", "[", "f", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"cpuGet", "[", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$ReportCPU", ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{
          RowBox[{"TimeUsed", "[", "]"}], "-", 
          RowBox[{"cpuPop", "[", "]"}]}], "]"}], ",", " ", 
        RowBox[{"Return", "[", "0.0", "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"cpuSet", "[", "]"}], ":=", " ", 
    RowBox[{"If", "[", 
     RowBox[{"$SBML$ReportCPU", ",", " ", 
      RowBox[{"cpuPush", "[", "]"}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"cpuReport", "[", "msg_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "c", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"$SBML$ReportCPU", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "=", " ", 
           RowBox[{"cpuPop", "[", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<>>>CPU = \>\"", ",", 
            RowBox[{
             RowBox[{"TimeUsed", "[", "]"}], "-", "c"}], ",", "\"\< \>\"", 
            ",", " ", "msg"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  " "}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cpuObserver", "[", "msg_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"$CPU$Trace", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$CPULast", "=", "$CPU"}], ";", "\[IndentingNewLine]", 
         RowBox[{"$CPU", "=", 
          RowBox[{"TimeUsed", "[", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"$CPU", "-", "$CPULast"}], ",", "\"\< Seconds for \>\"", 
           ",", "msg"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"saveCPU", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"$CPU$Last$Saved", "=", "$CPULast"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$CPU$Saved", " ", "=", " ", "$CPU"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"retrieveCPU", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"$CPULast", "=", "$CPU$Last$Saved"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$CPU", "=", "$CPU$Saved"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["resetSBMLGlobals", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:resetSBMLGlobals\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"resetSBMLGlobals", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"$SBML$modelcount", "=", "0"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"$SBML$SessionWarnings", " ", "=", " ", "0"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$SessionStartTime", "=", 
       RowBox[{"TimeUsed", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentNames", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentVolumes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentUnits", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentOutsides", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$FrozenVariables", " ", "=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$Algebraic$Rules", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$Constraints", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$InitialAssignments", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$Compartment$ID", " ", "=", " ", "\"\<\>\""}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$Species$ID", " ", "=", " ", "\"\<$\>\""}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$warnings", "=", "True"}], ";"}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["preprocessSBML", "Subsection"],

Cell[CellGroupData[{

Cell["\<\
added 7/31/03, revised 8/7 to also check inside XMLElement (to catch \
XMLElement[ci, {stuff}, {s_1}], etc).  to remove underscores in the symbolic \
xml before doing any other processing

modified 7/27/03 to also correctly handle <cn type=\"e-notation\"> ... \
<sep/>..</cn>

add itemcheck 11/3/06 to allow users to define the math namespace at the \
beginning of the model and then refer to all obejcts as <math:apply>, \
<math:times>, <math:math>, etc. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:preprocessSBML\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"preprocessSBML", "[", "sbml_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", " ", 
        StyleBox["myrule",
         FontColor->RGBColor[0, 0, 1]], ",", " ", 
        StyleBox["myXMLElement",
         FontColor->RGBColor[0, 0, 1]]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "remove", " ", "underscores", " ", "in", " ", "rules", " ", "of", " ",
          "the", " ", "form", " ", "string1"}], "->", " ", "string2"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         StyleBox["myrule",
          FontColor->RGBColor[0, 0, 1]], "[", 
         RowBox[{
          RowBox[{"x_", "?", "StringQ"}], ",", " ", 
          RowBox[{"y_", "?", "StringQ"}]}], "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x1", ",", "y1"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"x1", " ", "=", " ", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"x", ",", " ", 
              RowBox[{"{", 
               RowBox[{
               "\"\<_\>\"", "\[Rule]", " ", 
                "MathSBML`Private`$SBML$Underscorecharacter"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"y1", " ", "=", " ", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"y", ",", " ", 
              RowBox[{"{", 
               RowBox[{
               "\"\<_\>\"", "\[Rule]", " ", 
                "MathSBML`Private`$SBML$Underscorecharacter"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"x1", "\[Rule]", " ", "y1"}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["myrule",
          FontColor->RGBColor[0, 0, 1]], "[", 
         RowBox[{"x_", ",", "y_"}], "]"}], ":=", " ", 
        RowBox[{"Rule", "[", 
         RowBox[{"x", ",", "y"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         StyleBox["myXMLElement",
          FontColor->RGBColor[0, 0, 1]], "[", 
         RowBox[{"x_", ",", " ", "y_", ",", "z_"}], "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x1", ",", " ", "z1"}], "}"}], ",", "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"x1", " ", "=", " ", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"x", ",", " ", 
              RowBox[{"{", 
               RowBox[{
               "\"\<_\>\"", "\[Rule]", " ", 
                "MathSBML`Private`$SBML$Underscorecharacter"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"z1", " ", "=", " ", "\[IndentingNewLine]", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"StringQ", "[", "#", "]"}], ",", " ", 
                 RowBox[{"StringReplace", "[", 
                  RowBox[{"#", ",", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<_\>\"", "\[Rule]", " ", 
                    "MathSBML`Private`$SBML$Underscorecharacter"}], "}"}]}], 
                  "]"}], ",", "#"}], "]"}], "&"}], ",", "z"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"x1", ",", " ", "y", ",", " ", "z1"}], "]"}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"myXMLElement", "[", "x___", "]"}], ":=", " ", 
        RowBox[{"XMLElement", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"sbml", "/.", 
         RowBox[{"{", 
          RowBox[{"Rule", "\[Rule]", " ", "myrule"}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"m", "/.", 
         RowBox[{"{", 
          RowBox[{"XMLElement", "\[Rule]", " ", "myXMLElement"}], "}"}]}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"7", "-", "27", "-", "2004"}], ":", " ", 
         RowBox[{
          RowBox[{"2.3", ".31"}], ":"}]}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"fixXMLeNotation", "[", "m", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"m", "=", 
        RowBox[{"itemcheck", "[", 
         RowBox[{"m", ",", "\"\<math\>\""}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"itemcheck", "[", 
    RowBox[{"m_", ",", " ", "item_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sbml", ",", " ", "XMLStuff", ",", "XMLObj", ",", " ", "mathrule", ",", 
       " ", "myrule", ",", " ", "mprime", ",", "debug"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"debug", "=", "False"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"debug", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<dbg:itemcheck: \>\"", ",", "item"}], "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"XMLStuff", "[", 
        RowBox[{"\"\<sbml\>\"", ",", " ", "a_", ",", " ", "b_"}], "]"}], ":=",
        " ", 
       RowBox[{"{", "a", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"XMLStuff", "[", "a___", "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"XMLObj", "[", "\"\<Document\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"{", "declaration_", "}"}], ",", "stuff_", ",", " ", 
         "morestuff_"}], "]"}], ":=", " ", 
       RowBox[{"{", "stuff", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myrule", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"xmlns_", ",", "item"}], "}"}], ",", "mathns_"}], "]"}], ":=",
        " ", 
       RowBox[{"{", "mathns", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myrule", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"xmlns_", ",", " ", "anythingelse_"}], "}"}], ",", " ", 
         "otherns_"}], "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myrule", "[", 
        RowBox[{"other_", ",", "stuff_"}], "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sbml", "=", 
       RowBox[{"m", "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"XMLElement", "\[Rule]", " ", "XMLStuff"}], ",", " ", 
          RowBox[{"XMLObject", "\[Rule]", " ", "XMLObj"}]}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sbml", "=", 
       RowBox[{"Flatten", "[", "sbml", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"mathrule", "=", 
       RowBox[{"sbml", "/.", 
        RowBox[{"{", 
         RowBox[{"Rule", "\[Rule]", "myrule"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mathrule", "=", " ", 
       RowBox[{"Flatten", "[", "mathrule", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "XMLStuff", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"mprime", "=", "m"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "mathrule", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"nextmath", ",", "restmath"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"restmath", "=", "mathrule"}], ";", "\[IndentingNewLine]", 
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "restmath", "]"}], ">", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"nextmath", "=", 
                RowBox[{"First", "[", "mathrule", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"restmath", "=", 
                RowBox[{"Rest", "[", "restmath", "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"debug", ",", " ", 
                 RowBox[{"Print", "[", 
                  RowBox[{
                  "\"\<dbg:itemcheck: checking \>\"", ",", "nextmath"}], 
                  "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"For", " ", "each", " ", 
                   RowBox[{"{", 
                    RowBox[{"xmlns", ",", " ", "\"\<math\>\""}], "}"}]}], 
                  "\[Rule]", "mathmlns"}], ",", " ", 
                 RowBox[{"replace", " ", "all", " ", 
                  RowBox[{"XMLElement", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"xmlns", ",", "operator"}], "}"}], "..."}], "]"}],
                   " ", "with", " ", "the", " ", 
                  RowBox[{"XMLElement", "[", 
                   RowBox[{"operator", ",", "..."}], "]"}], " ", "itself"}]}],
                 "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"XMLStuff", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"nextmath", ",", " ", "y_"}], "}"}], ",", "x___"}],
                  "]"}], ":=", " ", 
                RowBox[{"XMLElement", "[", 
                 RowBox[{"y", ",", " ", "x"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"XMLStuff", "[", "z___", "]"}], ":=", " ", 
                RowBox[{"XMLElement", "[", "z", "]"}]}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"mprime", " ", "=", " ", 
                RowBox[{"mprime", "/.", 
                 RowBox[{"{", 
                  RowBox[{"XMLElement", "\[Rule]", " ", "XMLStuff"}], 
                  "}"}]}]}], ";"}]}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "mprime", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["fixXMLeNotation", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:fixXMLeNotation\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"fixXMLeNotation", "[", "xml_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"myxml", ",", "f"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"\"\<cn\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<type\>\"", "\[Rule]", "\"\<e-notation\>\""}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"mantissa_", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<sep\>\"", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], ",", "exponent_"}], "}"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"man", ",", " ", "exp", ",", "fxml"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"man", " ", "=", " ", 
          RowBox[{
           RowBox[{"Xpression2SymbolicMathML", "[", 
            RowBox[{"ToExpression", "[", "mantissa", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"3", ",", "1"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"exp", " ", "=", " ", 
          RowBox[{
           RowBox[{"Xpression2SymbolicMathML", "[", 
            RowBox[{"ToExpression", "[", "exponent", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"3", ",", "1"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"fxml", " ", "=", " ", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<apply\>\"", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<times\>\"", ",", 
                RowBox[{"{", "}"}], ",", 
                RowBox[{"{", "}"}]}], "]"}], ",", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<apply\>\"", ",", 
                RowBox[{"{", "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"XMLElement", "[", 
                   RowBox[{"\"\<power\>\"", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                  RowBox[{"XMLElement", "[", 
                   RowBox[{"\"\<cn\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<type\>\"", "\[Rule]", "\"\<integer\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", "\"\<10\>\"", "}"}]}], "]"}], ",", "exp"}], 
                 "}"}]}], "]"}], ",", "man"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "fxml", "]"}], ";"}]}], "\[IndentingNewLine]",
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"f", "[", "x___", "]"}], ":=", " ", 
      RowBox[{"XMLElement", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"myxml", " ", "=", " ", 
      RowBox[{"xml", "/.", 
       RowBox[{"{", 
        RowBox[{"XMLElement", "\[Rule]", " ", "f"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "myxml", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388341475496073*^9, 3.3883415028406677`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["postprocessSBML", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:postprocessSBML\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["reverses effect of preprocessSBML 9-22-03", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"postprocess", "[", "sbml_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", " ", 
       StyleBox["myrule",
        FontColor->RGBColor[0, 0, 1]], ",", " ", 
       StyleBox["myXMLElement",
        FontColor->RGBColor[0, 0, 1]]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "remove", " ", "underscores", " ", "in", " ", "rules", " ", "of", " ", 
        "the", " ", "form", " ", "string1"}], "->", " ", "string2"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["myrule",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{
         RowBox[{"x_", "?", "StringQ"}], ",", " ", 
         RowBox[{"y_", "?", "StringQ"}]}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x1", ",", "y1"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x1", " ", "=", " ", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"x", ",", " ", 
             RowBox[{"{", 
              RowBox[{
              "MathSBML`Private`$SBML$Underscorecharacter", "\[Rule]", " ", 
               "\"\<_\>\""}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"y1", " ", "=", " ", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"y", ",", " ", 
             RowBox[{"{", " ", 
              RowBox[{
              "MathSBML`Private`$SBML$Underscorecharacter", "\[Rule]", " ", 
               "\"\<_\>\""}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"x1", "\[Rule]", " ", "y1"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["myrule",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"x_", ",", "y_"}], "]"}], ":=", " ", 
       RowBox[{"Rule", "[", 
        RowBox[{"x", ",", "y"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["myXMLElement",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"x_", ",", " ", "y_", ",", "z_"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x1", ",", " ", "z1"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x1", " ", "=", " ", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"x", ",", " ", 
             RowBox[{"{", 
              RowBox[{
              "MathSBML`Private`$SBML$Underscorecharacter", "\[Rule]", " ", 
               "\"\<_\>\""}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"z1", " ", "=", " ", "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"StringQ", "[", "#", "]"}], ",", " ", 
                RowBox[{"StringReplace", "[", 
                 RowBox[{"#", ",", " ", 
                  RowBox[{"{", " ", 
                   RowBox[{
                   "MathSBML`Private`$SBML$Underscorecharacter", "\[Rule]", 
                    " ", "\"\<_\>\""}], "}"}]}], "]"}], ",", "#"}], "]"}], 
              "&"}], ",", "z"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"x1", ",", " ", "y", ",", " ", "z1"}], "]"}], "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myXMLElement", "[", "x___", "]"}], ":=", " ", 
       RowBox[{"XMLElement", "[", "x", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"m", " ", "=", " ", 
       RowBox[{"sbml", "/.", 
        RowBox[{"{", 
         RowBox[{"Rule", "\[Rule]", " ", "myrule"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"m", " ", "=", " ", 
       RowBox[{"m", "/.", 
        RowBox[{"{", 
         RowBox[{"XMLElement", "\[Rule]", " ", "myXMLElement"}], "}"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBML", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:getSBML\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "getSBML", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"verbose", "\[Rule]", " ", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getSBML", "[", 
   RowBox[{"file_", ",", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "s1", ",", "s", ",", "sbml", ",", "filename", ",", " ", "sbmloptions", 
      ",", "level", ",", "version", ",", "cpu", ",", "hf", ",", 
      RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{"dbg", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<getSBML: file:\>\"", "//", "boldRed"}], ",", 
         RowBox[{"file", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"hf", " ", "=", " ", 
      RowBox[{"stringer", "[", 
       RowBox[{"Head", "[", "file", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"hf", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"hf", ",", 
        RowBox[{"\"\<\\\"\>\"", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], ";", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{"hf", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"stringer", "[", 
         RowBox[{"Head", "[", "file", "]"}], "]"}], "*)"}], "      ", ",", 
       "\[IndentingNewLine]", "\"\<String\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"fileExists", "[", " ", "file", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
             RowBox[{"\"\<The file \>\"", "//", "boldBlack"}], ",", 
             RowBox[{"file", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< does not exist.\>\"", "//", "boldBlack"}]}], "]"}],
            ";", "\[IndentingNewLine]", 
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"s1", " ", "=", " ", 
         RowBox[{"Import", "[", 
          RowBox[{"file", ",", "\"\<XML\>\""}], "]"}]}], ";", " ", 
        RowBox[{"filename", "=", "file"}], ";"}], ",", "\[IndentingNewLine]", 
       "\"\<XMLObject[Document]\>\"", ",", 
       RowBox[{
        RowBox[{"s1", "=", "file"}], ";", 
        RowBox[{"filename", "=", "\"\<Internal Model\>\""}], ";"}], ",", 
       "\[IndentingNewLine]", "_", ",", " ", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldOrange"}], ",", 
          RowBox[{
          "\"\< SBMLRead: first argument must be either a file name or \
Symbolic Obj SBML.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"s", " ", "=", " ", 
      RowBox[{"preprocessSBML", "[", "s1", "]"}]}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"cpuObserver", "[", "\"\<Import\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dbg", "=", 
      RowBox[{
       RowBox[{"Global`debug", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"{", 
        RowBox[{"Global`debug", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"sbml", " ", "=", " ", 
      RowBox[{"Cases", "[", 
       RowBox[{"s", ",", 
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<sbml\>\"", ",", "___"}], "]"}], ",", "3"}], "]"}]}], 
     ";", " ", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"dbg", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<getSBML:sbml:\>\"", ",", "sbml"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cpuObserver", "[", "\"\<sbml/Cases\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"abortIfNoTag", "[", 
      RowBox[{"sbml", ",", " ", "\"\<sbml\>\""}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"cpuObserver", "[", "\"\<abortIfNoTag\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"sbml", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"First", "[", "sbml", "]"}], "}"}]}], ";", " ", 
     StyleBox[
      RowBox[{"(*", " ", 
       RowBox[{"ignore", " ", "multiple", " ", "sbml"}], " ", "*)"}],
      FontWeight->"Plain"], 
     StyleBox[" ",
      FontWeight->"Plain"], "\[IndentingNewLine]", 
     RowBox[{"sbmloptions", " ", "=", " ", 
      RowBox[{"extractXMLOptions", "[", 
       RowBox[{"First", "[", "sbml", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"level", ",", "version"}], "}"}], " ", "=", " ", 
      RowBox[{"determineSBMLVersion", "[", "sbmloptions", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"dbg", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<getSBML: Level,Version=\>\"", ",", "level", ",", "\"\<,\>\"", 
         ",", "version"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "need", " ", "to", " ", "figure", " ", "out", " ", "model", " ", 
         "id"}], " ", "&"}], " ", "name", " ", "here", " ", "as", " ", 
       "well"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"move", " ", "this", " ", "to", " ", "getSBMLlevel2"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"level", ">", "1"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
           "MB$Load", ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            
            RowBox[{
             RowBox[{"newModel", "[", 
              RowBox[{
               RowBox[{"Global`level", "\[Rule]", " ", "level"}], ",", 
               RowBox[{"Global`version", "\[Rule]", " ", "version"}], ",", 
               " ", 
               RowBox[{"Global`echo", "\[Rule]", " ", "MB$Echo"}]}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"MB$SBMLAnnotation", "=", 
              RowBox[{
               RowBox[{"getAnnotations", "[", "sbml", "]"}], "//", 
               "Flatten"}]}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{"MB$SBMLNotes", "=", 
              RowBox[{
               RowBox[{"getNotes", "[", "sbml", "]"}], "//", "Flatten"}]}], 
             ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
          ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MB$Load", "=", "False"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<getSBML:MB$Load:\>\"", ",", "MB$Load", ",", 
           "\"\<, MB$SBMLNotes:\>\"", ",", "MB$SBMLNotes"}], " ", "]"}]}], 
        "]"}], ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"cpuObserver", "[", "\"\<determineVersion\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "level", ",", "\[IndentingNewLine]", "1", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
         "version", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", "1", 
          ",", 
          RowBox[{"Return", "[", 
           RowBox[{"getSBMLlevel1", "[", 
            RowBox[{"sbml", ",", "filename", ",", " ", "opt"}], "]"}], "]"}], 
          ",", "\[IndentingNewLine]", "\[IndentingNewLine]", "2", 
          StyleBox[",",
           FontColor->GrayLevel[0]], 
          RowBox[{"Return", "[", 
           RowBox[{"getSBMLlevel1", "[", 
            RowBox[{"sbml", ",", "filename", ",", " ", "opt"}], "]"}], "]"}], 
          ",", "\[IndentingNewLine]", 
          StyleBox["\[IndentingNewLine]",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox[
           RowBox[{"(*", " ", 
            RowBox[{
            "other", " ", "versions", " ", "of", " ", "level", " ", "1"}], 
            " ", "*)"}],
           FontWeight->"Plain",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox[" ",
           FontWeight->"Plain",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain",
           FontColor->RGBColor[0, 1, 0]], "_", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<SBML Level \>\"", ",", " ", "level", " ", ",", " ", 
             "\"\< version \>\"", ",", "version", ",", 
             "\"\< is not currently supported.\>\""}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
         ";"}], "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", "of", " ", "level", " ", "1"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], ",", "\[IndentingNewLine]", "2", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{
          "Print", "[", "\"\<getSBML:Calling getSBMLLevel2:\>\"", " ", 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "version", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", "1", 
          ",", 
          RowBox[{"Return", "[", 
           RowBox[{"getSBMLlevel2", "[", 
            RowBox[{"sbml", ",", "filename", ",", " ", "opt"}], "]"}], "]"}], 
          ",", "\[IndentingNewLine]", "\[IndentingNewLine]", "2", ",", 
          RowBox[{"Return", "[", 
           RowBox[{"getSBMLlevel2", "[", 
            RowBox[{"sbml", ",", "filename", ",", " ", "opt"}], "]"}], "]"}], 
          ",", "\[IndentingNewLine]", "\[IndentingNewLine]", "3", ",", " ", 
          RowBox[{"Return", "[", 
           RowBox[{"getSBMLlevel2", "[", 
            RowBox[{"sbml", ",", "filename", ",", " ", "opt"}], "]"}], "]"}], 
          ",", 
          StyleBox["\[IndentingNewLine]",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox["\[IndentingNewLine]",
           FontColor->RGBColor[0, 0, 1]], "4", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: MathSBML: \>\"", "//", "boldRed"}], ",", " ", 
             RowBox[{"\"\<SBML Level \>\"", "//", "boldBlack"}], ",", " ", 
             RowBox[{"level", "//", "boldBlue"}], " ", ",", " ", 
             RowBox[{"\"\< version \>\"", "//", "boldBlack"}], ",", 
             RowBox[{"version", "//", "boldBlue"}], ",", 
             RowBox[{
             "\"\< is not fully implemented in MathSBML.\>\"", "//", 
              "boldBlack"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"getSBMLlevel2", "[", 
             RowBox[{"sbml", ",", "filename", ",", " ", "opt"}], "]"}], 
            "]"}]}], ",", 
          StyleBox["\[IndentingNewLine]",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox["\[IndentingNewLine]",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox[
           RowBox[{"(*", " ", 
            RowBox[{
            "other", " ", "versions", " ", "of", " ", "level", " ", "2"}], 
            " ", "*)"}],
           FontWeight->"Plain",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox[" ",
           FontWeight->"Plain",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain",
           FontColor->RGBColor[0, 1, 0]], "_", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: MathSBML: \>\"", "//", "boldRed"}], ",", " ", 
             RowBox[{"\"\<SBML Level \>\"", "//", "boldBlack"}], ",", " ", 
             RowBox[{"level", "//", "boldBlue"}], " ", ",", " ", 
             RowBox[{"\"\< version \>\"", "//", "boldBlack"}], ",", 
             RowBox[{"version", "//", "boldBlue"}], ",", 
             RowBox[{
             "\"\< is not currently implemented in MathSBML.\>\"", "//", 
              "boldBlack"}]}], "]"}], ";", 
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
         ";"}], "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", "of", " ", "level", " ", "2"}], " ", "*)"}],
        FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       ",", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{"other", " ", "levels"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", "_", ",", " ", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: MathSBML:\>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"\"\<SBML Level \>\"", "//", "boldBlue"}], ",", 
          RowBox[{"level", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is not currently supported.\>\"", "//", "boldBlack"}]}], 
         "]"}], ";", " ", 
        RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"\"\<Error: MathSBML: \>\"", "//", "boldRed"}], ",", " ", 
       RowBox[{"\"\<SBML version \>\"", "//", "boldBlack"}], ",", " ", 
       RowBox[{"version", "//", "boldBlue"}], ",", " ", 
       RowBox[{
       "\"\< is not currently implemented in MathSBML.\>\"", "//", 
        "boldBlack"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.390198989006853*^9, 3.390199138072711*^9}, {
   3.390199182799446*^9, 3.3901992790635147`*^9}, {3.390199712598641*^9, 
   3.3901997217932587`*^9}, {3.390200219726783*^9, 3.390200228350398*^9}, {
   3.405359153831582*^9, 3.405359154539603*^9}, {3.506216339151582*^9, 
   3.5062163985939817`*^9}, {3.5404912879057817`*^9, 3.540491320913048*^9}, {
   3.540491367834262*^9, 3.540491417736809*^9}, 3.540491467822205*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDelayed", "::", "\<\"write\"\>"}], ":", 
  " ", "\<\"Tag \\!\\(Times\\) in \\!\\(Null\\\\ \\(\\(getSBML[\\(\\(file_, \
\\(\\(opt___ ? OptionQ\\)\\)\\)\\)]\\)\\)\\) is Protected. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::write\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData["$Failed"], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLNotes", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getSBMLNotes", "[", "sbml_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$SBML$Notes", " ", "=", 
        RowBox[{
         StyleBox[
          RowBox[{
           StyleBox["C",
            FontColor->GrayLevel[0]], "ases"}]], "[", 
         RowBox[{"sbml", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<notes\>\"", ",", "___"}], "]"}], ",", "5"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "$SBML$Notes", "]"}], ">", "0"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"$SBML$Notes", "=", " ", 
          RowBox[{
           RowBox[{"$SBML$Notes", "//", "First"}], "//", 
           "extractXMLSubElements"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "$SBML$Notes", "]"}], ">", "0"}], ",", " ", 
         RowBox[{"$SBML$Notes", "=", 
          RowBox[{"First", "[", "$SBML$Notes", "]"}]}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",\

 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLlevel1", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLlevel1", "[", 
    RowBox[{"sbml_", ",", "filename_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{
      "models", ",", " ", "modeloptions", ",", "modelnames", ",", "modelName",
        ",", "   ", "statistics", ",", " ", "importedModel", ",", 
       "modelCounterString", ",", " ", "numericalSolution"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dbg", " ", "=", " ", "$SBML$debug"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$UnitAssociations", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$ODES", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$SpeciesCompartmentAssociations", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<SBML level.version = \>\"", ",", " ", 
        "$SBML$Level$Version"}], " ", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$printModelName", ",", "\[IndentingNewLine]", 
        RowBox[{"modelCounterString", "=", 
         RowBox[{"\"\< ********** Model \>\"", "<>", 
          RowBox[{"ToString", "[", "$SBML$modelcount", "]"}], "<>", 
          "\"\< ********** \\n\>\""}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"modelCounterString", "=", "\"\<\>\""}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"saveVerboseData", ",", "\[IndentingNewLine]", " ", 
        RowBox[{
         RowBox[{"verboseSave", "[", 
          RowBox[{
           RowBox[{
           "modelCounterString", "<>", "\"\<File Name:\>\"", "<>", " ", 
            "filename", "<>", "\"\<\\nSBML Level \>\"", "<>", 
            RowBox[{"ToString", "[", "$SBML$Level", "]"}], "<>", 
            "\"\< Version \>\"", "<>", 
            RowBox[{"ToString", "[", "$SBML$Version", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", " ", "\[IndentingNewLine]", 
      RowBox[{"getSBMLNotes", "[", "sbml", "]"}], ";", " ", 
      "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"**", "**", " ", "Models"}], " ", "*****)"}], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 1, 0]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"models", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"sbml", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<model\>\"", ",", "___"}], "]"}], ",", "3"}], "]"}]}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<models\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"abortIfNoTag", "[", 
       RowBox[{"models", ",", " ", "\"\<model\>\""}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"modeloptions", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"extractXMLOptions", ",", "models"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"modelnames", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"\"\<name\>\"", "/.", "#"}], "/.", 
           RowBox[{"{", 
            RowBox[{
            "\"\<name\>\"", "\[Rule]", " ", 
             "\"\<Unnamed\[UnderBracket]Model\>\""}], "}"}]}], "&"}], ",", 
         " ", "modeloptions"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"printWarning", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "modelnames", "]"}], ">", "1"}], ",", 
        "\[IndentingNewLine]", 
        "\"\<Only one model is permitted; additional models ignored.\>\""}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"modelname", " ", "=", " ", 
       RowBox[{
        RowBox[{"First", "[", "modelnames", "]"}], " ", "//", " ", 
        "removeUnderscore"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"saveVerboseData", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"verboseSave", "[", 
          RowBox[{
           RowBox[{"\"\<Model: \>\"", "<>", "modelname"}], ",", " ", 
           RowBox[{"{", "}"}], ",", " ", 
           RowBox[{"{", "}"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<getSBML:: modelname:\>\"", ",", "modelname"}],
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"setModelContext", "[", "modelname", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"models", "=", 
       RowBox[{"{", 
        RowBox[{"First", "[", "models", "]"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$Models", " ", "=", " ", "models"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"**", "**", " ", "Units"}], " ", "*****)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"getSBMLunits", "[", "opt", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<units\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"**", "**", " ", "Compartments"}], " ", "*****)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"getSBMLcompartments", "[", "opt", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<compartments\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"**", "**", " ", "Species"}], " ", "*****)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"getSBMLspecies", "[", "opt", "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<species\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"**", "**", " ", "Parameters"}], " ", "*****)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"getSBMLparameters", "[", "opt", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<parameters\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"**", "**", " ", "Rules"}], " ", "*****)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"getSBMLrules", "[", "opt", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<rules\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"**", "**", " ", "Reactions"}], " ", "*****)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"getSBMLreactions", "[", "opt", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<reactions\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$verbose", ",", " ", 
        RowBox[{"verbosePrint", "[", "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"reportUnassignedParameters", "[", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"reportMisingIC", "[", "]"}], ";"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"printStatistics", "[", "]"}], ";", "\[IndentingNewLine]", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$UnitAssociations", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"$SBML$UnitAssociations", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Last", "[", "#", "]"}], "]"}], "\[NotEqual]", " ", 
           RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], 
          "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"importedModel", " ", "=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
       "SBMLRead$return", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnODES", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", 
              RowBox[{"Global`SBMLODES", "\[Rule]", " ", "$SBML$ODES"}]}], 
             "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnContext", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", 
              RowBox[{
              "Global`SBMLContext", "\[Rule]", " ", "$SBML$Context"}]}], 
             "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnIC", ",", " ", 
           RowBox[{"importedModel", "=", "\[IndentingNewLine]", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", "\[IndentingNewLine]", 
              RowBox[{"Global`SBMLIC", "\[Rule]", 
               RowBox[{"ToExpression", "[", 
                RowBox[{"initialize", "[", "SBMLVariables", "]"}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnConstants", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", 
              RowBox[{"Global`SBMLConstants", "\[Rule]", 
               RowBox[{"(", "SBMLReplacementRules", ")"}]}]}], "]"}]}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnSpecies", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", "\[IndentingNewLine]", 
              RowBox[{"Global`SBMLSpecies", "\[Rule]", 
               RowBox[{"functionate", "[", "$SBML$Species$IDs", "]"}]}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnGlobalParameters", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", "\[IndentingNewLine]", 
              RowBox[{
              "Global`SBMLParameters", "\[Rule]", "SBMLGlobalParameters"}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnModelVariables", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", "\[IndentingNewLine]", 
              RowBox[{"Global`SBMLModelVariables", "\[Rule]", 
               RowBox[{"ToExpression", "[", 
                RowBox[{"functionate", "[", "SBMLVariables", "]"}], "]"}]}]}],
              "\[IndentingNewLine]", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnAlgebraicRules", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", 
              RowBox[{
              "Global`SBMLAlgebraicRules", "\[Rule]", " ", 
               "$SBML$Algebraic$Rules"}]}], "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnUnitDefinitions", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", 
              RowBox[{
              "Global`SBMLUnitDefinitions", "\[Rule]", " ", 
               "$SBML$UnitRules"}]}], "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnUnitAssociations", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", 
              RowBox[{
              "Global`SBMLUnitAssociations", "\[Rule]", " ", 
               "$SBML$UnitAssociations"}]}], "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnReactions", ",", " ", 
           RowBox[{"importedModel", "=", 
            RowBox[{"Append", "[", 
             RowBox[{"importedModel", ",", 
              RowBox[{
              "Global`SBMLReactions", "\[Rule]", " ", "$SBML$Reactions"}]}], 
             "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnModelName", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"importedModel", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"importedModel", ",", 
               RowBox[{
               "Global`SBMLModelName", "\[Rule]", " ", "modelname"}]}], 
              "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"SBMLRead$returnCompartments", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"importedModel", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"importedModel", ",", "\[IndentingNewLine]", 
               RowBox[{"Global`SBMLCompartments", "\[Rule]", 
                RowBox[{"(", " ", 
                 RowBox[{"ToExpression", "/@", "$SBML$CompartmentNames"}], 
                 ")"}]}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
          "SBMLRead$returnSpeciesCompartmentAssociations", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"importedModel", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"importedModel", ",", 
               RowBox[{
               "Global`SBMLSpeciesCompartmentAssociations", "\[Rule]", " ", 
                "$SBML$SpeciesCompartmentAssociations"}]}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SBMLRead$returnSolution", ">", "0"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"numericalSolution", " ", "=", " ", 
             RowBox[{"SBMLNDSolve", "[", 
              RowBox[{
              "importedModel", ",", " ", "SBMLRead$returnSolution", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Sequence", "[", "SBML$NDSolveOptions", "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"importedModel", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"importedModel", ",", " ", 
               RowBox[{
               "Global`SBMLNumericalSolution", "\[Rule]", " ", 
                "numericalSolution"}]}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"importedModel", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"importedModel", ",", " ", 
         RowBox[{"Global`SBMLLevelVersion", "\[Rule]", " ", 
          RowBox[{"ToExpression", "[", "$SBML$Level$Version", "]"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"importedModel", "=", 
       RowBox[{"Sort", "[", "importedModel", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "importedModel", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.402695450834737*^9, 3.402695461038892*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["setModelContext", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:setModelContext\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"Names", "[", "\"\<PreviousModelContexts\>\"", "]"}], "]"}], 
       ">", "0"}], ",", "\[IndentingNewLine]", 
      RowBox[{"PreviousModelContexts", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "PreviousModelContexts", "}"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"PreviousModelContexts", "=", 
        RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
   "\[IndentingNewLine]", "*)"}], " ", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"PreviousModelContexts", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"setModelContext", "[", "name_", "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"$SBML$Context", "==", "\"\<Automatic\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"$SBML$Context", "=", 
           RowBox[{"name", "<>", "\"\<`\>\""}]}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringTake", "[", 
               RowBox[{"$SBML$Context", ",", 
                RowBox[{"-", "1"}]}], "]"}], "\[NotEqual]", " ", 
              "\"\<`\>\""}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"$SBML$Context", "=", 
              RowBox[{"$SBML$Context", "<>", "\"\<`\>\""}]}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"$SBML$Context", "==", "\"\<None`\>\""}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"$SBML$UnitsContext", "=", "\"\<Units`\>\""}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"$SBML$UnitsContext", "=", 
           RowBox[{"$SBML$Context", "<>", "\"\<Units`\>\""}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"PreviousModelContexts", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"PreviousModelContexts", ",", "$SBML$Context"}], "]"}], 
          "]"}]}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "]"}]}], ";"}], " "}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["printStatistics", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:printStatistics\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"printStatistics", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"$SBML$Stats", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"statistics", " ", "=", " ", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<Compartments\>\"", ",", "$SBML$NCompartments"}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"\"\<Species\>\"", ",", 
              RowBox[{"Length", "[", "SBMLVariables", "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"\"\<ODES\>\"", ",", 
              RowBox[{"Length", "[", "$SBML$ODES", "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Global Parameters\>\"", ",", " ", 
              "$SBML$NGlobalParameters"}], "}"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"{", 
             RowBox[{
             "\"\<Local Parameters\>\"", ",", "$SBML$NLocalParameters"}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"\"\<Rules\>\"", ",", "$SBML$NRules"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"\"\<Reactions\>\"", ",", "$SBML$NReactions"}], "}"}]}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"$SBML$Level", ">", "1"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"statistics", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"statistics", ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"\"\<Events\>\"", ",", "$SBML$NEvents"}], "}"}]}], 
              "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"statistics", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"statistics", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"\"\<CPU Used\>\"", ",", 
                RowBox[{
                 RowBox[{"TimeUsed", "[", "]"}], "-", "$SBML$InitialCPU"}]}], 
               "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"\"\<Warnings\>\"", ",", " ", "$SBML$FileWarnings"}], 
               "}"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printTable", "[", 
          RowBox[{"statistics", ",", 
           RowBox[{"title", "\[Rule]", " ", "\"\<File Statistics\>\""}], ",", 
           
           RowBox[{"columnHeaders", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Description\>\"", ",", "\"\<Value\>\""}], "}"}]}]}],
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["determineSBMLVersion", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:determineSBMLVersion\>\"", "]"}]}], 
   "]"}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"determineSBMLVersion", "[", 
   RowBox[{"{", "opt___", "}"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "lev", ",", "ver", ",", "options", ",", "xmlns", ",", "expectedXMLNS", 
      ",", "\[IndentingNewLine]", 
      RowBox[{"$XMLNS", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<http://www.w3.org/2000/xmlns/\>\"", ",", "\"\<xmlns\>\""}], 
        "}"}]}]}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"options", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lev", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"\"\<level\>\"", "/.", "options"}], "/.", 
         RowBox[{"{", 
          RowBox[{"\"\<level\>\"", "\[Rule]", " ", "\"\<0\>\""}], "}"}]}], "//",
         "ToString"}], "//", "ToExpression"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ver", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"\"\<version\>\"", "/.", "options"}], "/.", 
         RowBox[{"{", 
          RowBox[{"\"\<version\>\"", "\[Rule]", " ", "\"\<0\>\""}], "}"}]}], "//",
         "ToString"}], "//", "ToExpression"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"$SBML$Level", " ", "=", " ", "lev"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"$SBML$Version", "=", "ver"}], ";", "\[IndentingNewLine]", 
     RowBox[{"$SBML$Level$Version", " ", "=", " ", 
      RowBox[{
       RowBox[{"ToString", "[", "$SBML$Level", "]"}], "<>", "\"\<.\>\"", "<>", 
       RowBox[{"ToString", "[", "$SBML$Version", "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "$SBML$Level$Version", ",", "\[IndentingNewLine]", "\"\<1.1\>\"", ",", 
       RowBox[{
        RowBox[{
        "expectedXMLNS", "=", "\[InvisibleSpace]", 
         "\"\<http://www.sbml.org/sbml/level1\>\""}], ";"}], ",", 
       "\[IndentingNewLine]", "\"\<1.2\>\"", ",", 
       RowBox[{
        RowBox[{
        "expectedXMLNS", "=", "\[InvisibleSpace]", 
         "\"\<http://www.sbml.org/sbml/level1\>\""}], ";"}], ",", 
       "\[IndentingNewLine]", "\"\<2.1\>\"", ",", 
       RowBox[{
        RowBox[{
        "expectedXMLNS", "=", "\[InvisibleSpace]", 
         "\"\<http://www.sbml.org/sbml/level2\>\""}], ";"}], ",", 
       "\[IndentingNewLine]", "\"\<2.2\>\"", ",", 
       RowBox[{
        RowBox[{
        "expectedXMLNS", "=", "\[InvisibleSpace]", 
         "\"\<http://www.sbml.org/sbml/level2/version2\>\""}], ";"}], ",", 
       "\[IndentingNewLine]", "\"\<2.3\>\"", ",", " ", 
       RowBox[{
        RowBox[{
        "expectedXMLNS", "=", 
         "\"\<http://www.sbml.org/sbml/level2/version3\>\""}], ";"}], ",", 
       "\[IndentingNewLine]", "\"\<2.4\>\"", ",", " ", 
       RowBox[{
        RowBox[{
        "expectedXMLNS", "=", 
         "\"\<http://www.sbml.org/sbml/level2/version4\>\""}], ";"}], ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{
        RowBox[{"expectedXMLNS", "=", "\[InvisibleSpace]", 
         RowBox[{"\"\<??-UNKNOWN-NAMESPACE-Level-\>\"", "<>", 
          RowBox[{"stringer", "[", "$SBML$Level", "]"}], "<>", 
          "\"\<-Version-\>\"", "<>", 
          RowBox[{"stringer", "[", "$SBML$Version", "]"}], "<>", 
          "\"\<-??\>\""}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"xmlns", " ", "=", 
      RowBox[{
       RowBox[{"$XMLNS", "/.", "options"}], "/.", 
       RowBox[{"{", 
        RowBox[{"$XMLNS", "\[Rule]", "expectedXMLNS"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"xmlns", "\[NotEqual]", " ", "expectedXMLNS"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Specified Namespace = \>\"", "//", "boldBlack"}], ",", 
         RowBox[{
          RowBox[{"\"\<'\>\"", "<>", "xmlns", "<>", "\"\<'\>\""}], "//", 
          "boldBlue"}], ",", " ", 
         RowBox[{
         "\"\<is not consistent with SBML Level \>\"", "//", "boldBlack"}], 
         ",", " ", 
         RowBox[{"$SBML$Level", "//", "boldBlue"}], ",", " ", 
         RowBox[{"\"\< Version \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{"$SBML$Version", "//", "boldBlue"}], ",", 
         RowBox[{"\"\<\\nThe correct namespace is \>\"", "//", "boldBlack"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<'\>\"", "<>", "expectedXMLNS", "<>", "\"\<'\>\""}], "//",
           "boldBlue"}]}], "\[IndentingNewLine]", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"lev", ",", "ver"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.390198824177684*^9, 3.3901988417568893`*^9}, {
  3.50621662830412*^9, 3.506216631141282*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["reportMissingIC", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reportMisingIC", "[", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "variablesWithoutIC", "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"variablesWithoutIC", " ", "=", " ", "\[IndentingNewLine]", 
      RowBox[{"Select", "[", 
       RowBox[{"SBMLVariables", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"SBMLIC", "[", "#", "]"}], "\[Equal]", 
          RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], 
         "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "variablesWithoutIC", "]"}], ">", "0"}], ",", 
       " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", " ", "[", 
         RowBox[{"$SBML$UseDefaultIC", ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"printWarning", "[", 
            RowBox[{
            "\"\<The following variables do not have initial conditions: \
\>\"", "<>", 
             RowBox[{
             "list2CommaSeparatedString", "[", "variablesWithoutIC", "]"}], 
             "<>", "\"\<. They have  been assigned a default value of \>\"", "<>",
              "$SBML$DefaultIC"}], "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"definef", "[", 
               RowBox[{"SBMLIC", ",", "#", ",", 
                RowBox[{"ToString", "[", "$SBML$DefaultIC", "]"}]}], "]"}], 
              "&"}], ",", " ", "variablesWithoutIC"}], "]"}], ";"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]",
           ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"printWarning", "[", 
            RowBox[{
            "\"\<The following variables do not have initial conditions: \
\>\"", "<>", "variablesWithoutIC", "<>", 
             "\"\<. A default value may be assigned using the option \
defaultIC.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
      "]"}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["reportUnassignedParameters", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"reportUnassignedParameters", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "SBMLUndefinedConstants", "]"}], ">", "0"}], 
        ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
          "$SBML$UseDefaultParameterValue", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"printWarning", "[", 
             RowBox[{
             "\"\<The following parameters were not defined in the model: \
\>\"", "<>", 
              RowBox[{
              "list2CommaSeparatedString", "[", "SBMLUndefinedConstants", 
               "]"}], "<>", 
              "\"\<. These parameters were assigned a default value of \>\"", 
              "<>", "$SBML$DefaultParameterValue"}], "]"}], ";"}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{"printWarning", "[", 
             RowBox[{
             "\"\<The following parameters were not defined in the model: \
\>\"", "<>", 
              RowBox[{
              "list2CommaSeparatedString", "[", "SBMLUndefinedConstants", 
               "]"}], "<>", 
              "\"\<. You can use the option defaultParameterValue to define a \
global default value.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["definef", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:definef\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"definef", "[", 
    RowBox[{"f_", ",", "x_", ",", "value_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"debug", "=", "False"}], ",", " ", "useval"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"useval", " ", "=", " ", "value"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "===", "SBMLIC"}], " ", "\[And]", " ", 
         RowBox[{
          RowBox[{"stringer", "[", 
           RowBox[{"decontextify", "[", " ", "x", " ", "]"}], "]"}], 
          "\[Equal]", " ", "\"\<t\>\""}], "  ", "\[And]", " ", 
         RowBox[{"value", "==", "\"\<Indeterminate\>\""}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"useval", " ", "=", " ", "\"\<0\>\""}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"debug", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<definef: {f, x, value}:\>\"", ",", " ", 
          RowBox[{"{", 
           RowBox[{"f", ",", " ", "x", ",", " ", "useval"}], "}"}]}], "]"}]}],
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"f", "[", "x", "]"}], "=", "useval"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["ReplaceRuleListPart", "Subsection"],

Cell["replaces one option in a rule list", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ReplaceRuleListPart", "[", 
    RowBox[{
     RowBox[{"opt_", "\[Rule]", " ", "value_"}], ",", " ", "oldOptList_"}], 
    "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"old", ",", "i", ",", "new"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"old", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "oldOptList", "}"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"i", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Position", "[", 
         RowBox[{
          RowBox[{"First", "/@", "old"}], ",", " ", "opt"}], "]"}], "]"}]}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "i", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"i", " ", "=", " ", 
          RowBox[{"First", "[", "i", "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"new", " ", "=", " ", 
          RowBox[{"ReplacePart", "[", 
           RowBox[{"old", ",", " ", 
            RowBox[{"opt", "\[Rule]", " ", "value"}], ",", " ", "i"}], 
           "]"}]}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"new", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"old", ",", " ", 
            RowBox[{"opt", "\[Rule]", " ", "value"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "new", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getSymbols", "Subsection"],

Cell[TextData[{
 "getSymbols[expression] gets the symbols in the expression, by first \
converting it to Symbolic mathml and then taking the arguments of the xml \
expression.  In fact, the first definition of myxml in the following is \
probably redundant.: Note that f is returned as a symbol by Sin and Cos are \
not!! Example: \n",
 StyleBox["\n",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  RowBox[{"getSymbols", "[", 
   RowBox[{"a", "+", 
    RowBox[{"5", 
     RowBox[{"Sin", "[", "y", "]"}]}], "+", 
    RowBox[{"f", "[", 
     RowBox[{"x", "*", 
      RowBox[{"Cos", "[", "y", "]"}]}], "]"}]}], "]"}]], "Input",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\n",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"a", ",", "f", ",", "x", ",", "y"}], "}"}]], "Output",
  FontColor->RGBColor[0, 0, 1]]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:getSymbols\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSymbols", "[", "exp_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", ",", "expr", ",", "myxml", ",", " ", 
       RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"expr", "=", "exp"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringQ", "[", "expr", "]"}], ",", 
        RowBox[{"expr", "=", 
         RowBox[{"ToExpression", "[", "expr", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myxml", "[", 
        RowBox[{"\"\<ci\>\"", ",", 
         RowBox[{"{", "___", "}"}], ",", 
         RowBox[{"{", "x_", "}"}]}], "]"}], ":=", " ", "x"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myxml", "[", 
        RowBox[{"\"\<csymbol\>\"", ",", "___"}], "]"}], ":=", " ", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myxml", "[", 
        RowBox[{"_", ",", " ", 
         RowBox[{"{", "___", "}"}], ",", " ", 
         RowBox[{"{", "z___", "}"}]}], "]"}], ":=", " ", 
       RowBox[{"{", "z", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"v", " ", "=", 
       RowBox[{"Xpression2SymbolicMathML", "[", "expr", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<getSymbols: v(1):\>\"", ",", " ", "v"}], "]"}]}], "]"}],
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"v", " ", "=", 
       RowBox[{"ToExpression", "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{"v", "/.", 
             RowBox[{"{", 
              RowBox[{"XMLElement", "\[Rule]", " ", "myxml"}], "}"}]}], ")"}],
            "//", "Flatten"}], "//", "Union"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<getSymbols: v(2):\>\"", ",", " ", "v"}], "]"}]}], "]"}],
       ";", " ", "\[IndentingNewLine]", 
      RowBox[{"v", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"v", ",", " ", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{"NumberQ", "[", "#", "]"}], ")"}]}], "&"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"v", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"v", ",", 
         RowBox[{"{", "If", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<getSymbols: exp: \>\"", ",", " ", "exp", ",", " ", 
           "\"\< v: \>\"", ",", " ", "v"}], "]"}], ";"}]}], " ", 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "v", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388341548712388*^9, 3.388341553738514*^9}, {
  3.5061945421830187`*^9, 3.50619454299422*^9}, {3.506194579576284*^9, 
  3.5061946562504187`*^9}, {3.506212502039115*^9, 3.5062125030375166`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getInterpolatingFunction", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getInterpolatingFunction", "[", 
    RowBox[{"InterpolationSet", "[", 
     RowBox[{"t1_", ",", " ", "t2_", ",", " ", "if_"}], "]"}], "]"}], ":=", 
   " ", "if"}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["NDSolveSBMLWithEvents", "Subsection"],

Cell["\<\
Wrapper to repeatedly call NDSolveSBML taking into account the existence of \
events until the desired time span has ended

2/25/04
mod 10/28/04 2.4.3
mod 3/5/05 2.4.9
mod 5/4/06 2.5.13\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NDSolveSBMLWithEvents", "[", 
    RowBox[{
    "inputSystem_", ",", " ", "tmax_", ",", "ievents_", ",", "iconstraints_", 
     ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "modelvariables", ",", " ", "r", ",", "ic", ",", "vars", ",", 
       "triggeredvars", ",", 
       RowBox[{"dbg", "=", "True"}], ",", 
       RowBox[{"n", "=", "\"\<Not Implemented\>\""}], ",", " ", "triggers", 
       ",", "test", ",", " ", "tevent", ",", "triggeredEvents", ",", "t", ",",
        "tstart", ",", "tstop", ",", "actions", ",", "triggeredActions", ",", 
       "nonTriggeredVars", ",", "solution", ",", "ievent", ",", 
       "triggeredNames", ",", " ", "eventNames", ",", "trace", ",", "delays", 
       ",", "triggeredDelays", ",", "badeventdt", ",", "iclose", ",", 
       "dtevent", ",", " ", "values", ",", " ", "eventLast", ",", "maxclose", 
       ",", "maxevents", ",", "fs", ",", "triggeredValues", ",", "delayed", 
       ",", "currentDelayValues", ",", "remappedEvents", ",", " ", "events", 
       ",", "eventflags", ",", "delayedNames", ",", "delayAmounts", ",", 
       "havedelays", ",", "delayedActions", ",", "currentlyDelayedActions", 
       ",", "savedEvents", ",", "newEvents", ",", "constants", ",", 
       "flagvariables", ",", "\[IndentingNewLine]", "icalready", ",", 
       "ic2use", ",", "ic4flags", ",", "constraints", ",", 
       "triggeredConstraints", ",", "constraintMessages", ",", 
       "\[IndentingNewLine]", 
       StyleBox["interpolateForEventTime",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["intInterval",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["remapEvents",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["updateEvents",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["constraintsToEvents",
        FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dbg", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`debug", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`debug", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<NDSolveSBMLWithEvents:events:\>\"", ",", "ievents"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<NDSolveSBMLWithEvents:constraints:\>\"", ",", "iconstraints"}],
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"flagvariables", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"trace", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Global`trace", "/.", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", "opt", "}"}], "]"}]}], ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`trace", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"maxevents", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Global`MaxEvents", "/.", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", "opt", "}"}], "]"}]}], ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`MaxEvents", "\[Rule]", " ", "100"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"maxclose", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Global`MaxCloseEvents", "/.", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", "opt", "}"}], "]"}]}], ")"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`MaxCloseEvents", "\[Rule]", " ", "10"}], "}"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"eventLast", "=", 
       RowBox[{"-", "Infinity"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"badeventdt", " ", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", "Global`BadEventTimePrecision", ")"}], "/.", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", "opt", "}"}], "]"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`BadEventTimePrecision", "\[Rule]", 
          RowBox[{"10.", "^", 
           RowBox[{"-", "7"}]}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"ievent", "=", "0"}], ";", 
      RowBox[{"iclose", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", "inputSystem"}], ";", "\[IndentingNewLine]", 
      RowBox[{"solution", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"fs", " ", "=", " ", 
       RowBox[{"Global`SBMLFunctions", "/.", "r"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"constants", " ", "=", " ", 
       RowBox[{"Global`SBMLConstants", "/.", "r"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"added", " ", "2.5", ".13", " ", "4", " ", "May", " ", "06"}], 
       " ", "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
           
           RowBox[{"\"\< ievents: \>\"", "//", "boldOrange"}], ",", 
           RowBox[{"ievents", "//", "boldBlue"}]}], "]"}], ";", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
           
           RowBox[{"\"\< fs: \>\"", "//", "boldOrange"}], ",", 
           RowBox[{"fs", "//", "boldBlue"}]}], "]"}], ";", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\< r (input): \>\"", "//", "boldOrange"}], ",", 
           RowBox[{"r", "//", "boldBlue"}]}], "]"}], ";"}]}], " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["constraintsToEvents",
         FontColor->RGBColor[0, 0, 1]], "[", "constraints_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"events", ",", 
           RowBox[{"dbg", "=", "False"}], ",", "i", ",", " ", 
           StyleBox["constraintToEvent",
            FontColor->RGBColor[0, 0, 1]]}], "}"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToExpression", "[", "$SBML$Level$Version", "]"}], "<", 
             "2.2"}], ",", " ", 
            RowBox[{"Return", "[", 
             RowBox[{"{", "}"}], "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"i", "=", "0"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<constraintsToEvents: \>\"", "//", "boldBlue"}], 
              ",", 
              RowBox[{"\"\<constraints: \>\"", "//", "boldBlack"}], ",", " ", 
              
              RowBox[{"constraints", "//", "boldRed"}]}], "]"}]}], "]"}], ";",
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            StyleBox["constraintToEvent",
             FontColor->RGBColor[0, 0, 1]], "[", "c_", "]"}], ":=", " ", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"event", ",", "trigger", ",", "eventID"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"trigger", " ", "=", 
               RowBox[{"First", "[", "c", "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"dbg", ",", " ", 
                RowBox[{"Print", "[", 
                 RowBox[{
                 "\"\<constraintToEvent: trigger: \>\"", ",", " ", 
                  "trigger"}], "]"}]}], "]"}], ";", " ", 
              "\[IndentingNewLine]", " ", 
              RowBox[{"trigger", "=", 
               RowBox[{"stringer", "[", "trigger", "]"}]}], ";", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"i", "++"}], ";", "\[IndentingNewLine]", 
              RowBox[{"eventID", "=", 
               RowBox[{
                RowBox[{"\"\<Constraint\[UnderBracket]\>\"", "<>", 
                 RowBox[{"ToString", "[", "i", "]"}], "<>", 
                 "\"\<\[UnderBracket]$Violation\>\""}], "//", 
                "contextify"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"event", "=", 
               RowBox[{"(", 
                RowBox[{"eventID", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"\"\<trigger\>\"", "\[Rule]", " ", "trigger"}], 
                   ",", 
                   RowBox[{"\"\<delay\>\"", "\[Rule]", " ", "\"\<0\>\""}], 
                   ",", 
                   RowBox[{"\"\<events\>\"", "\[Rule]", " ", 
                    RowBox[{"{", "}"}]}]}], "}"}]}], ")"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"Return", "[", "event", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}]}], ";", 
          RowBox[{"(*", " ", 
           RowBox[{"end", " ", "of", " ", 
            StyleBox["constraintToEvent",
             FontColor->RGBColor[0, 0, 1]]}], " ", "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"events", " ", "=", " ", 
           RowBox[{"constraintToEvent", "/@", "constraints"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<constraintsToEvents: \>\"", "//", "boldBlue"}], 
              ",", 
              RowBox[{"\"\<mapped events: \>\"", "//", "boldBlack"}], ",", 
              " ", 
              RowBox[{"events", "//", "boldRed"}]}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "events", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "of", " ", 
        StyleBox["constraintsToEvents",
         FontColor->RGBColor[0, 0, 1]]}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       StyleBox[
        RowBox[{
         RowBox[{
         "Replace", " ", "SBML", " ", "Events", " ", "with", " ", 
          "Mathematica", " ", "Events", " ", "defined", " ", "as", " ", 
          "follows", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"rev", ".", " ", "10"}], "/", "28"}], "/", "04"}], " ", 
            "2.4", ".3"}], ")"}]}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
         "Each", " ", "event", " ", "e", " ", "in", " ", "E", " ", "has", " ",
           "a", " ", "trigger", " ", "expression", " ", "Te", " ", "and", " ",
           "assignments", " ", 
          RowBox[{"Ae", ".", "\[IndentingNewLine]", "For"}], " ", "each", " ",
           "event", " ", "e", " ", "we", " ", "create", " ", "in", " ", 
          "mathematica"}], " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", "1", ")"}], " ", "a", " ", "variable", " ", "Ve", " ", 
          "with", " ", "initial", " ", "value", " ", "false"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "2", ")"}], " ", "a", " ", "mathematica", " ", 
           "event", " ", "with", " ", "trigger", " ", 
           RowBox[{"(", 
            RowBox[{"NOT", " ", "Ve"}], ")"}], " ", "AND", " ", "Te", " ", 
           "and", " ", "assignments", " ", "Ae", " ", "and", " ", "Ve"}], "=",
           "true"}], " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "3", ")"}], " ", "a", " ", "mathematica", " ", 
           "event", " ", "with", " ", "trigger", " ", "Ve", " ", "AND", " ", 
           RowBox[{"(", 
            RowBox[{"NOT", " ", "Te"}], ")"}], " ", "and", " ", "assignment", 
           " ", "Ve"}], "=", "false"}]}],
        FontColor->GrayLevel[0.666667]], 
       StyleBox["\[IndentingNewLine]",
        FontColor->GrayLevel[0.666667]], "\[IndentingNewLine]", "*)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"remapEvents", "[", 
        RowBox[{"evlist_", ",", "currentTime_"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "remapEvent", ",", " ", "i", ",", "nev", ",", "flags", ",", " ", 
           "updatedEvents", ",", "ic", ",", "vars", ",", "odes", ",", 
           "initialFlagVals"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{"\"\<remapEvents:evlist:\>\"", ",", "evlist"}], "]"}]}], 
           "]"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"i", "=", "0"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"nev", "=", 
             RowBox[{"Length", "[", "evlist", "]"}]}], ";"}], " ", "*)"}], 
          " ", "\[IndentingNewLine]", 
          RowBox[{"flags", "=", 
           RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            StyleBox["remapEvent",
             FontColor->RGBColor[0, 1, 1]], "[", 
            RowBox[{"evid_", "\[Rule]", " ", "evdata_"}], "]"}], ":=", " ", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "tr", ",", "tr1", ",", "tr2", ",", "\[IndentingNewLine]", "de", 
               ",", "ev", ",", "ev1", ",", " ", "ev2", ",", "op", ",", " ", 
               "flag", ",", "ev1n", ",", "ev2n", ",", " ", "new", ",", 
               "delayedevents"}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"op", " ", "=", " ", 
               RowBox[{
                RowBox[{"{", "evdata", "}"}], "//", "Flatten"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"tr", "=", 
               RowBox[{"ToExpression", "[", 
                RowBox[{"\"\<trigger\>\"", "/.", "op"}], " ", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"de", " ", "=", " ", 
               RowBox[{"\"\<delay\>\"", "/.", "op"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"ev", " ", "=", " ", 
               RowBox[{"\"\<events\>\"", "/.", "op"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"stringer", "[", "de", "]"}], "\[NotEqual]", " ", 
                 "\"\<0\>\""}], ",", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"delayedevents", "=", "ev"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"ev", "=", 
                  RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"delayedevents", "=", 
                 RowBox[{"{", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"flag", " ", "=", " ", 
               RowBox[{"Symbol", "[", 
                RowBox[{
                 RowBox[{"stringer", "[", "evid", "]"}], "<>", 
                 "\"\<\[UnderBracket]$flag\>\""}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"flags", " ", "=", " ", 
               RowBox[{"Append", "[", 
                RowBox[{"flags", ",", " ", "flag"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"flagvariables", ",", " ", 
                RowBox[{"functionate", "[", "flag", "]"}]}], "]"}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"ev1n", "=", 
               RowBox[{
                RowBox[{"stringer", "[", "evid", "]"}], "<>", 
                "\"\<\[UnderBracket]$eventSet\>\""}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"flagvariables", ",", " ", 
                  RowBox[{"Symbol", "[", 
                   RowBox[{"functionate", "[", "ev1n", "]"}], "]"}]}], "]"}], 
                ";"}], " ", "*)"}], "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"tr1", "=", 
               RowBox[{"stringer", "[", 
                RowBox[{"And", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"flag", "[", "Global`t", "]"}], "<", "0"}], ",", 
                  "tr"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"ev1", " ", "=", " ", 
               RowBox[{"Append", "[", 
                RowBox[{"ev", ",", " ", 
                 RowBox[{"stringer", "[", 
                  RowBox[{
                   RowBox[{"flag", "[", "Global`t", "]"}], "\[Rule]", " ", 
                   "1"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"ev1", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<trigger\>\"", "\[Rule]", " ", "tr1"}], ",", 
                 RowBox[{"\"\<delay\>\"", "\[Rule]", " ", "de"}], ",", 
                 RowBox[{"\"\<events\>\"", "\[Rule]", " ", "ev1"}], ",", 
                 RowBox[{
                 "\"\<delayedevents\>\"", "\[Rule]", " ", "delayedevents"}]}],
                 "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"ev2n", "=", 
               RowBox[{
                RowBox[{"stringer", "[", "evid", "]"}], "<>", 
                "\"\<\[UnderBracket]$eventReset\>\""}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"flagvariables", ",", " ", 
                  RowBox[{"Symbol", "[", 
                   RowBox[{"functionate", "[", "ev2n", "]"}], "]"}]}], "]"}], 
                ";"}], " ", "*)"}], "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"tr2", "=", 
               RowBox[{"stringer", "[", 
                RowBox[{"And", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"flag", "[", "Global`t", "]"}], ">", "0"}], ",", 
                  " ", 
                  RowBox[{"Not", "[", "tr", "]"}]}], "]"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"ev2", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{"stringer", "[", 
                 RowBox[{
                  RowBox[{"flag", "[", "Global`t", "]"}], "\[Rule]", " ", 
                  RowBox[{"-", "1"}]}], "]"}], "}"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"ev2", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<trigger\>\"", "\[Rule]", " ", "tr2"}], ",", " ", 
                 RowBox[{"\"\<delay\>\"", "\[Rule]", " ", "\"\<0\>\""}], ",", 
                 " ", 
                 RowBox[{"\"\<events\>\"", "\[Rule]", " ", "ev2"}], ",", 
                 RowBox[{"\"\<delayedevents\>\"", "\[Rule]", " ", 
                  RowBox[{"{", "}"}]}]}], "}"}]}], ";", "\[IndentingNewLine]",
               "\[IndentingNewLine]", 
              RowBox[{"new", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"ev1n", "\[Rule]", " ", "ev1"}], ",", " ", 
                 RowBox[{"ev2n", "\[Rule]", " ", "ev2"}]}], "}"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"Return", "[", "new", "]"}], ";"}]}], " ", 
            "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            StyleBox["remapEvent",
             FontColor->RGBColor[0, 1, 1]], "[", "x___", "]"}], ":=", " ", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Error:\>\"", "//", "boldOrange"}], ",", " ", 
                RowBox[{"\"\< remapEvent:\>\"", "//", "boldRed"}], ",", 
                RowBox[{
                "\"\< invalid input data format: \>\"", "//", "boldBlack"}], 
                ",", 
                RowBox[{
                 RowBox[{"{", "x", "}"}], "//", "boldRed"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           StyleBox[
            RowBox[{"end", " ", "of", " ", "remapEvent"}],
            FontColor->RGBColor[0, 1, 1]], " ", "*)"}], " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"updatedEvents", " ", "=", " ", 
           RowBox[{"remapEvent", "/@", "evlist"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"updatedEvents", " ", "=", " ", 
           RowBox[{"Join", "@@", "updatedEvents"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           StyleBox[
            RowBox[{
             RowBox[{
             "new", " ", "initial", " ", "values", " ", "for", " ", "event", 
              " ", 
              RowBox[{"flags", ":", " ", 
               RowBox[{"save", " ", "preset", " ", "values"}]}]}], ",", " ", 
             RowBox[{
              RowBox[{"and", " ", "assign"}], " ", "-", 
              RowBox[{"1", " ", "to", " ", "new", " ", "flags"}]}]}],
            FontColor->GrayLevel[0.333333]], 
           StyleBox[" ",
            FontColor->GrayLevel[0.333333]], "*)"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"eventflags", " ", "=", " ", 
           RowBox[{"stringer", "/@", "flags"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"initialFlagVals", " ", "=", " ", 
            RowBox[{"(", 
             RowBox[{"SBMLIC", "/@", "eventflags"}], ")"}]}],
           FontColor->GrayLevel[0]], 
          StyleBox[";",
           FontColor->GrayLevel[0]], 
          StyleBox["\[IndentingNewLine]",
           FontColor->GrayLevel[0]], 
          StyleBox[
           RowBox[{"initialFlagVals", "=", 
            RowBox[{"initialFlagVals", "/.", 
             RowBox[{"{", 
              RowBox[{"\"\<Indeterminate\>\"", "->", " ", "\"\<-1\>\""}], 
              "}"}]}]}],
           FontColor->GrayLevel[0]], 
          StyleBox[";",
           FontColor->GrayLevel[0]], 
          StyleBox["\[IndentingNewLine]",
           FontColor->GrayLevel[0]], 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"definef", "[", 
              RowBox[{"SBMLIC", ",", " ", "#1", ",", " ", "#2"}], "]"}], 
             "&"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"eventflags", ",", "initialFlagVals"}], "}"}]}], "]"}], 
          ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{
             StyleBox[
              RowBox[{"Print", "[", 
               RowBox[{
               "\"\<remapEvents:\>\"", ",", "eventflags", ",", 
                "initialFlagVals"}], "]"}],
              FontColor->RGBColor[1, 0, 0]], ";"}]}], " ", "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            StyleBox[
             RowBox[{"add", " ", "variable"}],
             FontColor->RGBColor[0, 0, 1]], 
            StyleBox[",",
             FontColor->RGBColor[0, 0, 1]], 
            StyleBox[" ",
             FontColor->RGBColor[0, 0, 1]], 
            RowBox[{
             StyleBox["IC",
              FontColor->RGBColor[0, 0, 1]], 
             StyleBox[" ",
              FontColor->RGBColor[0, 0, 1]], 
             StyleBox["values",
              FontColor->RGBColor[0, 0, 1]], 
             StyleBox[" ",
              FontColor->RGBColor[0, 0, 1]], 
             StyleBox["for",
              FontColor->RGBColor[0, 0, 1]], 
             StyleBox[" ",
              FontColor->RGBColor[0, 0, 1]], 
             StyleBox["eventflag",
              FontColor->RGBColor[0, 0, 1]], "s"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"modelvariables", "=", 
           RowBox[{"Global`SBMLModelVariables", "/.", "r"}]}], " ", ";", 
          "\[IndentingNewLine]", 
          RowBox[{"modelvariables", "=", 
           RowBox[{"Global`SBMLModelVariables", "/.", "inputSystem"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           StyleBox[
            RowBox[{
             RowBox[{"of", " ", "existing", " ", "ic"}], ",", " ", 
             RowBox[{
             "use", " ", "only", " ", "those", " ", "from", " ", "the", " ", 
              "model"}], ",", " ", 
             RowBox[{"not", " ", "for", " ", "the", " ", "flags"}]}],
            FontColor->GrayLevel[0.333333]], 
           StyleBox[" ",
            FontColor->GrayLevel[0.333333]], "*)"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"icalready", "=", 
           RowBox[{"Global`SBMLIC", "/.", "r"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ic2use", "=", 
           RowBox[{"Select", "[", 
            RowBox[{"icalready", ",", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"Head", "/@", "modelvariables"}], ",", 
                RowBox[{"Head", "[", 
                 RowBox[{"First", "[", "#", "]"}], "]"}]}], "]"}], "&"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           StyleBox[
            RowBox[{
            "assign", " ", "new", " ", "ic", " ", "for", " ", "flags", " ", 
             "based", " ", "on", " ", "values", " ", "found", " ", "above"}],
            FontColor->GrayLevel[0.333333]], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"ic4flags", "=", 
           RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", " ", 
                RowBox[{
                 RowBox[{"#1", "[", "currentTime", "]"}], "\[Equal]", "#2"}], 
                ")"}], "&"}], ")"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"flags", ",", " ", 
               RowBox[{"ToExpression", "/@", "initialFlagVals"}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"ic", " ", "=", " ", 
           RowBox[{"Join", "[", 
            RowBox[{"ic2use", ",", "ic4flags"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"r", "=", 
           RowBox[{"ReplaceRuleListPart", "[", 
            RowBox[{
             RowBox[{"Global`SBMLIC", "\[Rule]", " ", "ic"}], ",", "r"}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"vars", " ", "=", " ", 
           RowBox[{"Join", "[", 
            RowBox[{"modelvariables", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "[", "Global`t", "]"}], ")"}], "&"}], "/@", 
              "flags"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"r", " ", "=", " ", 
           RowBox[{"ReplaceRuleListPart", "[", 
            RowBox[{
             RowBox[{"Global`SBMLModelVariables", "\[Rule]", " ", "vars"}], 
             ",", " ", "r"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<SBMLIC/.input:\>\"", ",", 
               RowBox[{"Global`SBMLIC", "/.", "inputSystem"}], ",", 
               "\[IndentingNewLine]", "\"\<\\nSBMLIC/.r (new):\>\"", ",", 
               RowBox[{"Global`SBMLIC", "/.", "r"}], ",", 
               "\"\<\\n-------------------------\>\""}], "]"}], ";"}]}], 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "updatedEvents", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";", 
      RowBox[{"(*", " ", 
       StyleBox[
        RowBox[{"end", " ", "of", " ", "remapEvents"}],
        FontColor->RGBColor[0, 0, 1]], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["interpolateForEventTime",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"tfirst_", ",", " ", "tlast_", ",", " ", "precision_"}], 
        "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "ta", ",", "tb", ",", "tc", ",", " ", "dt", ",", "result", ",", " ",
            "nsteps"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ta", " ", "=", " ", "tfirst"}], ";", " ", 
          RowBox[{"tb", " ", "=", " ", "tlast"}], ";", 
          RowBox[{"dt", " ", "=", " ", 
           RowBox[{"tb", "-", "ta"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<interpolateForEventTime: {tfirst,tlast},triggers:\>\"", 
               ",", 
               RowBox[{"{", 
                RowBox[{"tfirst", ",", "tlast"}], "}"}], ",", "triggers"}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"triggers", "/.", "n"}], "/.", 
               RowBox[{"{", 
                RowBox[{"Global`t", "\[Rule]", " ", "tlast"}], "}"}]}], "]"}],
              ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          StyleBox["\[IndentingNewLine]",
           FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
          RowBox[{
           StyleBox["(*",
            FontColor->RGBColor[0, 0, 1]], 
           StyleBox[" ",
            FontColor->RGBColor[0, 0, 1]], 
           StyleBox[
            RowBox[{
            "check", " ", "to", " ", "see", " ", "if", " ", "set", " ", "at", 
             " ", "tfirst", " ", 
             RowBox[{
              RowBox[{"3", "/", "4"}], "/", "05"}], " ", "2.4", ".9"}],
            FontColor->RGBColor[1, 0, 0]], 
           StyleBox["*)",
            FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
          RowBox[{"result", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"test", "/.", "n"}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{"Global`t", "\[Rule]", " ", "ta"}], "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"tfirst", ">", "0"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{"result", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"result", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"#", "/.", "n"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"Global`t", "\[Rule]", " ", "ta"}], "}"}]}], 
                    "&"}], ",", "triggers"}], "]"}]}], ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"Return", "[", 
                 RowBox[{"{", 
                  RowBox[{"ta", ",", "result"}], "}"}], "]"}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           StyleBox[
            RowBox[{
             RowBox[{"In", " ", "Version", " ", "5.1"}], ",", " ", 
             RowBox[{"Method", "\[Rule]", " ", 
              RowBox[{
              "EventLocator", " ", "will", " ", "have", " ", "already", " ", 
               "found", " ", "the", " ", "event", " ", "time"}]}]}],
            FontColor->RGBColor[1, 0, 0]], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"$VersionNumber", ">", "5"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"result", "=", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"#", "/.", "n"}], ")"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"Global`t", "\[Rule]", " ", "tb"}], "}"}]}], 
                   "&"}], ",", "triggers"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Return", "[", 
                RowBox[{"{", 
                 RowBox[{"tb", ",", "result"}], "}"}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
           "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"nsteps", "=", "0"}], ";", "\[IndentingNewLine]", 
          RowBox[{"While", "[", 
           RowBox[{
            RowBox[{"dt", ">", "precision"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"tc", " ", "=", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"tb", "+", "ta"}], ")"}], "/", "2"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"result", " ", "=", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"test", "/.", "n"}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{"Global`t", "\[Rule]", " ", "tc"}], "}"}]}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"dbg", ",", "\[IndentingNewLine]", 
               RowBox[{"Print", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                 "\"\<interpolateForEventTime: \>\"", "//", "boldBlue"}], ",", 
                 RowBox[{"\"\<{ta,tc,tb},result:\>\"", "//", "boldOrange"}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"ta", ",", "tc", ",", "tb"}], "}"}], "//", 
                  "boldBlue"}], ",", 
                 RowBox[{"\"\<,\>\"", "//", "boldBlue"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"result", "//", "boldBlue"}], ",", 
                 RowBox[{"\"\< triggers:\>\"", "//", "boldOrange"}], ",", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"triggers", "/.", "n"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{"Global`t", "\[Rule]", " ", "tc"}], "}"}]}], 
                   ")"}], "//", "boldBlue"}]}], "]"}]}], 
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{"result", ",", 
               RowBox[{"tb", "=", "tc"}], ",", 
               RowBox[{"ta", " ", "=", "tc"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"dt", " ", "=", " ", 
              RowBox[{"tb", "-", "ta"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"nsteps", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<interpolateForEventTime: iterations:\>\"", ",", "nsteps"}], 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            StyleBox["check",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["to",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["see",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["if",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["it",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["should",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["really",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["be",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["at",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["tlast",
             FontColor->RGBColor[1, 0, 0]], " ", "2.4", ".9"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"tb", "\[GreaterEqual]", " ", 
             RowBox[{"tlast", "-", "precision"}]}], ",", 
            RowBox[{"tb", "=", "tlast"}]}], "]"}], ";", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "check", " ", "for", " ", "individual", " ", "condition", " ", 
            "at", " ", "stopping", " ", "time"}], " ", "*)"}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"result", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#", "/.", "n"}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{"Global`t", "\[Rule]", " ", "tb"}], "}"}]}], "&"}], 
             ",", "triggers"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"tb", ",", "result"}], "}"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "of", " ", 
        StyleBox["interpolateForEventTime",
         FontColor->RGBColor[0, 0, 1]]}], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["intInterval",
         FontColor->RGBColor[0, 0, 1]], "[", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"c", ",", "int"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "=", 
           RowBox[{"Cases", "[", 
            RowBox[{"n", ",", 
             RowBox[{
              RowBox[{"InterpolatingFunction", "[", "___", "]"}], "[", "___", 
              "]"}], ",", "Infinity"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"int", "[", 
            RowBox[{
             RowBox[{"InterpolatingFunction", "[", 
              RowBox[{"domain_", ",", " ", "table___"}], "]"}], "[", "t___", 
             "]"}], "]"}], ":=", " ", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "domain", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"int", "[", 
            RowBox[{"First", "[", "c", "]"}], "]"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "of", " ", 
        StyleBox["intInterval",
         FontColor->RGBColor[0, 0, 1]]}], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       StyleBox[
        RowBox[{"updateEvents", "[", 
         RowBox[{"currentEvents_", ",", " ", "updateTime_"}], "]"}],
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[":=",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       RowBox[{
        StyleBox["Module",
         FontColor->GrayLevel[0]], 
        StyleBox["[",
         FontColor->GrayLevel[0]], 
        RowBox[{
         StyleBox[
          RowBox[{"{", 
           RowBox[{"dbg", "=", "False"}], "}"}],
          FontColor->GrayLevel[0]], 
         StyleBox[",",
          FontColor->GrayLevel[0]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->GrayLevel[0]], 
         RowBox[{
          StyleBox[
           RowBox[{"savedEvents", "=", "currentEvents"}],
           FontColor->GrayLevel[0]], 
          StyleBox[";",
           FontColor->GrayLevel[0]], 
          StyleBox["\[IndentingNewLine]",
           FontColor->GrayLevel[0]], 
          StyleBox[
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{"\"\<currentEvents:\>\"", ",", "currentEvents"}], "]"}],
              ";"}], " ", "*)"}],
           FontColor->GrayLevel[0]], 
          StyleBox["\[IndentingNewLine]",
           FontColor->GrayLevel[0]], "\[IndentingNewLine]", 
          RowBox[{"remappedEvents", "=", " ", 
           RowBox[{"remapEvents", "[", 
            RowBox[{"currentEvents", ",", " ", "updateTime"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"\"\<remappedEvents:\>\"", ",", "remappedEvents"}], 
             "]"}], ";"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", "\[IndentingNewLine]", " ", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"\"\< remappedEvents: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"remappedEvents", "//", "boldBlue"}], ",", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"\"\< eventflags: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"eventflags", "//", "boldBlue"}], ",", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"\"\< r (revised): \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"r", "//", "boldBlue"}]}], "]"}], ";"}]}], " ", 
           "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"events", " ", "=", " ", "remappedEvents"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"triggers", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<trigger\>\"", "/.", "#"}], "&"}], ",", 
             RowBox[{"Last", "/@", "events"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"triggers", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringReplace", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{
                "\"\<[t]\>\"", "\[Rule]", " ", "\"\<[Global`t]\>\""}]}], 
               "]"}], "&"}], ",", " ", "triggers"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"triggers", " ", "=", "  ", 
           RowBox[{"ToExpression", "/@", "triggers"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"triggers", " ", "=", " ", 
           RowBox[{"triggers", "//.", "fs"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"triggers", " ", "=", " ", 
           RowBox[{"triggers", "/.", "constants"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"added", " ", 
            RowBox[{
             RowBox[{"5", "/", "4"}], "/", "06"}], " ", "2.5", ".13"}], " ", 
           "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
             "\"\<NDSolveSBMLWithEvents: triggers:\>\"", ",", " ", 
              "triggers"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"test", "=", 
           RowBox[{"Or", "@@", "triggers"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"eventNames", "=", 
           RowBox[{"First", "/@", "events"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"actions", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<events\>\"", "/.", "#"}], "&"}], ",", 
             RowBox[{"Last", "/@", "events"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ic", " ", "=", " ", 
           RowBox[{"Global`SBMLIC", "/.", "r"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"vars", " ", "=", 
           RowBox[{"Head", "/@", 
            RowBox[{"(", " ", 
             RowBox[{"First", "/@", "ic"}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"values", " ", "=", " ", 
           RowBox[{"Last", "/@", "ic"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"delayedActions", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"\"\<delayedevents\>\"", "/.", "#"}], "&"}], ",", 
             RowBox[{"Last", "/@", "events"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"delays", " ", "=", " ", 
           RowBox[{"ToExpression", "/@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"\"\<delay\>\"", "/.", "#"}], "&"}], ",", 
              RowBox[{"Last", "/@", "events"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"havedelays", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"ToString", "[", "#", "]"}], "\[NotEqual]", 
              "\"\<0\>\""}], "&"}], "/@", "delays"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
              "\"\<updateEvents:\\n\>\"", ",", "\"\<names:\>\"", ",", 
               "eventNames", ",", "\"\<\\nactions:\>\"", ",", "actions", ",", 
               "\"\<\\ndelays:\>\"", ",", "delays", ",", 
               "\"\<\\nhavedelays:\>\"", ",", "havedelays", ",", 
               "\"\<\\ndelayedActions:\>\"", ",", "delayedActions"}], "]"}], 
             ";", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
               ",", 
               RowBox[{"\"\< triggers: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"triggers", "//", "boldBlue"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               " ", 
               RowBox[{"\"\<actions: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"actions", "//", "boldBlue"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               " ", 
               RowBox[{"\"\<vars: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"vars", "//", "boldBlue"}], ",", "\[IndentingNewLine]", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               " ", 
               RowBox[{"\"\<actions: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"actions", "//", "boldBlue"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               " ", 
               RowBox[{"\"\<ic: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"ic", "//", "boldBlue"}], ",", "\[IndentingNewLine]", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               " ", 
               RowBox[{"\"\<vars: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"vars", "//", "boldBlue"}], ",", 
               RowBox[{
               "\"\<\\nNDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], ",", 
               " ", 
               RowBox[{"\"\<values: \>\"", "//", "boldOrange"}], ",", 
               RowBox[{"values", "//", "boldBlue"}]}], "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           StyleBox[
            RowBox[{
             RowBox[{
             "reset", " ", "SBMLIC", " ", "because", " ", "this", " ", 
              "might", " ", "not", " ", "be", " ", "the", " ", "first", " ", 
              "time", " ", "this", " ", "model", " ", "has", " ", "been", " ",
               "run", " ", "since", " ", "it", " ", "was", " ", "loaded"}], 
             ",", " ", 
             RowBox[{
              RowBox[{
              "and", " ", "an", " ", "event", " ", "might", " ", "have", " ", 
               "reset", " ", "an", " ", "IC"}], " ", "-", " ", 
              RowBox[{"2.3", ".33"}]}]}],
            FontWeight->"Plain"], 
           StyleBox[" ",
            FontWeight->"Plain"], "*)"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"definef", "[", 
              RowBox[{"SBMLIC", ",", " ", "#1", ",", " ", "#2"}], "]"}], 
             "&"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"stringer", "/@", "vars"}], ",", 
              RowBox[{"stringer", "/@", " ", "values"}]}], "}"}]}], "]"}], 
          ";"}]}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}],
       ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "of", " ", 
        StyleBox["updateEvents",
         FontColor->RGBColor[0, 0, 1]]}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<ievents:\>\"", ",", " ", "ievents"}], "]"}]}], "]"}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<iconstraints: \>\"", ",", "iconstraints"}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"constraints", "=", 
       RowBox[{"constraintsToEvents", "[", "iconstraints", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<constraints: \>\"", ",", "constraints"}], "]"}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "convert", " ", "message", " ", "to", " ", "something", " ", 
        "useful"}], "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", "totext", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"totext", "[", "x_", "]"}], ":=", " ", 
          RowBox[{"Module", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"y", ",", "xml"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"xml", "[", 
               RowBox[{"\"\<message\>\"", ",", 
                RowBox[{"{", "}"}], ",", " ", 
                RowBox[{"{", "z__", "}"}]}], "]"}], ":=", " ", 
              RowBox[{"First", "[", 
               RowBox[{"{", "z", "}"}], "]"}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"xml", "[", 
               RowBox[{"\"\<message\>\"", ",", 
                RowBox[{"{", "}"}], ",", "z_"}], "]"}], ":=", "z"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"xml", "[", 
               RowBox[{"\"\<body\>\"", ",", "_", ",", " ", 
                RowBox[{"{", "z__", "}"}]}], "]"}], ":=", " ", 
              RowBox[{"First", "[", 
               RowBox[{"{", "z", "}"}], "]"}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"xml", "[", 
               RowBox[{"\"\<bocy\>\"", ",", "_", ",", " ", "z_"}], "]"}], ":=",
               " ", "z"}], ";", " ", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"xml", "[", "z___", "]"}], ":=", " ", 
              RowBox[{"XMLElement", "[", "z", "]"}]}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"y", "=", 
              RowBox[{"x", "//.", 
               RowBox[{"{", 
                RowBox[{"XMLElement", "\[Rule]", " ", "xml"}], "}"}]}]}], ";",
              "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "y", "]"}], ";"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"constraintMessages", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"totext", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "&"}], ",", 
            " ", "iconstraints"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", " ", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<constraintMessages: \>\"", ",", "constraintMessages"}], 
            "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"t", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"updateEvents", "[", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{"ievents", ",", "constraints"}], "]"}], ",", " ", "t"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"t", "<", "tmax"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<t:\>\"", "//", "boldOrange"}], ",", 
              RowBox[{"t", "//", "boldBlue"}], ",", 
              RowBox[{"\"\<*********************\>\"", "//", "boldRed"}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<ic:\>\"", "//", "boldOrange"}], ",", 
              RowBox[{"ic", "//", "boldBlue"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
              ",", 
              RowBox[{"\"\<test:\>\"", "//", "boldOrange"}], ",", 
              RowBox[{"test", "//", "boldBlue"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"n", "=", 
           RowBox[{"NDSolveSBMLModel", "[", 
            RowBox[{"r", ",", "t", ",", " ", "tmax", ",", " ", 
             RowBox[{"StoppingTest", "\[Rule]", " ", "test"}], ",", " ", 
             "opt"}], "]"}]}],
          FontColor->RGBColor[0, 0, 1],
          Background->GrayLevel[0.900008]], 
         StyleBox[";",
          FontColor->RGBColor[0, 0, 1],
          Background->GrayLevel[0.900008]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 0, 1],
          Background->GrayLevel[0.900008]], 
         StyleBox[
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", "n", "]"}], "\[Equal]", 
             "\"\<$Failed\>\""}], ",", " ", 
            RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}],
          FontColor->RGBColor[0, 0, 1],
          Background->GrayLevel[0.900008]], 
         StyleBox[";",
          FontColor->RGBColor[0, 0, 1],
          Background->GrayLevel[0.900008]], 
         StyleBox[" ",
          FontColor->RGBColor[0, 0, 1],
          Background->GrayLevel[0.900008]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 0, 1],
          Background->GrayLevel[0.900008]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 1, 0]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 1, 0]], 
         RowBox[{"n", " ", "=", " ", 
          RowBox[{"Flatten", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
              ",", 
              RowBox[{"\"\<n: \>\"", "//", "boldOrange"}], ",", 
              RowBox[{"n", "//", "boldBlue"}]}], "]"}]}], "]"}],
          FontColor->RGBColor[0, 1, 1]], 
         StyleBox[";",
          FontColor->RGBColor[0, 1, 1]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 1, 1]], " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"tstart", ",", "tstop"}], "}"}], "=", 
          RowBox[{"intInterval", "[", "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
             ",", 
             RowBox[{"\"\<{tstart,tstop}: \>\"", "//", "boldOrange"}], ",", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tstart", ",", "tstop"}], "}"}], "//", "boldBlue"}]}], 
            "]"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "  ", 
           RowBox[{"tevent", ",", "triggeredEvents"}], "}"}], "=", 
          StyleBox[
           RowBox[{"interpolateForEventTime", "[", 
            RowBox[{"tstart", ",", "tstop", ",", 
             RowBox[{"10", "^", 
              RowBox[{"(", 
               RowBox[{"-", "7"}], ")"}]}]}], "]"}],
           FontColor->RGBColor[0, 1, 0],
           Background->RGBColor[1, 0, 1]]}], 
         StyleBox[";",
          Background->RGBColor[1, 0, 1]], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
             ",", 
             RowBox[{
             "\"\<{tevent,triggeredEvents}: \>\"", "//", "boldOrange"}], ",", 
             
             RowBox[{
              RowBox[{"{", 
               RowBox[{"tevent", ",", "triggeredEvents"}], "}"}], "//", 
              "boldBlue"}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{" ", 
              StyleBox[
               RowBox[{
                RowBox[{
                "Add", " ", "solution", " ", "to", " ", "set", " ", "only", 
                 " ", "if", " ", "it", " ", "has", " ", "a", " ", "non"}], 
                "-", 
                RowBox[{"zero", " ", "duration"}], " ", "-", 
                "\[IndentingNewLine]", 
                RowBox[{"might", " ", "be", " ", "a", " ", 
                 RowBox[{"set", "/", "reset"}], " ", "situation", " ", "and", 
                 " ", 
                 RowBox[{"don", "'"}], "t", " ", "need", " ", "a", " ", 
                 "separate", " ", "interpolation", " ", "curve"}]}],
               FontColor->RGBColor[1, 0, 0]], 
              StyleBox[")",
               FontColor->RGBColor[1, 0, 0]]}], 
             StyleBox[" ",
              FontColor->RGBColor[1, 0, 0]], 
             StyleBox["\[IndentingNewLine]",
              FontColor->RGBColor[1, 0, 0]], 
             StyleBox["--",
              FontColor->RGBColor[1, 0, 0]]}], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["added",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["test",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox[" ",
             FontColor->RGBColor[1, 0, 0]], 
            StyleBox["3",
             FontColor->RGBColor[1, 0, 0]]}], 
           StyleBox["-",
            FontColor->RGBColor[1, 0, 0]], 
           StyleBox["4",
            FontColor->RGBColor[1, 0, 0]], 
           StyleBox["-",
            FontColor->RGBColor[1, 0, 0]], 
           StyleBox[
            RowBox[{"05", " ", "2.4", ".9"}],
            FontColor->RGBColor[1, 0, 0]]}], 
          StyleBox[" ",
           FontColor->RGBColor[1, 0, 0]], "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"Replace", " ", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"modelvariables", ",", 
              RowBox[{"First", "[", "#", "]"}]}], "]"}], " ", "with", " ", 
            RowBox[{
             RowBox[{"Not", "[", 
              RowBox[{"MemberQ", "[", 
               RowBox[{"flagvariables", ",", 
                RowBox[{"First", "[", "#", "]"}]}], "]"}], "]"}], " ", "--"}],
             " ", "2.5", ".25", " ", 
            RowBox[{
             RowBox[{"8", "/", "1"}], "/", "06"}]}], "\[IndentingNewLine]", 
           " ", "*)"}],
          FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"tevent", ">", "tstart"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"solution", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"solution", ",", 
               RowBox[{"InterpolationSet", "[", 
                RowBox[{"t", ",", "tevent", ",", 
                 RowBox[{"Select", "[", 
                  RowBox[{"n", ",", " ", 
                   RowBox[{
                    RowBox[{"Not", "[", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"flagvariables", ",", 
                    RowBox[{"First", "[", "#", "]"}]}], "]"}], "]"}], "&"}]}],
                   "]"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"triggeredDelays", "=", 
          RowBox[{"Last", "/@", 
           RowBox[{"Select", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"triggeredEvents", ",", "delays"}], "}"}], "//", 
              "Transpose"}], ",", " ", "First"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
             ",", 
             RowBox[{"\"\<revised solution: \>\"", "//", "boldOrange"}], ",", 
             
             RowBox[{"solution", "//", "boldBlue"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"currentDelayValues", "=", 
          RowBox[{
           RowBox[{"triggeredDelays", "/.", "n"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`t", "\[Rule]", " ", "tevent"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"delayed", "=", 
          RowBox[{"Positive", "/@", "currentDelayValues"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"triggeredNames", " ", "=", 
          RowBox[{"Last", "/@", 
           RowBox[{"Select", "[", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"triggeredEvents", ",", "eventNames"}], "}"}], "//", 
              "Transpose"}], ",", " ", "First"}], "]"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\<triggeredNames:\>\"", ",", "triggeredNames", ",", 
             "\"\<\\ntriggeredDelays:\>\"", ",", "triggeredDelays", ",", 
             "\"\<\\ncurrentDelayValues:\>\"", ",", "currentDelayValues", 
             ",", "\"\<\\ndelayed:\>\"", ",", "delayed"}], "]"}]}], "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          StyleBox[
           RowBox[{"check", " ", "for", " ", "triggered", " ", "constraints"}],
           FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"triggeredConstraints", " ", "=", " ", 
          RowBox[{"decontextify", "/@", "triggeredNames"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"triggeredConstraints", "=", 
          RowBox[{"Select", "[", 
           RowBox[{"triggeredConstraints", ",", 
            RowBox[{
             RowBox[{"And", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"StringTake", "[", 
                 RowBox[{"#", ",", "10"}], "]"}], "==", 
                "\"\<Constraint\>\""}], ",", 
               RowBox[{
                RowBox[{"StringTake", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"-", "9"}]}], "]"}], "==", "\"\<$eventSet\>\""}]}], 
              "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "triggeredConstraints", "]"}], ">", "0"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"triggeredConstraints", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"StringDrop", "[", 
                RowBox[{"#", ",", "11"}], "]"}], "&"}], "/@", 
              "triggeredConstraints"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{"drop", " ", "\"\<Constraint\[UnderBracket]\>\""}], " ", 
             "*)"}], " ", "\[IndentingNewLine]", 
            RowBox[{"triggeredConstraints", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"StringDrop", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"-", "21"}]}], "]"}], "&"}], "/@", 
              "triggeredConstraints"}]}], ";", " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "dropt", " ", 
              "\"\<\[UnderBracket]$Violation\[UnderBracket]$EventSet \>"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"triggeredConstraints", "=", 
             RowBox[{"ToExpression", "/@", "triggeredConstraints"}]}], ";", 
            " ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "should", " ", "be", " ", "a", " ", "list", " ", "of", " ", 
              "integers", " ", "now"}], " ", "*)"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Constraint violation: \>\"", "//", "boldRed"}], 
                ",", 
                RowBox[{
                 RowBox[{"constraintMessages", "[", 
                  RowBox[{"[", 
                   RowBox[{"#", ",", "2"}], "]"}], "]"}], "//", "boldBlue"}], 
                ",", 
                RowBox[{
                "\"\<\\nConstraint violated at t = \>\"", "//", "boldBlack"}],
                 ",", 
                RowBox[{"tevent", "//", "boldBlack"}]}], "]"}], "&"}], "/@", 
             "triggeredConstraints"}], ";"}]}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"#1", "<", " ", "0"}], ",", " ", "\[IndentingNewLine]", 
              
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Warning:\>\"", "//", "boldRed"}], ",", 
                RowBox[{"\"\<A negative delay of \>\"", "//", "boldBlack"}], 
                ",", 
                RowBox[{"#1", "//", "boldBlue"}], ",", 
                RowBox[{"\"\< for event \>\"", "//", "boldBlack"}], ",", 
                RowBox[{"#2", "//", "boldBlue"}], ",", 
                RowBox[{"\"\< was set at t = \>\"", "//", "boldBlack"}], ",", 
                
                RowBox[{"tevent", "//", "boldBlue"}]}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], "&"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"{", 
            RowBox[{"currentDelayValues", ",", "triggeredNames"}], "}"}]}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"newEvents", "=", 
          RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"And", "@@", "delayed"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"delayedNames", "=", 
             RowBox[{"Last", "/@", 
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"delayed", ",", "triggeredNames"}], "}"}], "//", 
                 "Transpose"}], ",", "First"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"delayAmounts", "=", "\[IndentingNewLine]", 
             RowBox[{"Last", "/@", 
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"delayed", ",", "currentDelayValues"}], "}"}], "//",
                  "Transpose"}], ",", "First"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"currentlyDelayedActions", "=", "\[IndentingNewLine]", 
             RowBox[{"Last", "/@", 
              RowBox[{"Select", "[", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"triggeredEvents", ",", "delayedActions"}], "}"}], "//",
                  "Transpose"}], ",", " ", "First"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"dbg", ",", " ", 
              RowBox[{
               RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{
                   "\"\<Delayed Event:\>\"", ",", "#1", ",", 
                    "\"\< delay:\>\"", ",", "#2", ",", "\"\< actions:\>\"", 
                    ",", "#3"}], "]"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "delayedNames", ",", "delayAmounts", ",", " ", 
                   "currentlyDelayedActions"}], "}"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"newEvents", "=", 
             RowBox[{"stringer", "/@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"Unique", "[", 
                 RowBox[{
                  RowBox[{"stringer", "[", "$SBML$Context", "]"}], "<>", 
                  "\"\<delayed\[UnderBracket]event\[UnderBracket]\>\""}], 
                 "]"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"Length", "[", "delayedNames", "]"}], "}"}]}], 
               "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"newEvents", "=", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Rule", "[", 
                 RowBox[{"#1", ",", " ", "\[IndentingNewLine]", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"\"\<trigger\>\"", "\[Rule]", " ", 
                    RowBox[{"stringer", "[", 
                    RowBox[{"(", 
                    RowBox[{"Global`t", "\[GreaterEqual]", 
                    RowBox[{"(", 
                    RowBox[{"tevent", "+", " ", "#2"}], ")"}]}], ")"}], 
                    "]"}]}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"\"\<delay\>\"", "\[Rule]", " ", "\"\<0\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"\"\<events\>\"", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{"stringer", "/@", " ", "#3"}], ")"}]}]}], 
                   "\[IndentingNewLine]", "}"}]}], "]"}], "&"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                "newEvents", ",", " ", "delayAmounts", ",", " ", 
                 "currentlyDelayedActions"}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"If", "[", 
              RowBox[{"dbg", ",", " ", 
               RowBox[{
                RowBox[{"Print", "[", 
                 RowBox[{"\"\<newEvents:\>\"", ",", "newEvents"}], "]"}], 
                ";"}]}], "]"}],
             FontColor->RGBColor[0, 1, 1]], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"ievent", "++"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"trace", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"tevent", "<", "tmax"}], ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Print", "[", 
                 RowBox[{
                  RowBox[{"\"\<Event Trace: \>\"", "//", "boldRed"}], ",", 
                  RowBox[{"\"\<(\>\"", "//", "boldBlack"}], ",", 
                  RowBox[{"ievent", "//", "boldBlue"}], ",", 
                  RowBox[{"\"\<) t:\>\"", "//", "boldBlack"}], ",", 
                  RowBox[{"tevent", "//", "boldBlue"}], ",", 
                  RowBox[{"\"\< Event(s): \>\"", "//", "boldBlack"}], ",", 
                  RowBox[{
                   RowBox[{"list2CommaSeparatedString", "[", 
                    RowBox[{"decontextify", "/@", 
                    RowBox[{"ToString", "/@", "triggeredNames"}]}], "]"}], "//",
                    "boldBlue"}], ",", 
                  RowBox[{"\"\< Delay(s):\>\"", "//", "boldBlack"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"list2CommaSeparatedString", "[", 
                    RowBox[{"ToString", "/@", "currentDelayValues"}], "]"}], "//",
                    "boldBlue"}]}], "]"}], ";"}], "*)"}], 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Print", "[", 
                   RowBox[{
                    RowBox[{"\"\<Event Trigger: \>\"", "//", "boldRed"}], ",",
                     " ", 
                    RowBox[{"ievent", "//", "boldBlue"}], ",", 
                    RowBox[{"\"\< t=\>\"", "//", "boldBlack"}], ",", 
                    RowBox[{"tevent", "//", "boldBlue"}], ",", " ", 
                    RowBox[{"\"\< Event = \>\"", "//", "boldBlack"}], ",", 
                    RowBox[{"#1", "//", "boldBlue"}], ",", " ", 
                    RowBox[{"\"\< Delay = \>\"", "//", "boldBlack"}], " ", 
                    ",", 
                    RowBox[{"#2", "//", "boldBlue"}]}], "]"}], "&"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"decontextify", "/@", 
                    RowBox[{"ToString", "/@", "triggeredNames"}]}], ",", " ", 
                   
                   RowBox[{"ToString", "/@", "currentDelayValues"}]}], 
                  "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"dbg", ",", 
                 RowBox[{"Print", "[", 
                  RowBox[{"\"\<{tstart, tevent, tstop}:\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{"tstart", ",", "tevent", ",", "tstop"}], "}"}]}], 
                  "]"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{
                 RowBox[{"\"\<Event Trigger: \>\"", "//", "boldRed"}], ",", 
                 RowBox[{"\"\<t:\>\"", "//", "boldBlack"}], ",", 
                 RowBox[{"tevent", "//", "boldBlue"}], ",", 
                 RowBox[{"\"\< Event: \>\"", "//", "boldBlack"}], ",", 
                 RowBox[{
                 "\"\<RequestedEndOfSimulation\>\"", "//", "boldBlue"}]}], 
                "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ievent", ">", "maxevents"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
              RowBox[{
              "\"\<Possible bad event structure; more than \>\"", "//", 
               "boldBlack"}], ",", 
              RowBox[{"maxevents", "//", "boldBlue"}], ",", 
              RowBox[{
              "\"\< events (MaxEvents) have occurred.  by t=\>\"", "//", 
               "boldBlack"}], ",", 
              RowBox[{"tevent", "//", "boldBlue"}], ",", 
              RowBox[{
              "\"\<(To inhibit this check set MaxEvents\[Rule]Infinity).\>\"",
                "//", "boldBlack"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"dtevent", " ", "=", " ", 
          RowBox[{"t", "-", "eventLast"}]}], ";", " ", 
         RowBox[{"eventLast", "=", "t"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dtevent", "<", "badeventdt"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"iclose", "++"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"iclose", "\[GreaterEqual]", " ", "maxclose"}], ",", 
              " ", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Print", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"\"\<>>Error Abort: \>\"", "//", "boldOrange"}], ",", 
                 RowBox[{
                 "\"\<Possible Bad Event (MaxCloseEvents). The event(s): \
\>\"", "//", "boldBlack"}], ",", 
                 RowBox[{
                  RowBox[{"list2CommaSeparatedString", "[", 
                   RowBox[{"ToString", "/@", "triggeredNames"}], "]"}], "//", 
                  "boldRed"}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"\"\< has (have) occurred \>\"", "//", "boldBlack"}],
                  ",", "\[IndentingNewLine]", 
                 RowBox[{"maxclose", "//", "boldBlack"}], ",", 
                 RowBox[{
                 "\"\< (MaxCloseEvents) times within a very a time interval \
of \>\"", "//", "boldBlack"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"badeventdt", "//", "boldBlack"}], ",", 
                 RowBox[{
                 "\"\< (BadEventTimePrecision) at t=\>\"", "//", 
                  "boldBlack"}], ",", 
                 RowBox[{"tevent", "//", "boldBlack"}]}], "]"}], ";", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"iclose", "=", "0"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          StyleBox[
           RowBox[{
           "make", " ", "a", " ", "list", " ", "of", " ", "all", " ", "the", 
            " ", "actions", " ", "that", " ", "need", " ", "to", " ", 
            "occur"}],
           FontColor->RGBColor[1, 0, 0]], " ", "*)"}], "\[IndentingNewLine]", 
         
         RowBox[{"triggeredActions", " ", "=", 
          RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
           RowBox[{"Last", "/@", 
            RowBox[{"Select", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{"triggeredEvents", ",", "actions"}], "}"}], "]"}], 
              ",", "\[IndentingNewLine]", "First"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"triggeredActions", "=", 
          RowBox[{"ToExpression", "/@", "triggeredActions"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         StyleBox[
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"\"\<{tstart,tstop}:\>\"", "//", "boldOrange"}], ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"tstart", ",", "tstop"}], "}"}], "//", 
                "boldBlue"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
          FontColor->RGBColor[0, 1, 1]], 
         StyleBox[";",
          FontColor->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          StyleBox[
           RowBox[{
           "some", " ", "initial", " ", "conditions", " ", "will", " ", "be", 
            " ", "based", " ", "on", " ", "actions"}],
           FontColor->RGBColor[1, 0, 0]], 
          StyleBox[" ",
           FontColor->RGBColor[1, 0, 0]], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"triggeredActions", "=", 
          RowBox[{"triggeredActions", "/.", 
           RowBox[{"{", 
            RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"triggeredvars", "=", 
          RowBox[{"Head", "/@", 
           RowBox[{"First", "/@", "triggeredActions"}]}]}], ";", 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"2.3", ".33"}], " ", "-", " ", 
            RowBox[{
            "make", " ", "sure", " ", "SBMLIT", " ", "is", " ", "reset", " ", 
             "correctly"}]}], " ", "*)"}],
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[" ",
          FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
         RowBox[{"triggeredvalues", " ", "=", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Last", "/@", "triggeredActions"}], ")"}], "/.", "n"}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`t", "\[Rule]", " ", "tevent"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
               ",", 
               RowBox[{"\"\< triggeredvars: \>\"", "//", "boldOrange"}], ",", 
               
               RowBox[{"triggeredvars", "//", "boldBlue"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
               ",", 
               RowBox[{"\"\< triggeredActions(1): \>\"", "//", "boldOrange"}],
                ",", 
               RowBox[{"triggeredActions", "//", "boldBlue"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Print", "[", 
              RowBox[{
               RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
               ",", 
               RowBox[{"\"\< triggeredvalues: \>\"", "//", "boldOrange"}], 
               ",", 
               RowBox[{"triggeredvalues", "//", "boldBlue"}]}], "]"}], 
             ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}],
          FontColor->RGBColor[0, 1, 1]], 
         StyleBox[";",
          FontColor->RGBColor[0, 1, 1]], 
         StyleBox[" ",
          FontColor->RGBColor[0, 1, 1]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 1, 1]], 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"definef", "[", 
             RowBox[{"SBMLIC", ",", " ", "#1", ",", " ", "#2"}], "]"}], "&"}],
            ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"stringer", "/@", "triggeredvars"}], ",", 
             RowBox[{"stringer", "/@", " ", "triggeredvalues"}]}], "}"}]}], 
          "]"}], ";", " ", 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"end", " ", "of", " ", "2.3", ".33", " ", "fix"}], " ", 
           "*)"}],
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[" ",
          FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"triggeredActions", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#1", "[", "Global`t", "]"}], "\[Equal]", "#2"}], "&"}],
             ",", 
            RowBox[{"{", 
             RowBox[{"triggeredvars", ",", " ", "triggeredvalues"}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"triggeredActions", " ", "=", " ", 
          RowBox[{"triggeredActions", "/.", 
           RowBox[{"{", 
            RowBox[{"Global`t", "\[Rule]", " ", "tevent"}], "}"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<triggeredActions(2):\>\"", "//", "boldOrange"}], 
              ",", 
              RowBox[{"triggeredActions", "//", "boldBlue"}]}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          StyleBox[
           RowBox[{
           "determine", " ", "remainder", " ", "of", " ", "initial", " ", 
            "conditions"}],
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox[" ",
           FontColor->RGBColor[0, 0, 1]], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"nonTriggeredVars", "=", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{"vars", ",", " ", "triggeredvars"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<nonTriggeredVars:\>\"", "//", "boldOrange"}], ",", 
              
              RowBox[{"nonTriggeredVars", "//", "boldBlue"}]}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"ic", " ", "=", " ", 
          RowBox[{"Map", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Equal", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"#", "[", "tevent", "]"}], ",", "\[IndentingNewLine]", 
               
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "[", "Global`t", "]"}], "/.", "n"}], ")"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"Global`t", "\[Rule]", " ", "tevent"}], "}"}]}]}], 
              "\[IndentingNewLine]", "]"}], "&"}], ",", "\[IndentingNewLine]",
             "nonTriggeredVars"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"ic", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"ic", ",", "triggeredActions"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"dbg", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<NDSolveSBMLWithEvents:\>\"", "//", "boldBlue"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<modified ic:\>\"", "//", "boldOrange"}], ",", 
              RowBox[{"ic", "//", "boldBlue"}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"r", "=", 
          RowBox[{"ReplaceRuleListPart", "[", 
           RowBox[{
            RowBox[{"Global`SBMLIC", "\[Rule]", " ", "ic"}], ",", "r"}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"t", "=", "tevent"}], ";", 
         StyleBox["\[IndentingNewLine]",
          FontSize->24], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "and", " ", "the", " ", "new", " ", "events", " ", "for", " ", 
           "delayed", " ", "events"}], "  ", "*)"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"And", "@@", "delayed"}], ",", 
           RowBox[{"updateEvents", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"savedEvents", ",", "newEvents"}], "]"}], ",", " ", 
             "t"}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"end", " ", "While", " ", "t"}], " ", "<", " ", "tmax"}], " ",
        "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "reset", " ", "the", " ", "event", " ", "flags", " ", "and", " ", 
         "other", " ", "IC", " ", "so", " ", "they", " ", 
         RowBox[{"don", "'"}], "t", " ", "persist", " ", "for", " ", 
         "another", " ", "run"}], ",", " ", 
        RowBox[{
        "as", " ", "they", " ", "have", " ", "been", " ", "changed", " ", 
         "2.5", ".13"}], ",", " ", 
        RowBox[{"4", " ", "May", " ", "06"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "SBMLIC", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SBMLIC", "[", "unknownVariable_", "]"}], ":=", 
       RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "solution", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.397085521074873*^9, 3.397085542210039*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["solveUntil", "Subsection"],

Cell["\<\
solveUntil[condition, equations, variables, {t, tmin,tmax},options] will \
return the result of NDSolve[equations,variables,{t,tmin,T},options] where T \
is the minimum of tmax or the first time at which the event condition is true.

2.4.9 3/5/05 for compatibility with version 5.1 which screws around with \
StoppingTest

2.6.3 - make sure to include options in final call to NDSolve\
\>", "Text",
 CellChangeTimes->{{3.391978128164131*^9, 3.391978156339945*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:solveUntil\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solveUntil", "[", 
    RowBox[{"condition_", ",", "equations_", ",", " ", "variables_", ",", " ", 
     RowBox[{"{", 
      RowBox[{"t_", ",", " ", "tmin_", ",", "tmax_"}], "}"}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "tstop", ",", "thalt", ",", 
       RowBox[{"dbg", "=", "False"}], ",", "options", ",", "legacyEvent"}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<>>>debug solveUntil: {opt}:\>\"", "//", "boldRed"}], 
          ",", 
          RowBox[{"{", "opt", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"legacyEvent", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"$VersionNumber", "<", "5.0"}], " ", ")"}], "\[And]", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"ToString", "[", "condition", "]"}], "\[NotEqual]", " ", 
           "\"\<True\>\""}], ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"$VersionNumber", "<", "5.1"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"legacyEvent", ",", " ", 
           RowBox[{"Off", "[", 
            RowBox[{"InterpolatingFunction", "::", "\"\<inhr\>\""}], "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "turning", " ", "off", " ", "this", " ", "message", " ", "does", 
           " ", "not", " ", "appear", " ", "to", " ", "work", " ", "in", " ", 
           "4.2", "\[IndentingNewLine]", "even", " ", "though", " ", "it", 
           " ", "is", " ", "guaranteed", " ", "to", " ", 
           RowBox[{"occur", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"NDSolve", "[", 
           RowBox[{"equations", ",", "variables", ",", 
            RowBox[{"{", 
             RowBox[{"t", ",", "tmin", ",", "tmax"}], "}"}], ",", 
            RowBox[{"StoppingTest", "\[Rule]", " ", "condition"}], ",", 
            "opt"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"legacyEvent", ",", " ", 
           RowBox[{"On", "[", 
            RowBox[{"InterpolatingFunction", "::", "\"\<inhr\>\""}], "]"}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{"tmax", ",", " ", "n"}], "}"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", 
      StyleBox["\[IndentingNewLine]",
       FontColor->GrayLevel[0.500008]], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"use", " ", 
        RowBox[{"throw", "/", "catch"}], " ", "instead"}], " ", "*)"}], 
      StyleBox["\[IndentingNewLine]",
       FontColor->GrayLevel[0.500008]], 
      RowBox[{"n", "=", 
       RowBox[{"Catch", "[", "\[IndentingNewLine]", 
        RowBox[{"NDSolve", "[", 
         RowBox[{"equations", ",", "variables", ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "tmin", ",", "tmax"}], "}"}], ",", 
          RowBox[{"StepMonitor", "\[RuleDelayed]", " ", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"condition", " ", "\[Or]", " ", 
               RowBox[{"(", 
                RowBox[{"t", "\[GreaterEqual]", " ", "tmax"}], ")"}]}], ",", 
              " ", 
              RowBox[{"Throw", "[", "t", "]"}]}], "]"}], ")"}]}], ",", 
          "opt"}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ListQ", "[", "n", "]"}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"t", ",", " ", "n"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tstop", " ", "=", " ", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
          "\"\<>>>debug solveUntil: Event located at \>\"", "//", "boldRed"}],
           ",", 
          RowBox[{"\"\< tstop:\>\"", "//", "boldBlack"}], ",", 
          RowBox[{"tstop", "//", "boldBlue"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"thalt", "=", 
       RowBox[{"Min", "[", 
        RowBox[{"tstop", ",", "tmax"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<>>>debug solveUntil: thalt \>\"", "//", "boldRed"}], 
          ",", "thalt"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"NDSolve", "[", 
        RowBox[{"equations", ",", "variables", ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"t", ",", "tmin", ",", "thalt"}], "}"}], ",", "opt"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"thalt", ",", " ", "n"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.390046834277361*^9, 3.3900468421318207`*^9}, {
  3.390047005500319*^9, 3.390047043973536*^9}, {3.390047075031642*^9, 
  3.390047077510416*^9}, {3.3900472219159927`*^9, 3.390047234480406*^9}, {
  3.391977511460628*^9, 3.391977511928112*^9}, {3.3919775917796717`*^9, 
  3.391977647436014*^9}, {3.3919779032962*^9, 3.391977929901617*^9}, {
  3.391978125031114*^9, 3.3919781260790157`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["neededCompartmentSizesDefined", "Subsection"],

Cell["\<\
verify that all needed compartments are defined (don't default volumes to \
one)
2.7.4 - 1 Apr 08 - checked for initial assignments. Also fixed bug in which \
compartments with \"constant\"=\"false\" were not checked correctly for \
initial assignments. \
\>", "Text",
 CellChangeTimes->{{3.416073339450636*^9, 3.416073386545978*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"neededCompartmentSizesDefined", "[", "x_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "r", ",", "rules", ",", "arulevars", ",", "  ", "defunct", ",", 
      "odevars", ",", "ic", ",", " ", "decont", ",", 
      RowBox[{"debug", "=", "False"}], ",", " ", "uninitializedCompartments", 
      ",", " ", "initialassignments"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"defunct", "[", 
       RowBox[{"a_", "[", "b_", "]"}], "]"}], ":=", " ", 
      RowBox[{"a", "[", "b", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"defunct", "[", 
       RowBox[{
        RowBox[{"a_", "'"}], "[", "b_", "]"}], "]"}], ":=", " ", 
      RowBox[{"a", "[", "b", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"decont", "[", 
       RowBox[{"Rule", "[", 
        RowBox[{"a_", ",", "b_"}], "]"}], "]"}], ":=", " ", 
      RowBox[{"Rule", "[", 
       RowBox[{
        RowBox[{"decontextify", "[", "a", "]"}], ",", 
        RowBox[{"decontextify", "[", "b", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"False", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: x, \>\"", ",", "x"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"r", "=", " ", 
      RowBox[{"Global`SBMLSpeciesCompartmentAssociations", "/.", "x"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r, \>\"", ",", "r"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      StyleBox[
       RowBox[{
       "remove", " ", "compartments", " ", "that", " ", "have", " ", 
        "constant", " ", "volumes", " ", "assigned"}],
       FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"r", "=", " ", 
      RowBox[{"expressionate", "/@", "r"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r (2):\>\"", ",", "r"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"rules", "=", 
      RowBox[{"(", 
       RowBox[{"Global`SBMLConstants", "/.", "x"}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<neededCompartmentSizesDefined: rules:\>\"", ",", "rules"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Rule", "[", 
         RowBox[{
          RowBox[{"First", "[", "#", "]"}], ",", " ", 
          RowBox[{
           RowBox[{"Last", "[", "#", "]"}], "/.", "rules"}]}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"r", "/.", 
         RowBox[{"{", 
          RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r (2.5):\>\"", ",", "r"}],
         "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"r", ",", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"NumberQ", "[", 
           RowBox[{"Last", "[", "#", "]"}], "]"}]}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r (3):\>\"", ",", "r"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      StyleBox[
       RowBox[{
       "remove", " ", "compartments", " ", "that", " ", "have", " ", 
        "assignment", " ", "rules"}],
       FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"arulevars", " ", "=", 
      RowBox[{"First", "/@", 
       RowBox[{"(", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Global`SBMLAssignmentRules", "/.", "x"}], "/.", 
          RowBox[{"Global`SBMLAssignmentRules", "\[Rule]", " ", 
           RowBox[{"{", "}"}]}]}], ")"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"arulevars", " ", "=", " ", 
      RowBox[{"defunct", "/@", "arulevars"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<neededCompartmentSizesDefined: arulevars:\>\"", ",", 
         "arulevars"}], "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"r", ",", " ", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"arulevars", ",", 
            RowBox[{"Last", "[", "#", "]"}]}], "]"}]}], "&"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r (4):\>\"", ",", "r"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      StyleBox[
       RowBox[{
       "remove", " ", "compartments", " ", "that", " ", "have", " ", "rate", 
        " ", "rules"}],
       FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"odevars", " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Global`SBMLODES", "/.", "x"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`SBMLODES", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"odevars", " ", "=", 
      RowBox[{"defunct", "/@", 
       RowBox[{"(", 
        RowBox[{"First", "/@", "odevars"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<neededCompartmentSizesDefined: odevars:\>\"", ",", "odevars"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"r", ",", " ", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"odevars", ",", 
            RowBox[{"Last", "[", "#", "]"}]}], "]"}]}], "&"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r (5):\>\"", ",", "r"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"decont", "/@", "r"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r (6):\>\"", ",", "r"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      StyleBox[
       RowBox[{
       "remove", " ", "compartments", " ", "that", " ", "have", " ", 
        "initial", " ", "conditions", " ", "defined"}],
       FontWeight->"Plain",
       FontSlant->"Plain",
       FontTracking->"Plain",
       FontVariations->{"CompatibilityType"->0,
       "Masked"->False,
       "Outline"->False,
       "RotationAngle"->0,
       "Shadow"->False,
       "StrikeThrough"->False,
       "Underline"->False}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      StyleBox[
       RowBox[{
        RowBox[{
        "these", " ", "are", " ", "compartments", " ", "with", " ", 
         "constant"}], "\[Rule]", 
        RowBox[{
        "false", " ", "but", " ", "do", " ", "not", " ", "have", " ", 
         "rules"}]}],
       FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"ic", " ", "=", 
      RowBox[{"First", "/@", 
       RowBox[{"(", 
        RowBox[{"Global`SBMLIC", "/.", "x"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "added", " ", "2.7", ".4", "  ", "because", " ", "otherwise", " ", 
       "the", " ", "ics", " ", "were", " ", 
       RowBox[{"ignored", " ", "!!"}]}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{"ic", "=", " ", 
      RowBox[{"decontextify", "/@", "ic"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<ic: \>\"", ",", " ", "ic"}], "]"}]}], "]"}], ";", " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"r", ",", " ", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"ic", ",", 
            RowBox[{
             RowBox[{"Last", "[", "#", "]"}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`t", "\[Rule]", " ", "0"}], "}"}]}]}], "]"}]}], 
         "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<neededCompartmentSizesDefined: r (7):\>\"", ",", "r"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"(", 
       RowBox[{"r", "/.", 
        RowBox[{"{", 
         RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], ")"}]}], ";", " ",
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "r", "]"}], ">", "0"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"uninitializedCompartments", "=", 
        RowBox[{"Union", "[", 
         RowBox[{"Last", "/@", "r"}], "]"}]}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<uninitializedCompartments:\>\"", ",", " ", 
         "uninitializedCompartments"}], "]"}]}], "]"}], ";", " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"remove", " ", "initial", " ", "assignments"}], "  ", "-", " ", 
       RowBox[{"added", " ", "2.7", ".4"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"initialassignments", " ", "=", " ", 
      RowBox[{
       RowBox[{"Global`SBMLInitialAssignments", "/.", "x"}], "/.", 
       RowBox[{"{", 
        RowBox[{"Global`SBMLInitialAssignments", "\[Rule]", " ", 
         RowBox[{"{", "}"}]}], "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"initialassignments", "=", 
      RowBox[{"decontextify", "/@", 
       RowBox[{"First", "/@", 
        RowBox[{"(", 
         RowBox[{"initialassignments", "/.", 
          RowBox[{"{", 
           RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], ")"}]}]}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"initialassignments", "=", 
      RowBox[{"functionate", "/@", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"SameQ", "[", 
             RowBox[{
              RowBox[{"Head", "[", "#", "]"}], ",", " ", "Symbol"}], "]"}], 
            ",", " ", "#", ",", " ", 
            RowBox[{"Head", "[", "#", "]"}]}], "]"}], "&"}], ",", " ", 
         "initialassignments"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"debug", ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<initialassignments: \>\"", ",", " ", "initialassignments"}], 
        "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"uninitializedCompartments", " ", "=", " ", 
      RowBox[{"Complement", "[", 
       RowBox[{"uninitializedCompartments", ",", " ", "initialassignments"}], 
       "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "uninitializedCompartments", "]"}], ">", "0"}],
        ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "set", " ", "remaining", " ", "compartments", " ", "to", " ", "1"}], 
        " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"r", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"contextify", "[", "#", "]"}], ",", "1"}], "]"}], "&"}], 
          "/@", "uninitializedCompartments"}]}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
            RowBox[{
            "\"\<SBMLNDSolve: uninitialized compartment: \>\"", "//", 
             "boldBlack"}], ",", " ", 
            RowBox[{
             RowBox[{"\"\<\\\"\>\"", "<>", 
              RowBox[{"stringer", "[", "#", "]"}], "<>", "\"\<\\\"\>\""}], "//",
              "boldBlue"}], ",", " ", 
            RowBox[{
            "\"\< -- A default value of 1 will be used; this may be different \
from the intent of the model. \>\"", "//", "boldBlack"}]}], "]"}], "&"}], "/@",
          " ", "uninitializedCompartments"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"debug", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<neededCompartmentSizesDefined: r (8):\>\"", ",", " ", "r"}], 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", "}"}], "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQnXh4I9u2mJeOPlIrpED01cp8BRB9/56JOojufjA9
H0RLhoWVgmgmJY5fxvEvHVU2W4HpCZFmIiZAWkPvMJj2zXwtA6Jtlm3RBNGq
z1t1QfSOnYvA9Gt3U38QzRGzAUxrn+27t7j4pWPPudlgOmte8mMQ7fXvyxMQ
zX0p9hWInrfkDJiWCj79DkQzGmn/ANEdGSf/g+h3CjYsS4B0Tkc/B4ju02rj
AtHteS4SILpMIxlM3/l3VAZE73ZpMAXRP3yfWoPoLIXjziA6P+xGGFj8bVIM
iP7Aca4BRAvWlfSBaABnW5oy
  "]]
}, Closed]],

Cell[CellGroupData[{

Cell["NDSolveSBMLModel", "Subsection"],

Cell[BoxData[{
 RowBox[{"\<\"NDSolveSBMLModel[model, tmax, options] evaluates NDSolve on an \
SBML model, where model is the ouptput of getSBML, tmax is the duration of \
the NDSolve run, and options are any valid options for NDSolve\"\>", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"7", "/", "29"}], "/", "03"}], " ", "-", " ", 
    RowBox[{
    "instead", " ", "of", " ", "removing", " ", "variables", " ", "that", " ",
      "do", " ", "not", " ", "have", " ", "odes"}]}], ",", " ", 
   RowBox[{
    RowBox[{"add", " ", "odes", " ", "of", " ", "the", " ", "form", " ", 
     RowBox[{
      RowBox[{"x", "'"}], "[", "t", "]"}]}], " ", "\[Equal]", "0"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"2", "/", "25"}], "/", "04"}], " ", "-", " ", 
   RowBox[{"add", " ", "tstart", " ", 
    RowBox[{"(", 
     RowBox[{"previously", " ", "zero"}], ")"}], " ", "to", " ", "allow", " ",
     "for", " ", "event", " ", "processing"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"11", "/", "1"}], "/", "04"}], " ", "-", " ", 
   RowBox[{
   "replace", " ", "assignment", " ", "rules", " ", "with", " ", 
    "Mathematica", " ", "rules", " ", "before", " ", "solving", " ", 
    "odes"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"5", "/", "8"}], "/", "05"}], " ", "-", " ", 
   RowBox[{
   "constant", " ", "functions", " ", "returned", " ", "as", " ", 
    "InterpolatingFunctions", " ", 
    RowBox[{"(", 
     RowBox[{"fix", " ", "bug", " ", "introduced", " ", "in", " ", 
      RowBox[{
       RowBox[{"11", "/", "1"}], "/", "04"}]}], ")"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"5", "/", "4"}], "/", "06"}], " ", "-", " ", 
   RowBox[{
   "remember", " ", "to", " ", "apply", " ", "function", " ", "definitions", 
    " ", "to", " ", "variables", " ", "that", " ", "are", " ", "evaluated", 
    " ", "by", " ", "aassignment", " ", "rules", " ", "before", " ", "they", 
    " ", "are", " ", "added", " ", "to", " ", "the", " ", "return", " ", 
    "list", " ", "of", " ", "interpolating", " ", "functions", " ", "at", " ",
     "the", " ", "very", " ", "end", " ", "of", " ", "the", " ", 
    "function"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"8", "/", "1"}], "/", "06"}], " ", "-", " ", 
      RowBox[{"include", " ", "all", " ", "species"}]}], " ", "&"}], " ", 
    "compartments", " ", "as", " ", "interpolation", " ", "functions"}], ",", 
   " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "even", " ", "if", " ", "they", " ", "are", " ", "marked", " ", "as", 
      " ", 
      RowBox[{"constant", ".", " ", "Constants"}], " ", "are", " ", "added", 
      " ", "at", " ", "the", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "end", ".", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", "10"}],
         "/", "15"}], "/", "06"}]}], " ", "-", " ", 
     RowBox[{"why", " ", "is", " ", "this", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "indented", "?", "\[IndentingNewLine]", "\[IndentingNewLine]", "10"}],
         "/", "25"}], "/", "06"}]}], " ", "-", " ", "apply"}], " ", "//.", 
    RowBox[{
    "rules", " ", "to", " ", "assignment", " ", "rules", " ", "to", " ", 
     "evaluate", " ", "all", " ", "constants"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"8", "/", "13"}], "/", "07"}], " ", "-", " ", 
   RowBox[{
   "check", " ", "for", " ", "csymbol", " ", "delay", " ", "and", " ", 
    "return", " ", "$Failed", " ", "if", " ", "its", " ", "there"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"11", "/", "29"}], "/", "07"}], " ", "-", " ", 
   RowBox[{
   "Have", " ", "neededCompartmentSizesDefined", " ", "return", " ", 
    "additional", " ", "rules", " ", "with", " ", "cell", " ", "sizes", " ", 
    "equal", " ", "to", " ", "1", " ", "instead", " ", "of", " ", "just", " ",
     "printing", " ", "an", " ", "error", " ", "message"}]}], ",", " ", 
  RowBox[{
   RowBox[{
   "to", " ", "allow", " ", "for", " ", "some", " ", "limited", " ", 
    "graceful", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
      "degradation", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "4"}],
       "/", "1"}], "/", "08"}]}], " ", "-", " ", 
   RowBox[{
   "apply", " ", "initial", " ", "assignment", " ", "rules", " ", "to", " ", 
    "constant", " ", "compartments", " ", "and", " ", 
    "parameters"}]}]}], "\[IndentingNewLine]"}], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.3960246932800817`*^9, 3.396024709984292*^9}, {
  3.4053574275521173`*^9, 3.405357478530558*^9}, {3.416073445938034*^9, 
  3.416073485747961*^9}},
 CellTags->"Info3257158727-7477535"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NDSolveSBMLModel", "[", 
    RowBox[{"r_", ",", " ", "tstart_", ",", " ", "tmax_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      StyleBox[
       RowBox[{
       "s", ",", "odes", ",", "ic", ",", "rules", ",", "vars", ",", "fs", ",",
         "system", ",", " ", "addedDummyVariable", ",", "\[IndentingNewLine]",
         "varsWithoutODES", ",", " ", "ODESWithoutVars", ",", "devars", ",", 
        "varsindes", ",", "vars2remove", ",", " ", "varsinic", ",", " ", 
        "ic2add", ",", "sodes", ",", "ic2", ",", "indic", ",", " ", 
        "extraodes", ",", "dbg", ",", " ", "systemvars", ",", " ", 
        "definedvars", ",", " ", "undefinedvars", ",", "p", ",", " ", "ars", 
        ",", "asrs", ",", "haveAlgebraicRules", ",", " ", 
        "haveAssignmentRules", ",", "namesofvars2remove", ",", " ", "pgoal", 
        ",", " ", "asrules", ",", " ", "arvars", ",", "retry", ",", 
        "NDSolveOptions", ",", "solver", ",", " ", "test", ",", "algic", ",", 
        "fluxes", ",", "sars", ",", "sppecies", ",", " ", "compartments", ",",
         " ", "hasAlgebraicRule", ",", "hasAssignmentRule", ",", " ", 
        "varname", ",", " ", "texit", ",", " ", "whatis", ",", " ", 
        "whatsitsname", ",", " ", "nameItIfNecessary", ",", " ", "udcrs", ",",
         " ", "constants"}],
       FontColor->GrayLevel[0]], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dbg", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`debug", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`debug", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"whatsitsname", "[", "uin_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"nids", ",", " ", "itsname"}], "}"}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"nids", "=", "$SBML$NameIDAssociations"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"nids", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{
               RowBox[{"decontextify", "[", 
                RowBox[{"First", "[", "#", "]"}], "]"}], ",", " ", 
               RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
            "nids"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"itsname", " ", "=", " ", 
           RowBox[{
            RowBox[{"uin", "/.", "nids"}], "/.", 
            RowBox[{"{", 
             RowBox[{"uin", "\[Rule]", " ", "\"\<\>\""}], "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "itsname", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"whatis", "[", "uin_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s", ",", " ", "p", ",", " ", "u"}], "}"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"u", "=", 
           RowBox[{"defunctionate", "[", 
            RowBox[{"stringer", "[", "uin", "]"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"s", "=", 
           RowBox[{"stringer", "/@", 
            RowBox[{"defunctionate", "/@", 
             RowBox[{"decontextify", "/@", 
              RowBox[{"(", 
               RowBox[{"Global`SBMLSpecies", "/.", "r"}], ")"}]}]}]}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"s", ",", " ", "u"}], "]"}], ",", " ", 
            RowBox[{"Return", "[", "\"\<species\>\"", "]"}]}], "]"}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"p", " ", "=", 
           RowBox[{"stringer", "/@", 
            RowBox[{"defunctionate", "/@", 
             RowBox[{"decontextify", "/@", 
              RowBox[{"(", " ", 
               RowBox[{"Global`SBMLParameters", "/.", "r"}], ")"}]}]}]}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"p", ",", " ", "u"}], "]"}], ",", " ", 
            RowBox[{"Return", "[", "\"\<parameter\>\"", "]"}]}], "]"}], ";", 
          " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "\"\<variable\>\"", "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       StyleBox[
        RowBox[{"nameItIfNecessary", "[", "uin_", "]"}],
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[":=",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       RowBox[{
        StyleBox["Module",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox["[",
         FontColor->RGBColor[0, 0, 1]], 
        RowBox[{
         StyleBox[
          RowBox[{"{", "itsname", "}"}],
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[",",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[" ",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox["\[IndentingNewLine]",
          FontColor->RGBColor[0, 0, 1]], 
         RowBox[{
          StyleBox[
           RowBox[{"itsname", "=", 
            RowBox[{"whatsitsname", "[", "uin", "]"}]}],
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox[";",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox["\[IndentingNewLine]",
           FontColor->RGBColor[0, 0, 1]], 
          RowBox[{
           StyleBox["If",
            FontColor->RGBColor[0, 0, 1]], 
           StyleBox["[",
            FontColor->RGBColor[0, 0, 1]], 
           RowBox[{
            RowBox[{
             StyleBox[
              RowBox[{"stringer", "[", "itsname", "]"}],
              FontColor->RGBColor[0, 0, 1]], 
             StyleBox["\[NotEqual]",
              FontColor->RGBColor[0, 0, 1]], " ", 
             RowBox[{"stringer", "[", "uin", "]"}]}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", " ", 
             RowBox[{"\"\< (\>\"", "<>", 
              RowBox[{"stringer", "[", "itsname", "]"}], "<>", "\"\<) \>\""}],
              "]"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "\"\<\>\"", "]"}], ";"}]}], " ", 
        StyleBox["\[IndentingNewLine]",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox["]",
         FontColor->RGBColor[0, 0, 1]]}]}], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: tstart,tmax \>\"", ",", " ", 
         
         RowBox[{"{", 
          RowBox[{"tstart", ",", "tmax"}], "}"}]}], "]"}],
       FontColor->GrayLevel[0],
       Background->None], 
      StyleBox[";",
       FontColor->GrayLevel[0],
       Background->None], 
      StyleBox["\[IndentingNewLine]",
       FontColor->GrayLevel[0],
       Background->RGBColor[0, 1, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->GrayLevel[0],
       Background->None], 
      RowBox[{
       RowBox[{"varname", "[", 
        RowBox[{
         RowBox[{"u_", "'"}], "[", "arg_", "]"}], "]"}], ":=", " ", "u"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "catch", " ", "return", " ", "value", " ", "for", " ", "undefined", 
        " ", "compartments", " ", "2.7", ".0", ".5", " ", "29", " ", "Nov", 
        " ", "07"}], " ", "*)"}], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox["udcrs",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["=",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       RowBox[{"neededCompartmentSizesDefined", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<NDSolveSBMLModel: udcrs\>\"", ",", " ", 
        "udcrs"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"odes", " ", "=", " ", 
       RowBox[{"Global`SBMLODES", "/.", "r"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ic", "=", " ", 
       RowBox[{"Global`SBMLIC", "/.", "r"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "include", " ", "undefined", " ", "compartment", " ", "rules", " ", 
        "here", " ", "2.7", ".0", ".5", " ", "29", " ", "Nov", " ", "07"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"rules", "=", 
       RowBox[{"(", 
        RowBox[{"Global`SBMLConstants", "/.", "r"}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rules", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"rules", ",", " ", "udcrs"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{"Global`SBMLModelVariables", "/.", "r"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"fs", " ", "=", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Global`SBMLFunctions", "/.", "r"}], ")"}], "/.", 
        RowBox[{"(", 
         RowBox[{"Global`SBMLFunctions", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ars", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Global`SBMLAlgebraicRules", "/.", "r"}], "/.", 
         RowBox[{"Global`SBMLAlgebraicRules", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}]}], ")"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"asrs", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Global`SBMLAssignmentRules", "/.", "r"}], "/.", 
         RowBox[{"Global`SBMLAssignmentRules", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}]}], ")"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "turn", " ", "fluxes", " ", "into", " ", "assignment", " ", "rules", 
          " ", "2.5", ".25", " ", "1"}], "-", "Aug", "-", "06"}], " ", "*)"}],
       
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      RowBox[{"fluxes", " ", "=", " ", 
       RowBox[{
        RowBox[{"Global`SBMLKineticLaws", "/.", "r"}], "/.", 
        RowBox[{"{", 
         RowBox[{"Global`SBMLKineticLaws", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"asrs", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"asrs", ",", " ", "fluxes"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"asrs", " ", "=", " ", 
       RowBox[{"asrs", "//.", "rules"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"asrules", " ", "=", " ", 
       RowBox[{"asrs", "/.", 
        RowBox[{"{", 
         RowBox[{"Equal", "\[Rule]", " ", "Rule"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"arvars", " ", "=", " ", 
       RowBox[{"First", "/@", "asrules"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "removes", " ", "variables", " ", "with", " ", "assignment", " ", 
          "rules", " ", "2.4", ".4", " ", "1"}], "-", "Nov", "-", "04"}], " ",
         "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"vars", ",", "arvars"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"odes", " ", "=", " ", 
       RowBox[{"odes", "//.", "asrules"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "odes", "]"}], "<", "1"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"odes", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"odes", ",", " ", 
            RowBox[{
             RowBox[{"differentize", "[", "addedDummyVariable", "]"}], 
             "\[Equal]", "0"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"ic", " ", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"ic", ",", 
            RowBox[{
             RowBox[{"addedDummyVariable", "[", "tstart", "]"}], "\[Equal]", 
             "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"vars", " ", "=", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"vars", ",", " ", 
            RowBox[{"functionate", "[", "addedDummyVariable", "]"}]}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: odes\>\"", ",", " ", 
            "odes"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: ic\>\"", ",", " ", "ic"}],
            "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: vars\>\"", ",", " ", 
            "vars"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: asrules\>\"", ",", " ", 
            "asrules"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: arvars\>\"", ",", " ", 
            "arvars"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["hasAlgebraicRule",
         FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", 
       RowBox[{"(", " ", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Position", "[", 
           RowBox[{"ars", ",", " ", "x"}], "]"}], "]"}], ">", "0"}], ")"}]}], 
      ";", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["hasAssignmentRule",
         FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"First", "/@", 
          RowBox[{"(", "asrs", ")"}]}], ",", "x"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"**", "**"}], "*", " ", "Check", " ", "for", " ", "Poorly", 
        " ", "formed", " ", "system"}], " ", "*****)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "devars", " ", "is", " ", "a", " ", "list", " ", "of", " ", 
        "variables", " ", "like", " ", 
        RowBox[{
         RowBox[{"x", "'"}], "[", "t", "]"}]}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"devars", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"ToString", ",", "vars"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"devars", " ", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringReplace", "[", 
           RowBox[{"#", ",", 
            RowBox[{"\"\<[t]\>\"", "\[Rule]", " ", "\"\<'[t]\>\""}]}], "]"}], 
          "&"}], ",", "devars"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"devars", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"ToExpression", ",", "devars"}], "]"}]}], ";", " ", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"remove", " ", "any", " ", "excess", " ", "variables"}], " ", 
        "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "varsindes", " ", "is", " ", "the", " ", "lhs", " ", "of", " ", 
          "the", " ", "odes"}], ",", " ", 
         RowBox[{
          RowBox[{"x", "'"}], "[", "t", "]"}]}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"varsindes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "odes"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"varsWithoutODES", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"devars", ",", "varsindes"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: devars\>\"", ",", " ", 
         "devars"}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: varsindes\>\"", ",", " ", 
         "varsindes"}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "varsWithoutODES", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"vars2remove", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToExpression", "[", 
              RowBox[{"StringReplace", "[", 
               RowBox[{
                RowBox[{"ToString", "[", "#", "]"}], ",", 
                RowBox[{"\"\<'[t]\>\"", "\[Rule]", " ", "\"\<[t]\>\""}]}], 
               "]"}], "]"}], "&"}], ",", "varsWithoutODES"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "check", " ", "to", " ", "see", " ", "if", " ", "any", " ", "of", 
             " ", "the", " ", "variables", " ", "have", " ", "algebraic", " ", 
             RowBox[{"rules", " ", "--"}], " ", "if", " ", "so"}], ",", " ", 
            RowBox[{
             RowBox[{
             "not", " ", "necessary", " ", "to", " ", "add", " ", "an", " ", 
              "ODE"}], "  ", "-", " ", 
             RowBox[{
              RowBox[{"don", "'"}], "t", " ", "check", " ", "Mathematica", 
              " ", "Version", " ", "here"}]}], ",", " ", 
            RowBox[{
             RowBox[{
             "because", " ", "it", " ", "is", " ", "checked", " ", 
              "elsewhere", " ", "in", " ", "this", " ", 
              RowBox[{"function", ".", " ", "Added"}], " ", "7"}], "-", "31", 
             "-", "03"}]}], "  ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         StyleBox[
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: vars2remove\>\"", ",", 
            " ", "vars2remove"}], "]"}],
          Background->RGBColor[0, 1, 1]], 
         StyleBox[";",
          Background->RGBColor[0, 1, 1]], 
         StyleBox["\[IndentingNewLine]",
          Background->RGBColor[0, 1, 1]], 
         RowBox[{"haveAlgebraicRules", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{"vars2remove", ",", " ", "hasAlgebraicRule"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"haveAssignmentRules", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{"vars2remove", ",", " ", "hasAssignmentRule"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"vars2remove", " ", "=", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{
           "vars2remove", ",", " ", "haveAlgebraicRules", "  ", ",", 
            "haveAssignmentRules"}], "  ", "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: haveAlgebraicRules\>\"", 
            ",", " ", "haveAlgebraicRules"}], "]"}],
          Background->RGBColor[0, 1, 1]], 
         StyleBox[";",
          Background->RGBColor[0, 1, 1]], 
         StyleBox["\[IndentingNewLine]",
          Background->RGBColor[0, 1, 1]], 
         StyleBox[
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: haveAssignmentRules\>\"", 
            ",", " ", "haveAssignmentRules"}], "]"}],
          Background->RGBColor[0, 1, 1]], 
         StyleBox[";",
          Background->RGBColor[0, 1, 1]], 
         StyleBox["\[IndentingNewLine]",
          Background->RGBColor[0, 1, 1]], 
         StyleBox[
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: vars2remove\>\"", ",", 
            " ", "vars2remove"}], "]"}],
          Background->RGBColor[0, 1, 1]], 
         StyleBox[";",
          Background->RGBColor[0, 1, 1]], 
         StyleBox["\[IndentingNewLine]",
          Background->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"vars2remove", " ", "=", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{"vars2remove", ",", 
            RowBox[{"{", " ", 
             RowBox[{"Global`t", "[", "Global`t", "]"}], "}"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"notAFlag", ",", " ", "notFlags"}], "}"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"notAFlag", "[", "v_", "]"}], ":=", " ", 
             RowBox[{"Not", "[", 
              RowBox[{"StringMatchQ", "[", 
               RowBox[{
                RowBox[{"stringer", "[", "v", "]"}], ",", " ", 
                RowBox[{
                "RegularExpression", "[", 
                 "\"\<(.+)\[UnderBracket]\\$(.+)\>\"", "]"}]}], "]"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"notFlags", "=", 
             RowBox[{"Select", "[", 
              RowBox[{"vars2remove", ",", "notAFlag"}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "vars2remove", "]"}], ">", "0"}], "  ", 
              
              RowBox[{"(*", " ", 
               RowBox[{"\[And]", " ", 
                RowBox[{"TrueQ", "[", 
                 RowBox[{"$VersionNumber", "<", " ", "5"}], "  ", "]"}]}], 
               " ", "*)"}], " ", ",", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "add", " ", "odes", " ", "of", " ", "the", " ", "form", " ", 
                  
                  RowBox[{
                   RowBox[{"x", "'"}], "[", "t", "]"}]}], "=", 
                 RowBox[{
                 "0", " ", "for", " ", "extra", " ", "variables", " ", "if", 
                  " ", "prior", " ", "to", " ", "version", " ", "5"}]}], " ", 
                "*)"}],
               FontWeight->"Plain"], "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"extraodes", "=", 
                 RowBox[{"ToExpression", "/@", 
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"StringReplace", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    "\"\<[t]\>\"", "\[Rule]", " ", "\"\<'[t]==0\>\""}]}], 
                    "]"}], "&"}], ",", " ", 
                    RowBox[{"ToString", "/@", "vars2remove"}]}], "]"}]}]}], 
                ";"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"extraodes", "=", 
                RowBox[{"ToExpression", "/@", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"StringReplace", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    "\"\<[t]\>\"", "\[Rule]", " ", "\"\<'[t]==0\>\""}]}], 
                    "]"}], "&"}], ",", " ", 
                   RowBox[{"ToString", "/@", "vars2remove"}]}], "]"}]}]}], 
               ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"odes", " ", "=", " ", 
                RowBox[{"Join", "[", 
                 RowBox[{"odes", ",", " ", "extraodes"}], "]"}]}], ";", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"varsindes", " ", "=", " ", 
                RowBox[{"Map", "[", 
                 RowBox[{"First", ",", "odes"}], "]"}]}], ";", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"notFlags", " ", "=", " ", 
                RowBox[{"ToString", "/@", "notFlags"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"notFlags", "=", 
                RowBox[{"decontextify", "/@", "notFlags"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"dbg", "=", "False"}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"debugPrint", "[", 
                   RowBox[{
                   "dbg", ",", " ", "\"\<NDSolveSBMLModel::extraodes \>\"", 
                    ",", " ", "extraodes"}], "]"}], ";", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"debugPrint", "[", 
                   RowBox[{
                   "dbg", ",", " ", "\"\<NDSolveSBMLModel:: odes\>\"", ",", 
                    " ", "odes"}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"debugPrint", "[", 
                   RowBox[{
                   "dbg", ",", " ", "\"\<NDSolveSBMLModel:: varsindes\>\"", 
                    ",", " ", "varsindes"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"debugPrint", "[", 
                   RowBox[{
                   "dbg", ",", " ", "\"\<NDSolveSBMLModel:: notFlags\>\"", 
                    ",", " ", "notFlags"}], "]"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"debugPrint", "[", 
                   RowBox[{
                   "dbg", ",", " ", "\"\<NDSolveSBMLModel:: vars2remove\>\"", 
                    ",", " ", "vars2remove"}], "]"}]}]}], 
                "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]",
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                "$ReportMissingODE", ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Print", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", 
                    RowBox[{
                    RowBox[{"whatis", "[", "#", "]"}], "//", "boldBlack"}], 
                    ",", "\"\< \>\"", ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"#", "//", "boldBlue"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    "\"\< appears to be constant. \>\"", "//", 
                    "boldBlack"}]}], "\[IndentingNewLine]", "]"}], "&"}], ",",
                     "\[IndentingNewLine]", "notFlags"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"$ReportMissingODE", "=", "False"}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"remove", " ", "excess", " ", "initial", " ", "conditions"}], 
        " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "change", " ", "varsindes", " ", "to", " ", "be", " ", "like", " ", 
         RowBox[{"x", "[", "0", "]"}], " ", "instead", " ", "of", " ", 
         RowBox[{
          RowBox[{"x", "'"}], "[", "t", "]"}]}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"varsindes", " ", "=", " ", 
       RowBox[{"varname", "/@", "varsindes"}]}], ";", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"ic", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"ic", ",", " ", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"varsindes", ",", 
            RowBox[{"Head", "[", 
             RowBox[{"First", "[", "#", "]"}], "]"}]}], "]"}], "&"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "supply", " ", "insufficent", " ", "initial", " ", "conditions"}], 
        " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"varsinic", " ", "is", " ", "like", " ", 
         RowBox[{"x", "[", "0", "]"}]}], " ", "*)"}],
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      RowBox[{"varsinic", " ", "=", 
       RowBox[{"Head", "/@", 
        RowBox[{"First", "/@", "ic"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ic2add", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"varsindes", ",", " ", "varsinic"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ic2add", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"$ReportMissingIC", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"printWarning", "[", 
             RowBox[{"\"\<No initial condition provided for \>\"", "<>", 
              RowBox[{"list2CommaSeparatedString", "[", 
               RowBox[{"decontextify", "[", 
                RowBox[{
                 RowBox[{"ToString", "/@", "ic2add"}], ",", " ", 
                 "$SBML$Context"}], "]"}], "]"}], "<>", 
              "\"\<; zeros assumed for missing values. \>\""}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"$ReportMissingIC", "=", "False"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"ic2add", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Equal]", "0"}], "&"}], ",", " ", "ic2add"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"ic", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"ic", ",", " ", "ic2add"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"check", " ", "for", " ", "indeterminates"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"ic2add", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"ic", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"Last", "[", "#", "]"}], "]"}], "==", 
           "\"\<Indeterminate\>\""}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ic2add", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"indic", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"First", ",", " ", "ic2add"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"indic", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"ToString", ",", "indic"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"indic", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"StringReplace", "[", 
              RowBox[{"#", ",", 
               RowBox[{
                RowBox[{"\"\<[\>\"", "<>", 
                 RowBox[{"ToString", "[", "tstart", "]"}], "<>", 
                 "\"\<]\>\""}], "->", "\"\<\>\""}]}], "]"}], "&"}], ",", " ", 
            "indic"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"$ReportMissingIC", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
                RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", " ", 
                RowBox[{
                 RowBox[{"whatis", "[", "#", "]"}], "//", "boldBlack"}], ",", 
                "\"\< \>\"", ",", "   ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"#", "<>", 
                   RowBox[{"nameItIfNecessary", "[", "#", "]"}]}], ")"}], "//",
                  "boldBlue"}], ",", " ", 
                RowBox[{
                "\"\< has indeterminate initial conditions.\>\"", "//", 
                 "boldBlack"}]}], "]"}], "&"}], "/@", 
             RowBox[{"decontextify", "[", 
              RowBox[{"indic", ",", "$SBML$Context"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"$ReportMissingIC", "=", "False"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"ic", " ", "=", " ", 
          RowBox[{"ic", "/.", 
           RowBox[{"{", 
            RowBox[{"Indeterminate", "\[Rule]", " ", "0"}], "}"}]}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
       "$InitialRun", ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{"Process", " ", "the", " ", "Initial", " ", "Assignments"}],
           " ", "*)"}],
         Background->RGBColor[1, 1, 0]], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ToExpression", "[", "$SBML$Level$Version", "]"}], ">", 
            "2.15"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"debug", "=", "False"}], ",", " ", "iass", ",", " ", 
               "arzero", ",", " ", "ialhs", ",", " ", "iarhs", ",", " ", 
               "arulesrhs", ",", " ", "aruleslhs", ",", " ", "icvars", ",", 
               " ", "icrules", ",", " ", "icvals", ",", " ", "checkRepeated", 
               ",", " ", "hasrules", ",", " ", "ia2consts", ",", " ", 
               "ia2constsvals", ",", " ", "rulevars", ",", " ", "rulevals"}], 
              "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"iass", " ", "=", " ", 
               RowBox[{
                RowBox[{"Global`SBMLInitialAssignments", "/.", "r"}], "/.", 
                RowBox[{"{", 
                 RowBox[{"Global`SBMLInitialAssignments", "\[Rule]", " ", 
                  RowBox[{"{", "}"}]}], "}"}]}]}], ";", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", "iass", "]"}], ">", "0"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"arzero", " ", "=", " ", 
                  RowBox[{"asrules", "/.", 
                   RowBox[{"{", 
                    RowBox[{"Global`t", "\[Rule]", " ", "0"}], "}"}]}]}], ";",
                  "\[IndentingNewLine]", 
                 RowBox[{"hasrules", " ", "=", " ", 
                  RowBox[{
                   RowBox[{"Length", "[", "arzero", "]"}], ">", "0"}]}], ";", 
                 " ", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"ialhs", ",", " ", "iarhs"}], "}"}], "=", 
                  RowBox[{"Transpose", "[", 
                   RowBox[{"iass", "/.", 
                    RowBox[{"{", 
                    RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], 
                   "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{"hasrules", ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"aruleslhs", ",", " ", "arulesrhs"}], "}"}], "=", 
                    
                    RowBox[{"Transpose", "[", 
                    RowBox[{"arzero", "/.", 
                    RowBox[{"{", 
                    RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"aruleslhs", ",", " ", "arulesrhs"}], "}"}], "=", 
                    
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "}"}]}]}], " ", 
                  "\[IndentingNewLine]", "]"}], ";", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"icrules", " ", "=", " ", 
                  RowBox[{"ic", "/.", 
                   RowBox[{"{", 
                    RowBox[{"Equal", "\[Rule]", " ", "Rule"}], "}"}]}]}], ";",
                  "\[IndentingNewLine]", 
                 RowBox[{"icvars", " ", "=", " ", 
                  RowBox[{"First", "/@", 
                   RowBox[{"(", 
                    RowBox[{"icrules", "/.", 
                    RowBox[{"{", 
                    RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], 
                    ")"}]}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{"debug", ",", " ", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<initialAssignments:\>\"", ",", " ", "iass"}],
                     "]"}], ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<ialhs=\>\"", ",", " ", "ialhs"}], "]"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<iarhs=\>\"", ",", " ", "iarhs"}], "]"}], ";",
                     "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{
                    "\"\<assignmentRules: \>\"", ",", " ", "asrules"}], "]"}],
                     ";", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<aruleslhs:\>\"", ",", " ", "aruleslhs"}], 
                    "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<arulesrhs:\>\"", ",", " ", "arulesrhs"}], 
                    "]"}], ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<arzero:\>\"", ",", " ", "arzero"}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<icrules:\>\"", ",", " ", "icrules"}], "]"}], 
                    ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<icvars:\>\"", ",", " ", "icvars"}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<vars:\>\"", ",", " ", "vars"}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<arvars:\>\"", ",", " ", "arvars"}], "]"}], 
                    ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"checkRepeated", "[", 
                   RowBox[{"u_", ",", " ", "v_"}], "]"}], ":=", " ", 
                  RowBox[{"Module", "[", 
                   RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{"u", ",", "v", ",", " ", 
                    RowBox[{"MaxIterations", "\[Rule]", " ", "256"}]}], "]"}],
                     ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                    RowBox[{
                    "\"\< Suspected loop in assignmentRules and \
initialAssignments\>\"", "//", "boldBlack"}]}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], ")"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                   "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"iarhs", " ", "=", " ", 
                  RowBox[{"checkRepeated", "[", 
                   RowBox[{"iarhs", ",", " ", "iass"}], "]"}]}], ";", " ", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"iass", "=", 
                  RowBox[{"MapThread", "[", 
                   RowBox[{"Rule", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"ialhs", ",", " ", "iarhs"}], "}"}]}], "]"}]}], 
                 ";", " ", "\[IndentingNewLine]", 
                 RowBox[{"arulesrhs", " ", "=", " ", 
                  RowBox[{"checkRepeated", "[", 
                   RowBox[{"arulesrhs", ",", " ", "arzero"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"arzero", "=", 
                  RowBox[{"MapThread", "[", 
                   RowBox[{"Rule", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"aruleslhs", ",", " ", "arulesrhs"}], "}"}]}], 
                   "]"}]}], ";", " ", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"iass", "=", 
                  RowBox[{"Join", "[", 
                   RowBox[{"iass", ",", "arzero"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"icvals", " ", "=", 
                  RowBox[{"checkRepeated", "[", 
                   RowBox[{"icvars", ",", " ", "iass"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"icvals", " ", "=", 
                  RowBox[{"checkRepeated", "[", 
                   RowBox[{"icvals", ",", " ", "icrules"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"ic", " ", "=", " ", 
                  RowBox[{"MapThread", "[", 
                   RowBox[{"Equal", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"icvars", ",", " ", "icvals"}], "}"}]}], "]"}]}], 
                 ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{"debug", ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<initialAssignments:\>\"", ",", " ", "iass"}],
                     "]"}], ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<arzero:\>\"", ",", " ", "arzero"}], "]"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<icvals:\>\"", ",", " ", "icvals"}], "]"}], 
                    ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<ic:\>\"", ",", " ", "ic"}], "]"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<rules: \>\"", ",", " ", "rules"}], "]"}], 
                    ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "check", " ", "for", " ", "initial", " ", "assignments", 
                   " ", "to", " ", "constants"}], " ", "*)"}], 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"ia2consts", " ", "=", "  ", 
                  RowBox[{"Complement", "[", 
                   RowBox[{"ialhs", ",", " ", "icvars"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", "ia2consts", "]"}], ">", "0"}], 
                   ",", " ", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"ia2constsvals", " ", "=", " ", 
                    RowBox[{"ia2consts", "/.", "iass"}]}], ";", " ", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{"remove", " ", 
                    RowBox[{"the", "[", "0", "]"}], " ", "from", " ", "the", 
                    " ", "initial", " ", "assignments"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"ia2consts", " ", "=", " ", 
                    RowBox[{"Map", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"SameQ", "[", 
                    RowBox[{
                    RowBox[{"Head", "[", "#", "]"}], ",", " ", "Symbol"}], 
                    "]"}], ",", " ", "#", ",", " ", 
                    RowBox[{"Head", "[", "#", "]"}]}], "]"}], "&"}], ",", " ",
                     "\[IndentingNewLine]", "ia2consts"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"ia2consts", " ", "=", " ", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Rule", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"ia2consts", ",", " ", "ia2constsvals"}], "}"}]}],
                     "]"}]}], ";", " ", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "modify", " ", "rules", " ", "to", " ", "account", " ", 
                    "for", " ", "initial", " ", "assignments", " ", "to", " ",
                     "cosntants"}], " ", "*)"}], "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"rulevars", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"rules", "/.", 
                    RowBox[{"{", 
                    RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], "]"}], 
                    "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"rulevals", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"rulevars", "/.", "ia2consts"}], "/.", 
                    "rules"}]}], ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"rules", " ", "=", " ", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Rule", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"rulevars", ",", " ", "rulevals"}], "}"}]}], 
                    "]"}]}], ";", " ", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{"debug", ",", " ", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{
                    "\"\<ia2consts: \>\"", ",", " ", "ia2consts", " ", ",", 
                    " ", "\"\< (Constants with init assignments)\>\""}], 
                    "]"}], ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<{rulevars, rulevals}: \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"rulevars", ",", " ", "rulevals"}], "}"}]}], 
                    "]"}], ";", " ", "\[IndentingNewLine]", 
                    RowBox[{"Print", "[", 
                    RowBox[{"\"\<rules (revised): \>\"", ",", " ", "rules"}], 
                    "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], 
                    ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  "]"}]}]}], " ", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"End", " ", "If", " ", 
                  RowBox[{"Length", "[", "ia2consts", "]"}]}], " ", ">", " ", 
                 "0"}], " ", "*)"}], "\[IndentingNewLine]", "]"}]}]}], "  ", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"End", " ", "if", " ", 
                RowBox[{"Length", "[", "iass", "]"}]}], ">", "0"}], " ", 
              "..."}], " ", "*)"}], "\[IndentingNewLine]", "]"}]}], " ", 
          RowBox[{"(*", " ", 
           RowBox[{"end", " ", "Block"}], " ", "*)"}], " ", 
          "\[IndentingNewLine]", "]"}], ";", " ", 
         RowBox[{"(*", " ", 
          RowBox[{"end", " ", ">", " ", "2.15"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"$InitialRun", "=", "False"}]}]}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "]"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "initial", " ", "run"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Join", " ", "the", " ", "initial", " ", "conditions", " ", "to", " ", 
        "the", " ", "system", " ", "of", " ", "odes"}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"system", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"odes", ",", "ic"}], "]"}], "//.", "fs"}], ")"}], "//.", 
         "rules"}], ")"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"add", " ", "ode"}], "-", 
         RowBox[{
         "less", " ", "variables", " ", "as", " ", "algebraic", " ", 
          "conditions"}]}], " ", "*)"}],
       FontWeight->"Plain"], "\[IndentingNewLine]", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"isAFlag", ",", " ", "areFlags", ",", " ", "flagnames"}], 
           "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"isAFlag", "[", "v_", "]"}], ":=", " ", 
            RowBox[{"StringMatchQ", "[", 
             RowBox[{
              RowBox[{"stringer", "[", "v", "]"}], ",", " ", 
              RowBox[{
              "RegularExpression", "[", "\"\<(.+)\[UnderBracket]\\$(.+)\>\"", 
               "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"areFlags", "=", 
            RowBox[{"Select", "[", 
             RowBox[{"vars2remove", ",", "isAFlag"}], "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "areFlags", "]"}], ">", "0"}], " ", 
              "\[And]", " ", 
              RowBox[{"TrueQ", "[", 
               RowBox[{"$VersionNumber", "\[GreaterEqual]", "  ", "5"}], 
               "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"areFlags", " ", "=", " ", 
               RowBox[{"stringer", "/@", "areFlags"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"flagnames", " ", "=", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"StringReplace", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"\"\<[t]\>\"", "\[Rule]", " ", "\"\<\>\""}]}], 
                  "]"}], "&"}], "/@", "areFlags"}]}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "Add", " ", "check", " ", "here", " ", "to", " ", "make", " ", 
                "sure", " ", "none", " ", "of", " ", "the", " ", "added", " ",
                 "SBMLIC", " ", "are", " ", "INDETERMINATE"}], " ", "*)"}], 
              " ", "\[IndentingNewLine]", 
              RowBox[{"algic", "=", 
               RowBox[{"SBMLIC", "/@", "flagnames"}]}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"MapThread", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"#2", "==", "\"\<Indeterminate\>\""}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    "$FirstIteration", ",", " ", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
                    " ", 
                    RowBox[{
                    "\"\< no initial condition was specified for \>\"", "//", 
                    "boldBlack"}], ",", 
                    RowBox[{"#1", "//", "boldRed"}], ",", 
                    RowBox[{
                    "\"\< -- a value of zero will be used instead.\>\"", "//",
                     "boldBlack"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
                    "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], "&"}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"{", 
                 RowBox[{"areFlags", ",", "algic"}], "}"}]}], 
               "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"$FirstIteration", ",", " ", 
                RowBox[{"$FirstIteration", "=", "False"}]}], "]"}], ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"algic", " ", "=", " ", 
               RowBox[{"algic", "/.", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<Indeterminate\>\"", "\[Rule]", " ", "\"\<0\>\""}], 
                 "}"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"areFlags", "=", 
               RowBox[{"ToExpression", "/@", 
                RowBox[{"MapThread", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#1", "<>", "\"\<==\>\"", "<>", "#2"}], "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"areFlags", ",", " ", "algic"}], "}"}]}], 
                 "]"}]}]}], ";", " ", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"areFlags", " ", "=", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"areFlags", "//.", "fs"}], ")"}], "//.", "rules"}]}],
               ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"debugPrint", "[", 
                RowBox[{
                "dbg", ",", " ", "\"\<NDSolveSBMLModel:: fs: \>\"", ",", " ", 
                 "fs"}], "]"}],
               Background->RGBColor[0, 1, 1]], 
              StyleBox[";",
               Background->RGBColor[0, 1, 1]], 
              StyleBox["\[IndentingNewLine]",
               Background->RGBColor[0, 1, 1]], 
              StyleBox[
               RowBox[{"debugPrint", "[", 
                RowBox[{
                "dbg", ",", " ", "\"\<NDSolveSBMLModel:: rules: \>\"", ",", 
                 " ", "rules"}], "]"}],
               Background->RGBColor[0, 1, 1]], 
              StyleBox[";",
               Background->RGBColor[0, 1, 1]], 
              StyleBox["\[IndentingNewLine]",
               Background->RGBColor[0, 1, 1]], 
              StyleBox[
               RowBox[{"debugPrint", "[", 
                RowBox[{
                "dbg", ",", " ", 
                 "\"\<NDSolveSBMLModel:: added to system: \>\"", ",", " ", 
                 "areFlags"}], "]"}],
               Background->RGBColor[0, 1, 1]], 
              StyleBox[";",
               Background->RGBColor[0, 1, 1]], 
              StyleBox["\[IndentingNewLine]",
               Background->RGBColor[0, 1, 1]], 
              RowBox[{"system", " ", "=", " ", 
               RowBox[{"Join", "[", 
                RowBox[{"areFlags", ",", "system"}], "]"}]}], ";"}], 
             "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Print", "[", 
               RowBox[{
               "\"\<This model contains events. Events required Mathematica \
version 5.0++ and not \>\"", "<>", "$Version"}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Add", " ", "algebraic", " ", "rules"}], " ", "-", " ", 
         RowBox[{
          RowBox[{"7", "/", "31"}], "/", "03"}]}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ars", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"$VersionNumber", "\[GreaterEqual]", " ", "5.0"}], ",", 
           " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ars", " ", "=", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"ars", "//.", "fs"}], ")"}], "//.", "rules"}], 
              ")"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"system", " ", "=", " ", 
             RowBox[{"Join", "[", 
              RowBox[{"system", ",", " ", "ars"}], "]"}]}], ";"}], 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"PrintWarning", "[", 
             RowBox[{
             "\"\<This model contains algebraic rules. The solution of \
Differential-Algebraic equations requires Mathematica 5.0 or greater. You \
have version \>\"", "<>", "$Version"}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Abort", "[", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
          "]"}], ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "add", " ", "assignment", " ", "rules", " ", "to", " ", "DAE", " ", 
         "system", " ", "in", " ", "version", " ", "2.3", ".20"}], " ", "*)"}],
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"don", "'"}], "t", " ", "add", " ", "assignment", " ", 
         "rules", " ", "starting", " ", "in", " ", "2.4", ".4"}], " ", "*)"}],
       
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "asrs", "]"}], ">", "0"}], " ", "\[And]", 
           " ", 
           RowBox[{"TrueQ", "[", 
            RowBox[{"$VersionNumber", "\[GreaterEqual]", " ", "5"}], "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"asrs", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Equal", "[", 
                RowBox[{
                 RowBox[{"First", "[", "#", "]"}], ",", 
                 RowBox[{
                  RowBox[{"(", " ", 
                   RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "//.", "fs"}], ")"}], "//.",
                   "rules"}]}], "]"}], "&"}], ",", "asrs"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"system", " ", "=", " ", 
            RowBox[{"Join", "[", 
             RowBox[{"system", ",", " ", "asrs"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", "*)"}], 
      " ", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "check", " ", "to", " ", "see", " ", "if", " ", "there", " ", "are", 
          " ", "any", " ", "undefined", " ", "symbols", " ", "and", " ", 
          "print", " ", "error", " ", "message", " ", "if", " ", "so"}], " ", 
         "-", " ", 
         RowBox[{"added", " ", 
          RowBox[{
           RowBox[{"7", "/", "31"}], "/", 
           RowBox[{"03", " ", "--"}]}], " ", "this", " ", "will", " ", 
          "catch", " ", "potential", " ", "NDSolve", " ", "crashes"}]}], " ", 
        "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"systemvars", " ", "=", " ", 
       RowBox[{"getSymbols", "[", 
        RowBox[{"Last", "/@", "system"}], "]"}]}], ";", " ", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "just", " ", "look", " ", "at", " ", "RHS", " ", "of", " ", "odes"}], 
        " ", "*)"}],
       FontWeight->"Plain"], " ", "\[IndentingNewLine]", 
      RowBox[{"definedvars", " ", "=", " ", 
       RowBox[{"getSymbols", "[", "vars", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"undefinedvars", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"systemvars", ",", " ", "definedvars"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<NDSolveSBMLModel:: undefinedVars: \>\"", ",", 
        " ", "undefinedvars"}], "]"}], ";", "  ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "undefinedvars", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"undefinedvars", ",", " ", "Global`delay"}], "]"}], ",", 
           " ", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{"\"\<Sorry: \>\"", "//", "boldRed"}], ",", " ", 
              RowBox[{
              "\"\<This model appears to contain the csymbol \>\"", "//", 
               "boldBlack"}], ",", " ", 
              RowBox[{"\"\<delay\>\"", "//", "boldBlue"}], ",", " ", 
              RowBox[{
              "\"\< which has not been implemented in SBMLNDSolve.\>\"", "//",
                "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"Print", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"boldRed", "[", "\"\<Error: \>\"", "]"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"boldBlack", "[", "\"\<The symbol \>\"", "]"}], ",", 
             RowBox[{"#", "//", "boldBlue"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{
             "boldBlack", "[", 
              "\"\< does not appear to have a numerical value.  NDSolve may \
be unable to produce numerical results.\>\"", "]"}]}], "\[IndentingNewLine]", 
            "]"}], "&"}], "/@", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"decontextify", "[", 
              RowBox[{"#", ",", "$SBML$Context"}], "]"}], "&"}], ",", " ", 
            "undefinedvars"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**", " ", "end"}], " ", "of", " ", 
         "check", " ", "for", " ", "poorly", " ", "formed", " ", "system"}], 
        " ", "*********)"}],
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: system\>\"", ",", " ", 
         "system"}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: vars\>\"", ",", " ", 
         "vars"}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{"dbg", ",", " ", "\"\<NDSolveSBMLModel:: {opt}\>\"", ",", " ", 
         RowBox[{"{", "opt", "}"}]}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain",
       Background->RGBColor[0, 1, 1]], 
      RowBox[{"NDSolveOptions", "=", 
       RowBox[{"MyFilterOptions", "[", 
        RowBox[{"NDSolve", ",", "opt"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"test", "=", 
       RowBox[{
        RowBox[{"StoppingTest", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"StoppingTest", "\[Rule]", " ", "False"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: NDSolveOptions\>\"", ",", 
         " ", "NDSolveOptions"}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"solve", " ", "&"}], " ", "retry", " ", "if", " ", "error", 
         " ", "in", " ", 
         RowBox[{"accuracy", "/", "precision"}], " ", "2.3", ".37"}], "*)"}],
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], 
      RowBox[{
       RowBox[{
        StyleBox["solver",
         FontColor->RGBColor[1, 0, 0]], "[", 
        RowBox[{"options___", "?", "OptionQ"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n", ",", "ops", ",", 
           RowBox[{"dbg", "=", "False"}], ",", " ", "failmsg"}], "}"}], ",", 
         " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: solver:\>\"", ",", " ", 
            "\"\<Calling NDSolve\>\""}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: solver: system: \>\"", 
            ",", " ", "system"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: solver: vars: \>\"", ",", 
            " ", "vars"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: solver: tstart: \>\"", 
            ",", " ", "tstart"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: solver: tmax: \>\"", ",", 
            " ", "tmax"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<NDSolveSBMLModel:: solver: {options}: \>\"", 
            ",", " ", 
            RowBox[{"{", "options", "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"failmsg", "[", "]"}], ":=", " ", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"errors", ",", " ", "nexterror"}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"errors", "=", "$MessageList"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"While", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", "errors", "]"}], ">", "0"}], ",", " ",
                 "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"nexterror", "=", 
                  RowBox[{"First", "[", "errors", "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"errors", "=", 
                  RowBox[{"Rest", "[", "errors", "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Switch", "[", 
                  RowBox[{
                   RowBox[{"ToString", "[", "nexterror", "]"}], ",", 
                   "\[IndentingNewLine]", "\"\<NDSolve::mxst\>\"", ",", " ", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                    RowBox[{
                    "\"\<Numerical integration could not converge because the \
maximum number of steps were exceeded.\\nTry increasing the value of the \
option MaxSteps in your call to SBMLNDSolve.\>\"", "//", "boldBlack"}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                   "\"\<NDSolve::icfail\>\"", ",", "\[IndentingNewLine]", 
                   RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
                    RowBox[{
                    "\"\<Numerical integration failed. The initial conditions \
appear to be inconsistent with the differential and/or algebraic equations in \
the model. \\nThis will sometimes occur if an invalid set of initial \
conditions are specified in the model (e.g., all values equal to zero).\>\"", 
                    "//", "boldBlack"}]}], "]"}], ",", "\[IndentingNewLine]", 
                   "\"\<NDSolve::nderr\>\"", ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
                    "\"\<Numerical integraton failed. \\nThis message \
sometimes indicates a singularity in the solution (e.g., dividing by zero).\>\
\""}], "]"}], ";"}], ",", "\[IndentingNewLine]", "\"\<NDSolve::ndsz\>\"", ",",
                    "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
                    RowBox[{
                    "\"\<Numerical integraton failed. The solver could not \
determine a step size that would work, no matter how small it tried. This \
sometimes indicates that the system is stiff. \\nTry looking for \
singularities or a wide variation in the time constants within your model; or \
try changing PrecisionGoal or AccuracyGoal.\>\"", "//", "boldBlack"}]}], 
                    "]"}], ";"}], ",", "\[IndentingNewLine]", "_", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Print", "[", 
                    RowBox[{
                    RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", " ", 
                    RowBox[{
                    "\"\<Numerical integration error: \>\"", "//", 
                    "boldBlack"}], ",", " ", 
                    RowBox[{"nexterror", "//", "boldBlue"}], ",", 
                    RowBox[{
                    "\"\< (a message for this error has not been written yet: \
Check help > built-in-functions > Warning messages > Numerical Computation > \
Equation Solving > message) \>\"", "//", "boldBlack"}]}], "]"}], ";"}]}], " ",
                   "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
               "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"texit", ",", " ", "n"}], "}"}], "=", 
           RowBox[{"Check", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"solveUntil", "[", 
              RowBox[{"test", ",", "system", ",", "vars", ",", 
               RowBox[{"{", 
                RowBox[{"Global`t", ",", "tstart", ",", "tmax"}], "}"}], ",", 
               "options"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"failmsg", "[", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"NDSolve", "::", "stopt"}], ",", " ", 
             RowBox[{"NDSolve", "::", "mxst"}], ",", " ", 
             RowBox[{"NDSolve", "::", "icfail"}], ",", " ", 
             RowBox[{"NDSolve", "::", "ndsz"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", " ", "n", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", 
      StyleBox[" ",
       FontColor->RGBColor[1, 0, 0]], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "of", " ", "solver"}], " ", "*)"}],
       FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"retry", ":=", " ", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning: SBMLNDSolve: \>\"", "//", "boldOrange"}], 
            ",", " ", 
            RowBox[{"\"\<Attempting Error Recovery: \>\"", "//", "boldRed"}], 
            ",", 
            RowBox[{
            "\"\< NDSolve is unable to solve the system. Trying again with \>\
\"", "//", "boldBlack"}], ",", 
            RowBox[{
            "\"\<PrecisionGoal\[Rule]Automatic, AccuracyGoal\[Rule]Automatic.\
\>\"", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"s", "=", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"solver", "[", 
              RowBox[{
               RowBox[{"PrecisionGoal", "\[Rule]", "Automatic"}], ",", 
               RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], ",", " ", 
               "NDSolveOptions"}], "]"}], ",", " ", "giveUp"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"giveUp", ":=", " ", 
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", "\"\<Unable to find a solution.\>\"", "]"}], 
          ";", " ", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: Calling Check\>\"", ",", 
         "\"\< \>\""}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"Check", "[", 
        RowBox[{
         RowBox[{"solver", "[", "NDSolveOptions", "]"}], ",", " ", "retry", 
         ",", " ", 
         RowBox[{"NDSolve", "::", "nderr"}], ",", " ", 
         RowBox[{"NDSolve", "::", "icfail"}]}], "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: Returned from Check\>\"", 
         ",", "\"\< \>\""}], "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", "s", "]"}], ",", " ", "addedDummyVariable"}],
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "p", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ListQ", "[", "p", "]"}], " ", "\[And]", " ", 
            RowBox[{
             RowBox[{"Length", "[", "p", "]"}], ">", "0"}]}], ",", " ", 
           RowBox[{"p", " ", "=", " ", 
            RowBox[{"First", "[", "p", "]"}]}]}], "]"}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"s", " ", "=", 
          RowBox[{"{", " ", 
           RowBox[{"Drop", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", "s", "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"p", ",", " ", "p"}], "}"}]}], "]"}], "}"}]}], ";"}]}], 
       " ", "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       StyleBox[
        RowBox[{
        "put", " ", "variables", " ", "defined", " ", "by", " ", "assignment",
          " ", "rules", " ", "back", " ", "in"}],
        FontWeight->"Plain"], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"Flatten", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sars", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Last", "/@", "asrules"}], ")"}], "//.", "asrules"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sars", " ", "=", " ", 
       RowBox[{"sars", "/.", "s"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sars", "=", 
       RowBox[{"sars", "//.", "fs"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"don", "'"}], "t", " ", "forget", " ", "about", " ", 
        RowBox[{"functions", " ", "!!"}], " ", "2.5", ".13", " ", 
        RowBox[{
         RowBox[{"5", "/", "4"}], "/", "06"}]}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         StyleBox["replaced",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["rule",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["by",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["interpolation",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["2.4",
          FontWeight->"Plain"], 
         StyleBox[".14",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox[
          RowBox[{
           RowBox[{"5", "/", "8"}], "/", "05"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["Tokyo",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["Hackathon",
          FontWeight->"Plain"], " ", 
         StyleBox["so",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["its",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["compatible",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["with",
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["SBMLPlot",
          FontWeight->"Plain"]}], 
        StyleBox[",",
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox["dataTable",
         FontWeight->"Plain"], 
        StyleBox[",",
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox[
         RowBox[{"etc", "."}],
         FontWeight->"Plain"]}], 
       StyleBox[" ",
        FontWeight->"Plain"], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"sars", " ", "=", " ", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Rule", "[", 
             RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"arvars", ",", "sars"}], "}"}]}], "]"}]}], ";"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"sars", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", "\[Rule]", 
           RowBox[{
            RowBox[{"Interpolation", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"tstart", ",", "#2"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"texit", ",", "#2"}], "}"}]}], "}"}], ",", " ", 
              RowBox[{"InterpolationOrder", "\[Rule]", " ", "1"}]}], "]"}], 
            "[", "Global`t", "]"}]}], "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"arvars", ",", " ", "sars"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<sars(2)=\>\"", ",", " ", "sars"}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"#", "/.", "sars"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{
              "Global`t", ",", " ", "tstart", ",", " ", "texit", ",", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"texit", "-", "tstart"}], ")"}], "/", "5.0"}]}], 
              "}"}]}], "]"}], "&"}], "/@", "arvars"}], "]"}], ";"}], 
       "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{"s", ",", " ", "sars"}], "]"}], "//", "List"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{"dbg", ",", " ", "\"\<NDSolveSBMLModel:: s\>\"", ",", "s"}], 
        "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], 
      StyleBox[
       RowBox[{"debugPrint", "[", 
        RowBox[{
        "dbg", ",", " ", "\"\<NDSolveSBMLModel:: sars\>\"", ",", "sars"}], 
        "]"}],
       Background->RGBColor[0, 1, 1]], 
      StyleBox[";",
       Background->RGBColor[0, 1, 1]], 
      StyleBox["\[IndentingNewLine]",
       Background->RGBColor[0, 1, 1]], "\[IndentingNewLine]", 
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{"defunctionate", "/@", 
        RowBox[{"(", 
         RowBox[{"First", "/@", 
          RowBox[{"(", 
           RowBox[{"Flatten", "[", "s", "]"}], ")"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "include", " ", "undefined", " ", "compartments", " ", "in", " ", 
        "\"\<constants\>\"", " ", "2.7", ".0", ".5", " ", "11.29", ".07"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"constants", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Global`SBMLConstants", "/.", "r"}], ")"}], ",", " ", 
         "udcrs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"species", "=", 
       RowBox[{"defunctionate", "/@", 
        RowBox[{"(", 
         RowBox[{"Global`SBMLSpecies", "/.", "r"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"compartments", "=", 
       RowBox[{"defunctionate", "/@", 
        RowBox[{"(", 
         RowBox[{"Global`SBMLCompartments", "/.", "r"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "some", " ", "constants", " ", "may", " ", "have", " ", "initial", " ",
         "assignments"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"constants", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"rules", ",", " ", "constants"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"retrieve", " ", "the", " ", "compartments"}], " ", "&"}], 
        " ", "species", " ", "that", " ", "were", " ", "constant", " ", "and",
         " ", "make", " ", "them", " ", "\"\<plot-a-ble\>\""}], " ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"compartments", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"compartments", ",", " ", "vars"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"species", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"species", ",", " ", "vars"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<vars=\>\"", ",", "vars"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<constants=\>\"", ",", "constants"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<compartments=\>\"", ",", "compartments"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<species=\>\"", ",", "species"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"compartments", "=", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"functionate", "[", "#", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Interpolation", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"tstart", ",", 
                   RowBox[{"#", "/.", "constants"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"texit", ",", " ", 
                   RowBox[{"#", "/.", "constants"}]}], "}"}]}], "}"}], ",", 
               " ", 
               RowBox[{"InterpolationOrder", "\[Rule]", " ", "1"}]}], "]"}], 
             "[", "Global`t", "]"}]}], "\[IndentingNewLine]", "]"}], "&"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "compartments"}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"s", ",", " ", "compartments"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"species", "=", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"functionate", "[", "#", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Interpolation", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"tstart", ",", 
                   RowBox[{"#", "/.", "constants"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"texit", ",", " ", 
                   RowBox[{"#", "/.", "constants"}]}], "}"}]}], "}"}], ",", 
               " ", 
               RowBox[{"InterpolationOrder", "\[Rule]", " ", "1"}]}], "]"}], 
             "[", "Global`t", "]"}]}], "\[IndentingNewLine]", "]"}], "&"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "species"}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"s", ",", " ", "species"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"Flatten", "[", "s", "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"2.6", ".2"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3883427318856993`*^9, 3.388342732305887*^9}, {
   3.389025874144055*^9, 3.389025877995409*^9}, {3.389025969763482*^9, 
   3.389025977479301*^9}, {3.389026050567945*^9, 3.389026069619897*^9}, {
   3.390046719268149*^9, 3.390046727516837*^9}, {3.3900468604774923`*^9, 
   3.390046864229199*^9}, {3.39004689618575*^9, 3.390046902524596*^9}, {
   3.390047296990067*^9, 3.390047320512804*^9}, {3.390047411508894*^9, 
   3.390047427972432*^9}, {3.390047799284327*^9, 3.39004783301633*^9}, {
   3.390047867301383*^9, 3.3900478681222887`*^9}, {3.390047994126296*^9, 
   3.390048002842651*^9}, {3.3900480626820393`*^9, 3.390048063693344*^9}, {
   3.390048186743023*^9, 3.390048192073002*^9}, 3.390048239960438*^9, {
   3.3900483342631607`*^9, 3.390048344705653*^9}, {3.390048394958181*^9, 
   3.3900484124377623`*^9}, {3.390048717809629*^9, 3.390048725282712*^9}, {
   3.390048809985915*^9, 3.390048848374732*^9}, {3.3900488938203993`*^9, 
   3.390049031306651*^9}, {3.390049124853075*^9, 3.3900491251262197`*^9}, {
   3.390049412692334*^9, 3.390049421467929*^9}, {3.391977071606826*^9, 
   3.3919770747976*^9}, {3.391977195786714*^9, 3.391977196229035*^9}, {
   3.391978251646838*^9, 3.391978252708416*^9}, {3.3960233657946777`*^9, 
   3.396023392659175*^9}, {3.3960234306951447`*^9, 3.396023457358918*^9}, {
   3.39602370078056*^9, 3.396023724531551*^9}, {3.396024446273964*^9, 
   3.396024579767263*^9}, {3.396024621623993*^9, 3.396024626517111*^9}, {
   3.397074152732842*^9, 3.397074191893136*^9}, {3.397074346071886*^9, 
   3.397074346613123*^9}, {3.3970744473023157`*^9, 3.397074495240797*^9}, {
   3.397074537169229*^9, 3.397074542210554*^9}, {3.397074663523676*^9, 
   3.397074664530368*^9}, {3.397074697985291*^9, 3.39707490498685*^9}, {
   3.397074973084076*^9, 3.39707499000115*^9}, {3.397075062934053*^9, 
   3.397075085300529*^9}, {3.39707513334238*^9, 3.397075150472199*^9}, {
   3.397075197040139*^9, 3.397075203403554*^9}, {3.3970752555554867`*^9, 
   3.3970752804634533`*^9}, {3.3970753696288557`*^9, 3.397075446108671*^9}, {
   3.397075952151639*^9, 3.3970759693063993`*^9}, {3.39708363116234*^9, 
   3.397083647681089*^9}, {3.3970836816009607`*^9, 3.39708372495*^9}, {
   3.4040511581420393`*^9, 3.4040511906669483`*^9}, {3.404051231025165*^9, 
   3.404051233764339*^9}, {3.404051548563401*^9, 3.404051553717142*^9}, {
   3.404051670906094*^9, 3.404051760925013*^9}, {3.4040518065854073`*^9, 
   3.404051808193858*^9}, {3.404051909601799*^9, 3.404052120091764*^9}, {
   3.404052186370674*^9, 3.404052296067503*^9}, {3.404052327091064*^9, 
   3.404052336461784*^9}, {3.404052431747302*^9, 3.404052432214603*^9}, {
   3.405357486527585*^9, 3.4053575418576317`*^9}, {3.405357736616003*^9, 
   3.405357761075027*^9}, {3.405357835170787*^9, 3.405357993436571*^9}, {
   3.405358072622356*^9, 3.405358114231689*^9}, {3.405358148046805*^9, 
   3.4053582330560427`*^9}, {3.405358320812994*^9, 3.405358342224359*^9}, {
   3.405358379405142*^9, 3.4053583845842943`*^9}, {3.4053586997803993`*^9, 
   3.405358747009585*^9}, {3.4160665123336697`*^9, 3.416066513763074*^9}, {
   3.4160672627625303`*^9, 3.416067273074512*^9}, {3.416068871751278*^9, 
   3.416068874956299*^9}, {3.41606890883702*^9, 3.4160690005464783`*^9}, {
   3.416069044512841*^9, 3.416069120105035*^9}, {3.4160692259445667`*^9, 
   3.4160692282505302`*^9}, {3.4160693066758137`*^9, 3.416069338915328*^9}, {
   3.416069375303953*^9, 3.4160694001745234`*^9}, {3.416069643012607*^9, 
   3.416069710482552*^9}, {3.416069796834519*^9, 3.416069877125554*^9}, {
   3.416069913638877*^9, 3.416069931433737*^9}, {3.4160699678599787`*^9, 
   3.4160699845778227`*^9}, {3.41607005589951*^9, 3.416070188137442*^9}, 
   3.4160702294233847`*^9, {3.416070259934483*^9, 3.416070343282209*^9}, {
   3.416070817451964*^9, 3.416070819530912*^9}, {3.416070855310251*^9, 
   3.416070895236576*^9}, {3.416070926196562*^9, 3.4160709272706614`*^9}, {
   3.416071008297655*^9, 3.4160710102547693`*^9}, {3.416071453027608*^9, 
   3.416071453465776*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLreactions", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"$$LoadBug", ",", " ", 
    RowBox[{"Print", "[", "\"\<Loading:getSBMLreactions\>\"", "]"}]}], "]"}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["getSBMLreactions (main function)", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLreactions", "[", "opt___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dbg", ",", " ", "ODEs", ",", " ", "species", ",", "  ", "parameters", 
       ",", " ", "r", ",", "reactions", ",", " ", "kineticLaw", ",", "law", 
       ",", "chead", ",", "shortdes", ",", "myShort", ",", "reactionNumbers", 
       ",", "reactionExpression", ",", "dODEs"}], "\[IndentingNewLine]", 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"reactionCPUProfile", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"aggregatereactionCPUProfile", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["reactionExpression",
         FontColor->RGBColor[0, 0, 1]], "[", "str_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"printWarning", "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"(", 
              RowBox[{"StringQ", "[", "str", "]"}], ")"}]}], ",", " ", 
            RowBox[{
            "\"\<Input to reactionExpression must be a string, not '\>\"", "<>", 
             RowBox[{"ToString", "[", "str", "]"}], "<>", "\"\<'.\>\""}]}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"s", " ", "=", " ", 
           RowBox[{"\"\<(\>\"", "<>", "str", "<>", "\"\<)\>\""}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"s", " ", "=", " ", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"s", ",", " ", 
             RowBox[{
             "\"\<\[Rule]\>\"", "\[Rule]", " ", "\"\<)\[Rule](\>\""}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"ToExpression", "[", "s", "]"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", 
        StyleBox["reactionExpression",
         FontColor->RGBColor[0, 0, 1]]}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"dbg", " ", "=", " ", "$SBML$debug"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"law", " ", "=", "$SBML$KineticLaw"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"shortdes", " ", "=", " ", "$SBML$shortenODES"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"myShort", "[", "x_", "]"}], ":=", " ", 
       RowBox[{"If", "[", 
        RowBox[{"shortdes", ",", " ", 
         RowBox[{"Short", "[", "x", "]"}], ",", " ", "x"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$ReactionCounter", " ", "=", " ", "0"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"$SBML$Models", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfReactions\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"r", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<reaction\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$NReactions", " ", "=", " ", 
       RowBox[{"Length", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<getReactions initialization\>\"", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{"getSBMLreaction", ",", "r"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cpuReport", "[", "\"\<all calls to getSBMLreaction\>\"", "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"reactionNumbers", "=", 
       RowBox[{"Range", "[", "$ReactionCounter", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ODEs", "=", 
       RowBox[{"Apply", "[", 
        RowBox[{"Join", ",", " ", 
         RowBox[{"Map", "[", 
          RowBox[{"$ReactionODEs", ",", " ", "reactionNumbers"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"species", " ", "=", 
       RowBox[{
        RowBox[{"Apply", "[", " ", 
         RowBox[{"Join", ",", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"$ReactionSpecies", ",", "reactionNumbers"}], "]"}]}], 
         "]"}], "//", "Union"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"reactions", " ", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"$Reactions", ",", " ", "reactionNumbers"}], "]"}]}], " ", 
      ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$Reactions", " ", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"reactionExpression", ",", 
         RowBox[{"Map", "[", 
          RowBox[{"Last", ",", " ", 
           RowBox[{"reactions", "//", "Flatten"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"kineticLaw", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"$ReactionLaws", ",", "reactionNumbers"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
      "cpuObserver", "[", "\"\<getSBMLreaction: reactions: joining Stuff\>\"",
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLreactions:: kineticLaw: \>\"", ",", 
        "kineticLaw"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLreactions:: ODEs: \>\"", ",", "ODEs"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLreactions:: species: \>\"", ",", 
        "species"}], "]"}], ";", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLreactions:: reactions: \>\"", ",", 
        "reactions"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Combine", " ", "the", " ", "reaction", " ", "ODE", " ", "terms", " ", 
        "into", " ", "complete", " ", "ODEs"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"eliminate", " ", "frozen", " ", 
        RowBox[{"(", 
         RowBox[{"boundary", " ", "condition"}], ")"}], " ", "species"}], " ",
        "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{"species", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"species", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"SBMLParameterQ", "[", 
             RowBox[{"ToString", "[", "#", "]"}], "]"}]}], ")"}], "&"}]}], 
        " ", "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"lastest", "[", "x_", "]"}], ":=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"Last", ",", "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ODEs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{"ODEs", ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "'"}], "[", "Global`t", "]"}], "\[Equal]", 
             "___"}]}], "]"}], "&"}], ",", " ", "species"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ODEs", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"lastest", ",", "ODEs"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ODEs", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Plus", ",", "#"}], "]"}], "&"}], ",", "ODEs"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"ODEs", "  ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#1", "'"}], "[", "Global`t", "]"}], "\[Equal]", "#2"}], 
          "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"species", ",", "ODEs"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
      "cpuReport", "[", "\"\<combining reaction terms into ODE's\>\"", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"saveVerboseData", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"reactions", " ", "=", " ", 
          RowBox[{"(", 
           RowBox[{"reactions", "/.", 
            RowBox[{"{", 
             RowBox[{"Rule", "\[Rule]", " ", "List"}], "}"}]}], ")"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"reactions", " ", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"Flatten", ",", " ", "reactions"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "$SBML$verboseContext"}], ",", 
           RowBox[{"reactions", " ", "=", " ", 
            RowBox[{"decontextify", "[", 
             RowBox[{"reactions", ",", " ", "$SBML$Context"}], "]"}]}]}], 
          "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"chead", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<Name\>\"", ",", " ", "\"\<Reaction\>\""}], "}"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
          "$SBML$ShowReactionParameters", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"chead", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"chead", ",", "\"\<Parameters\>\""}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"parameters", "=", 
             RowBox[{"Map", "[", 
              RowBox[{"$ReactionParameters", ",", " ", "reactionNumbers"}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"parameters", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Map", "[", 
                 RowBox[{"ToString", ",", "#"}], "]"}], "&"}], ",", 
               "parameters"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"parameters", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
              "MathSBML`Private`parameterate", ",", " ", "parameters"}], 
              "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", "$SBML$verboseContext"}], ",", 
              RowBox[{
               RowBox[{"parameters", " ", "=", " ", 
                RowBox[{"Map", "[", 
                 RowBox[{"decontextify", ",", " ", "parameters"}], "]"}]}], 
               ";"}]}], " ", "]"}], ";", " ", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"reactions", " ", "=", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Append", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"reactions", ",", "parameters"}], "}"}]}], "]"}]}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"law", ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"chead", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"chead", ",", "\"\<Kinetic Law\>\""}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"!", "$SBML$verboseContext"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"kineticLaw", " ", "=", " ", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"ToString", "[", 
                    RowBox[{"InputForm", "[", "#", "]"}], "]"}], "&"}], ",", 
                  " ", "kineticLaw"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"kineticLaw", " ", "=", " ", 
                RowBox[{"decontextify", "[", 
                 RowBox[{"kineticLaw", ",", " ", "$SBML$Context"}], "]"}]}], 
               ";"}]}], "  ", "\[IndentingNewLine]", "]"}], ";", " ", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"reactions", " ", "=", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Append", "[", 
                 RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"reactions", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{"myShort", ",", "kineticLaw"}], "]"}]}], "}"}]}], 
              "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"verboseSave", "[", 
          RowBox[{"\"\<Reactions\>\"", ",", "chead", ",", " ", "reactions"}], 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"$SBML$verboseContext", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"verboseSave", "[", 
             RowBox[{
             "\"\<Differential Equations from Reactions\>\"", ",", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Species\>\"", ",", " ", 
                "\"\<Differential Equations\>\""}], "}"}], ",", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{"species", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{"myShort", ",", "ODEs"}], "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}], " ", "\[IndentingNewLine]", 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"species", " ", "=", " ", 
             RowBox[{"decontextify", "[", 
              RowBox[{"Map", "[", 
               RowBox[{"ToString", ",", "species"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"dODEs", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"ToString", "[", 
                 RowBox[{"InputForm", "[", "#", "]"}], "]"}], "&"}], ",", " ",
                "ODEs"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"dODEs", "=", " ", 
             RowBox[{"decontextify", "[", 
              RowBox[{"dODEs", ",", " ", "$SBML$Context"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"dODEs", "=", 
             RowBox[{"MapThread", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"StringReplace", "[", 
                 RowBox[{"#1", ",", 
                  RowBox[{
                   RowBox[{
                   "\"\<Derivative[1][\>\"", "<>", "#2", "<>", "\"\<]\>\""}], 
                   "\[Rule]", " ", 
                   RowBox[{"#2", "<>", "\"\<'\>\""}]}]}], "]"}], "&"}], " ", 
               ",", 
               RowBox[{"{", 
                RowBox[{"dODEs", ",", "species"}], "}"}]}], "]"}]}], ";", 
            "  ", "\[IndentingNewLine]", 
            RowBox[{"verboseSave", "[", 
             RowBox[{
             "\"\<Differential Equations from Reactions\>\"", ",", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Species\>\"", ",", " ", 
                "\"\<Differential Equations\>\""}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{"species", ",", 
                 RowBox[{"Map", "[", 
                  RowBox[{"myShort", ",", "dODEs"}], "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"cpuReport", "[", "\"\<verbose listing\>\"", "]"}], 
            ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$ODES", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"$SBML$ODES", ",", " ", "ODEs"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$ReportCPU", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ReactionCPUsummary", "[", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"ReactionCPUplot", "[", "]"}], ";"}]}], " ", 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["combineReactions ** not used anymore **", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"combineReactions", "[", 
    RowBox[{"ODEs_", ",", " ", "species_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"r", ",", 
       RowBox[{"dbg", "=", "True"}], ",", " ", "lastest"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"lastest", "[", "x_", "]"}], ":=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"Last", ",", "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<combineReactions:: ODEs\>\"", ",", " ", "ODEs"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Cases", "[", 
           RowBox[{"ODEs", ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "'"}], "[", "Global`t", "]"}], "\[Equal]", 
             "___"}]}], "]"}], "&"}], ",", " ", "species"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<combineReactions:: r\>\"", ",", " ", "r"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"lastest", ",", "r"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<combineReactions:: r\>\"", ",", " ", "r"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Plus", ",", "#"}], "]"}], "&"}], ",", "r"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<combineReactions:: r\>\"", ",", " ", "r"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", "  ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#1", "'"}], "[", "Global`t", "]"}], "\[Equal]", "#2"}], 
          "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"species", ",", "r"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<combineReactions:: r\>\"", ",", " ", "r"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "r", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["reactionForm", "Subsubsection"],

Cell["\<\
(2.7.2a 11 Feb 08) corrected conversion of stoichiometries, reactants, and \
products to text form so that reaction expression is correclty produced in \
the case of stoichiometry math\
\>", "Text",
 CellChangeTimes->{{3.4117465262757053`*^9, 3.4117466127117033`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"reactionForm", "[", 
   RowBox[{
   "reactants_", ",", " ", "reactantStoichiometry_", ",", " ", "products_", 
    ",", " ", "\[IndentingNewLine]", "productStoichiometry_", ",", " ", 
    RowBox[{"reversible_:", "False"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rhs", ",", "lhs", ",", "reaction", ",", " ", 
      RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"debugPrint", "[", 
      RowBox[{
      "dbg", ",", " ", "\"\<reactionForm: input: reactants:\>\"", ",", " ", 
       "reactants"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"debugPrint", "[", 
      RowBox[{
      "dbg", ",", " ", "\"\<reactionForm: input: reactantStoichiometry:\>\"", 
       ",", " ", "reactantStoichiometry"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"debugPrint", "[", 
      RowBox[{
      "dbg", ",", " ", "\"\<reactionForm: input: products:\>\"", ",", " ", 
       "products"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"debugPrint", "[", 
      RowBox[{
      "dbg", ",", " ", "\"\<reactionForm: input: productStoichiometry:\>\"", 
       ",", " ", "productStoichiometry"}], "]"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"debugPrint", "[", 
      RowBox[{
      "dbg", ",", " ", "\"\<reactionForm: input: reversible:\>\"", ",", " ", 
       "reversible"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "reactants", "]"}], ">", "0"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"lhs", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"ToExpression", "/@", 
            RowBox[{"stringer", "/@", "reactants"}]}], ")"}], ".", 
          RowBox[{"(", 
           RowBox[{"ToExpression", "/@", 
            RowBox[{"stringer", "/@", "reactantStoichiometry"}]}], ")"}]}]}], 
        ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"lhs", " ", "=", "Global`\[EmptySet]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"lhs", " ", "=", " ", 
        RowBox[{"ToString", "[", 
         RowBox[{"InputForm", "[", "lhs", "]"}], "]"}]}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"lhs", " ", "=", " ", 
      RowBox[{"stringer", "[", "lhs", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "products", "]"}], ">", "0"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"rhs", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"ToExpression", "/@", 
           RowBox[{"stringer", "/@", "products"}]}], ")"}], ".", 
         RowBox[{"(", 
          RowBox[{"ToExpression", "/@", 
           RowBox[{
           "stringer", "/@", "\[IndentingNewLine]", 
            "productStoichiometry"}]}], ")"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"rhs", " ", "=", " ", "Global`\[EmptySet]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"rhs", " ", "=", " ", 
        RowBox[{"ToString", "[", 
         RowBox[{"InputForm", "[", "rhs", "]"}], "]"}]}], ";", " ", "J"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"rhs", " ", "=", " ", 
      RowBox[{"stringer", "[", "rhs", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"reaction", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{"reversible", ",", "\[IndentingNewLine]", " ", 
        RowBox[{"lhs", "<>", "\"\<\[RightArrowLeftArrow]\>\"", "<>", "rhs"}], 
        ",", "\[IndentingNewLine]", " ", 
        RowBox[{"lhs", "<>", "\"\<\[Rule]\>\"", "<>", "rhs"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"reaction", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"reaction", ",", 
        RowBox[{"{", 
         RowBox[{"\"\< \>\"", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"reaction", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"reaction", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<\[Rule]\>\"", "\[Rule]", "\"\< \[Rule]  \>\""}], ",", 
          RowBox[{"\"\<*\>\"", "\[Rule]", " ", "\"\<\>\""}], ",", 
          RowBox[{"\"\<+\>\"", "\[Rule]", " ", "\"\< + \>\""}], ",", " ", 
          RowBox[{
          "\"\<\[RightArrowLeftArrow]\>\"", "\[Rule]", " ", 
           "\"\< \[RightArrowLeftArrow] \>\""}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"debugPrint", "[", 
      RowBox[{
      "dbg", ",", " ", "\"\<reactionForm: return value: \>\"", ",", " ", 
       "reaction"}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "reaction", "]"}], ";"}]}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.411745788544385*^9, 3.411745917159864*^9}, {
  3.41174610921307*^9, 3.4117461571929693`*^9}, {3.411746205746035*^9, 
  3.41174630260308*^9}, {3.411746333913953*^9, 3.411746335302226*^9}, {
  3.411746878427423*^9, 3.41174687891846*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLreaction", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLreaction", "[", "r_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dbg", "=", "False"}], ",", "\[IndentingNewLine]", "opts", ",",
        " ", "reactants", ",", " ", "products", ",", " ", "kineticlaw", ",", 
       "parameters", ",", "reactantStoichiometry", ",", "\[IndentingNewLine]",
        "productODEs", ",", "reactantODEs", ",", "  ", "keepSpecies", ",", 
       " ", "ODEs", ",", "\[IndentingNewLine]", "  ", "species", ",", " ", 
       "theReactionInformation", ",", " ", "eval", ",", " ", "unkSpecies", 
       ",", "reactionName", ",", "last", ",", "first", ",", "pstoic", ",", 
       "rstoic", ",", "rspecies", ",", " ", "pspecies", ",", " ", "reaction", 
       ",", " ", "localparameters", ",", "globalparameters", ",", 
       "shadowedparameters", ",", " ", "rateEquation", ",", " ", 
       "parameterNames", ",", " ", "parameterValues", ",", " ", "cpu0", ",", 
       "cpu1", ",", "cpu2", ",", "cpu3", ",", "cpu4", ",", "cpu5", ",", 
       "cpu6", ",", " ", "cpu7", ",", " ", "cpu8", ",", " ", "cpu9", ",", " ",
        "cpu10", ",", "undefinedLocalParameters", ",", "  ", 
       "getSpeciesReference", ",", " ", "localContext", ",", 
       "localParameterReplacementRules", ",", " ", "variables", ",", " ", 
       "cpudata", ",", " ", "rvars", ",", " ", "pvars", ",", " ", "cpuRecord",
        ",", " ", "reversibleReaction"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"$ReactionCounter", "++"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"$ReactionCounter", ",", " ", "50"}], "]"}], "\[Equal]", 
         "0"}], ",", " ", 
        RowBox[{"cpuSet", "[", "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["cpuRecord",
         FontColor->RGBColor[0, 0, 1]], "[", "n_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{"$SBML$ReportCPU", ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"cpudata", "=", 
              RowBox[{"Prepend", "[", 
               RowBox[{"cpudata", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"n", ",", " ", 
                  RowBox[{"cpuGet", "[", "]"}]}], "}"}]}], " ", "]"}]}], 
             ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", 
      RowBox[{"(*", " ", "initialize", " ", "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"cpudata", "=", 
       RowBox[{"{", "}"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["last",
         FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "x", "]"}], ">", "0"}], ",", 
         RowBox[{"Last", "[", "x", "]"}], ",", "x"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["first",
         FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "x", "]"}], ">", "0"}], ",", " ", 
         RowBox[{"First", "[", "x", "]"}], ",", "x"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["keepSpecies",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"{", 
         RowBox[{"x_", ",", " ", "n_"}], "}"}], "]"}], ":=", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"$SBML$FrozenVariables", ",", " ", "x"}], "]"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "n"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       StyleBox[
        RowBox[{"getSpeciesReference", "[", "x_", " ", "]"}],
        FontColor->RGBColor[0, 0, 1]], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "s", ",", " ", "info", ",", "\[IndentingNewLine]", 
           "stoichiometries", ",", " ", "names", ",", "uniqueNames", ",", " ",
            "denominators", ",", "i", ",", "lens", ",", "\[IndentingNewLine]", 
           RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", "\"\<getSpeciesReference: input\>\"", ",", "x"}], 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"s", "=", "\"\<Indeterminate\>\""}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
           "$SBML$Level$Version", ",", "\[IndentingNewLine]", "\"\<1.1\>\"", 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"s", " ", "=", " ", 
              RowBox[{"Cases", "[", 
               RowBox[{"x", ",", 
                RowBox[{"XMLElement", "[", 
                 RowBox[{"\"\<specieReference\>\"", ",", "___"}], "]"}], ",", 
                "3"}], "]"}]}], ";"}], " ", "\[IndentingNewLine]", ",", 
            "\[IndentingNewLine]", "\"\<1.2\>\"", ",", "\[IndentingNewLine]", 
            
            RowBox[{
             RowBox[{"s", " ", "=", " ", 
              RowBox[{"Join", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{"x", ",", 
                  RowBox[{"XMLElement", "[", 
                   RowBox[{"\"\<specieReference\>\"", ",", "___"}], "]"}], 
                  ",", "3"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"Cases", "[", 
                 RowBox[{"x", ",", 
                  RowBox[{"XMLElement", "[", 
                   RowBox[{"\"\<speciesReference\>\"", ",", "___"}], "]"}], 
                  ",", "3"}], "]"}]}], "]"}]}], ";"}], " ", 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "badSBMLVersionAbort", "[", 
              "\"\<getSBMLreaction::getSpeciesReference:\>\"", "]"}], ";"}]}],
            "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"info", " ", "=", 
           RowBox[{"Map", "[", " ", 
            RowBox[{"extractXMLOptions", ",", "s"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"info", " ", "=", " ", 
           RowBox[{"info", "/.", 
            RowBox[{"{", 
             RowBox[{"\"\<specie\>\"", "\[Rule]", " ", "\"\<species\>\""}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", "\"\<getSpeciesReference: info\>\"", ",", " ", 
            "info"}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"names", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"\"\<species\>\"", "/.", "#"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                "\"\<species\>\"", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
                "}"}]}], "&"}], ",", " ", "info"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"names", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{"removeUnderscore", ",", " ", "names"}], "]"}]}], ";", 
          " ", "\[IndentingNewLine]", 
          RowBox[{"names", " ", "=", " ", 
           RowBox[{"contextify", "[", "names", "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"names", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{"Symbol", ",", " ", "names"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"denominators", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"\"\<denominator\>\"", "/.", "#"}], "/.", 
               RowBox[{"{", 
                RowBox[{"\"\<denominator\>\"", "\[Rule]", " ", "\"\<1\>\""}], 
                "}"}]}], "&"}], ",", " ", "info"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"denominators", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"ToExpression", ",", "denominators"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"stoichiometries", "=", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"\"\<stoichiometry\>\"", "/.", "#"}], ")"}], "/.", 
               RowBox[{"{", 
                RowBox[{
                "\"\<stoichiometry\>\"", "\[Rule]", " ", "\"\<1\>\""}], 
                "}"}]}], "&"}], ",", " ", "info"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"stoichiometries", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"ToExpression", ",", "stoichiometries"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"printWarning", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "denominators", "]"}], "\[NotEqual]", " ", 
             RowBox[{"Length", "[", "stoichiometries", "]"}]}], ",", " ", 
            RowBox[{
            "\"\<Program Bug: Incompatible lengths in denominators and \
stoichiometries, \>\"", "<>", 
             RowBox[{"ToString", "[", "denominators", "]"}], "<>", 
             RowBox[{"ToString", "[", "stoichiometries", "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"stoichiometries", " ", "=", " ", 
           RowBox[{"stoichiometries", "/", "denominators"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", 
            "\"\<getSpeciesReference: \
{names,stoichiometries/denominators}\>\"", ",", " ", 
            RowBox[{"{", 
             RowBox[{"names", ",", " ", "stoichiometries"}], "}"}]}], "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"uniqueNames", " ", "=", " ", 
           RowBox[{"Complement", "[", 
            RowBox[{
             RowBox[{"Union", "[", "names", "]"}], ",", 
             RowBox[{"{", "\"\<Indeterminate\>\"", "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox["  ",
           FontWeight->"Plain"], "\[IndentingNewLine]", 
          RowBox[{"i", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"Position", "[", 
                RowBox[{"names", ",", "#"}], "]"}], "]"}], "&"}], ",", " ", 
             "uniqueNames"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"lens", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{"Length", ",", "i"}], "]"}]}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"printWarning", "[", 
              RowBox[{
               RowBox[{"#1", ">", "1"}], ",", " ", 
               RowBox[{
               "\"\<Duplicate <speciesReference> tags \>\"", "<>", 
                "\"\< for '\>\"", "<>", 
                RowBox[{"ToString", "[", "#2", "]"}], "<>", 
                "\"\<' on same side of reaction '\>\"", "<>", 
                RowBox[{"ToString", "[", "reactionName", "]"}], "<>", 
                "\"\<'.  Stoichiometry is set to the sum of \
(stoichimetry/denominator) over all the duplicate references.  \>\""}]}], 
              "]"}], "&"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"lens", ",", "uniqueNames"}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", "\"\<getSpeciesReference: {uniqueNames,i,lens}\>\"", 
            ",", " ", 
            RowBox[{"{", 
             RowBox[{"uniqueNames", ",", "i", ",", "lens"}], "}"}]}], "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"stoichiometries", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Apply", "[", 
               RowBox[{"Plus", ",", 
                RowBox[{"stoichiometries", "[", 
                 RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "&"}], ",", " ", 
             "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", 
            "\"\<getSpeciesReference: {uniqueNames,stoichiometries}\>\"", ",",
             " ", 
            RowBox[{"{", 
             RowBox[{"uniqueNames", ",", "stoichiometries"}], "}"}]}], "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", "\"\<getSpeciesReference: output\>\"", ",", " ", "s"}],
            "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", " ", "[", 
           RowBox[{"{", 
            RowBox[{"uniqueNames", ",", "stoichiometries"}], "}"}], "]"}], 
          ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "getSpeciesReference"}], "*)"}],
       FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "1", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
      RowBox[{"cpuSet", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"opts", " ", "=", " ", 
       RowBox[{"extractXMLOptions", "[", "r", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reactionName", " ", "=", " ", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "/.", "opts"}], "/.", 
        RowBox[{"{", 
         RowBox[{"\"\<name\>\"", "\[Rule]", 
          RowBox[{"\"\<UnNamedReaction$\>\"", "<>", 
           RowBox[{"ToString", "[", "$ReactionCounter", "]"}]}]}], "}"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"reactionName", "=", 
       RowBox[{"removeUnderscore", "[", "reactionName", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"reversibleReaction", " ", "=", " ", 
       RowBox[{"ToUpperCase", "[", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"\"\<reversible\>\"", "/.", "opts"}], "/.", 
          RowBox[{"{", 
           RowBox[{"\"\<reversible\>\"", "\[Rule]", " ", "\"\<False\>\""}], 
           "}"}]}], "]"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"reversibleReaction", "=", " ", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "reversibleReaction", ",", "\[IndentingNewLine]", "\"\<TRUE\>\"", ",",
          " ", "True", ",", "\"\<FALSE\>\"", ",", "False", ",", "_", ",", " ",
          "False"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "define", " ", "a", " ", "local", " ", "context", " ", "for", " ", 
         "reaction", " ", "parameters"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"$SBML$Context", "==", "\"\<None\>\""}], " ", "\[Or]", 
         RowBox[{"$SBML$Context", "\[Equal]", " ", "\"\<None`\>\""}]}], ",", 
        " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"localContext", "=", "$SBML$Context"}], ";"}], 
        "\[IndentingNewLine]", ",", " ", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"localContext", "=", "$SBML$Context"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{"$SBML$Context", ",", 
              RowBox[{"-", "1"}]}], "]"}], "\[NotEqual]", " ", "\"\<`\>\""}], 
           ",", " ", 
           RowBox[{"localContext", "=", 
            RowBox[{"localContext", "<>", "\"\<`\>\""}]}]}], "]"}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"localContext", "=", 
          RowBox[{"localContext", "<>", "reactionName", "<>", "\"\<`\>\""}]}],
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "2", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"reactants", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"r", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfReactants\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"reactants", ",", " ", "rstoic"}], "}"}], "  ", "=", " ", 
       RowBox[{"getSpeciesReference", "[", "reactants", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", 
        "\"\<getSBMLReaction: reactants returned from \
getSpeciesReference\>\"", ",", "reactants"}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "3", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"products", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"r", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfProducts\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"products", ",", " ", "pstoic"}], "}"}], "  ", "=", " ", 
       RowBox[{"getSpeciesReference", "[", "products", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "4", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"kineticLaw", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"r", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<kineticLaw\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "kineticLaw", "]"}], "<", "1"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"kineticLaw", "=", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"{", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\"\<kineticLaw\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"\"\<formula\>\"", "\[Rule]", "\"\<Indeterminate\>\""}],
               "}"}], ",", 
             RowBox[{"{", "}"}]}], "]"}], "}"}],
          FontWeight->"Bold",
          FontColor->RGBColor[0.500008, 0.164691, 0.164691]]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLreaction:: kineticLaw in SBML\>\"", ",", 
        "kineticLaw"}], " ", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"parameters", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"kineticLaw", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfParameters\>\"", ",", "___"}], "]"}], ",", "3"}],
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"parameters", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"parameters", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<parameter\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"parameters", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"extractXMLOptions", ",", "parameters"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "5", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"parameterNames", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"removeUnderscore", "[", 
           RowBox[{"(", 
            RowBox[{"\"\<name\>\"", "/.", "#"}], ")"}], "]"}], "&"}], ",", 
         "parameters"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"localParameterReplacementRules", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"contextify", ",", " ", "parameterNames"}], "]"}]}], ";"}], 
       " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"localParameterReplacementRules", "=", 
       RowBox[{"contextify", "[", "parameterNames", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "5.2", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"parameterNames", " ", "has", " ", "the", " ", "form", " ", 
         RowBox[{"{", 
          RowBox[{"model`reaction`k1", ",", "..."}], "}"}]}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      RowBox[{"parameterNames", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"contextify", "[", 
           RowBox[{"#", ",", "localContext"}], "]"}], "&"}], ",", 
         "parameterNames"}], "]"}]}], ";", "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "localParameterReplacementRules", " ", "has", " ", "rules", " ", 
          "of", " ", "the", " ", "form", " ", "model`k"}], "\[Rule]", 
         RowBox[{"model`reaction`k", ":", " ", 
          RowBox[{
          "These", " ", "rules", " ", "replace", " ", "the", " ", "NAMES", 
           " ", "of", " ", "the", " ", "parameters", " ", "with", " ", 
           "NAMES", " ", "in", " ", "a", " ", "local", " ", 
           RowBox[{"(", 
            RowBox[{"to", " ", "the", " ", "individual", " ", "reaction"}], 
            ")"}], " ", 
           RowBox[{"context", ".", " ", "THEY"}], " ", "DO", " ", "NOT", " ", 
           "REPLACE", " ", "THE", " ", 
           RowBox[{"VALUES", "!!"}]}]}]}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "5.3", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"localParameterReplacementRules", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", "#1", "]"}], "<>", "\"\<\[Rule]\>\"", "<>", 
           RowBox[{"ToString", "[", "#2", "]"}]}], "&"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"{", " ", 
          RowBox[{
          "localParameterReplacementRules", ",", "  ", "parameterNames"}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"localParameterReplacementRules", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"ToExpression", ",", " ", "localParameterReplacementRules"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "5.5", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[1, 0, 1]], 
      RowBox[{
       StyleBox["(*",
        FontColor->RGBColor[0, 1, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 1, 1]], 
       StyleBox[
        RowBox[{
        "Why", " ", "would", " ", "this", " ", "next", " ", "line", " ", "be",
          " ", "necessary", " ", "if", " ", "$SBML$evaluateParameters", " ", 
         "is", " ", "False", "??"}],
        FontColor->RGBColor[1, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 1, 1]], 
       StyleBox["*)",
        FontColor->RGBColor[0, 1, 1]]}], 
      StyleBox[" ",
       FontColor->RGBColor[1, 0, 1]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"\[Not]", "$SBML$evaluateParameters"}], ",", " ", 
          RowBox[{"defineParameter", "[", "parameterNames", "]"}]}], "]"}], 
        ";"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
      RowBox[{"defineParameter", "[", "parameterNames", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "6", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"parameterValues", " ", "=", " ", 
       RowBox[{"Map", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"fromEForm", "[", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\"\<value\>\"", "/.", "#"}], "/.", 
             RowBox[{"{", 
              RowBox[{
              "\"\<value\>\"", "\[Rule]", " ", "$SBML$IndeterminateValue"}], 
              "}"}]}], ")"}], "]"}], "&"}], ",", "parameters"}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"parameterValues", "=", 
       RowBox[{"makeString", "/@", "parameterValues"}]}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$NLocalParameters", " ", "+=", " ", 
       RowBox[{"Length", "[", "parameters", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"definef", "[", 
          RowBox[{"SBMLIC", ",", "#1", ",", "#2"}], "]"}], "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"parameterNames", ",", " ", "parameterValues"}], "}"}]}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "7", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "check", " ", "for", " ", "undefined", " ", "local", " ", 
         "parameters"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"undefinedLocalParameters", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"parameterNames", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"SBMLIC", "[", "#", "]"}], "\[Equal]", 
           "\[IndentingNewLine]", 
           RowBox[{"makeString", "[", "$SBML$IndeterminateValue", "]"}]}], 
          "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "undefinedLocalParameters", "]"}], ">", "0"}],
         ",", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SBMLUndefinedConstants", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{
           "SBMLUndefinedConstants", ",", " ", "undefinedLocalParameters"}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
          "$SBML$UseDefaultParameterValue", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"definef", "[", 
                RowBox[{
                "SBMLIC", ",", "#", ",", "$SBML$DefaultParameterValue"}], 
                "]"}], "&"}], ",", " ", "undefinedLocalParameters"}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "8", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"\[Not]", "$SBML$evaluateParameters"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"addReplacementRule", "[", "parameterNames", "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "8.2", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"kineticLaw", " ", "=", " ", 
       RowBox[{"Apply", "[", 
        RowBox[{"extractXMLOptions", ",", "kineticLaw"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "8.3", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"kineticLaw", " ", "=", " ", 
       RowBox[{"removeUnderscore", "[", 
        RowBox[{"\"\<formula\>\"", "/.", "kineticLaw"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "9", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLreaction::reactionName \>\"", ",", 
           "reactionName"}], "]"}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<getSBMLreaction:: opts\>\"", ",", "opts"}],
           " ", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLreaction:: reactants\>\"", ",", 
           "reactants"}], " ", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLreaction:: rstoic\>\"", ",", "rstoic"}], 
          " ", "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLreaction:: products\>\"", ",", "products"}],
           " ", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLreaction:: pstoic\>\"", ",", "pstoic"}], 
          " ", "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLreaction:: kineticLaw\>\"", ",", 
           "kineticLaw"}], " ", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLreaction:: parameters\>\"", ",", 
           "parameters"}], " ", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[1, 0, 0]], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
        "here", " ", "is", " ", "the", " ", "big", " ", "cpu", " ", "hog"}], 
        " ", "*)"}],
       FontColor->RGBColor[1, 0, 0]], 
      StyleBox[" ",
       FontColor->RGBColor[1, 0, 0]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[1, 0, 0]], 
      RowBox[{
       StyleBox["(*",
        FontColor->RGBColor[1, 0, 0]], 
       StyleBox["\[IndentingNewLine]",
        FontColor->RGBColor[1, 0, 0]], 
       StyleBox[
        RowBox[{
         RowBox[{"rateEquation", "=", 
          RowBox[{
           RowBox[{"ToExpression", "[", "kineticLaw", "]"}], "/.", 
           "$Species2FunctionRules"}]}], ";"}],
        FontColor->RGBColor[1, 0, 1]], 
       StyleBox["\[IndentingNewLine]",
        FontColor->RGBColor[1, 0, 1]], 
       StyleBox["*)",
        FontColor->RGBColor[1, 0, 1]]}], 
      StyleBox[" ",
       FontColor->RGBColor[1, 0, 1]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"rateEquation", " ", "=", " ", 
       RowBox[{"translateFormula", "[", "kineticLaw", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "10", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"rateEquation", " ", "=", " ", 
       RowBox[{
        RowBox[{"ToExpression", "[", "rateEquation", "]"}], "/.", 
        "localParameterReplacementRules"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "10.5", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$evaluateParameters", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"rateEquation", " ", "=", 
          RowBox[{"evaluateConstantValues", "[", "rateEquation", "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "11", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLreaction:: rateEquation(3)\>\"", ",", 
        "rateEquation"}], " ", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"cpu5", "=", 
       RowBox[{"TimeUsed", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"variables", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"products", ",", " ", "pstoic"}], "}"}], "//", 
        "Transpose"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"variables", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"variables", ",", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"(", 
              RowBox[{"MemberQ", "[", 
               RowBox[{"$SBML$FrozenVariables", ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ")"}]}], "&"}]}], 
          "]"}]}], ";"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"variables", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"variables", ",", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{"SBMLParameterQ", "[", 
             RowBox[{"ToString", "[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ")"}]}], "&"}]}],
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "variables", "]"}], ">", "0"}], ",", " ", 
        RowBox[{"variables", "=", 
         RowBox[{"Transpose", "[", "variables", "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "12", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"productODEs", "=", 
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "pstoic", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "'"}], "[", "Global`t", "]"}], "\[Equal]", 
              RowBox[{"#2", "*", 
               RowBox[{"(", "rateEquation", ")"}]}]}], ")"}], "&"}], ",", " ",
            "variables"}], "]"}], " ", ",", " ", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"variables", " ", "=", "  ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"reactants", ",", "rstoic"}], "}"}], "//", "Transpose"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"variables", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"variables", ",", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"(", 
              RowBox[{"MemberQ", "[", 
               RowBox[{"$SBML$FrozenVariables", ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ")"}]}], "&"}]}], 
          "]"}]}], ";"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"variables", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"variables", ",", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{"SBMLParameterQ", "[", 
             RowBox[{"ToString", "[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ")"}]}], "&"}]}],
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "variables", "]"}], ">", "0"}], ",", " ", 
        RowBox[{"variables", "=", 
         RowBox[{"Transpose", "[", "variables", "]"}]}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"reactantODEs", "=", 
       RowBox[{"If", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "rstoic", "]"}], ">", "0"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "'"}], "[", "Global`t", "]"}], "\[Equal]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"-", "1"}], ")"}], "*", "#2", "*", 
               RowBox[{"(", "rateEquation", ")"}]}]}], ")"}], "&"}], ",", 
           "variables"}], "]"}], " ", ",", " ", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ODEs", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{"reactantODEs", ",", " ", "productODEs"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "13", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"species", " ", "=", 
         RowBox[{"Complement", "[", " ", 
          RowBox[{
           RowBox[{"Union", "[", 
            RowBox[{"Join", "[", 
             RowBox[{"reactants", ",", " ", "products"}], "]"}], "]"}], ",", 
           "$SBML$FrozenVariables"}], "]"}]}], ";"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"species", " ", "=", 
       RowBox[{"Union", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"reactants", ",", " ", "products"}], "]"}], "]"}]}], ";", 
      " ", "\[IndentingNewLine]", 
      RowBox[{"species", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"species", ",", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\[Not]", 
            RowBox[{"SBMLParameterQ", "[", "#", "]"}]}], ")"}], "&"}]}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "14", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"$SBML$evaluateParameters", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"printWarning", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", "rateEquation", "}"}], ",", "Infinity"}], "]"}], 
            "\[Or]", " ", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", "rateEquation", "}"}], ",", "ComplexInfinity"}], 
             "]"}], " ", "\[Or]", " ", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"{", "rateEquation", "}"}], ",", "Indeterminate"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
           "\"\<Indeterminate form (0/0, 1/0, Infinity) occurs in reaction \
'\>\"", "<>", "reactionName", "<>", 
            "\"\<'; unexpected results could occur. This model should be read \
with evaluateParameters\[Rule]False. \>\""}]}], " ", "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}],
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "15", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"reaction", " ", "=", " ", 
       RowBox[{"reactionForm", "[", 
        RowBox[{
        "reactants", ",", " ", "rstoic", ",", "products", ",", "pstoic", ",", 
         "reversibleReaction"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"reaction", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"reactionName", "\[Rule]", " ", "reaction"}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "16", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"cpuSet", "[", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$ReactionODEs", "[", "$ReactionCounter", "]"}], "=", "ODEs"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$ReactionSpecies", "[", "$ReactionCounter", "]"}], "=", 
       "species"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$ReactionParameters", "[", "$ReactionCounter", "]"}], "=", 
       " ", 
       RowBox[{"parameterNames", "//", "ToExpression"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$Reactions", "[", "$ReactionCounter", "]"}], "=", 
       "reaction"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"$ReactionLaws", "[", "$ReactionCounter", "]"}], "=", 
       "rateEquation"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"cpuRecord", "[", "17", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[";",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"If", "[", 
       RowBox[{
       "$SBML$ReportCPU", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"cpudata", " ", "=", " ", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Reverse", "[", "cpudata", "]"}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "reactionCPUProfile", "]"}], "<", "1"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"reactionCPUProfile", " ", "=", " ", "cpudata"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"aggregatereactionCPUProfile", " ", "=", " ", "cpudata"}],
             ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"aggregatereactionCPUProfile", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{
              "aggregatereactionCPUProfile", ",", " ", "\[IndentingNewLine]", 
               
               RowBox[{
                RowBox[{"Last", "[", "cpudata", "]"}], " ", "+", " ", 
                RowBox[{"Last", "[", "aggregatereactionCPUProfile", "]"}]}]}],
               "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"reactionCPUProfile", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"reactionCPUProfile", ",", " ", 
               RowBox[{"Last", "[", "cpudata", "]"}]}], "]"}]}], ";"}]}], " ",
           "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<>>>getReaction (\>\"", "<>", 
            RowBox[{"ToString", "[", "$ReactionCounter", "]"}], "<>", 
            "\"\<)\\n\>\""}], ",", "\[IndentingNewLine]", 
           RowBox[{"TableForm", "[", "cpudata", "]"}]}], "]"}], ";"}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", "]"}], ";", " ",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"$ReactionCounter", ",", " ", "50"}], "]"}], "\[Equal]", 
         "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"cpuReport", "[", 
          RowBox[{"\"\< reaction \>\"", "<>", 
           RowBox[{"ToString", "[", "$ReactionCounter", "]"}], "<>", 
           "\"\<, name = \>\"", "<>", "reactionName"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.389967980815118*^9, 3.389967994353541*^9}, {
  3.3899680404472313`*^9, 3.389968041421692*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Reaction CPUdepugAnalysisFunctions", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ReactionCPUsummary", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"r", ",", "h"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"r", "=", "MathSBML`Private`reactionCPUProfile"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"h", " ", "=", " ", 
       RowBox[{"First", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"Rest", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"Transpose", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"Plus", ",", "#"}], "]"}], "&"}], ",", " ", "r"}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"r", "=", 
       RowBox[{"{", 
        RowBox[{"h", ",", "r"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"TableForm", "[", "r", "]"}], "]"}]}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ReactionCPUplot", "[", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"r", ",", "h", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"r", "=", "MathSBML`Private`reactionCPUProfile"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"h", " ", "=", " ", 
      RowBox[{"First", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"r", " ", "=", " ", 
      RowBox[{"Rest", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"r", " ", "=", " ", 
      RowBox[{"Transpose", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"p", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ListPlot", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"PlotLabel", "\[Rule]", " ", "#2"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", " ", "Identity"}]}], "]"}], 
         "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"r", ",", "h"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"p", " ", "=", " ", 
      RowBox[{"Partition", "[", 
       RowBox[{"p", ",", " ", "5", ",", "5", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Show", "[", 
      RowBox[{"GraphicsArray", "[", "p", "]"}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"r", "=", "MathSBML`Private`aggregatereactionCPUProfile"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"h", " ", "=", " ", 
      RowBox[{"First", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"r", " ", "=", " ", 
      RowBox[{"Rest", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"r", " ", "=", " ", 
      RowBox[{"Transpose", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"p", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ListPlot", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"PlotLabel", "\[Rule]", " ", "#2"}], ",", 
           RowBox[{"DisplayFunction", "\[Rule]", " ", "Identity"}], ",", 
           RowBox[{"PlotJoined", "\[Rule]", " ", "True"}]}], "]"}], "&"}], 
        ",", " ", 
        RowBox[{"{", 
         RowBox[{"r", ",", "h"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"p", " ", "=", " ", 
      RowBox[{"Partition", "[", 
       RowBox[{"p", ",", " ", "5", ",", "5", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Show", "[", 
      RowBox[{"GraphicsArray", "[", "p", "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["badSBMLVersionAbort", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"badSBMLVersionAbort", "[", "msg_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
       "msg", ",", " ", "\"\< Unknown or unsupported SBML Version: \>\"", ",",
         "$SBML$Level$Version"}], "]"}], ";", 
      RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLparameters", "Subsection"],

Cell[BoxData["\<\"getSBMLparameters[m] returns a list of the global \
parameters found in the SBML model m. The return value is {\!\(\* StyleBox[\\\
\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"parameters\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\
\",\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\" \
\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"parameter\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"rules\\\
\",\\nFontSlant->\\\"Italic\\\"]\)} where \!\(\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"parameters\\\",\\nFontSlant->\\\"Italic\\\"]\) is a list of the \
parameter names and\!\(\* StyleBox[\\\" \
\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"parameter\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"rules\\\
\",\\nFontSlant->\\\"Italic\\\"]\) is a list of replacement rules \
{name->value,...}\"\>"], "Print",
 CellTags->"Info3256286500-5179116"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLparameters", "[", "opt___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dbg", ",", "p", ",", "names", ",", "values", ",", " ", "units", ",", 
       "undefinedParameters", ",", "unitsNotOK", ",", "derivedUnits", ",", 
       "tbl"}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dbg", "=", "$SBML$debug"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"$SBML$Models", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfParameters\>\"", ",", "___"}], "]"}], ",", "3"}],
         "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"p", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<parameter\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"extractXMLOptions", ",", "p"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLparameters:: p:: \>\"", ",", "p"}], "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"names", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<name\>\"", "/.", "#"}], "&"}], ",", " ", "p"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLparameters:: names:: \>\"", ",", "names"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"values", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getAttributeValue", "[", 
           RowBox[{"\"\<name\>\"", ",", "#", ",", "\"\<value\>\"", ",", "p"}],
            "]"}], "&"}], ",", "names"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"values", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"values", "/.", 
         RowBox[{"{", 
          RowBox[{
          "\"\<value\>\"", "\[Rule]", " ", "$SBML$IndeterminateValue"}], " ", 
          "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLparameters:: values:: \>\"", ",", "values"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"units", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"getAttributeValue", "[", 
           RowBox[{"\"\<name\>\"", ",", "#", ",", "\"\<units\>\"", ",", "p"}],
            "]"}], "&"}], ",", "names"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"units", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"units", "/.", 
         RowBox[{"{", 
          RowBox[{
          "\"\<units\>\"", "\[Rule]", " ", "$SBML$IndeterminateValue"}], 
          "}"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"units", "=", 
       RowBox[{"unitsContextify", "/@", "units"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLparameters:: units:: \>\"", ",", "units"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"unitsNotOK", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"units", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"unitDefinedQ", "[", "#", "]"}]}], ")"}], "&"}]}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "unitsNotOK", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{"\"\<Warning: \>\"", "//", "boldOrange"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<Invalid units specified in <parameter> definition: \>\"", "//",
             "boldBlack"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"list2CommaSeparatedString", "[", "unitsNotOK", "]"}], "//",
             "boldRed"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$NLocalParameters", " ", "=", "0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$NGlobalParameters", " ", "=", " ", 
       RowBox[{"Length", "[", "names", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SBMLGlobalParameters", "=", "names"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"values", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"fromEForm", ",", " ", "values"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"names", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"contextify", "[", 
           RowBox[{"removeUnderscore", "[", "#", "]"}], "]"}], "&"}], ",", 
         "names"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"defineParameter", "[", "names", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"saveVerboseData", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"derivedUnits", "=", 
          RowBox[{"units", "/.", "$SBML$UnitRules"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"$SBML$verboseContext", ",", " ", "\[IndentingNewLine]", 
           RowBox[{"tbl", " ", "=", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
              "names", ",", " ", "values", ",", " ", "units", " ", ",", 
               "derivedUnits"}], "}"}], "]"}]}], ",", " ", 
           RowBox[{"tbl", " ", "=", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"names", "//", "decontextify"}], ",", " ", "values", 
               ",", " ", "units", " ", ",", "derivedUnits"}], "}"}], 
             "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"verboseSave", "[", 
          RowBox[{
          "\"\<Global Parameters\>\"", ",", " ", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Name\>\"", ",", "\"\<Value\>\"", ",", " ", "\"\<Units\>\"", 
             ",", "\"\<Derived Units\>\""}], "}"}], ",", " ", 
           "\[IndentingNewLine]", "tbl"}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLparameters:: names:: \>\"", ",", "names"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLparameters:: values:: \>\"", ",", "values"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"2.7", ".0", ".3"}], " ", "-", " ", 
        RowBox[{
        "added", " ", "InputForm", " ", "so", " ", "that", " ", "this", " ", 
         "works", " ", "with", " ", "e", " ", "format", " ", "also"}]}], " ", 
       "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"definef", "[", 
          RowBox[{"SBMLIC", ",", "#1", ",", "#2"}], "]"}], "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"names", ",", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", 
              RowBox[{"InputForm", "[", "#", "]"}], "]"}], "&"}], ",", 
            "values"}], "]"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"check", " ", "for", " ", "missing", " ", "values"}], " ", 
        "*)"}],
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"SBMLUndefinedConstants", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"SBMLConstants", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"SBMLIC", "[", "#", "]"}], "\[Equal]", 
           RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], 
          "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "SBMLUndefinedConstants", "]"}], ">", "0"}], 
        ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
          "$SBML$UseDefaultParameterValue", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"definef", "[", 
                RowBox[{
                "SBMLIC", ",", "#", ",", "$SBML$DefaultParameterValue"}], 
                "]"}], "&"}], ",", " ", "SBMLUndefinedConstants"}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{"addReplacementRule", ",", "names"}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLparameters:: SBMLReplacementRules:: \>\"", ",",
         "SBMLReplacementRules"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"names", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"ToExpression", ",", "names"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$UnitAssociations", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"$SBML$UnitAssociations", ",", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"ToExpression", "[", "#1", "]"}], "\[Rule]", " ", 
             RowBox[{"ToExpression", "[", "#2", "]"}]}], "&"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"names", ",", "units"}], "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4027735545114202`*^9, 3.402773557569105*^9}, {
  3.4027736399322653`*^9, 3.402773668320125*^9}, {3.402773770846936*^9, 
  3.40277381789152*^9}, {3.402773865033082*^9, 3.402773871693606*^9}, {
  3.402774107513981*^9, 3.402774129691412*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLrules", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLrules", "[", "opt___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"dbg", "=", "False"}], ",", "ruletable", ",", "r", ",", 
       StyleBox["interpretRule",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["\[IndentingNewLine]",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["getRuleEquation",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["addODE",
        FontColor->RGBColor[0, 0, 1]]}], 
      StyleBox["\[IndentingNewLine]",
       FontColor->RGBColor[0, 0, 1]], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"$SBML$Models", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfRules\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<getSBMLrules: r(1)\>\"", ",", "r"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$Algebraic$Rules", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["addODE",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"ODE_", "?", "StringQ"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"$SBML$ODES", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"$SBML$ODES", ",", 
             RowBox[{"ToExpression", "[", "ODE", "]"}]}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["addODE",
         FontColor->RGBColor[0, 0, 1]], "[", "x___", "]"}], ":=", " ", 
       RowBox[{"printWarning", "[", 
        RowBox[{
        "\"\<addODE: program Error: argument must be a string: \\\"\>\"", "<>", 
         RowBox[{"ToString", "[", "x", "]"}], "<>", "\"\<\\\"\>\""}], "]"}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getRuleEquation",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"name_", ",", " ", "opts_"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", "rhs", ",", "ruletype", ",", "lhs", ",", "eqn"}], 
          "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"v", "=", 
           RowBox[{
            RowBox[{"name", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"name", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"v", "=", " ", 
           RowBox[{"removeUnderscore", "[", "v", "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"v", "=", 
           RowBox[{"contextify", "[", "v", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"rhs", " ", "=", " ", 
           RowBox[{
            RowBox[{"\"\<formula\>\"", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{
             "\"\<formula\>\"", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"rhs", " ", "=", " ", 
           RowBox[{"removeUnderscore", "[", "rhs", "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"rhs", " ", "=", " ", 
           RowBox[{"translateFormula", "[", "rhs", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"rhs", " ", "=", " ", 
           RowBox[{"evaluateReplacementRules", "[", "rhs", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ruletype", "=", 
           RowBox[{
            RowBox[{"\"\<type\>\"", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{"\"\<type\>\"", "\[Rule]", " ", "\"\<scalar\>\""}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{"dbg", ",", "\"\<getRuleEquation: v:\>\"", ",", " ", "v"}],
            "]"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", "\"\<getRuleEquation: ruletype:\>\"", ",", " ", 
            "ruletype"}], "]"}], ";", " ", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ruletype", "==", "\"\<rate\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"SBMLParameterQ", "[", "v", "]"}], ",", " ", 
               RowBox[{"removeReplacementRule", "[", "v", "]"}]}], "]"}], ";",
              "\[IndentingNewLine]", 
             RowBox[{"defineVariable", "[", "v", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"lhs", "=", 
              RowBox[{"functionate", "[", 
               RowBox[{"v", "<>", "\"\<'\>\""}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"eqn", " ", "=", " ", 
              RowBox[{"lhs", "<>", "\"\<==\>\"", "<>", "rhs"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"addODE", "[", "eqn", "]"}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", " ", 
              RowBox[{
              "otherwise", " ", "assume", " ", "a", " ", "\"\<scalar\>\""}], 
              " ", "*)"}],
             FontWeight->"Plain"], 
            StyleBox[" ",
             FontWeight->"Plain"], 
            StyleBox["\[IndentingNewLine]",
             FontWeight->"Plain"], 
            RowBox[{
             RowBox[{"printWarning", "[", 
              RowBox[{
               RowBox[{"ruletype", "\[NotEqual]", " ", "\"\<scalar\>\""}], 
               ",", 
               RowBox[{"\"\<invalid rule type =\\\"\>\"", "<>", 
                RowBox[{"ToString", "[", "ruletype", "]"}], "<>", 
                "\"\<\\\" treated as \\\"scalar\\\".\>\""}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"defineParameter", "[", "v", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"SBMLIC", "[", "v", "]"}], "=", "rhs"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"addReplacementRule", "[", "v", "]"}], ";", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"lhs", " ", "=", " ", "v"}], ";", "\[IndentingNewLine]", 
             
             RowBox[{"eqn", " ", "=", " ", 
              RowBox[{"lhs", "<>", "\"\<\[Rule]\>\"", "<>", " ", "rhs"}]}], 
             ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"debugPrint", "[", 
              RowBox[{
              "dbg", ",", "\"\<getRuleEquation: SBMLReplacementRules:\>\"", 
               ",", " ", "SBMLReplacementRules"}], "]"}], ";"}]}], " ", 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"v", ",", "eqn"}], "}"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", "of", " ", 
        StyleBox["getRuleEquation",
         FontColor->RGBColor[0, 0, 1]]}], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], "*)"}], " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["interpretRule",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"\"\<parameterRule\>\"", "\[Rule]", " ", "opts_"}], "]"}], ":=",
        " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", "eqn"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v", ",", "eqn"}], "}"}], "=", 
           RowBox[{"getRuleEquation", "[", 
            RowBox[{"\"\<name\>\"", ",", "opts"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"v", ",", "\"\<parameterRule\>\"", ",", "eqn"}], "}"}], 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["interpretRule",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"\"\<specieConcentrationRule\>\"", "\[Rule]", " ", "opts_"}], 
        "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", " ", "eqn"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v", ",", "eqn"}], "}"}], "=", 
           RowBox[{"getRuleEquation", "[", 
            RowBox[{"\"\<specie\>\"", ",", "opts"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"v", ",", "\"\<specieConcentrationRule\>\"", ",", "eqn"}],
             "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["interpretRule",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"\"\<speciesConcentrationRule\>\"", "\[Rule]", " ", "opts_"}],
         "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", "eqn"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v", ",", "eqn"}], "}"}], "=", 
           RowBox[{"getRuleEquation", "[", 
            RowBox[{"\"\<species\>\"", ",", "opts"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "v", ",", "\"\<speciesConcentrationRule\>\"", ",", "eqn"}], "}"}],
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["interpretRule",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"\"\<compartmentVolumeRule\>\"", "\[Rule]", " ", "opts_"}], 
        "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", "eqn"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"v", ",", "eqn"}], "}"}], "=", 
           RowBox[{"getRuleEquation", "[", 
            RowBox[{"\"\<compartment\>\"", ",", "opts"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"v", ",", "\"\<compartmentVolumeRule\>\"", ",", "eqn"}], 
            "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["interpretRule",
         FontColor->RGBColor[0, 0, 1]], "[", 
        RowBox[{"\"\<algebraicRule\>\"", "\[Rule]", " ", "opts_"}], "]"}], ":=",
        " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "eqn", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"eqn", " ", "=", " ", 
           RowBox[{
            RowBox[{"\"\<formula\>\"", "/.", "opts"}], "/.", 
            RowBox[{"{", 
             RowBox[{
             "\"\<formula\>\"", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"eqn", " ", "=", " ", 
           RowBox[{"removeUnderscore", "[", "eqn", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"eqn", " ", "=", 
           RowBox[{"\"\<0==\>\"", "<>", 
            RowBox[{"translateFormula", "[", "eqn", "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"$SBML$Algebraic$Rules", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"$SBML$Algebraic$Rules", ",", 
             RowBox[{"ToExpression", "[", "eqn", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "\"\<** None **\>\"", ",", " ", "\"\<algebraicRule\>\"", ",", 
             "eqn"}], "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["interpretRule",
         FontColor->RGBColor[0, 0, 1]], "[", "unknown___", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{
          RowBox[{"printWarning", "[", 
           RowBox[{
           "\"\<interpretRule: programError: unknown or invalid rule format \
\>\"", "<>", 
            RowBox[{"ToString", "[", "unknown", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Indeterminate\>\"", ",", "\"\<Indeterminate\>\"", ",", 
             "\"\<Indeterminate\>\""}], "}"}], "]"}], ";"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "r", "]"}], ">", "0"}], ",", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "for", " ", "multiple", " ", "sets", " ", "of", " ", 
           "rules"}], " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        RowBox[{
         RowBox[{"If", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "r", "]"}], ">", "1"}], ",", 
           RowBox[{
            RowBox[{"printWarning", "[", " ", 
             RowBox[{
             "\"\<getSBMLrules: Only one listOfRules tag is permitted; \>\"", 
              "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"Length", "[", "r", "]"}], "]"}], "<>", 
              "\"\< sets were found. Additional sets ignored.\>\""}], "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "processs", " ", "the", " ", "first", " ", "or", " ", "only", " ", 
            "set", " ", "of", " ", "rules"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         RowBox[{"r", "=", " ", 
          RowBox[{"First", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<getSBMLrules: r(1.5)\>\"", ",", "r"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"r", "=", 
          RowBox[{"extractXMLSubElements", "[", "r", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<getSBMLrules: r(2)\>\"", ",", "r"}], "]"}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"r", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"getXMLElement", ",", "r"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<getSBMLrules: r(3)\>\"", ",", "r"}], "]"}],
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"r", "  ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"interpretRule", ",", "r"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{"dbg", ",", "\"\<getSBMLrules: r(4)\>\"", ",", "r"}], "]"}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"$SBML$NRules", " ", "=", " ", 
          RowBox[{"Length", "[", "r", "]"}]}], ";"}], "\[IndentingNewLine]", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$SBML$NRules", " ", "=", " ", "0"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLrules: SBMLReplacementRules\>\"", ",", 
        "SBMLReplacementRules"}], "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"saveVerboseData", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "$SBML$verboseContext"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "r", "]"}], ">", "0"}], ",", " ", 
              RowBox[{
               RowBox[{"r", " ", "=", " ", 
                RowBox[{"Transpose", "[", "r", "]"}]}], ";", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"r", " ", "=", " ", 
                RowBox[{"ReplacePart", "[", 
                 RowBox[{"r", ",", 
                  RowBox[{"decontextify", "[", 
                   RowBox[{"r", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ",", "1"}], 
                 "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"r", " ", "=", " ", 
                RowBox[{"ReplacePart", "[", 
                 RowBox[{"r", ",", " ", 
                  RowBox[{"decontextify", "[", 
                   RowBox[{
                    RowBox[{"r", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", " ", 
                    "$SBML$Context"}], "]"}], ",", " ", "3"}], "]"}]}], ";", 
               " ", "\[IndentingNewLine]", 
               RowBox[{"r", " ", "=", " ", 
                RowBox[{"Transpose", "[", "r", "]"}]}], ";"}]}], " ", 
             "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
          "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"verboseSave", "[", 
          RowBox[{"\"\<Rules\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Variable\>\"", ",", " ", "\"\<Type of Rule in SBML\>\"", 
             ",", "\"\<Mathematica Translation\>\""}], "}"}], ",", " ", "r"}],
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLspecies", "Subsection"],

Cell[BoxData["\<\"getSBMLspecies[m] returns a list of species found in the \
SBML model m. Species v in compartment j are renamed as v$[CID$j]. The name \
of the compartment is controlled by $Compartment$ID. The following list is \
returned: {\!\(\* StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"species\
\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\",\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\" \
\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"initial\
\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"condtitions\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\",\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\" \
\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"frozen\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"variable\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\(\* \
StyleBox[\\\"rule\\\",\\nFontSlant->\\\"Italic\\\"]s\)]\)}  where \!\(\* \
StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"species\
\\\",\\nFontSlant->\\\"Italic\\\"]\) is a list of (possibly indexed) variable \
names; \!\(\* StyleBox[\\\"list\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"initial\
\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"conditions\\\",\\nFontSlant->\\\"Italic\\\"]\) has the form \
{var[0]==value,...}; and l\!\(\* \
StyleBox[\\\"ist\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"of\\\",\
\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"frozen\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"variable\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* \
StyleBox[\\\"-\\\",\\nFontSlant->\\\"Italic\\\"]\)\!\(\* StyleBox[\\\"rules\\\
\",\\nFontSlant->\\\"Italic\\\"]\) has the form {var-> value,...}\"\>"], \
"Print",
 CellTags->"Info3256546383-6026381"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLspecies", "[", "opt___", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dbg", ",", "\[IndentingNewLine]", " ", "species", ",", 
       "speciesoptions", ",", "speciesNames", ",", "speciesIC", ",", " ", 
       "speciesICRules", ",", " ", "speciesCompartment", ",", " ", 
       "compartments", ",", "unknownCompartments", ",", "  ", "speciesBC", 
       ",", " ", "variables", ",", " ", "variableic", ",", " ", "frozenIC", 
       ",", " ", "speciesunits", ",", "speciescharge", ",", "rr", ",", 
       "derivedunits", ",", "unitsNotOK", ",", " ", "BCorNot"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dbg", " ", "=", " ", "$SBML$debug"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"species", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"$SBML$Models", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfSpecies\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"get", " ", "each", " ", "species"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{"$SBML$Level$Version", ",", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"1.1", " ", "only", " ", "allows"}], " ", "<", 
             "specie"}], " ", "..."}], ">", " ", "tags"}], " ", "*)"}],
         FontColor->RGBColor[0, 1, 0]], 
        StyleBox[" ",
         FontColor->RGBColor[1, 0, 0]], 
        StyleBox["\[IndentingNewLine]",
         FontColor->GrayLevel[0.666667]], "\"\<1.1\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"species", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{"species", ",", 
            RowBox[{"XMLElement", "[", 
             RowBox[{"\"\<specie\>\"", ",", "___"}], "]"}], ",", "3"}], 
           "]"}]}], ";"}], " ", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"1.2", " ", "allows"}], " ", "<", "specie"}], " ", 
              "..."}], ">", " ", "or", " ", "<", "specie"}], " ", "..."}], 
           ">", " ", "tags"}], " ", "*)"}],
         FontColor->RGBColor[0, 1, 0]], 
        StyleBox[" ",
         FontColor->RGBColor[0, 1, 0]], 
        StyleBox["\[IndentingNewLine]",
         FontColor->RGBColor[0, 1, 0]], "\"\<1.2\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"species", " ", "=", " ", 
          RowBox[{"Join", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{"species", ",", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<specie\>\"", ",", "___"}], "]"}], ",", "3"}], 
             "]"}], ",", 
            RowBox[{"Cases", "[", 
             RowBox[{"species", ",", 
              RowBox[{"XMLElement", "[", 
               RowBox[{"\"\<species\>\"", ",", "___"}], "]"}], ",", "3"}], 
             "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "_", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"printWarning", "[", 
          RowBox[{"\"\<getSBMLspecies:: unknown $SBML$Level$Version: \>\"", "<>", 
           RowBox[{"ToString", "[", "$SBML$Level$Version", "]"}]}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"speciesoptions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"extractXMLOptions", ",", "species"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"speciesNames", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<name\>\"", "/.", "#"}], "&"}], ",", "speciesoptions"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"speciesIC", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"\"\<initialAmount\>\"", "/.", "#"}], "/.", 
           RowBox[{"{", 
            RowBox[{
            "\"\<initialAmount\>\"", "\[Rule]", " ", 
             "$SBML$IndeterminateValue"}], "}"}]}], "&"}], ",", 
         "speciesoptions"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"speciesIC", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"fromEForm", ",", " ", "speciesIC"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "just", " ", "in", " ", "case", " ", "some", " ", "loser", " ", 
        "names", " ", 
        RowBox[{"his", "/", "her"}], " ", "compartments", " ", 
        "\"\<compartment\>\""}], " ", "*)"}], "\[IndentingNewLine]", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"rr", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "\"\<compartment\>\"", "\[Rule]", " ", "\"\<compartment\>\""}], 
          ")"}], "\[Rule]", " ", 
         RowBox[{"(", 
          RowBox[{
          "\"\<compartment\>\"", "\[Rule]", " ", 
           "\"\<\[RightPointer]compartment\[LeftPointer]holder\>\""}], 
          ")"}]}], "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"speciesCompartment", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"\"\<compartment\>\"", "/.", "#"}], "/.", 
           RowBox[{"{", 
            RowBox[{
            "\"\<compartment\>\"", "\[Rule]", "$SBML$IndeterminateValue"}], 
            "}"}]}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"speciesoptions", "/.", "rr"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"speciesCompartment", " ", "=", " ", 
       RowBox[{"speciesCompartment", "/.", 
        RowBox[{"{", 
         RowBox[{
         "\"\<\[RightPointer]compartment\[LeftPointer]holder\>\"", "\[Rule]", 
          " ", "\"\<compartment\>\""}], "}"}]}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"speciesCompartment", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"removeUnderscore", ",", " ", "speciesCompartment"}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"speciesCompartment", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"contextify", ",", " ", "speciesCompartment"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"speciesunits", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<units\>\"", "/.", "#"}], "&"}], ",", 
         "speciesoptions"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"speciesunits", " ", "=", " ", 
       RowBox[{"speciesunits", "/.", 
        RowBox[{"{", 
         RowBox[{"\"\<units\>\"", "\[Rule]", " ", "\"\<substance\>\""}], 
         "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"speciesunits", " ", "=", " ", 
       RowBox[{"unitsContextify", "/@", "speciesunits"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"unitsNotOK", " ", "=", " ", 
       RowBox[{"Select", "[", 
        RowBox[{"speciesunits", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"!", 
            RowBox[{"unitDefinedQ", "[", "#", "]"}]}], ")"}], "&"}]}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"printWarning", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "unitsNotOK", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "\"\<Invalid units specified in <species> definition: \>\"", "<>", 
         "\[IndentingNewLine]", 
         RowBox[{"list2CommaSeparatedString", "[", "unitsNotOK", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"speciescharge", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<charge\>\"", "/.", "#"}], "&"}], ",", " ", 
         "speciesoptions"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"speciescharge", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"speciescharge", "/.", 
         RowBox[{"{", 
          RowBox[{"\"\<charge\>\"", "\[Rule]", " ", "\"\<0\>\""}], "}"}]}], 
        ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"speciesBC", ":=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"\"\<boundaryCondition\>\"", "/.", "#"}], ")"}], "/.", 
            RowBox[{"{", 
             RowBox[{
             "\"\<boundaryCondition\>\"", "\[Rule]", " ", "\"\<False\>\""}], 
             "}"}]}], ")"}], "&"}], ",", "speciesoptions"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"BCorNot", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#", "==", "\"\<true\>\""}], ",", "\"\<Bound. Cond.\>\"", 
            ",", " ", "\"\<Variable\>\""}], "]"}], "&"}], ",", " ", 
         "speciesBC"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"speciesNames", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"contextify", "[", "\[IndentingNewLine]", 
           RowBox[{"removeUnderscore", "[", "#", "]"}], "]"}], "&"}], ",", 
         "speciesNames"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"defineVariable", "[", "speciesNames", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"speciesNames", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"Symbol", ",", "speciesNames"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"speciesICRules", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", "\[Rule]", " ", 
           RowBox[{"ToExpression", "[", "#2", "]"}]}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"speciesNames", ",", "speciesIC"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLspecies:: speciesCompartment\>\"", ",", 
        " ", "speciesCompartment"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLspecies:: speciesICRules\>\"", ",", 
        "speciesICRules"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLspecies:: speciesBC\>\"", ",", " ", 
        "speciesBC"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLspecies:: speciesNames\>\"", ",", 
        "speciesNames"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"2.7", ".0", ".3"}], " ", "-", " ", 
        RowBox[{
        "recover", " ", "species", " ", "names", " ", "for", " ", "output", 
         " ", "of", " ", "SBMLSpecies"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$Species$IDs", " ", "=", " ", "speciesNames"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$SpeciesCompartmentAssociations", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"{", 
          RowBox[{"speciesNames", ",", 
           RowBox[{"ToExpression", "/@", "speciesCompartment"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"compartments", " ", "=", " ", 
       RowBox[{"Union", "[", "speciesCompartment", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"unknownCompartments", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"compartments", ",", "$SBML$CompartmentNames"}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"printWarning", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "unknownCompartments", "]"}], ">", "0"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
        "\"\<Unknown compartments specified in specie definition: \>\"", "<>", 
         RowBox[{
         "list2CommaSeparatedString", "[", "unknownCompartments", "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
       "saveVerboseData", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"derivedunits", " ", "=", " ", 
          RowBox[{"speciesunits", "/.", "$SBML$UnitRules"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
          "$SBML$verboseContext", ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"verboseSave", "[", 
             RowBox[{"\"\<Species\>\"", ",", "\[IndentingNewLine]", " ", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Name\>\"", ",", "\"\<I.C.\>\"", ",", "\"\<Units\>\"", ",",
                 " ", "\"\<Derived Units\>\"", ",", " ", "\"\<Charge\>\"", 
                ",", " ", "\"\<Compartment\>\"", ",", "\"\<Var/B.C.\>\""}], 
               "}"}], ",", 
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{
                "speciesNames", ",", " ", "speciesIC", ",", "speciesunits", 
                 ",", "derivedunits", ",", " ", "speciescharge", ",", 
                 "speciesCompartment", ",", "BCorNot"}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
           "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"verboseSave", "[", 
             RowBox[{"\"\<Species\>\"", ",", " ", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Name\>\"", ",", "\"\<I.C.\>\"", ",", "\"\<Units\>\"", ",",
                 " ", "\"\<Derived Units\>\"", ",", " ", "\"\<Charge\>\"", 
                ",", " ", "\"\<Compartment\>\"", ",", "\"\<Var/B.C.\>\""}], 
               "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"ToString", ",", "speciesNames"}], "]"}], "//", 
                  "decontextify"}], ",", " ", "speciesIC", ",", 
                 "speciesunits", ",", "derivedunits", ",", " ", 
                 "speciescharge", ",", 
                 RowBox[{"speciesCompartment", "//", "decontextify"}], ",", 
                 "BCorNot"}], "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
            ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"speciesoptions", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<name\>\"", "\[Rule]", " ", "#1"}], ",", " ", 
            RowBox[{"\"\<boundaryCondition\>\"", "\[Rule]", " ", "#2"}]}], 
           "}"}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"speciesNames", ",", "speciesBC"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$FrozenVariables", "=", 
       RowBox[{"getAttributeValues", "[", 
        RowBox[{
        "\"\<boundaryCondition\>\"", ",", "\"\<true\>\"", ",", "\"\<name\>\"",
          ",", "speciesoptions"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"defineParameter", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"ToString", ",", "$SBML$FrozenVariables"}], "]"}], "]"}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"definef", "[", 
          RowBox[{"SBMLIC", ",", 
           RowBox[{"ToString", "[", "#1", "]"}], ",", 
           RowBox[{"ToString", "[", 
            RowBox[{"InputForm", "[", "#2", "]"}], "]"}]}], "]"}], "&"}], ",",
         " ", 
        RowBox[{"{", 
         RowBox[{"speciesNames", ",", " ", "speciesIC"}], "}"}]}], "]"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"addReplacementRule", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"ToString", ",", "$SBML$FrozenVariables"}], "]"}], "]"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$UnitAssociations", "=", 
       RowBox[{"Join", "[", 
        RowBox[{"$SBML$UnitAssociations", ",", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"ToExpression", "[", "#1", "]"}], "\[Rule]", " ", 
             RowBox[{"ToExpression", "[", "#2", "]"}]}], "&"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"speciesNames", ",", "speciesunits"}], "}"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.402694543431362*^9, 3.402694546770402*^9}, {
   3.402694641602758*^9, 3.402694673416847*^9}, 3.402694745629719*^9, {
   3.4026956433583603`*^9, 3.402695644754016*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLcompartments", "Subsection"],

Cell[BoxData["\<\"getSBMLcompartments[model] returns a list of option lists \
corresponding to each compartment in the model, where m is an xml model of \
the fomr XMLElement[model,...].  The return value has the form\\n{{\\\"name\\\
\"\[Rule]value, \
\\\"volume\\\"\[Rule]value,\\\"units\\\"\[Rule]value,\\\"outside\\\"\[Rule]\
value}, {\\\"name\\\"\[Rule]value,...},...}\"\>"], "Print",
 CellTags->"Info3256282477-7549864"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLcompartments", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "m", ",", " ", "c", ",", "cc", ",", "names", ",", "volumes", ",", " ", 
       "units", ",", "derivedunits", ",", " ", "outsides", ",", " ", 
       "outside", ",", "notok", ",", "dbg", ",", " ", "unitsNotOK", " ", ",", 
       
       RowBox[{"defaultAttributes", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<volume\>\"", "\[Rule]", " ", "\"\<1\>\""}], ",", " ", 
          RowBox[{"\"\<units\>\"", "\[Rule]", " ", "\"\<volume\>\""}]}], 
         "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dbg", " ", "=", " ", "$SBML$debug"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"m", " ", "=", " ", "$SBML$Models"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"$SBML$Models", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfCompartments\>\"", ",", "___"}], "]"}], ",", 
         "3"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"cc", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"c", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<compartment\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "c", "]"}], "<", "1"}], "  ", "\[Or]", " ", 
         RowBox[{
          RowBox[{"Length", "[", "cc", "]"}], "<", "1"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{
          "$SBML$Level$Version", " ", ",", "\[IndentingNewLine]", 
           "\"\<1.1\>\"", ",", 
           RowBox[{
            RowBox[{
            "printWarning", "[", 
             "\"\<SBML level 1.1 must contain at least one compartment\>\"", 
             "]"}], ";", 
            RowBox[{"Abort", "[", "]"}], ";"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", "\"\<1.2\>\"", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"names", " ", "=", " ", 
             RowBox[{"{", 
              RowBox[{"ToString", "[", "$SBML$IndeterminateValue", " ", "]"}],
               "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"volumes", "=", 
             RowBox[{"{", "\"\<1\>\"", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"units", " ", "=", " ", 
             RowBox[{"{", "\"\<volume\>\"", "}"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"outsides", "=", 
             RowBox[{"{", " ", 
              RowBox[{"ToString", "[", "$SBML$IndeterminateValue", " ", "]"}],
               "}"}]}], ";"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", "_", ",", 
           RowBox[{
            RowBox[{"printWarning", "[", 
             RowBox[{"\"\<SBML level\>\"", "<>", 
              RowBox[{"ToString", "[", "$SBML$Level$Version", "]"}], "<>", 
              "\"\<must contain at least one compartment\>\""}], "]"}], ";", 
            RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}], "\[IndentingNewLine]", 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "this", " ", "is", " ", "the", " ", "else", " ", "clause"}], ",", 
           " ", 
           RowBox[{"i", ".", "e"}], ",", " ", 
           RowBox[{
            RowBox[{"Length", "[", "c", "]"}], "\[GreaterEqual]", " ", 
            "1"}]}], " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"c", " ", "=", " ", "cc"}], ";", "\[IndentingNewLine]", 
         RowBox[{"c", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"extractXMLOptions", ",", " ", "c"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "get", " ", "names", " ", "and", " ", "check", " ", "outsides", 
            " ", "for", " ", "consistency"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], "\[IndentingNewLine]", 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         RowBox[{"names", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<name\>\"", "/.", "#"}], "&"}], ",", "c"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"outsides", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<outside\>\"", "/.", "#"}], "&"}], ",", "c"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"outside", " ", "=", " ", "outsides"}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"outsides", " ", "=", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{"outsides", ",", " ", 
            RowBox[{"{", "\"\<outside\>\"", "}"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "check", " ", "names", " ", "of", " ", "outside", " ", 
            "compartments"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], 
         RowBox[{"notok", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"outsides", ",", "names"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"printWarning", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "notok", "]"}], ">", "0"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Unknown outside compartment \>\"", "<>", 
            RowBox[{"list2CommaSeparatedString", "[", "notok", "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{
           "convert", " ", "names", " ", "and", " ", "outside", " ", "names", 
            " ", "to", " ", "mathematica", " ", "names"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"names", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"removeUnderscore", ",", " ", "names"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"outsides", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"removeUnderscore", ",", " ", 
            RowBox[{"outside", "/.", 
             RowBox[{"{", 
              RowBox[{"\"\<outside\>\"", "\[Rule]", " ", 
               RowBox[{"ToString", "[", "$SBML$IndeterminateValue", " ", 
                RowBox[{"(*", " ", "$Universal$OutsideCompartment", "*)"}], 
                " ", "]"}]}], " ", "}"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"names", " ", "=", " ", 
          RowBox[{"contextify", "[", "names", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"outsides", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"ToString", "[", "#", "]"}], "\[NotEqual]", " ", 
                RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], 
               ",", " ", 
               RowBox[{"contextify", "[", "#", "]"}], ",", " ", "#"}], "]"}], 
             "&"}], ",", " ", "outsides"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"defineParameter", "[", "names", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"defineParameter", "[", 
          RowBox[{"Complement", "[", 
           RowBox[{"outsides", ",", " ", 
            RowBox[{"{", 
             RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}], 
             "}"}]}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"get", " ", "volumes", " ", "and", " ", "units"}], " ", 
           "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], "\[IndentingNewLine]", 
         RowBox[{"volumes", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"\"\<volume\>\"", "/.", "#"}], "/.", 
              RowBox[{"{", 
               RowBox[{"\"\<volume\>\"", "\[Rule]", " ", "1"}], "}"}]}], " ", 
             "&"}], ",", " ", "c"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"volumes", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{"fromEForm", ",", " ", "volumes"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"debugPrint", "[", 
            RowBox[{
            "dbg", ",", "\"\<getSBMLcompartments:: volumes\>\"", ",", 
             "volumes"}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"volumes", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{"ToString", ",", "volumes"}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", "*)"}], " ", "\[IndentingNewLine]", 
         RowBox[{"volumes", " ", "=", " ", 
          RowBox[{"fromEForm", "/@", "volumes"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLcompartments:: volumes\>\"", ",", 
           "volumes"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"units", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"\"\<units\>\"", "/.", "#"}], "/.", 
              RowBox[{"{", 
               RowBox[{"\"\<units\>\"", "\[Rule]", " ", "\"\<volume\>\""}], 
               "}"}]}], "&"}], ",", "c"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"units", " ", "=", " ", 
          RowBox[{"unitsContextify", "/@", "units"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         
         RowBox[{"unitsNotOK", " ", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{"units", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"!", 
               RowBox[{"unitDefinedQ", "[", "#", "]"}]}], ")"}], "&"}]}], 
           "]"}]}], ";", " ", "\[IndentingNewLine]", 
         RowBox[{"printWarning", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "unitsNotOK", "]"}], ">", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<Invalid units specified in <compartment> definition: \>\"", "<>",
             "\[IndentingNewLine]", 
            RowBox[{"list2CommaSeparatedString", "[", "unitsNotOK", "]"}]}]}],
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"$SBML$UnitAssociations", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"$SBML$UnitAssociations", ",", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"ToExpression", "[", "#1", "]"}], "\[Rule]", " ", 
                RowBox[{"ToExpression", "[", "#2", "]"}]}], "&"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"names", ",", "units"}], "}"}]}], "]"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
      " ", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"end", " ", "of", " ", "if", " ", 
           RowBox[{"Length", "[", "c", "]"}]}], "<", "1"}], " ", "..."}], 
        "*)"}],
       FontWeight->"Plain"], " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"save", " ", "globals"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"$SBML$CompartmentNames", "=", "names"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentVolumes", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Symbol", "[", "#1", "]"}], "\[Rule]", " ", 
           RowBox[{"ToExpression", "[", "#2", "]"}]}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"names", ",", "volumes"}], "}"}]}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentUnits", "=", "units"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$CompartmentOutsides", "=", "outsides"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLcompartments:: $SBML$CompartmentNames\>\"", 
        ",", "$SBML$CompartmentNames"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", "\"\<getSBMLcompartments:: $SBML$CompartmentVolumes\>\"", 
        ",", "$SBML$CompartmentVolumes"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"c", "=", 
       RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<name\>\"", "\[Rule]", " ", "#1"}], ",", " ", 
            RowBox[{"\"\<volume\>\"", "\[Rule]", " ", "#2"}], ",", " ", 
            RowBox[{"\"\<units\>\"", "\[Rule]", " ", "#3"}], ",", " ", 
            RowBox[{"\"\<outside\>\"", "\[Rule]", " ", "#4"}]}], "}"}], "&"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "names", ",", " ", "volumes", ",", " ", "units", ",", " ", 
           "outsides"}], "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$SBML$NCompartments", " ", "=", " ", 
       RowBox[{"Length", "[", "c", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{"dbg", ",", "\"\<getSBMLcompartments:: c\>\"", ",", "c"}], 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"saveVerboseData", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"derivedunits", "=", 
          RowBox[{"units", "/.", "$SBML$UnitRules"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"$SBML$verboseContext", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"verboseSave", "[", 
             RowBox[{"\"\<Compartments\>\"", ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Name\>\"", ",", "\"\<Volume\>\"", ",", "\"\<Units\>\"", 
                ",", "\"\<Derived Units\>\"", ",", " ", "\"\<Outside\>\""}], 
               "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{
                "names", ",", "volumes", ",", "units", ",", "derivedunits", 
                 ",", "outsides"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
             "]"}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"verboseSave", "[", " ", 
             RowBox[{
             "\"\<Compartments\>\"", ",", "\[IndentingNewLine]", " ", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Name\>\"", ",", "\"\<Volume\>\"", ",", "\"\<Units\>\"", 
                ",", "\"\<Derived Units\>\"", ",", " ", "\"\<Outside\>\""}], 
               "}"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"decontextify", "[", "names", "]"}], ",", "volumes", 
                 ",", "units", ",", "derivedunits", ",", 
                 RowBox[{"decontextify", "[", "outsides", "]"}]}], "}"}], 
               "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}],
        "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"definef", "[", 
          RowBox[{"SBMLIC", ",", "#1", ",", "#2"}], "]"}], "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"names", ",", 
          RowBox[{"ToString", "/@", 
           RowBox[{"InputForm", "/@", "volumes"}]}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{"addReplacementRule", ",", " ", "names"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", 
        RowBox[{"Print", "[", "\"\<getSBMLcompartments - done\>\"", "]"}]}], 
       "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["defineParameter, defineVariable", "Subsection"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      StyleBox["removeVariable",
       FontColor->RGBColor[0, 0, 1]], "[", "z_", "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "p", "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SBMLVariables", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"SBMLVariables", ",", 
           RowBox[{"{", "z", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SBMLVariableQ", "[", "z", "]"}], "=", "False"}], ";"}]}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"z", ",", " ", "\"\< no longer a variable\>\""}], "]"}], 
        ";"}], " ", "*)"}], " ", "\[IndentingNewLine]", "]"}]}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"end", " ", "removeVariable"}], " ", "*)"}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"defineParameter", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"SBMLVariableQ", "[", "x", "]"}], 
          StyleBox[",",
           FontWeight->"Plain"], 
          StyleBox[" ",
           FontWeight->"Plain"], 
          RowBox[{"removeVariable", "[", "x", "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SBMLParameterQ", "[", "x", "]"}], "=", "True"}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SBMLVariableQ", "[", "x", "]"}], "=", "False"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"SBMLConstants", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"SBMLConstants", ",", "x"}], "]"}]}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"defineParameter", "[", 
      RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"defineParameter", ",", "x"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"defineParameter", "[", "x_", "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"printWarning", "[", 
         RowBox[{
         "\"\<defineParameter: program error: argument not a String or List: \
\>\"", "<>", 
          RowBox[{"ToString", "[", "x", "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"defineVariable", "[", 
     RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"removeConstant", ",", " ", 
        RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         StyleBox["removeConstant",
          FontColor->RGBColor[0, 0, 1]], "[", "z_", "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "p", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"p", "=", 
            RowBox[{"Position", "[", 
             RowBox[{"SBMLConstants", ",", " ", "z"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "p", "]"}], ">", "0"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"p", " ", "=", " ", 
               RowBox[{"Map", "[", 
                RowBox[{"First", ",", "p"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"p", " ", "=", 
               RowBox[{"First", "[", "p", "]"}]}], ";", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"SBMLConstants", "=", " ", 
               RowBox[{"Drop", "[", 
                RowBox[{"SBMLConstants", ",", " ", 
                 RowBox[{"{", "p", "}"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"p", "=", 
               RowBox[{"Position", "[", 
                RowBox[{"SBMLConstants", ",", " ", "z"}], "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "removeConstant"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"dbg", ",", " ", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<defineVariable: x: \>\"", ",", " ", "x"}], "]"}]}], 
        "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"stringer", "[", 
           RowBox[{"decontextify", "[", "x", "]"}], "]"}], "==", 
          "\"\<t\>\""}], ",", " ", 
         RowBox[{"Return", "[", "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"SBMLVariableQ", "[", "x", "]"}], ",", " ", 
         RowBox[{"Return", "[", "]"}]}], "]"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"already", " ", "a", " ", "variable"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"SBMLConstants", " ", "=", " ", 
           RowBox[{"Complement", "[", 
            RowBox[{"SBMLConstants", ",", 
             RowBox[{"{", "x", "}"}]}], "]"}]}], ";"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"SBMLparameterQ", "[", "x", "]"}], ",", " ", 
         RowBox[{"removeConstant", "[", "x", "]"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SBMLParameterQ", "[", "x", "]"}], "=", "False"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SBMLVariableQ", "[", "x", "]"}], "=", "True"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"SBMLVariables", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"SBMLVariables", ",", " ", "x"}], "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"x", ",", " ", "\"\< added as a variable\>\""}], "]"}], ";"}],
       " ", "*)"}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"defineVariable", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"defineVariable", ",", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"defineVariable", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"printWarning", "[", 
       RowBox[{
       "\"\<defineVariable: program error: argument not a String or List: \
\>\"", "<>", 
        RowBox[{"ToString", "[", "x", "]"}]}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getSBMLunits", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSBMLunits", "[", 
    RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"c", ",", "cc", ",", 
       RowBox[{"dbg", "=", "False"}], ",", "defaultUnitsNeeded", ",", 
       "defaultUnitRules", ",", "\[IndentingNewLine]", 
       RowBox[{"defaultSpecTable5", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<substance\>\"", "\[Rule]", " ", "\"\<mole\>\""}], ",", 
          
          RowBox[{"\"\<volume\>\"", "\[Rule]", " ", "\"\<liter\>\""}], ",", 
          " ", 
          RowBox[{"\"\<time\>\"", "\[Rule]", " ", "\"\<second\>\""}]}], 
         "}"}]}], ",", " ", "\[IndentingNewLine]", "specTable5", ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"defaultbuiltInQuantities", "=", 
        RowBox[{"{", 
         RowBox[{
         "\"\<substance\>\"", ",", "\"\<volume\>\"", ",", "\"\<time\>\""}], 
         "}"}]}], ",", "\[IndentingNewLine]", "builtInQuantities", ",", 
       "\[IndentingNewLine]", "getSBMLUnitDefinition", ",", 
       "\[IndentingNewLine]", "unitDefinitions", ",", "names", ",", "defs", 
       ",", "\[IndentingNewLine]", 
       RowBox[{"defaultAllowedKinds", "=", 
        RowBox[{"{", 
         RowBox[{
         "\"\<ampere\>\"", ",", "\"\<becquerel\>\"", ",", "\"\<candela\>\"", 
          ",", "\"\<celsius\>\"", ",", "\"\<coulomb\>\"", ",", 
          "\"\<dimensionless\>\"", ",", "\"\<farad\>\"", ",", "\"\<gram\>\"", 
          ",", "\"\<gray\>\"", ",", "\"\<henry\>\"", ",", "\"\<hertz\>\"", 
          ",", "\"\<item\>\"", ",", "\"\<joule\>\"", ",", "\"\<katal\>\"", 
          ",", "\"\<kelvin\>\"", ",", "\"\<kilogram\>\"", ",", 
          "\"\<liter\>\"", ",", "\"\<litre\>\"", ",", "\"\<lumen\>\"", ",", 
          "\"\<lux\>\"", ",", "\"\<meter\>\"", ",", "\"\<metre\>\"", ",", 
          "\"\<mole\>\"", ",", "\"\<newton\>\"", ",", "\"\<ohm\>\"", ",", 
          "\"\<pascal\>\"", ",", "\"\<radian\>\"", ",", "\"\<second\>\"", 
          ",", "\"\<siemens\>\"", ",", "\"\<sievert\>\"", ",", 
          "\"\<steradian\>\"", ",", "\"\<tesla\>\"", ",", "\"\<volt\>\"", 
          ",", "\"\<watt\>\"", ",", "\"\<weber\>\""}], "}"}]}], ",", 
       "\[IndentingNewLine]", "allowedKinds"}], "\[IndentingNewLine]", "}"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allowedKinds", " ", "=", " ", 
       RowBox[{"unitsContextify", "/@", "defaultAllowedKinds"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"builtInQuantities", "=", 
       RowBox[{"unitsContextify", "/@", "defaultbuiltInQuantities"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"specTable5", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"unitsContextify", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Rule]", " ", 
           RowBox[{"unitsContextify", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", " ", 
         "defaultSpecTable5"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLunits: specTable5 \>\"", ",", 
        "specTable5"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["getSBMLUnitDefinition",
         FontColor->RGBColor[0, 0, 1]], "[", "z_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "opts", ",", "units", ",", "listofunits", ",", "name", ",", " ", 
           "unitspecs", ",", "kinds", ",", "exponents", ",", " ", "scales", 
           ",", "disallowedKinds", ",", "unitdef", ",", "unitdefinition", ",", 
           RowBox[{"dbg", "=", "True"}]}], "}"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"unitdef", "[", 
            RowBox[{"{", 
             RowBox[{"kind_", ",", " ", "exp_", ",", " ", "scale_"}], "}"}], 
            "]"}], ":=", "\[IndentingNewLine]", 
           RowBox[{"ToExpression", "[", 
            RowBox[{"\"\<10^\>\"", "<>", 
             RowBox[{"ToString", "[", "scale", "]"}], "<>", "\"\<*(\>\"", "<>", 
             RowBox[{"ToString", "[", "kind", "]"}], "<>", "\"\<)^\>\"", "<>", 
             RowBox[{"ToString", "[", "exp", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"opts", " ", "=", " ", 
           RowBox[{"extractXMLOptions", "[", "z", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"name", " ", "=", " ", 
           RowBox[{
            RowBox[{"\"\<name\>\"", "/.", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", "opts", "}"}], "]"}]}], "/.", 
            RowBox[{"{", 
             RowBox[{
             "\"\<name\>\"", "\[Rule]", " ", "\"\<Indeterminate\>\""}], 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"name", " ", "=", " ", 
           RowBox[{"unitsContextify", "[", "name", "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<getSBMLUnitDefinition: input \>\"", ",", 
            "z"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<getSBMLUnitDefinition: opts \>\"", ",", 
            "opts"}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"listofunits", " ", "=", " ", 
           RowBox[{"Cases", "[", 
            RowBox[{"z", ",", 
             RowBox[{"XMLElement", "[", 
              RowBox[{"\"\<listOfUnits\>\"", ",", "___"}], "]"}], ",", "3"}], 
            "]"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"debugPrint", "[", 
           RowBox[{
           "dbg", ",", " ", "\"\<getSBMLUnitDefinition: listofunits \>\"", 
            ",", "listofunits"}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "listofunits", "]"}], ">", "0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"units", " ", "=", 
              RowBox[{"Cases", "[", 
               RowBox[{"listofunits", ",", 
                RowBox[{"XMLElement", "[", 
                 RowBox[{"\"\<unit\>\"", ",", "___"}], "]"}], ",", "3"}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"debugPrint", "[", 
              RowBox[{
              "dbg", ",", " ", "\"\<getSBMLUnitDefinition: units \>\"", ",", 
               "units"}], "]"}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "units", "]"}], ">", "0"}], ",", " ", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"unitOptions", " ", "=", " ", 
                 RowBox[{"Map", "[", 
                  RowBox[{"extractXMLOptions", ",", "units"}], "]"}]}], ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"unitspecs", " ", "=", " ", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<kind\>\"", ",", "\"\<exponent\>\"", ",", 
                    "\"\<scale\>\""}], "}"}], "/.", "#"}], "/.", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "\"\<kind\>\"", "\[Rule]", " ", "\"\<Indeterminate\>\""}],
                     ",", 
                    RowBox[{"\"\<exponent\>\"", "\[Rule]", " ", "\"\<1\>\""}],
                     ",", " ", 
                    RowBox[{"\"\<scale\>\"", "\[Rule]", " ", "\"\<0\>\""}]}], 
                    "}"}]}], "&"}], ",", " ", "unitOptions"}], "]"}], "//", 
                  "ToLowerCase"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"kinds", ",", "exponents", ",", "scales"}], "}"}], 
                 "=", 
                 RowBox[{"Transpose", "[", "unitspecs", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"kinds", " ", "=", " ", 
                 RowBox[{"unitsContextify", "/@", "kinds"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"unitspecs", " ", "=", " ", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", 
                   RowBox[{"kinds", ",", " ", "exponents", ",", "scales"}], 
                   "}"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
                "\[IndentingNewLine]", 
                RowBox[{"disallowedKinds", "=", 
                 RowBox[{"Complement", "[", 
                  RowBox[{"kinds", ",", "allowedKinds"}], "]"}]}], ";", 
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"printWarning", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", "disallowedKinds", "]"}], ">", 
                   "0"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"\"\<Invalid Kinds :\>\"", "<>", 
                   RowBox[{
                   "list2CommaSeparatedString", "[", "disallowedKinds", "]"}],
                    "<>", "\"\< in unitDefinition for '\>\"", "<>", 
                   RowBox[{"ToString", "[", "name", "]"}], "<>", 
                   "\"\<'.\>\""}]}], "]"}], ";"}], "\[IndentingNewLine]", ",",
                "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"unitOptions", "=", 
                 RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"kinds", "=", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"ToString", "[", "name", "]"}], "/.", 
                    "specTable5"}], "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", "name", "]"}], "\[Rule]", " ", 
                    "\"\<Indeterminate\>\""}], "}"}]}], "}"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"exponents", "=", 
                 RowBox[{"{", "\"\<1\>\"", "}"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"scales", "=", 
                 RowBox[{"{", "\"\<0\>\"", "}"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"unitspecs", " ", "=", " ", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"{", 
                   RowBox[{"kinds", ",", "exponents", ",", "scales"}], "}"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"printWarning", "[", 
                 RowBox[{
                 "\"\<no <unit> tags given in unitDefinition for '\>\"", "<>", 
                  RowBox[{"ToString", "[", "name", "]"}], "<>", 
                  "\"\<'.\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"debugPrint", "[", 
              RowBox[{
              "dbg", ",", " ", "\"\<getSBMLUnitDefinition: unitspecs \>\"", 
               ",", "unitspecs"}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"debugPrint", "[", 
              RowBox[{
              "dbg", ",", " ", "\"\<getSBMLUnitDefinition: unitOptions \>\"", 
               ",", "unitOptions"}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"debugPrint", "[", 
              RowBox[{
              "dbg", ",", " ", "\"\<getSBMLUnitDefinition: kinds \>\"", ",", 
               "kinds"}], "]"}], ";", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"unitdefinition", "=", 
              RowBox[{
               RowBox[{
                RowBox[{"Apply", "[", 
                 RowBox[{"Times", ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{"unitdef", ",", "unitspecs"}], "]"}]}], "]"}], "//",
                 "InputForm"}], "//", "ToString"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"debugPrint", "[", 
              RowBox[{
              "dbg", ",", " ", 
               "\"\<getSBMLUnitDefinition: unitdefinition \>\"", ",", 
               "unitdefinition"}], "]"}], ";"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"printWarning", "[", 
              RowBox[{
              "\"\<No listOfUnits given in the unitDefinition for '\>\"", "<>", 
               RowBox[{"ToString", "[", "name", "]"}], "<>", "\"\<'.\>\""}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"unitdefinition", "=", "\"\<Indeterminate\>\""}], 
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{"name", ",", "unitdefinition"}], "}"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", 
      StyleBox[" ",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{"end", " ", "getSBMLUnitDefinition"}], " ", "*)"}],
       FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"$SBML$UnitsDefined", " ", "=", "allowedKinds"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLunits: $SBML$UnitsDefined \>\"", ",", 
        "$SBML$UnitsDefined"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"$SBML$Models", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<listOfUnitDefinitions\>\"", ",", "___"}], "]"}], ",", 
         "3"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"cc", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"c", ",", 
         RowBox[{"XMLElement", "[", 
          RowBox[{"\"\<unitDefinition\>\"", ",", "___"}], "]"}], ",", "3"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLunits: listOfUnitDefinitions: \>\"", ",", 
        "c"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLunits: unitDefition's: \>\"", ",", "cc"}],
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"unitDefinitions", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"getSBMLUnitDefinition", ",", "cc"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLunits: unitDefinitions \>\"", ",", 
        "unitDefinitions"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "unitDefinitions", "]"}], ">", "0"}], ",", 
        " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"names", ",", " ", "defs"}], "}"}], " ", "=", " ", 
          RowBox[{"Transpose", "[", "unitDefinitions", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"$SBML$UnitsDefined", " ", "=", " ", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"$SBML$UnitsDefined", ",", " ", "names"}], "]"}], "//", 
           "Union"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", " ", "\"\<getSBMLunits: $SBML$UnitsDefined \>\"", ",", 
           "$SBML$UnitsDefined"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"$SBML$UnitRules", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#1", "\[Rule]", "#2"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"names", ",", "defs"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         StyleBox[
          RowBox[{"(*", " ", 
           RowBox[{"remove", " ", "indeterminate", " ", "rules"}], " ", "*)"}],
          FontWeight->"Plain"], 
         StyleBox[" ",
          FontWeight->"Plain"], 
         StyleBox["\[IndentingNewLine]",
          FontWeight->"Plain"], "\[IndentingNewLine]", 
         RowBox[{"$SBML$UnitRules", " ", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{"$SBML$UnitRules", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Last", "[", "#", "]"}], "\[NotEqual]", " ", 
              "\"\<Indeterminate\>\""}], "&"}]}], "]"}]}], ";", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", " ", "\"\<getSBMLunits: $SBML$UnitRules \>\"", ",", 
           "$SBML$UnitRules"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"defaultUnitsNeeded", " ", "=", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{"builtInQuantities", ",", "names"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", " ", "\"\<getSBMLunits: defaultUnitsNeeded \>\"", ",", 
           "defaultUnitsNeeded"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"defaultUnitRules", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{"#", "/.", "specTable5"}], ")"}]}], "&"}], ",", 
            "defaultUnitsNeeded"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", " ", "\"\<getSBMLunits: defaultUnitRules \>\"", ",", 
           "defaultUnitRules"}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"debugPrint", "[", 
          RowBox[{
          "dbg", ",", "\"\<getSBMLUnits: defaultUnitRules \>\"", ",", 
           "defaultUnitRules"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"$SBML$UnitRules", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"$SBML$UnitRules", ",", " ", "defaultUnitRules"}], "]"}]}],
          ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"$SBML$UnitRules", "=", " ", "specTable5"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$UnitsDefined", "=", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{"$SBML$UnitsDefined", ",", "builtInQuantities"}], "]"}], "//",
         "Union"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLunits: $SBML$UnitsDefined \>\"", ",", 
        "$SBML$UnitsDefined"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"debugPrint", "[", 
       RowBox[{
       "dbg", ",", " ", "\"\<getSBMLunits: $SBML$UnitRules \>\"", ",", 
        "$SBML$UnitRules"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"saveVerboseData", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"verboseSave", "[", 
          RowBox[{"\"\<Unit Definitions\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Name\>\"", ",", " ", "\"\<Formula\>\""}], "}"}], ",",
            " ", "unitDefinitions"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["unitDefinedQ", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"unitDefinedQ", "[", "x_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "\[Equal]", "  ", "\"\<Indeterminate\>\""}], ")"}], " ", 
    "\[Or]", " ", 
    RowBox[{"(", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"$SBML$UnitsDefined", ",", " ", "x"}], "]"}], ")"}]}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["extractXMLOptions", "Subsection"],

Cell[BoxData["\<\"extractXMLOptions[XMLElement[tag, optionlist,stuff] returns \
the option list.\"\>"], "Print",
 CellTags->"Info3255928776-1829731"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"extractXMLOptions", "[", "\[IndentingNewLine]", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"x_", ",", " ", "optionList_", ",", " ", "stuff___"}], "]"}], 
    "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"Return", "[", "optionList", "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["extractXMLSubElements", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"extractXMLSubElements", "[", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"_", ",", " ", 
      RowBox[{"{", "___", "}"}], ",", " ", "x_"}], "]"}], "]"}], ":=", "x"}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getXMLElement", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getXMLElement", "[", 
    RowBox[{"XMLElement", "[", 
     RowBox[{"name_", ",", " ", 
      RowBox[{"{", "opt___", "}"}], ",", "x_"}], "]"}], "]"}], ":=", " ", 
   RowBox[{"(", 
    RowBox[{"name", "\[Rule]", 
     RowBox[{"{", "opt", "}"}]}], ")"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["extractSBMLtag", "Subsection"],

Cell[BoxData["\<\"extractSBMLtag[xml,tag,level] returns a list of all the \
occurances of of XMLElement[tag,...] in xml on a given level. The parameter \
tag is a string.\\nextractSBMLtag[xml,tag] extracts the occurances of \
XMLElement[tag,...] at every level (i.e., Infinity).\"\>"], "Print",
 CellTags->"Info3255930175-4878462"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"extractSBMLtag", "[", 
    RowBox[{"xml_", ",", " ", "tag_", ",", " ", 
     RowBox[{"level_:", "Infinity"}]}], "]"}], ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"Cases", "[", 
    RowBox[{"xml", ",", 
     RowBox[{"XMLElement", "[", 
      RowBox[{
       RowBox[{"ToString", "[", "tag", "]"}], ",", "___"}], "]"}], ",", 
     "level"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["contextify, decontextify, unitsContextify, unitsDecontextify", \
"Subsection"],

Cell[BoxData["\<\"contextify[x,context] returns a context`s.  If x is a \
string, then the value is returned as a string. If x is a symbol, the the \
value is returned as a symbol.\\ncontextify[{x1,x2,...}, context] returns \
{context`x1,context`x2,...}. The x1,x2 may be either symbols or strings. \
\\nIf context is not specified, the value of $SBML$Context is used.  If \
context is specified, it may be specified either as a string or a symbol. If \
it is specified as a string, the terminating \\\"`\\\" is optional and will \
be added if it is missing.  If context is specified as a symbol the \\\"`\\\" \
may not be specified and will be supplied by contextify.\"\>"], "Print",
 CellTags->"Info3262060788-4630726"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"contextify", "::", "usage"}], "=", 
   "\"\<contextify[x,context] returns a context`s.  If x is a string, then \
the value is returned as a string. If x is a symbol, the the value is \
returned as a symbol.\\ncontextify[{x1,x2,...}, context] returns \
{context`x1,context`x2,...}. The x1,x2 may be either symbols or strings. \
\\nIf context is not specified, the value of $SBML$Context is used.  If \
context is specified, it may be specified either as a string or a symbol. If \
it is specified as a string, the terminating \\\"`\\\" is optional and will \
be added if it is missing.  If context is specified as a symbol the \\\"`\\\" \
may not be specified and will be supplied by contextify.\>\""}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"contextify", "[", 
    RowBox[{
     RowBox[{"x_", "?", "StringQ"}], ",", 
     RowBox[{"context_:", "\"\<\>\""}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "c"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"x", "==", "\"\<\>\""}], " ", "\[Or]", " ", 
         RowBox[{"x", "==", "\"\<Indeterminate\>\""}]}], ",", " ", 
        RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "reversed", " ", "the", " ", "following", " ", "two", " ", "lines", 
         " ", "in", " ", "2.7", ".0", ".2", " ", "10"}], "-", "15", "-", 
        "07"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "and", " ", "add", " ", "check", " ", "for", " ", "ValueQ", " ", "of", 
        " ", "$SBML$Context"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "possible", " ", "for", " ", "external", " ", "program", " ", "to", 
         " ", "set", " ", "$SBML$Context", " ", "to", " ", "a", " ", "non"}], 
        "-", 
        RowBox[{"string", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"c", "=", "context"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "\[Equal]", "\"\<\>\""}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ValueQ", "[", "$SBML$Context", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"c", "=", "$SBML$Context"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Warning:\>\"", "//", "boldRed"}], ",", " ", 
             RowBox[{"\"\< contextify: \>\"", "//", "boldBlue"}], ",", " ", 
             RowBox[{
             "\"\< $SBML$Context has not been initialized. x = \>\"", "//", 
              "boldBlack"}], ",", " ", 
             RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"c", "=", "\"\<None\>\""}]}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"ToString", "[", "c", "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"c", "==", "\"\<None\>\""}], " ", "\[Or]", " ", 
         RowBox[{"c", "==", "\"\<None`\>\""}]}], ",", " ", 
        RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"c", ",", 
           RowBox[{"-", "1"}]}], "]"}], "\[NotEqual]", " ", "\"\<`\>\""}], 
        ",", " ", "\[IndentingNewLine]", 
        RowBox[{"s", "=", 
         RowBox[{"c", "<>", "\"\<`\>\"", "<>", "x"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"s", "=", 
          RowBox[{"c", "<>", "x"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"contextify", "[", 
     RowBox[{
      RowBox[{"x_", "\[Rule]", " ", "y_"}], ",", " ", 
      RowBox[{"context_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"contextify", "[", 
       RowBox[{"x", ",", "context"}], "]"}], "\[Rule]", " ", 
      RowBox[{"contextify", "[", 
       RowBox[{"y", ",", "context"}], "]"}]}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"contextify", "[", 
    RowBox[{
     RowBox[{"x_", "?", "ListQ"}], ",", 
     RowBox[{"context_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"contextify", "[", 
       RowBox[{"#", ",", "context"}], "]"}], "&"}], ",", " ", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"contextify", "[", 
    RowBox[{
     RowBox[{"x_", "[", "y___", "]"}], ",", 
     RowBox[{"context_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"contextify", "[", 
     RowBox[{"x", ",", "context"}], "]"}], "[", "y", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"contextify", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"context_:", "\"\<\>\""}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"Head", "[", "x", "]"}], "]"}], "==", "\"\<Symbol\>\""}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"contextify", "[", 
             RowBox[{
              RowBox[{"ToString", "[", "x", "]"}], ",", "context"}], "]"}], "//",
             "ToExpression"}], "//", "Return"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<contextify: \>\"", "//", "boldBlue"}], ",", " ", 
         RowBox[{
         "\"\<The argument to contextify must be a string or a symbol; \
argument used: \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{"x", "//", "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"Return", "[", "x", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], " ", ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"unitsContextify", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"contextify", "[", 
     RowBox[{"x", ",", " ", "$SBML$UnitsContext"}], "]"}]}], ";"}], 
  " "}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388353516968746*^9, 3.38835357137715*^9}, {
  3.388353823638442*^9, 3.3883538256004143`*^9}, {3.389123819377439*^9, 
  3.389123879071167*^9}, {3.389123935005053*^9, 3.38912395079926*^9}, {
  3.401464898919215*^9, 3.4014649625052643`*^9}, {3.401465427523616*^9, 
  3.401465435448286*^9}, {3.4014655428386517`*^9, 3.401465656437395*^9}, {
  3.401465708007509*^9, 3.40146573559824*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"decontextify", "::", "usage"}], "=", 
   "\"\<decontextify[x] returns the symbol or string x representing a symbol \
with all context references removed.\\ndecontextify[{x1,x2,...}] applies \
decontextify to each of x1, x2, .. and returns a list with the context \
removed from  each symbol or string. \>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"decontextify", "[", 
    RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", "q"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"StringPosition", "[", 
        RowBox[{"x", ",", "\"\<`\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "p", "]"}], "<", "1"}], ",", " ", 
        RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"p", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Last", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"q", "=", " ", 
       RowBox[{"StringDrop", "[", 
        RowBox[{"x", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "q", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"decontextify", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"decontextify", ",", "x"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"decontextify", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"decontextify", "[", 
          RowBox[{"ToString", "[", 
           RowBox[{"InputForm", "[", "x", "]"}], "]"}], "]"}], "//", 
         "ToExpression"}], "//", "Return"}], ";"}]}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"mod", " ", 
       RowBox[{
        RowBox[{"7", "/", "29"}], "/", "03"}]}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"Head", "[", "x", "]"}], "]"}], "==", "\"\<Symbol\>\""}], 
         ",", 
         RowBox[{
          RowBox[{
           RowBox[{"decontextify", "[", 
            RowBox[{"ToString", "[", "x", "]"}], "]"}], "//", 
           "ToExpression"}], "//", "Return"}]}], "]"}], ";", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"printWarning", "[", 
        RowBox[{
        "\"\<The argument to decontextify must be a string, symbol, or list \
thereof: \>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"InputForm", "[", "x", "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "x", "]"}], ";"}], "\[IndentingNewLine]", 
      "*)"}], " ", "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"decontextify", "[", 
     RowBox[{
      RowBox[{"x_", "?", "StringQ"}], ",", " ", 
      RowBox[{"context_", "?", "StringQ"}]}], "]"}], ":=", " ", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"{", 
       RowBox[{"context", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], "]"}]}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"decontextify", "[", 
     RowBox[{
      RowBox[{"x_", "?", "ListQ"}], ",", " ", 
      RowBox[{"context_", "?", "StringQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"decontextify", "[", 
        RowBox[{"#", ",", "context"}], "]"}], "&"}], ",", "x"}], "]"}]}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"decontextify", "[", 
     RowBox[{"x_", ",", " ", 
      RowBox[{"context_", "?", "StringQ"}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"decontextify", "[", 
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"InputForm", "[", "x", "]"}], "]"}], ",", "context"}], 
          "]"}], "//", "ToExpression"}], "//", "Return"}], ";"}]}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"mod", " ", 
       RowBox[{
        RowBox[{"7", "/", "29"}], "/", "03"}]}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"Head", "[", "x", "]"}], "]"}], "==", "\"\<Symbol\>\""}], 
         ",", 
         RowBox[{
          RowBox[{
           RowBox[{"decontextify", "[", 
            RowBox[{
             RowBox[{"ToString", "[", "x", "]"}], ",", "context"}], "]"}], "//",
            "ToExpression"}], "//", "Return"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"printWarning", "[", 
        RowBox[{
        "\"\<The argument to decontextify must be a string, symbol, or list \
thereof: \>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"InputForm", "[", "x", "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "x", "]"}], ";"}], "\[IndentingNewLine]", 
      "*)"}], " ", "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"unitsDecontextify", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"decontextify", "[", 
     RowBox[{"x", ",", " ", "$SBML$UnitsContext"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]"}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
functionate, functionize, defunctionize, initialize, parameterate, \
differentitize\
\>", "Subsection"],

Cell["\<\
modify functionate 2.7.0.2 10-15-07 to allow things like x[y,z] to be \
functionated\
\>", "Text",
 CellChangeTimes->{{3.4014696213201113`*^9, 3.401469641254162*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["functionate",
     FontColor->RGBColor[0, 0, 1]], "[", 
    RowBox[{
     RowBox[{"f_", "?", "StringQ"}], ",", " ", 
     RowBox[{"arg_:", "\"\<t\>\""}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "tvariable", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tvariable", " ", "=", " ", 
       RowBox[{"ToString", "[", "arg", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"f", "<>", "\"\<[\>\"", "<>", "tvariable", "<>", "\"\<]\>\""}],
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["functionate",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["[",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      RowBox[{
       StyleBox[
        RowBox[{
         StyleBox["f",
          FontColor->RGBColor[0, 0, 1]], "_"}]], "?", "ListQ"}], ",", 
      RowBox[{"arg_:", "\"\<t\>\""}]}], "]"}], ":=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"functionate", "[", 
        RowBox[{"#", ",", "arg"}], "]"}], "&"}], ",", " ", "f"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["functionate",
      FontColor->RGBColor[0, 0, 1]], "[", 
     RowBox[{"f_", ",", " ", 
      RowBox[{"arg_:", "\"\<t\>\""}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "g", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"Head", "[", "f", "]"}], "]"}], "==", "\"\<Symbol\>\""}], 
         ","}], " "}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"g", "=", 
        RowBox[{"functionate", "[", 
         RowBox[{
          RowBox[{"ToString", "[", "f", "]"}], ",", " ", 
          RowBox[{"ToString", "[", "arg", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"ToExpression", "[", "g", "]"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{" ", "]"}], ";", "\[IndentingNewLine]", " ", 
       RowBox[{"Print", "[", 
        RowBox[{
         RowBox[{"\"\<Warning: \>\"", "//", "boldRed"}], ",", " ", 
         RowBox[{"\"\<functionate: \>\"", "//", "boldBlack"}], ",", " ", 
         RowBox[{
         "\"\< input must be a string or symbol. Actual input: \>\"", "//", 
          "boldBlack"}], ",", " ", 
         RowBox[{"f", "//", "boldBlue"}], ",", " ", 
         RowBox[{
         "\"\< Notify developer of possible program bug.\>\"", "//", 
          "boldRed"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "f", "]"}], ";"}], " ", "*)"}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"defunctionate", "[", 
    RowBox[{"f_", "[", "t_", "]"}], "]"}], ":=", "f"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"defunctionate", "[", 
    RowBox[{"f_", "?", "StringQ"}], "]"}], ":=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"f", ",", " ", 
     RowBox[{
      RowBox[{"\"\<[\>\"", "~~", "___", "~~", "\"\<]\>\""}], "\[Rule]", " ", 
      "\"\<\>\""}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"defunctionate", "[", "f_", "]"}], ":=", "f"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["functionize",
     FontColor->RGBColor[0, 0, 1]], "[", 
    RowBox[{"f_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"functionize", "[", 
    RowBox[{"f", ",", " ", "\"\<t\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["functionize",
      FontColor->RGBColor[0, 0, 1]], "[", 
     RowBox[{
      RowBox[{"f_", "?", "StringQ"}], ",", " ", 
      RowBox[{"arg_", "?", "StringQ"}]}], "]"}], ":=", " ", 
    RowBox[{
    "f", "<>", "\"\<\[LeftDoubleBracket]\>\"", "<>", "arg", "<>", 
     "\"\<\[RightDoubleBracket]\>\""}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["defunctionize",
     FontColor->RGBColor[0, 0, 1]], "[", 
    RowBox[{"f_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"f", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<\[LeftDoubleBracket]\>\"", "\[Rule]", " ", "\"\<[\>\""}], 
       ",", " ", 
       RowBox[{
       "\"\<\[RightDoubleBracket]\>\"", "\[Rule]", " ", "\"\<]\>\""}]}], 
      "}"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.397075581299181*^9, 3.397075597198329*^9}, {
  3.397075809623825*^9, 3.397075824796924*^9}, {3.397856243874199*^9, 
  3.3978562886950817`*^9}, {3.397856322479907*^9, 3.397856361602763*^9}, {
  3.401468874712729*^9, 3.40146898751363*^9}, {3.401469036870816*^9, 
  3.401469037427375*^9}, {3.401469527286097*^9, 3.401469548370392*^9}, {
  3.401469651343144*^9, 3.4014696548096952`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["initialize",
     FontColor->RGBColor[0, 0, 1]], "[", 
    RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"functionate", "[", 
     RowBox[{"x", ",", "\"\<0\>\""}], "]"}], "<>", "\"\<==\>\"", "<>", " ", 
    RowBox[{"SBMLIC", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["initialize",
     FontColor->RGBColor[0, 0, 1]], "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"initialize", ",", "x"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["initialize",
      FontColor->RGBColor[0, 0, 1]], "[", "x___", "]"}], ":=", " ", 
    RowBox[{"printWarning", "[", 
     RowBox[{
     "\"\<initialize:: program error: argument must be string or list of \
strings: \\\"\>\"", "<>", 
      RowBox[{"ToString", "[", "x", "]"}], "<>", "\"\<\\\"\>\""}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"parameterate", "[", 
     RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"x", "<>", "\"\<\[Rule]\>\"", "<>", 
     RowBox[{"SBMLIC", "[", "x", "]"}]}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"parameterate", "[", 
    RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"parameterate", ",", " ", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["parameterate",
      FontColor->RGBColor[0, 0, 1]], "[", "x___", "]"}], ":=", " ", 
    RowBox[{"printWarning", "[", 
     RowBox[{
     "\"\<parameterate:: program error: argument must be string or list of \
strings: \\\"\>\"", "<>", 
      RowBox[{"ToString", "[", "x", "]"}], "<>", "\"\<\\\"\>\""}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"differentize", "[", 
     RowBox[{"f_", ",", " ", 
      RowBox[{"arg_:", "\"\<t\>\""}]}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "g", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"g", "=", " ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"functionate", "[", 
           RowBox[{
            RowBox[{"stringer", "[", "f", "]"}], ",", " ", "arg"}], "]"}], 
          ",", " ", 
          RowBox[{"\"\<[\>\"", "\[Rule]", " ", "\"\<'[\>\""}]}], "]"}]}], ";",
        " ", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "[", "f", "]"}], ",", " ", 
         RowBox[{"Return", "[", "g", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"ToExpression", "[", "g", "]"}], "]"}], ";"}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " "}]}], "Input",
 InitializationCell->True],

Cell[BoxData[
 SuperscriptBox["Null", "7"]], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["replacementRules", "Subsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"addReplacementRule", "[", 
    RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "newrule", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"if", " ", "its", " ", "there"}], ",", " ", 
       RowBox[{"remove", " ", "old", " ", "rule"}]}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"removeReplacementRule", "[", "x", "]"}], ";", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"don", "'"}], "t", " ", "create", " ", "a", " ", 
           "replacement", " ", "rule", " ", "unless", " ", "there", " ", "is",
            " ", "something", " ", "to", " ", "replace"}], " ", "-", " ", 
          RowBox[{
           RowBox[{"don", "'"}], "t", " ", "add", " ", "rules", " ", "of", 
           " ", "the", " ", "form", " ", "x"}]}], "\[Rule]", 
         "Indeterminate"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<x=\>\"", ",", "x", ",", "\"\< ic=\>\"", ",", " ", 
           RowBox[{"SBMLIC", "[", "x", "]"}]}], "]"}], ";"}], " ", "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"SBMLIC", "[", "x", "]"}], "\[NotEqual]", " ", 
         RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], ",", 
        " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"newrule", " ", "=", 
          RowBox[{"parameterate", "[", "x", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"SBMLReplacementRules", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"SBMLReplacementRules", ",", " ", 
            RowBox[{"ToExpression", "[", "newrule", "]"}]}], "]"}]}], ";"}]}],
        "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<replacement rule: \>\"", ",", "newrule"}], "]"}], 
         ";"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"newrule", ",", "\"\< added.\>\""}], "]"}], ";"}], " ", 
         "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addReplacementRule", "[", 
     RowBox[{"x_", "?", "ListQ"}], "]"}], ":=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{"addReplacementRule", ",", "x"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addReplacementRule", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"printWarning", "[", 
     RowBox[{
     "\"\<addReplacementRule: program error: argument must be a string: \
\\\"\>\"", "<>", 
      RowBox[{"ToString", "[", 
       RowBox[{"InputForm", "[", "x", "]"}], "]"}], "<>", "\"\<\\\"\>\""}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addLocalReplacementRule", "[", 
    RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "newrule", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newrule", " ", "=", 
       RowBox[{"parameterate", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"SBMLReplacementRules", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"SBMLReplacementRules", ",", " ", 
         RowBox[{"ToExpression", "[", "newrule", "]"}]}], "]"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"addLocalReplacementRule", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"printWarning", "[", 
     RowBox[{
     "\"\<addLocalReplacementRule: program error: argument must be a string: \
\\\"\>\"", "<>", "x", "<>", "\"\<\\\"\>\""}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeReplacementRule", "[", 
     RowBox[{"y_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p", ",", "x"}], "}"}], ",", "\[IndentingNewLine]", 
      StyleBox[
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"following", " ", "line", " ", "added", " ", "7"}], "-", 
           "28", "-", "03"}], ";", " ", "previously"}], ",", " ", 
         RowBox[{
          RowBox[{"x", " ", "was", " ", "argument"}], ";", " ", 
          RowBox[{
          "but", " ", "SBMLReplacementRules", " ", "are", " ", "all", " ", 
           "expressions", " ", "and", " ", "not", " ", "strings"}]}]}], "*)"}],
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"x", "=", " ", 
        RowBox[{"ToExpression", "[", "y", "]"}]}], ";", "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "inefficient", " ", "but", " ", "elegant", " ", "algorithm"}], " ", 
         "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"SBMLReplacementRules", "=", 
           RowBox[{"Select", "[", 
            RowBox[{"SBMLReplacementRules", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"ToString", "[", 
                 RowBox[{"First", "[", "#", "]"}], "]"}], "\[NotEqual]", " ", 
                "x"}], ")"}], "&"}]}], "]"}]}], ";"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "inelegant", " ", "but", " ", "optimized", " ", "algorithm"}], " ", 
         "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
         "while", " ", "loop", " ", "is", " ", "used", " ", "because", " ", 
          "there", " ", "may", " ", "be", " ", "more", " ", "than", " ", 
          "one", " ", 
          RowBox[{"rule", "!"}]}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{"p", "=", 
        RowBox[{"Position", "[", 
         RowBox[{
          RowBox[{"First", "/@", "SBMLReplacementRules"}], ",", "x"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
          "\"\<removeReplacementRule before:\>\"", ",", "y", ",", "\"\<,\>\"",
            ",", "SBMLReplacementRules", ",", "\"\<,\>\"", ",", "p"}], "]"}], 
         ";"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "p", "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"First", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{"p", " ", "=", " ", 
           RowBox[{"First", "[", "p", "]"}]}], ";", " ", 
          "\[IndentingNewLine]", 
          StyleBox[
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"following", " ", "line", " ", "changed", " ", "7"}], 
              "-", "28", "-", 
              RowBox[{"03", " ", "from", " ", 
               RowBox[{"Drop", "[", 
                RowBox[{"r", ",", 
                 RowBox[{"{", "p", "}"}]}], "]"}]}]}], ";", " ", 
             RowBox[{"r", " ", "is", " ", "undefined", 
              RowBox[{"??", 
               RowBox[{"!", "?"}]}]}]}], " ", "*)"}],
           FontWeight->"Plain"], 
          StyleBox["\[IndentingNewLine]",
           FontWeight->"Plain"], 
          RowBox[{"SBMLReplacementRules", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"SBMLReplacementRules", ",", 
             RowBox[{"{", "p", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"p", "=", 
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"First", "/@", "SBMLReplacementRules"}], ",", "x"}], 
            "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<removeReplacementRule after:\>\"", ",", "SBMLReplacementRules"}],
         "]"}], ";"}], " ", "*)"}], " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"removeReplacementRule", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"printWarning", "[", 
     RowBox[{
     "\"\<removeReplacementRule: program error: argument must be a string: \\\
\"\>\"", "<>", "x", "<>", "\"\<\\\"\>\""}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"evaluateReplacementRules", "[", 
     RowBox[{"expression_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"$SBML$evaluateParameters", ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"s", "=", " ", 
           RowBox[{"ToExpression", "[", "expression", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"s", " ", "=", " ", 
           RowBox[{"(", 
            RowBox[{"s", "/.", "SBMLReplacementRules"}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"s", "=", 
           RowBox[{"ToString", "[", 
            RowBox[{"InputForm", "[", "s", "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "s", "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "expression", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"evaluateReplacementRules", "[", "expression_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"$SBML$evaluateParameters", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"s", " ", "=", " ", 
          RowBox[{"(", 
           RowBox[{"expression", "/.", "SBMLReplacementRules"}], ")"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "s", "]"}], ";"}]}], " ", 
       "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "expression", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["evaluateConstantValues", "Subsection"],

Cell["\<\
given an expression, evaluate all the symbols that correspond to SBML \
parameters \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"evaluateConstantValues", "[", "expression_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ConstantValue", ",", "s", ",", "v"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"ConstantValue", "[", "x_", "]"}], ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"v", ",", "sx"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"sx", " ", "=", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"StringQ", "[", "x", "]"}], ",", " ", "x", ",", "  ", 
              RowBox[{"ToString", "[", "x", "]"}]}], "]"}]}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"MathSBML`Private`SBMLParameterQ", "[", "sx", "]"}]}], 
             ",", " ", 
             RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"v", "=", " ", 
            RowBox[{"MathSBML`Private`SBMLIC", "[", "sx", "]"}]}], ";", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"v", "==", "\"\<Indeterminate\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"ToExpression", "[", "v", "]"}], "]"}], ";"}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"s", "=", " ", 
        RowBox[{"ToString", "[", 
         RowBox[{"InputForm", "[", "expression", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"s", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<*\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", 
            RowBox[{"\"\</\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<^\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<+\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<-\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", 
            RowBox[{"\"\<(\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<)\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<[\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<]\>\"", "\[Rule]", " ", "\"\<,\>\""}]}], "}"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"s", ",", "1"}], "]"}], "==", "\"\<,\>\""}], ",", " ", 
         RowBox[{"s", " ", "=", " ", 
          RowBox[{"StringDrop", "[", 
           RowBox[{"s", ",", "1"}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"s", ",", 
            RowBox[{"-", "1"}]}], "]"}], "==", "\"\<,\>\""}], ",", 
         RowBox[{"s", "=", 
          RowBox[{"StringDrop", "[", 
           RowBox[{"s", ",", 
            RowBox[{"-", "1"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"s", "=", 
        RowBox[{"\"\<{\>\"", "<>", "s", "<>", "\"\<}\>\""}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"s", "=", " ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"s", ",", 
          RowBox[{"\"\< \>\"", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], ";", 
       " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"StringPosition", "[", 
            RowBox[{"s", ",", "\"\<,,\>\""}], "]"}], "]"}], ">", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"s", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"s", ",", 
             RowBox[{"\"\<,,\>\"", "\[Rule]", " ", "\"\<,\>\""}]}], "]"}]}], 
          ";"}]}], " ", "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{
         RowBox[{"ToExpression", "[", 
          RowBox[{"\"\<{\>\"", "<>", "s", "<>", "\"\<}\>\""}], "]"}], "//", 
         "Flatten"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"s", ",", " ", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{"NumberQ", "[", "#", "]"}]}], "&"}]}], "]"}], "//", 
         "Union"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"s", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"s", ",", " ", 
          RowBox[{
           RowBox[{"MathSBML`Private`SBMLParameterQ", "[", 
            RowBox[{"ToString", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], ";",
        " ", "\[IndentingNewLine]", 
       RowBox[{"v", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{"ConstantValue", ",", "s"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r", "=", " ", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", "\[Rule]", " ", "#2"}], "&"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", "v"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"expression", "/.", "r"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], " "}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["translateFormula", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"translateFormula", "[", "f_", "]"}], ":=", " ", 
     RowBox[{"translateFormula", "[", 
      RowBox[{"f", ",", " ", "$SBML$Context"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"translateFormula", "[", 
      RowBox[{"f_", ",", "context_"}], "]"}], ":=", "  ", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"dbg", "=", "False"}], ",", "\[IndentingNewLine]", "s", ",", 
         "p", ",", "p1", ",", 
         RowBox[{"sbmlSymbols", "=", 
          RowBox[{"{", 
           RowBox[{
           "\"\<(\>\"", ",", "\"\<)\>\"", ",", "\"\<-\>\"", ",", "\"\<^\>\"", 
            ",", "\"\<*\>\"", ",", "\"\</\>\"", ",", "\"\<+\>\"", ",", 
            "\"\<,\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"level1pdf", "=", 
          RowBox[{"{", 
           RowBox[{
           "\"\<abs\>\"", ",", "\"\<acos\>\"", ",", "\"\<asin\>\"", ",", 
            "\"\<atan\>\"", ",", "\"\<ceil\>\"", ",", "\"\<cos\>\"", ",", 
            "\"\<exp\>\"", ",", "\"\<floor\>\"", ",", "\"\<log\>\"", ",", 
            "\"\<log10\>\"", ",", "\"\<pow\>\"", ",", "\"\<sqr\>\"", ",", 
            "\"\<sqrt\>\"", ",", "\"\<sin\>\"", ",", "\"\<tan\>\"", ",", 
            "\"\<mass\>\"", ",", "\"\<uui\>\"", ",", "\"\<uur\>\"", ",", 
            "\"\<uuhr\>\"", ",", "\"\<isouur\>\"", ",", "\"\<hilli\>\"", ",", 
            "\"\<hillr\>\"", ",", "\"\<hillmr\>\"", ",", "\"\<hillmmr\>\"", 
            ",", "\"\<usii\>\"", ",", "\"\<usir\>\"", ",", "\"\<uai\>\"", 
            ",", "\"\<ucii\>\"", ",", "\"\<ucir\>\"", ",", "\"\<unii\>\"", 
            ",", "\"\<unir\>\"", ",", "\"\<uuci\>\"", ",", "\"\<uucr\>\"", 
            ",", "\"\<umi\>\"", ",", "\"\<umr\>\"", ",", "\"\<uaii\>\"", ",", 
            "\"\<uar\>\"", ",", "\"\<ucti\>\"", ",", "\"\<uctr\>\"", ",", 
            "\"\<umai\>\"", ",", "\"\<umar\>\"", ",", "\"\<uhmi\>\"", ",", 
            "\"\<uhmr\>\"", ",", "\"\<ualii\>\"", ",", "\"\<ordubr\>\"", ",", 
            "\"\<ordbur\>\"", ",", "\"\<ordbbr\>\"", ",", "\"\<ppbr\>\""}], 
           "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"allowedCharacters", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", ",", "\"\<D\>\"", 
            ",", "\"\<E\>\"", ",", "\"\<F\>\"", ",", "\"\<G\>\"", ",", 
            "\"\<H\>\"", ",", "\"\<I\>\"", ",", "\"\<J\>\"", ",", "\"\<K\>\"",
             ",", "\"\<L\>\"", ",", "\"\<M\>\"", ",", "\"\<N\>\"", ",", 
            "\"\<O\>\"", ",", "\"\<P\>\"", ",", "\"\<Q\>\"", ",", "\"\<R\>\"",
             ",", "\"\<S\>\"", ",", "\"\<T\>\"", ",", "\"\<U\>\"", ",", 
            "\"\<V\>\"", ",", "\"\<W\>\"", ",", "\"\<X\>\"", ",", "\"\<Y\>\"",
             ",", "\"\<Z\>\"", ",", "\"\<a\>\"", ",", "\"\<b\>\"", ",", 
            "\"\<c\>\"", ",", "\"\<d\>\"", ",", "\"\<e\>\"", ",", "\"\<f\>\"",
             ",", "\"\<g\>\"", ",", "\"\<h\>\"", ",", "\"\<i\>\"", ",", 
            "\"\<j\>\"", ",", "\"\<k\>\"", ",", "\"\<l\>\"", ",", "\"\<m\>\"",
             ",", "\"\<n\>\"", ",", "\"\<o\>\"", ",", "\"\<p\>\"", ",", 
            "\"\<q\>\"", ",", "\"\<r\>\"", ",", "\"\<s\>\"", ",", "\"\<t\>\"",
             ",", "\"\<u\>\"", ",", "\"\<v\>\"", ",", "\"\<w\>\"", ",", 
            "\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", ",", "\"\<0\>\"",
             ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", ",", 
            "\"\<4\>\"", ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"",
             ",", "\"\<8\>\"", ",", "\"\<9\>\"", ",", "\"\<(\>\"", ",", 
            "\"\<)\>\"", ",", "\"\<-\>\"", ",", "\"\<^\>\"", ",", "\"\<*\>\"",
             ",", "\"\</\>\"", ",", "\"\<+\>\"", ",", "\"\<,\>\"", ",", 
            "\"\<.\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"exponentCharacters", "=", 
          RowBox[{"{", 
           RowBox[{
           "\"\<E\>\"", ",", "\"\<e\>\"", ",", "\"\<D\>\"", ",", "\"\<d\>\"", 
            ",", "\"\<Q\>\"", ",", "\"\<q\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", "isAFunction", ",", "\[IndentingNewLine]", 
         "isANumber", ",", "\[IndentingNewLine]", "isASymbol", ",", 
         "\[IndentingNewLine]", "symbolRules", ",", "ctxt", ",", 
         "punctuation", ",", "bracketLocations", ",", "n", ",", "findMatch", 
         ",", "closing", ",", " ", "isAVariable", ",", " ", "badCharacters", 
         ",", " ", "cc", ",", "isTime", ",", "endsWithExponentCharacter", ",",
          "possiblemantissaQ", ",", "i", ",", "ch", ",", "cnext", ",", 
         "pnext"}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"cpuSet", "[", "]"}], ";"}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          StyleBox["isAFunction",
           FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"level1pdf", ",", "x"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["isANumber",
           FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"CharacterRange", "[", 
            RowBox[{"\"\<0\>\"", ",", "\"\<9\>\""}], "]"}], ",", 
           RowBox[{"StringTake", "[", 
            RowBox[{"x", ",", "1"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["isTime",
           FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
         RowBox[{"(", 
          RowBox[{"x", "==", "\"\<t\>\""}], ")"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["isASymbol",
           FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
         RowBox[{"\[Not]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"isAFunction", "[", "x", "]"}], " ", "\[Or]", 
            RowBox[{"isANumber", "[", "x", "]"}], "\[Or]", 
            RowBox[{"isTime", "[", "x", "]"}]}], ")"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["isAVariable",
           FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"isASymbol", "[", "x", "]"}], " ", "\[And]", " ", 
           RowBox[{"SBMLVariableQ", "[", "x", "]"}]}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["endsWithExponentCharacter",
           FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"exponentCharacters", ",", 
           RowBox[{"StringTake", "[", 
            RowBox[{"x", ",", 
             RowBox[{"-", "1"}]}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          StyleBox["possiblemantissaQ",
           FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
         RowBox[{
          RowBox[{"isANumber", "[", "x", "]"}], " ", "\[And]", " ", 
          StyleBox[
           RowBox[{"endsWithExponentCharacter", "[", "x", "]"}],
           FontColor->RGBColor[0, 0, 1]]}]}], 
        StyleBox[";",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox[" ",
         FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ctxt", " ", "=", " ", "context"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringTake", "[", 
            RowBox[{"ctxt", ",", 
             RowBox[{"-", "1"}]}], "]"}], "\[NotEqual]", " ", "\"\<`\>\""}], 
          ",", " ", 
          RowBox[{"ctxt", " ", "=", " ", 
           RowBox[{"ctxt", "<>", "\"\<`\>\""}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"ff", "=", 
         RowBox[{"StringReplace", "[", 
          RowBox[{"f", ",", 
           RowBox[{"\"\< \>\"", "\[Rule]", " ", "\"\<\>\""}]}], "]"}]}], ";", 
        
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{"Check", " ", "for", " ", "bad", " ", "characters"}], "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        RowBox[{"cc", " ", "=", " ", 
         RowBox[{"Characters", " ", "[", "ff", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"badCharacters", " ", "=", " ", 
         RowBox[{"Complement", "[", 
          RowBox[{"cc", ",", " ", "allowedCharacters"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"badCharacters", " ", "=", " ", 
         RowBox[{"Complement", "[", 
          RowBox[{"badCharacters", ",", " ", 
           RowBox[{"{", "$SBML$Underscorecharacter", "}"}]}], "]"}]}], ";", 
        "  ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "badCharacters", "]"}], ">", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"printWarning", "[", 
            RowBox[{
            "\"\<translateFormula: the formula \\\"\>\"", "<>", "f", "<>", 
             "\"\<\\\" contains the following invalid characters: \>\"", "<>", 
             RowBox[{
             "list2CommaSeparatedString", "[", "badCharacters", "]"}]}], 
            "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
          "make", " ", "sure", " ", "that", " ", "there", " ", "are", " ", 
           "at", " ", "least", " ", "some", " ", 
           RowBox[{"delimiters", "!"}]}], " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"ff", "=", 
         RowBox[{"\"\<(\>\"", "<>", "ff", "<>", "\"\<)\>\""}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"determine", " ", "where", " ", "the", " ", "non"}], "-", 
           RowBox[{"punctuation", " ", "characters", " ", "are"}]}], " ", 
          "*)"}],
         FontWeight->"Plain"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        RowBox[{"p", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Map", "[", 
           RowBox[{"Union", ",", 
            RowBox[{"StringPosition", "[", 
             RowBox[{"ff", ",", "sbmlSymbols"}], "]"}]}], "]"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"p1", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"p", ",", "2", ",", "1"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"p1", " ", "=", 
         RowBox[{"Prepend", "[", " ", 
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"p1", ",", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Last", "[", "p", "]"}], ",", 
               RowBox[{"1", "+", 
                RowBox[{"StringLength", "[", "ff", "]"}]}]}], "}"}]}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"First", "[", "p", "]"}]}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"p1", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"p1", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], "-", 
               RowBox[{"First", "[", "#", "]"}]}], ">", "1"}], ")"}], "&"}]}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"p1", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"First", "[", "#", "]"}], "+", "1"}], ",", " ", 
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], "-", "1"}]}], "}"}], "&"}], 
           ",", "p1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{"dbg", ",", "\"\<translateFormula: p1\>\"", ",", "p1"}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{"ff", ",", "#"}], "]"}], "&"}], ",", "p1"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{"dbg", ",", "\"\<translateFormula: s\>\"", ",", "s", ",", 
          RowBox[{"Length", "[", "s", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
          "determine", " ", "where", " ", "the", " ", "punctuation", " ", 
           "characters", " ", "are"}], " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        RowBox[{"punctuation", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Prepend", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", "p1", "]"}], ",", "0"}], "]"}], ",", 
           RowBox[{"1", "+", 
            RowBox[{"StringLength", "[", "ff", "]"}]}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"punctuation", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"punctuation", ",", "2"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"punctuation", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"First", "[", "#", "]"}]}], ",", 
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], "-", "1"}]}], "}"}], "&"}], 
           ",", " ", "punctuation"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"punctuation", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{"ff", ",", "#"}], "]"}], "&"}], ",", " ", 
           "punctuation"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", "\"\<translateFormula: punctuation\>\"", ",", 
          "punctuation"}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"add", " ", "context", " ", "and", " ", "function"}], "-", 
           "dependence"}], " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        RowBox[{"s", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isASymbol", "[", "#", "]"}], ",", 
              RowBox[{"contextify", "[", 
               RowBox[{"#", ",", "ctxt"}], "]"}], ",", "#"}], "]"}], "&"}], 
           ",", " ", "s"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", "\"\<translateFormula: contextified s=\>\"", ",", "s"}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"s", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isAVariable", "[", "#", "]"}], ",", 
              RowBox[{"functionize", "[", "#", "]"}], ",", "#"}], "]"}], 
            "&"}], ",", " ", "s"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", "\"\<translateFormula: functionized s=\>\"", ",", "s"}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"check", " ", "for", " ", "split", " ", 
            RowBox[{"exponential", ":", " ", 
             RowBox[{
              RowBox[{"1.5", "E"}], "-", 
              RowBox[{
              "17", " ", "will", " ", "be", " ", "split", " ", "into", " ", 
               "1.5", "E"}]}]}]}], ",", " ", 
           RowBox[{"-", 
            RowBox[{",", " ", 
             RowBox[{
              RowBox[{
              "17.", " ", "Repalce", " ", "the", " ", "1.5", "E", " ", "with",
                " ", "1.5", "E"}], "-", 
              RowBox[{
              "17", " ", "and", " ", "the", " ", "17", " ", "with", " ", 
               RowBox[{"zero", "."}]}]}]}]}]}], "  ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        RowBox[{"cnext", "=", 
         RowBox[{"s", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "<", " ", 
           RowBox[{"Length", "[", "s", "]"}]}], ",", 
          RowBox[{"i", "++"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"cn", " ", "=", " ", "cnext"}], ";", "\[IndentingNewLine]", 
           RowBox[{"cnext", "=", 
            RowBox[{"s", "[", 
             RowBox[{"[", 
              RowBox[{"i", "+", "1"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"pnext", " ", "=", " ", 
            RowBox[{"punctuation", "[", 
             RowBox[{"[", 
              RowBox[{"i", "+", "1"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"pnext", "\[Equal]", " ", "\"\<+\>\""}], " ", "\[Or]", 
              " ", 
              RowBox[{"pnext", "\[Equal]", " ", "\"\<-\>\""}]}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"possiblemantissaQ", "[", "cn", "]"}], " ", "\[And]",
                  " ", 
                 RowBox[{"isANumber", "[", "cnext", "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"s", "=", " ", 
                  RowBox[{"ReplacePart", "[", 
                   RowBox[{"s", ",", " ", 
                    RowBox[{"cn", "<>", "pnext", "<>", "cnext"}], ",", "i"}], 
                   "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"s", "=", 
                  RowBox[{"ReplacePart", "[", 
                   RowBox[{"s", ",", "\"\<0\>\"", ",", 
                    RowBox[{"i", "+", "1"}]}], "]"}]}], ";", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"cnext", " ", "=", " ", "\"\<0\>\""}], ";"}]}], " ", 
               
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"replace", " ", "with"}], " ", "+", 
                 RowBox[{"0", " ", "or"}], " ", "-", "0"}], " ", "*)"}], " ", 
               "\[IndentingNewLine]", "]"}], ";"}]}], " ", 
            "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]",
          "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"take", " ", "care", " ", "of", " ", "E"}], "-", 
           RowBox[{"form", " ", "constants"}]}], " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        RowBox[{"s", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isANumber", "[", "#", "]"}], ",", 
              RowBox[{"ToString", "[", 
               RowBox[{"InputForm", "[", 
                RowBox[{"fromEForm", "[", "#", "]"}], "]"}], "]"}], ",", 
              "#"}], "]"}], "&"}], ",", " ", "s"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", "\"\<translateFormula: Eformed s=\>\"", ",", "s"}], 
         "]"}], ";", 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{"add", " ", "opening", " ", "function", " ", "brackets"}], 
          " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox[" ",
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isAFunction", "[", "#", "]"}], ",", " ", 
              RowBox[{"#", "<>", "\"\<[\>\""}], ",", "#"}], "]"}], "&"}], ",",
            " ", "s"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", " ", "\"\<translateFormula: leading [ s=\>\"", ",", 
          "s"}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
          "turn", " ", "formula", " ", "back", " ", "into", " ", "a", " ", 
           "single", " ", "string"}], " ", "*)"}],
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        RowBox[{"s", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Drop", "[", 
                 RowBox[{"punctuation", ",", 
                  RowBox[{"-", "1"}]}], "]"}], ",", "s"}], "}"}], "]"}], ",", 
             
             RowBox[{"Last", "[", "punctuation", "]"}]}], "]"}], "//", 
           "Flatten"}], "//", "StringJoin"}]}], ";", 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
          "the", " ", "only", " ", "place", " ", "there", " ", "could", " ", 
           "have", " ", "been", " ", 
           RowBox[{"a", " ", "[", " ", 
            RowBox[{
             RowBox[{
             "is", " ", "if", " ", "we", " ", "just", " ", "put", " ", "it", 
              " ", 
              RowBox[{"there", ".", " ", "If"}], " ", "there", " ", "is", " ",
               "not", " ", "a", " ", "parenthesis", " ", "right", " ", "away",
               " ", "then", " ", "the", " ", "formula", " ", "is", " ", 
              "ill"}], "-", "formed"}], " "}]}], "*)"}],
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"StringReplace", "[", 
          RowBox[{"s", ",", 
           RowBox[{"\"\<[(\>\"", "\[Rule]", " ", "\"\<[\>\""}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"bracketLocations", "=", " ", 
         RowBox[{"StringPosition", "[", 
          RowBox[{"s", ",", "\"\<[\>\""}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"bracketLocations", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"First", ",", "bracketLocations"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", "\"\<translateFormula: brackets at \>\"", ",", " ", 
          "bracketLocations"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"n", "=", 
         RowBox[{"StringLength", "[", "s", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"for", " ", "each", " ", "function", " ", "opening"}], ",",
            " ", 
           RowBox[{"find", " ", "the", " ", "function", " ", "closing"}], ",",
            " ", 
           RowBox[{
           "and", " ", "replace", " ", "the", " ", "parenthesis", " ", "with",
             " ", "a", " ", "bracket"}]}], " ", "*)"}],
         FontWeight->"Plain"], 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], 
        RowBox[{
         RowBox[{
          StyleBox["findMatch",
           FontColor->RGBColor[0, 0, 1]], "[", "istart_", "]"}], ":=", " ", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "pcount"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pcount", " ", "=", " ", "1"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"i", " ", "=", " ", "istart"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"While", "[", 
             RowBox[{
              RowBox[{"i", "<", "n"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"i", "++"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Switch", "[", 
                RowBox[{
                 RowBox[{"StringTake", "[", 
                  RowBox[{"s", ",", 
                   RowBox[{"{", "i", "}"}]}], "]"}], ",", 
                 "\[IndentingNewLine]", "\"\<(\>\"", ",", 
                 RowBox[{"pcount", "++"}], ",", "\[IndentingNewLine]", 
                 "\"\<[\>\"", ",", 
                 RowBox[{"pcount", "++"}], ",", "\[IndentingNewLine]", 
                 "\"\<)\>\"", ",", 
                 RowBox[{"pcount", "--"}]}], "\[IndentingNewLine]", "]"}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"pcount", "\[Equal]", "0"}], ",", 
                 RowBox[{"Return", "[", "i", "]"}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "n", "]"}], ";"}]}], "\[IndentingNewLine]",
           "]"}]}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"end", " ", 
          StyleBox["findMatch",
           FontColor->RGBColor[0, 0, 1]]}], 
         StyleBox[" ",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox["*)",
          FontColor->RGBColor[0, 0, 1]]}], 
        StyleBox[" ",
         FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"closing", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{"findMatch", ",", "bracketLocations"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"closing", " ", "=", " ", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"closing", ",", "closing"}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"StringReplacePart", "[", 
          RowBox[{"s", ",", "\"\<]\>\"", ",", "closing"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", "\"\<translateFormula: closing brackets\>\"", ",", " ", 
          "s"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"defunctionize", "[", "s", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"debugPrint", "[", 
         RowBox[{
         "dbg", ",", " ", 
          "\"\<------------ translateFormula: return value: \>\"", ",", "s"}],
          "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"cpuReport", "[", "\"\<translateFormula\>\"", "]"}], ";"}], 
         "  ", "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"s", "=", 
         RowBox[{"applyLevel1MathFunctions", "[", "s", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "s", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"applyLevel1MathFunctions", "[", "formula_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{"mylog10", ",", "mysquare", ",", " ", 
         RowBox[{"r", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Global`abs", "\[Rule]", " ", "Abs"}], ",", " ", 
            RowBox[{"Global`acos", "\[Rule]", " ", "ArcCos"}], ",", " ", 
            RowBox[{"Global`asin", "\[Rule]", " ", "ArcSin"}], ",", " ", 
            RowBox[{"Global`atan", "\[Rule]", " ", "ArcTan"}], ",", 
            RowBox[{"Global`ceil", "\[Rule]", " ", "Ceiling"}], ",", " ", 
            RowBox[{"Global`cos", "\[Rule]", " ", "Cos"}], ",", " ", 
            RowBox[{"Global`exp", "\[Rule]", " ", "Exp"}], ",", " ", 
            RowBox[{"Global`floor", "\[Rule]", " ", "Floor"}], ",", " ", 
            RowBox[{"Global`log", "\[Rule]", " ", "Log"}], " ", ",", 
            RowBox[{"Global`log10", "\[Rule]", " ", "mylog10"}], ",", " ", 
            RowBox[{"Global`pow", "\[Rule]", " ", "Power"}], ",", " ", 
            RowBox[{"Global`sqr", "\[Rule]", " ", "mysquare"}], ",", 
            RowBox[{"Global`sqrt", "\[Rule]", " ", "Sqrt"}], ",", " ", 
            RowBox[{"Global`sin", "\[Rule]", " ", "Sin"}], ",", " ", 
            RowBox[{"Global`tan", "\[Rule]", " ", "Tan"}]}], " ", "}"}]}], 
         ",", "f"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"mylog10", "[", "x_", "]"}], ":=", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"10.", ",", "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"mysquare", "[", "x_", "]"}], ":=", " ", 
         RowBox[{"x", "*", "x"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"f", "=", 
         RowBox[{"stringer", "[", "formula", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"f", "=", 
         RowBox[{"ToExpression", "[", "f", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"f", "=", 
         RowBox[{"(", 
          RowBox[{"f", "/.", "r"}], ")"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"f", "=", 
         RowBox[{"stringer", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "f", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 SuperscriptBox["Null", "3"]], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["abortIfNoTag", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"abortIfNoTag", "[", 
    RowBox[{"xml_", ",", " ", "tag_"}], "]"}], ":=", " ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "xml", "]"}], "<", "1"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", " ", 
        RowBox[{"\"\<No \>\"", "//", "boldBlack"}], ",", 
        RowBox[{
         RowBox[{"quote", "[", " ", 
          RowBox[{"stringer", "[", "tag", "]"}], "]"}], "//", "boldBlue"}], 
        ",", " ", 
        RowBox[{"\"\< found.\>\"", "//", "boldBlack"}]}], "]"}], ";", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"Abort", "[", "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["list2CommaSeparatedString", "Subsection"],

Cell[BoxData["\<\"list2CommaSeparatedString[{x1,x2,...,xn}] returns the \
string \\\"x1,x2,...,xn\\\".\\nlist2CommaSeparatedString[x], where x is an \
atom returns a string \\\"x\\\".\\nOptions:\\ncomma\[Rule]string means use \
the designated string as a comma, \
e.g.,\\nlist2CommaSeparatedString[{x1,x2,x3},comma->\\\";\\\"]\\n returns \
\\\"x1;x2;x3\\\". \"\>"], "Print",
 CellTags->"Info3255938083-7703112"],

Cell[BoxData[
 RowBox[{
  RowBox[{"list2CommaSeparatedString", "[", 
   RowBox[{"l_", ",", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ll", ",", "commaValue", ",", "lcomma"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"commaValue", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"comma", "/.", 
          RowBox[{"{", "opt", "}"}]}], "/.", 
         RowBox[{"{", 
          RowBox[{"comma", "\[Rule]", " ", "\"\<,\>\""}], "}"}]}], ")"}], "//",
        "ToString"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lcomma", " ", "=", " ", 
      RowBox[{"StringLength", "[", "commaValue", "]"}]}], ";", " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ll", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", "l", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "ll", "]"}], "<", "1"}], ",", " ", 
       RowBox[{"Return", "[", "\"\<\>\"", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ll", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{"ToString", ",", " ", "ll"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ll", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"#", ",", "commaValue"}], "]"}], "&"}], ",", "ll"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ll", " ", "=", " ", 
      RowBox[{"Apply", "[", 
       RowBox[{"StringJoin", ",", "ll"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ll", " ", "=", " ", 
      RowBox[{"StringDrop", "[", 
       RowBox[{"ll", ",", 
        RowBox[{
         RowBox[{"-", "1"}], "*", "lcomma"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "ll", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["getAttributeValue(s)", "Subsection"],

Cell[BoxData["\<\"getAttributeValue[attr, val,unk,opt] where opt is a list of \
option lists, looks for a sublist of opt that contains attr\[Rule]value; \
within that sublist, the value of option unk is returned.For example, \
\\ngetAttributeValue[x, 5, y, \\n{{x\[Rule] 4, y\[Rule] 4}, {x\[Rule] 5, y\
\[Rule] 40}, {x\[Rule] 6, y\[Rule] 400}}]\\n returns the number 40\"\>"], \
"Print",
 CellTags->"Info3255931439-3412749"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getAttributeValue", "[", 
   RowBox[{
   "desiredAttribute_", ",", " ", "\[IndentingNewLine]", 
    "valueOfDesiredAttribute_", ",", " ", "\[IndentingNewLine]", 
    "unknownAttribute_", ",", " ", "\[IndentingNewLine]", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"c", ",", " ", "valueOfUnknownAttribute"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"c", " ", "=", " ", 
      RowBox[{"Cases", "[", 
       RowBox[{"opt", ",", 
        RowBox[{"{", 
         RowBox[{"___", ",", 
          RowBox[{
          "desiredAttribute", "\[Rule]", " ", "valueOfDesiredAttribute"}], 
          ",", "___"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "c", "]"}], ">", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Warning: The attribute\[Rule]value pair \>\"", "<>", 
          RowBox[{"ToString", "[", "desiredAttribute", "]"}], "<>", 
          "\"\<\[Rule]\>\"", "<>", 
          RowBox[{"ToString", "[", "valueOfDesiredAttribute", "]"}], "<>", 
          "\"\< occurs more than once.\>\""}], " ", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"c", " ", "=", " ", 
         RowBox[{"Last", "[", "c", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"c", "=", 
      RowBox[{"Flatten", "[", "c", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"valueOfUnknownAttribute", "=", 
      RowBox[{"unknownAttribute", "/.", "c"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "valueOfUnknownAttribute", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"getAttributeValues", "[", 
   RowBox[{
   "desiredAttribute_", ",", " ", "\[IndentingNewLine]", 
    "valueOfDesiredAttribute_", ",", " ", "\[IndentingNewLine]", 
    "unknownAttribute_", ",", " ", "\[IndentingNewLine]", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"c", ",", " ", "valueOfUnknownAttribute"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"c", " ", "=", " ", 
      RowBox[{"Cases", "[", 
       RowBox[{"opt", ",", 
        RowBox[{"{", 
         RowBox[{"___", ",", 
          RowBox[{
          "desiredAttribute", "\[Rule]", " ", "valueOfDesiredAttribute"}], 
          ",", "___"}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"valueOfUnknownAttribute", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"unknownAttribute", "/.", "#"}], "&"}], ",", " ", "c"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "valueOfUnknownAttribute", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["SBMLLogPlot", "Subsection"],

Cell[CellGroupData[{

Cell["log plots of interpolationSets", "Subsubsection"],

Cell["added 2.3.34", "Text"]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SBMLLogPlot", "[", 
    RowBox[{
     RowBox[{"q_", "?", "InterpolationSetListQ"}], ",", "   ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dbg", "=", "False"}], ",", " ", "vars", ",", " ", "data", ",",
        " ", "getvars", ",", " ", "times", ",", " ", "tbegin", ",", " ", 
       "tend", ",", " ", "legends", ",", " ", "colors", ",", " ", "n", ",", 
       " ", "p", ",", " ", "selectRealPositives"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"getvars", "[", 
        RowBox[{"InterpolationSet", "[", 
         RowBox[{"t1_", ",", "t2_", ",", "sol_"}], "]"}], "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "vars", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"vars", " ", "=", " ", 
           RowBox[{"First", "/@", "sol"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"vars", " ", "=", " ", 
           RowBox[{
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"stringer", "/@", "vars"}], ",", 
              RowBox[{"\"\<[t]\>\"", "\[Rule]", " ", "\"\<\>\""}]}], "]"}], "//",
             "ToExpression"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{"dbg", ",", " ", 
            RowBox[{"Print", "[", 
             RowBox[{
              RowBox[{
              "\"\<SBMLLogPlot: Interpolation Set: getVars: \>\"", "//", 
               "boldBlue"}], ",", 
              RowBox[{"\"\<{t1,t2}=\>\"", "//", "boldBlack"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"t1", ",", "t2"}], "}"}], "//", "boldRed"}], ",", " ", 
              RowBox[{"\"\<vars=\>\"", "//", "boldBlack"}], ",", 
              RowBox[{"vars", "//", "boldRed"}]}], "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"t1", ",", "t2"}], "}"}], ",", " ", "vars"}], "}"}], 
           "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{"getvars", "/@", "q"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"times", " ", "=", " ", 
       RowBox[{"First", "/@", "vars"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{"Last", "/@", "vars"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"tbegin", " ", "=", " ", 
       RowBox[{"Min", "[", "times", "]"}]}], ";", " ", 
      RowBox[{"tend", " ", "=", " ", 
       RowBox[{"Max", "[", "times", "]"}]}], ";", " ", "\[IndentingNewLine]", 
      
      RowBox[{"vars", " ", "=", " ", 
       RowBox[{
        RowBox[{"Intersection", "[", "vars", "]"}], "//", "Flatten"}]}], ";", 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "might", " ", "loose", " ", "variables", " ", "if", " ", "the", " ", 
        "sets", " ", "are", " ", "different"}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", 
      RowBox[{"legends", " ", "=", " ", 
       RowBox[{"decontextify", "[", 
        RowBox[{"stringer", "/@", "vars"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", "legends", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"colors", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"Hue", ",", 
         RowBox[{
          RowBox[{"Range", "[", "n", "]"}], "/", 
          RowBox[{"(", 
           RowBox[{"1.0", "*", "n"}], ")"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MultiPlot$Colors", "=", "colors"}], ";", "\[IndentingNewLine]", 
      RowBox[{"MultiPlot$Styles", "=", "colors"}], ";", "\[IndentingNewLine]", 
      RowBox[{"MultiPlot$Legends", " ", "=", " ", "legends"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"dbg", ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<SBMLLogPlot: Interpolation Set:\>\"", "//", "boldBlue"}], ",",
            " ", 
           RowBox[{"\"\<vars=\>\"", "//", "boldBlack"}], ",", 
           RowBox[{"vars", "//", "boldRed"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{
           RowBox[{
           "\"\<SBMLLogPlot: Interpolation Set:\>\"", "//", "boldBlue"}], ",",
            " ", 
           RowBox[{"\"\<times=\>\"", "//", "boldBlack"}], ",", 
           RowBox[{"times", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\< tbegin=\>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"tbegin", "//", "boldRed"}], ",", " ", 
           RowBox[{"\"\< tend=\>\"", "//", "boldBlack"}], ",", " ", 
           RowBox[{"tend", "//", "boldRed"}]}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"dataTable", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{"Global`t", ",", "tbegin", ",", " ", "tend", ",", " ", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"tend", "-", "tbegin"}], ")"}], "/", "50."}]}], "}"}], 
           ",", " ", "q"}], "]"}], "&"}], "/@", "vars"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{"Rest", "/@", "data"}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"selectRealPositives", "[", "z_", "]"}], ":=", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Select", "[", 
        RowBox[{"z", ",", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Im", "[", 
              RowBox[{"Last", "[", "#", "]"}], "]"}], "\[Equal]", "0"}], " ", 
            "&&", " ", 
            RowBox[{
             RowBox[{"Re", "[", 
              RowBox[{"Last", "[", "#", "]"}], "]"}], ">", 
             "SBML$LogPlotZero"}]}], ")"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{"selectRealPositives", "/@", "data"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Off", "[", 
       RowBox[{"Graphics", "::", "gptn"}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"p", "=", 
       RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Graphics`Graphics`LogListPlot", "[", 
           RowBox[{"#1", ",", "opt", ",", " ", 
            RowBox[{"PlotJoined", "\[Rule]", " ", "True"}], ",", " ", 
            RowBox[{"PlotStyle", "\[Rule]", " ", "#2"}], ",", " ", 
            RowBox[{"DisplayFunction", "\[Rule]", " ", "Identity"}]}], "]"}], 
          "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"data", ",", " ", "colors"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"On", "[", 
       RowBox[{"Graphics", "::", "gptn"}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Return", "[", 
       RowBox[{"Show", "[", 
        RowBox[{"p", ",", " ", "opt", ",", " ", 
         RowBox[{"PlotRange", "\[Rule]", " ", "All"}]}], "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["log plots of single solutions", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"SBMLLogPlot", "[", 
      RowBox[{"soln_", ",", 
       RowBox[{"var_", "?", "ListQ"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"tbegin_", ",", " ", "tend_"}], "}"}], ",", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "n", ",", "p", ",", "colors", ",", " ", "legend", ",", " ", 
         "autoscale", ",", " ", "man", ",", "mans", ",", "exps", ",", " ", 
         RowBox[{"dbg", "=", "False"}]}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"add", " ", "autoscaling", " ", "6"}], "-", "2", "-", 
          "04"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox[" ",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox[
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"figure", " ", "out", " ", "the", " ", "max"}], " ", "&"}],
           " ", "minimum", " ", "value", " ", "plotted"}], " ", "*)"}],
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       StyleBox["\[IndentingNewLine]",
        FontWeight->"Plain"], 
       RowBox[{
        RowBox[{"plottable", "=", "var"}], ";", "\[IndentingNewLine]", 
        RowBox[{"autoscale", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"findMiniMax", "[", 
            RowBox[{"soln", ",", " ", "#", ",", " ", 
             RowBox[{"{", 
              RowBox[{"tbegin", ",", "tend"}], "}"}], ",", " ", 
             RowBox[{"filterNonPositives", "\[Rule]", " ", "True"}], ",", 
             "opt"}], "]"}], "&"}], "/@", "var"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"autoscale", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", "autoscale", "]"}], ",", "Positive"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"autoscale", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Min", "[", "autoscale", "]"}], ",", " ", 
           RowBox[{"Max", "[", "autoscale", "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"n", " ", "=", " ", 
         RowBox[{"Length", "[", "plottable", "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"colors", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{"Hue", ",", 
           RowBox[{
            RowBox[{"Range", "[", "n", "]"}], "/", 
            RowBox[{"(", 
             RowBox[{"1.0", "*", "n"}], ")"}]}]}], "]"}]}], ";", 
        StyleBox["\[IndentingNewLine]",
         FontWeight->"Plain"], "\[IndentingNewLine]", 
        StyleBox[
         RowBox[{"(*", " ", 
          RowBox[{
          "now", " ", "round", " ", "off", " ", "the", " ", "mantissa"}], " ",
           "*)"}],
         FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"man", " ", "=", " ", 
         RowBox[{"MantissaExponent", "/@", "autoscale"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"mans", ",", "exps"}], "}"}], " ", "=", " ", 
         RowBox[{"Transpose", "[", "man", "]"}]}], ";", "\[IndentingNewLine]",
         "\[IndentingNewLine]", 
        RowBox[{"mans", " ", "=", " ", 
         RowBox[{"10", "*", "mans"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"mans", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Floor", "[", 
            RowBox[{"mans", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
           RowBox[{"Ceiling", "[", 
            RowBox[{"mans", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mans", " ", "=", " ", 
         RowBox[{"mans", "/", "10."}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"man", " ", "=", " ", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"mans", ",", "exps"}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"autoscale", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "*", 
            RowBox[{"(", 
             RowBox[{"10", "^", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], "&"}], "/@", 
          "man"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"autoscale", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "<", "0"}], " ", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Warning:\>\"", "//", "boldOrange"}], ",", " ", 
             RowBox[{
             "\"\< unable to autoscale logarithmic plot due to all data \
values being negative. Range of data values is \>\"", "//", "boldBlack"}], 
             ",", " ", 
             RowBox[{"autoscale", "//", "boldRed"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"autoscale", "=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"autoscale", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", "1"}], "}"}]}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"autoscale", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "<", "0"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Warning:\>\"", "//", "boldOrange"}], ",", " ", 
             RowBox[{
             "\"\< unable to fully autoscale logarithmic plot due to negative \
data value. Range of data values is: \>\"", "//", "boldBlack"}], ",", " ", 
             RowBox[{"autoscale", "//", "boldRed"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"autoscale", "=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"autoscale", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "*", "0.1"}], ",", " ", 
              RowBox[{"autoscale", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<SBMLLogPlot: autoscale = \>\"", ",", " ", "autoscale"}], 
           "]"}]}], "]"}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<SBMLLogPlot: opt = \>\"", ",", " ", 
            RowBox[{"{", "opt", "}"}]}], "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"p", " ", "=", " ", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"SBMLLogPlot", "[", 
             RowBox[{"soln", ",", " ", 
              RowBox[{"#1", "[", "Global`t", "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"tbegin", ",", "tend"}], "}"}], ",", " ", 
              RowBox[{"PlotStyle", "\[Rule]", " ", "#2"}], ",", " ", 
              RowBox[{"DisplayFunction", "\[Rule]", " ", "Identity"}], ",", 
              " ", "opt", ",", " ", 
              RowBox[{"PlotRange", "\[Rule]", " ", "autoscale"}]}], "]"}], 
            "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"plottable", ",", "colors"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", "\"\<SBMLLogPlot: p generated.\>\"", "]"}]}], 
         "]"}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"p", "=", 
         RowBox[{"Show", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"legend", " ", "=", 
         RowBox[{"{", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Graphics", "[", 
                RowBox[{"{", 
                 RowBox[{"#1", ",", 
                  RowBox[{"Line", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}], 
                "]"}], ",", 
               RowBox[{"decontextify", "[", 
                RowBox[{"ToString", "[", "#2", "]"}], "]"}]}], "}"}], "&"}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"colors", ",", "plottable"}], "}"}]}], "]"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"legend", " ", "=", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"legend", ",", " ", 
           RowBox[{"LegendPosition", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"1", ",", 
              RowBox[{"-", ".5"}]}], "}"}]}]}], "]"}]}], ";", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"p", "=", 
         RowBox[{"ShowLegend", "[", "\[IndentingNewLine]", 
          RowBox[{"p", ",", "\[IndentingNewLine]", "legend"}], 
          "\[IndentingNewLine]", "]"}]}], ";", " ", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "p", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SBMLLogPlot", "[", 
      RowBox[{"soln_", ",", " ", "var_", ",", " ", 
       RowBox[{"{", 
        RowBox[{"tbegin_", ",", " ", "tend_"}], "}"}], ",", 
       RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dbg", "=", "False"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"dbg", ",", " ", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<SBMLLogPlot: SBMLogPlot-var: opt \>\"", ",", " ", 
            RowBox[{"{", "opt", "}"}]}], "]"}]}], "]"}], ";", " ", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Graphics`Graphics`LogPlot", "[", 
          RowBox[{
           RowBox[{"Evaluate", "[", 
            RowBox[{"var", "/.", "soln"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"Global`t", ",", "tbegin", ",", "tend"}], "}"}], ",", 
           "opt"}], "]"}], "//", "Return"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], " "}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388259182551812*^9, 3.388259191701439*^9}}],

Cell[BoxData[
 SuperscriptBox["Null", "2"]], "Output"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["findMiniMax", "Subsection"],

Cell["\<\
modified 2.4.1 (10/22/04) to allow \"postiveOnly\" option - to filter \
non-positives for valid log plotting\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findMiniMax", "[", 
   RowBox[{"n_", ",", " ", "var_", ",", " ", 
    RowBox[{"{", 
     RowBox[{"tbegin_", ",", " ", "tend_"}], "}"}], ",", " ", 
    RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "npts", ",", "ops", ",", " ", "dt", ",", " ", "max", ",", "min", ",", 
      "i", ",", "x", ",", "times", ",", "if", ",", "positiveOnly", ",", 
      "msave"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ops", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", "opt", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"positiveOnly", " ", "=", " ", 
      RowBox[{
       RowBox[{"filterNonPositives", "/.", "ops"}], "/.", 
       RowBox[{"{", 
        RowBox[{"filterNonPositives", "\[Rule]", " ", "False"}], "}"}]}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"npts", " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"PlotPoints", "/.", "ops"}], "/.", 
        RowBox[{"{", 
         RowBox[{"PlotPoints", "\[Rule]", " ", "50"}], "}"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dt", " ", "=", 
      RowBox[{"Abs", "[", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"tbegin", "-", "tend"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1.0", "*", "npts"}], ")"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"times", " ", "=", " ", 
      RowBox[{"Range", "[", 
       RowBox[{
        RowBox[{"Min", "[", 
         RowBox[{"tbegin", ",", " ", "tend"}], "]"}], ",", " ", 
        RowBox[{"Max", "[", 
         RowBox[{"tbegin", ",", "tend"}], "]"}], ",", " ", "dt"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"if", " ", "=", " ", 
      RowBox[{
       RowBox[{"var", "[", "Global`t", "]"}], "/.", "n"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"max", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Evaluate", "[", 
         RowBox[{"if", "/.", 
          RowBox[{"{", 
           RowBox[{"Global`t", "\[Rule]", " ", "#"}], "}"}]}], "]"}], "&"}], "/@",
        "times"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"max", " ", "=", " ", 
      RowBox[{"Flatten", "[", "max", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"positiveOnly", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"msave", "=", "max"}], ";", "\[IndentingNewLine]", 
        RowBox[{"max", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"max", ",", "Positive"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "max", "]"}], "<", "1"}], ",", " ", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Warning:\>\"", "//", "boldOrange"}], ",", 
             RowBox[{
             "\"\< unable to plot the variable \>\"", "//", "boldBlack"}], 
             ",", 
             RowBox[{"var", "//", "boldRed"}], ",", 
             RowBox[{
             "\"\< on a logarithmic scale because it never takes on a \
positive value.\>\"", "//", "boldBlack"}]}], "]"}], ";", " ", 
           RowBox[{"max", "=", "msave"}], ";", "\[IndentingNewLine]", 
           RowBox[{"plottable", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"plottable", ",", " ", 
              RowBox[{"{", "var", "}"}]}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "max", "]"}], "\[NotEqual]", " ", 
           RowBox[{"Length", "[", "msave", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"\"\<Warning:\>\"", "//", "boldOrange"}], ",", " ", 
            RowBox[{
            "\"\< Some values of the variable \>\"", "//", "boldBlack"}], ",", 
            RowBox[{"var", "//", "boldRed"}], ",", 
            RowBox[{
            "\"\< can not be plotted on a logarithmic scale because they do \
not evaluate to a positive number.\>\"", "//", "boldBlack"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"Min", "[", "max", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"max", " ", "=", " ", 
      RowBox[{"Max", "[", "max", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"min", ",", "max"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["debugPrint", "Subsection"],

Cell[BoxData["\<\"debugPrint[flag,x1,x2,...] does nothing and returns Null if \
flag is false, and prints a debug message with the values of x1,x2,.. if flag \
is true.\"\>"], "Print",
 CellTags->"Info3255938946-3395504"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$Debug$MessageColor", "=", "Red"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$Debug$ValueColor", "=", "Blue"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$Debug$DebugColor", "=", "Green"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"debugPrint", "[", 
    RowBox[{"flag_", ",", " ", "str_", ",", " ", "value_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"msg", ",", "s"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"s", "=", " ", 
          RowBox[{
           RowBox[{"ToString", "[", "str", "]"}], "<>", "\"\<:: \>\""}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MyStyle", "[", 
            RowBox[{"\"\<>>>debug:: \>\"", ",", 
             RowBox[{"FontColor", "\[Rule]", "$Debug$DebugColor"}], ",", " ", 
             
             RowBox[{"FontWeight", "->", " ", "\"\<Bold\>\""}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"MyStyle", "[", 
            RowBox[{"s", ",", " ", 
             RowBox[{"FontColor", "\[Rule]", "$Debug$MessageColor"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"FontWeight", "->", " ", "\"\<Bold\>\""}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"MyStyle", "[", 
            RowBox[{"value", ",", 
             RowBox[{"FontColor", "\[Rule]", " ", "$Debug$ValueColor"}], ",", 
             " ", 
             RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], 
            "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"debugPrint", "[", 
    RowBox[{"flag_", ",", " ", "str_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"msg", ",", "s"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"flag", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"s", "=", " ", 
          RowBox[{
           RowBox[{"ToString", "[", "str", "]"}], "<>", "\"\<:: \>\""}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MyStyle", "[", 
            RowBox[{"\"\<>>>debug:: \>\"", ",", 
             RowBox[{"FontColor", "\[Rule]", "$Debug$DebugColor"}], ",", " ", 
             
             RowBox[{"FontWeight", "->", " ", "\"\<Bold\>\""}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"MyStyle", "[", 
            RowBox[{"s", ",", " ", 
             RowBox[{"FontColor", "\[Rule]", "$Debug$MessageColor"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"FontWeight", "->", " ", "\"\<Bold\>\""}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388261518847557*^9, 3.388261525566742*^9}, {
  3.5061915134684954`*^9, 3.506191547351755*^9}, {3.5061915812350144`*^9, 
  3.5061916140886717`*^9}, {3.506191657378748*^9, 3.5061916749755793`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["printWarning", "Subsection"],

Cell[BoxData["\<\"printWarning[x_] prints x as a warning message using the \
global attributes Warning$Color as \\\">>Waring:: x\\\".\\nprintWarning[test, \
x] prints x as a waring message only if test is True.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellTags->"Info3255944522-8077337"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"printWarning", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     StyleBox[
      RowBox[{"(*", " ", 
       RowBox[{
       "Increment", " ", "counters", " ", "even", " ", "if", " ", "printing", 
        " ", "is", " ", "inhibited", " ", "to", " ", "keep", " ", "a", " ", 
        "record", " ", "of", " ", "the", " ", "fact", " ", "that", " ", "a", 
        " ", "warning", " ", "was", " ", "issued"}], " ", "*)"}],
      FontWeight->"Plain"], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"$SBML$SessionWarnings", "++"}], ";", "\[IndentingNewLine]", 
      RowBox[{"$SBML$FileWarnings", "++"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
       "$SBML$warnings", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", "\[IndentingNewLine]", 
          RowBox[{"MyStyle", "[", 
           RowBox[{
            RowBox[{"\"\<>>Warning: \>\"", "<>", 
             RowBox[{"ToString", "[", "x", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"FontColor", "\[Rule]", " ", "$Warning$Color"}], ",", " ",
             "\[IndentingNewLine]", 
            RowBox[{"FontWeight", "\[Rule]", " ", "\"\<Bold\>\""}]}], "]"}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printWarning", "[", 
    RowBox[{"test_", ",", "x_"}], "]"}], ":=", " ", 
   RowBox[{"If", "[", 
    RowBox[{"test", ",", " ", 
     RowBox[{"printWarning", "[", "x", "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.38826153424432*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["headerPrint", "Subsection"],

Cell[BoxData["\<\"headerPrint[x] prints x as a header string using the \
attributes \[Cent]Header$Size, \[Cent]Header$Color, \[Cent]Header$Weight,\
\[Cent]Header$Font, and \[Cent]Header$Alignment.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellTags->"Info3255944711-8989918"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"headerPrint", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"MyStylePrint", "[", 
    RowBox[{"x", ",", "\[IndentingNewLine]", 
     RowBox[{"Background", "\[Rule]", " ", 
      RowBox[{"GrayLevel", "[", ".929688", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"TextAlignment", "\[Rule]", "$SBML$VerboseAlign"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FontSize", "\[Rule]", " ", "\[Cent]Header$Size"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FontFamily", "\[Rule]", " ", "\[Cent]Header$Font"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FontColor", "\[Rule]", " ", "\[Cent]Header$Color"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FontWeight", "\[Rule]", " ", "\[Cent]Header$Weight"}]}], 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.3882617029093723`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["verboseSave, verbosePrint", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"verboseSave", "[", 
    RowBox[{"title_", ",", "columnHeaders_", ",", "  ", "table_"}], "]"}], ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "new", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"new", "=", 
       RowBox[{"table", "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "\"\<Indeterminate\>\"", "\[Rule]", " ", 
           "\"\<\[CenterEllipsis]\>\""}], ",", 
          RowBox[{"\"\<\>\"", "\[Rule]", " ", "\"\<\[CenterEllipsis]\>\""}], 
          ",", 
          RowBox[{
           RowBox[{"{", "}"}], "\[Rule]", " ", "\"\<\[CenterEllipsis]\>\""}], 
          ",", " ", 
          RowBox[{
          "$SBML$IndeterminateValue", "\[Rule]", " ", "\"\<...\>\""}]}], 
         "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SBML$VerboseData", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{"SBML$VerboseData", ",", " ", 
         RowBox[{"{", 
          RowBox[{"title", ",", " ", "columnHeaders", ",", " ", "new"}], 
          "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"verbosePrint", "[", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"headerOnly", ",", "prtable"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"headerOnly", "[", 
         RowBox[{"{", 
          RowBox[{"x_", ",", " ", "y_", ",", " ", "z_"}], "}"}], "]"}], ":=", 
        " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "y", "]"}], "<", "1"}], ")"}], " ", 
         "\[And]", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "z", "]"}], "<", "1"}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"prtable", "[", 
         RowBox[{"{", 
          RowBox[{"x_", ",", " ", "y_", ",", " ", "z_"}], "}"}], "]"}], ":=", 
        " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"headerOnly", "[", 
           RowBox[{"{", 
            RowBox[{"x", ",", "y", ",", "z"}], "}"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"headerPrint", "[", "x", "]"}], ",", "\[IndentingNewLine]", 
          
          RowBox[{"printTable", "[", 
           RowBox[{"z", ",", 
            RowBox[{"columnHeaders", "\[Rule]", " ", "y"}], ",", " ", 
            RowBox[{"title", "\[Rule]", " ", "x"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"prtable", "[", "x_", "]"}], ":=", " ", 
        RowBox[{"prtable", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"x", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
           RowBox[{"x", "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{"prtable", ",", " ", "SBML$VerboseData"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",\

 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["printTable", "Subsection"],

Cell[BoxData["\<\"printTable[data] prints data in TableForm.\\nOptions \
are:\\ntitle->sting title of table\\ncolumnHeaders->{h1,h2,...} where h1,h2 \
are strings to be printed at the top of each column. The number of column \
headers must be the same number as the number of columns in the table\"\>"], \
"Print",
 CellTags->"Info3256972896-8649170"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"printTable", "[", 
    RowBox[{"data_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "h", ",", "ncol"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"t", "=", 
       RowBox[{
        RowBox[{"title", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"title", "\[Rule]", " ", "\"\<Table Header\>\""}], "}"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"headerPrint", "[", "t", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "data", "]"}], "<", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"MyStylePrint", "[", 
          RowBox[{"\"\<----- None -----\>\"", ",", "  ", 
           RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}], ",", " ", 
           
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"FontSize", "\[Rule]", " ", "$Column\[Cent]HeaderSize"}],
              ","}], " ", "*)"}], " ", 
           RowBox[{"FontColor", "\[Rule]", 
            RowBox[{"RGBColor", "[", 
             RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "]"}]}], ",", " ", 
           RowBox[{"TextAlignment", "\[Rule]", "$SBML$VerboseAlign"}]}], 
          "]"}], ";", "\[IndentingNewLine]", " ", 
         RowBox[{"Return", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ncol", " ", "=", " ", 
       RowBox[{"Length", "[", 
        RowBox[{"data", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"h", " ", "=", " ", 
       RowBox[{
        RowBox[{"columnHeaders", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"columnHeaders", "\[Rule]", " ", 
          RowBox[{"{", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"h", " ", "=", " ", 
       RowBox[{"PadRight", "[", 
        RowBox[{"h", ",", "ncol", ",", "\"\<column header\>\""}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"t", "=", 
       RowBox[{"Prepend", "[", 
        RowBox[{"data", ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"MyStyle", "[", 
             RowBox[{"#", ",", 
              RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", " ", 
              RowBox[{"FontVariations", "\[Rule]", " ", 
               RowBox[{"{", 
                RowBox[{"\"\<Underline\>\"", "\[Rule]", " ", "True"}], 
                "}"}]}], ",", " ", 
              RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}], ",", 
              RowBox[{"FontColor", "\[Rule]", "$Column\[Cent]Header$Color"}], 
              ",", " ", 
              RowBox[{
              "FontSize", "\[Rule]", " ", "$Column\[Cent]HeaderSize"}]}], 
             "]"}], "&"}], ",", "h"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MyStylePrint", "[", 
       RowBox[{
        RowBox[{"TableForm", "[", 
         RowBox[{"t", ",", " ", 
          RowBox[{"TableAlignments", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
        RowBox[{"TextAlignment", "\[Rule]", " ", "$SBML$VerboseAlign"}]}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.3882615516408777`*^9, {3.3882617237911158`*^9, 3.388261798962614*^9}, 
   3.388263219685977*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["makeIntoValidSId", "Subsection"],

Cell["\<\
hold can be a character or sequence of characters or list of characters that \
should not be changed; added 7/29/03\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeIntoValidSId", "[", 
    RowBox[{
     RowBox[{"inputString_", "?", "StringQ"}], ",", " ", "hold___"}], "]"}], ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "inputCharacters", ",", " ", "outputCharacters", ",", "replacement", 
       ",", "replacements", ",", " ", "changedCharacters", ",", 
       "interestingChange", ",", "outputString", ",", "letterOrUnderscore", 
       ",", " ", "held"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringLength", "[", "inputString", "]"}], "\[Equal]", " ", 
         "0"}], ",", " ", 
        RowBox[{"Return", "[", "inputString", "]"}]}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"held", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "hold", ",", "\"\<\[NumberSign]\>\"", ",", 
          "$SBML$Underscorecharacter"}], "  ", "}"}], "//", "Flatten"}]}], 
      ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        StyleBox["replacement",
         FontColor->RGBColor[0, 0, 1]], "[", "x_", "]"}], ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"DigitQ", "[", "x", "]"}], ",", " ", 
            RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"LetterQ", "[", "x", "]"}], ",", 
            RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"x", "==", "\"\<_\>\""}], ",", " ", 
            RowBox[{"Return", "[", "$SBML$Underscorecharacter", "]"}]}], 
           "]"}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"held", ",", "x"}], "]"}], ",", " ", 
            RowBox[{"Return", "[", "x", "]"}]}], "]"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"\"\<\[NumberSign]\>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"First", "[", 
              RowBox[{"ToCharacterCode", "[", "x", "]"}], "]"}], "]"}], "<>", 
            "\"\<\[NumberSign]\>\""}], "]"}], ";"}]}], " ", 
        "\[IndentingNewLine]", "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"end", " ", 
        StyleBox["replacement",
         FontColor->RGBColor[0, 0, 1]]}], 
       StyleBox[" ",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["*)",
        FontColor->RGBColor[0, 0, 1]]}], 
      StyleBox[" ",
       FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"letterOrUnderscore", "[", "x_", "]"}], ":=", " ", 
       RowBox[{
        RowBox[{"LetterQ", "[", "x", "]"}], " ", "\[Or]", " ", 
        RowBox[{"(", 
         RowBox[{"x", "==", "MathSBML`Private`$SBML$Underscorecharacter"}], 
         ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"inputCharacters", " ", "=", " ", 
       RowBox[{"Characters", "[", "inputString", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"outputCharacters", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"replacement", ",", "inputCharacters"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"letterOrUnderscore", "[", 
          RowBox[{"outputCharacters", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"outputCharacters", "=", 
          RowBox[{"ReplacePart", "[", 
           RowBox[{"outputCharacters", ",", 
            RowBox[{"MathSBML`Private`$SBML$Underscorecharacter", "<>", 
             RowBox[{"outputCharacters", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", "1"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"outputString", " ", "=", " ", 
       RowBox[{"Apply", "[", 
        RowBox[{"StringJoin", ",", "outputCharacters"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"changedCharacters", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#1", "\[NotEqual]", " ", "\"\<_\>\""}], ")"}], "\[And]", 
           
           RowBox[{"(", 
            RowBox[{"#1", "\[NotEqual]", " ", "#2"}], ")"}]}], "&"}], ",", 
         " ", 
         RowBox[{"{", 
          RowBox[{"inputCharacters", ",", "outputCharacters"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"interestingChange", " ", "=", " ", 
       RowBox[{"Apply", "[", 
        RowBox[{"Or", ",", " ", "changedCharacters"}], "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"interestingChange", ",", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Warning:\>\"", "//", "boldRed"}], ",", " ", 
          RowBox[{"\"\< The invalid identifier \>\"", "//", "boldBlack"}], 
          ",", " ", 
          RowBox[{"inputString", "//", "boldBlue"}], ",", 
          RowBox[{"\"\< has been replaced with \>\"", "//", "boldBlack"}], 
          ",", " ", 
          RowBox[{"outputString", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\<\\nThis may violate the model's intent.\>\"", "//", 
           "boldRed"}]}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "outputString", "]"}], ";"}]}], " ", 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["removeUnderscore", "Subsection"],

Cell[TextData[{
 "this function is used because XML allows the \"_\" as a valid character \
within an identifier, whereas the \"_\" character in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " refers to a pattern. "
}], "Text"],

Cell[BoxData["\<\"removeUnderscore[x], where x is a string, returns a string \
identical to x with all occurences of the underscore character \\\"_\\\" \
replaced with the \\\\[UnderBracket] character \
\\\"\[UnderBracket]\\\"\\nremoveUnderscore[x, replaceWith\[Rule]char replaces \
the underscore with the specified character or character string.\\nIf x is \
not a string it is converted to a string.\\nA string value is always \
returned.\"\>"], "Print",
 CellTags->"Info3256109559-6977851"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"removeUnderscore", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"opt___", "?", "OptionQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "replacement", ",", " ", "result", ",", "cc", ",", "badCharacters", ",",
        "replacements", ",", "rr", ",", "\[IndentingNewLine]", 
       RowBox[{"allowedCharacters", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", ",", "\"\<D\>\"", 
          ",", "\"\<E\>\"", ",", "\"\<F\>\"", ",", "\"\<G\>\"", ",", 
          "\"\<H\>\"", ",", "\"\<I\>\"", ",", "\"\<J\>\"", ",", "\"\<K\>\"", 
          ",", "\"\<L\>\"", ",", "\"\<M\>\"", ",", "\"\<N\>\"", ",", 
          "\"\<O\>\"", ",", "\"\<P\>\"", ",", "\"\<Q\>\"", ",", "\"\<R\>\"", 
          ",", "\"\<S\>\"", ",", "\"\<T\>\"", ",", "\"\<U\>\"", ",", 
          "\"\<V\>\"", ",", "\"\<W\>\"", ",", "\"\<X\>\"", ",", "\"\<Y\>\"", 
          ",", "\"\<Z\>\"", ",", "\"\<a\>\"", ",", "\"\<b\>\"", ",", 
          "\"\<c\>\"", ",", "\"\<d\>\"", ",", "\"\<e\>\"", ",", "\"\<f\>\"", 
          ",", "\"\<g\>\"", ",", "\"\<h\>\"", ",", "\"\<i\>\"", ",", 
          "\"\<j\>\"", ",", "\"\<k\>\"", ",", "\"\<l\>\"", ",", "\"\<m\>\"", 
          ",", "\"\<n\>\"", ",", "\"\<o\>\"", ",", "\"\<p\>\"", ",", 
          "\"\<q\>\"", ",", "\"\<r\>\"", ",", "\"\<s\>\"", ",", "\"\<t\>\"", 
          ",", "\"\<u\>\"", ",", "\"\<v\>\"", ",", "\"\<w\>\"", ",", 
          "\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", ",", "\"\<0\>\"", 
          ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", ",", 
          "\"\<4\>\"", ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", 
          ",", "\"\<8\>\"", ",", "\"\<9\>\"", ",", "\"\<(\>\"", ",", 
          "\"\<)\>\"", ",", "\"\<-\>\"", ",", "\"\<^\>\"", ",", "\"\<*\>\"", 
          ",", "\"\</\>\"", ",", "\"\<+\>\"", ",", "\"\<,\>\"", ",", 
          "\"\<.\>\"", ",", "\"\< \>\""}], "}"}]}]}], "\[IndentingNewLine]", 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"replacement", " ", "=", "  ", 
       RowBox[{
        RowBox[{"replaceWith", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"replaceWith", "\[Rule]", "$SBML$Underscorecharacter"}], 
         "}"}]}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"result", " ", "=", " ", 
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"ToString", "[", "x", "]"}], ",", " ", 
         RowBox[{"\"\<_\>\"", "\[Rule]", " ", "replacement"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cc", " ", "=", " ", 
       RowBox[{"Characters", " ", "[", "result", "]"}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"badCharacters", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"cc", ",", " ", "allowedCharacters"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"badCharacters", " ", "=", " ", 
       RowBox[{"Complement", "[", 
        RowBox[{"badCharacters", ",", " ", 
         RowBox[{"{", "$SBML$Underscorecharacter", "}"}]}], "]"}]}], ";", 
      "  ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "badCharacters", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"replacements", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<\[NumberSign]\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"First", "[", 
                RowBox[{"ToCharacterCode", "[", "#", "]"}], "]"}], "]"}], 
              "<>", "\"\<\[NumberSign]\>\""}], "&"}], ",", "badCharacters"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"rr", " ", "=", " ", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#1", "\[Rule]", "#2"}], "&"}], ",", " ", 
            RowBox[{"{", " ", 
             RowBox[{"badCharacters", ",", "replacements"}], "}"}]}], "]"}]}],
          ";", " ", "\[IndentingNewLine]", 
         RowBox[{"result", " ", "=", " ", 
          RowBox[{"StringReplace", "[", 
           RowBox[{"result", ",", "\[IndentingNewLine]", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "\[Rule]", "#2"}], "&"}], ",", " ", 
              RowBox[{"{", " ", 
               RowBox[{"badCharacters", ",", "replacements"}], "}"}]}], 
             "]"}]}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"printWarning", "[", 
          RowBox[{
          "\"\<\\\"\>\"", "<>", "x", "<>", 
           "\"\<\\\" contains the following characters that are not permitted \
in SBML: \>\"", "<>", 
           RowBox[{"list2CommaSeparatedString", "[", "badCharacters", "]"}], 
           "<>", "\"\<.  The following string has been used instead: \
\\\"\>\"", "<>", "result", "<>", "\"\<\\\"\>\""}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      StyleBox["\[IndentingNewLine]",
       FontWeight->"Plain"], 
      RowBox[{"Return", "[", "result", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["fromEForm", "Subsection"],

Cell["\<\
fromEForm[s] translates a fortran-style real number into a Mathematica real \
number, e.g, 5.9e-17 is translated into 5.9*10^-17.  \
\>", "Text",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellTags->"Info3257154725-3925981"],

Cell[TextData[{
 "a mantissa is either (optional -) (0 or more digits)[optional .] (1 or more \
digits) \n  or (optional -) (1 or more digits) [optional .] ( 0 or more \
digits)\n  it uses this form so that the string \".\" will not be a mantissa\n\
  \n  an exponent is (optional -) (1 or more digits)\n  \n  modified v 2.5.16 \
6/8/06 \n  modified v 2.5.17 6/16/06 to allow upper case E\n  2.6.0.0.p960924 \
allow \"+\" sign in mantissa or exponent as well as \"-\"\n\n  Removed \
support for general Fortran expression, only allow \"e\" or \"E\" for \
exponent as per MathML spec\n\n   The original version of fromEForm \
(getEFormV4) is used if the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Version is 5.0 or earlier.\n  For ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Version 5.1 and higher, regular expressions are used. \n  \n  Modified \
2.7.5 5/2/08 to allow rational numbers 1/4000000, \"1/40000000\", and \
scientific notation in mathematica form as either 3*10^-15, 3*^-15, \
3.5*10^-15, etc."
}], "Text",
 CellChangeTimes->{{3.418740052555336*^9, 3.418740140133662*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"fromEForm", "[", "x_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"$VersionNumber", ">", "5"}], ",", " ", 
         RowBox[{"Return", "[", 
          RowBox[{"getEForm", "[", 
           RowBox[{"stringer", "[", "x", "]"}], "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"getEFormV4", "[", "x", "]"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",\

 InitializationCell->True],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"rationalNumberFormQ", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"x", ",", " ", 
       RowBox[{"RegularExpression", "[", "\"\<-?\\\\d+/\\\\d+\>\"", "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"rationalNumberFormQ", "[", "x___", "]"}], ":=", " ", "False"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SNFormQ", "[", 
     RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"x", ",", " ", "\[IndentingNewLine]", 
      RowBox[{
      "RegularExpression", "[", 
       "\"\<(\\\\d*\\\\.?\\\\d*\\\\*)?(10)?\\\\^-?\\\\d+\>\"", "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SNFormQ", "[", "x___", "]"}], ":=", " ", "False"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "mantissaForm", "=", 
     "\"\<(\\\\-?\\\\d*\\\\.?\\\\d*|\\\\+?\\\\d*\\\\.?\\\\d*)\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"exponentForm", "=", "\"\<(\\\\-?\\\\d+|\\\\+?\\\\d+)\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"mantissaFormQ", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"x", ",", 
       RowBox[{"RegularExpression", "[", "mantissaForm", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"mantissaFormQ", "[", "x___", "]"}], ":=", "False"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"exponentFormQ", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"x", ",", " ", 
       RowBox[{"RegularExpression", "[", "exponentForm", "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"exponentFormQ", "[", "x___", "]"}], ":=", "False"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"eFormQ", "[", 
       RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"x", ",", 
        RowBox[{"RegularExpression", "[", 
         RowBox[{
         "\"\<(\>\"", "<>", "mantissaForm", "<>", "\"\<e\>\"", "<>", 
          "exponentForm", "<>", "\"\<)\>\""}], "]"}]}], "]"}]}], ";"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eFormQ", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"Or", "[", 
      RowBox[{
       RowBox[{"eFormQ", "[", 
        RowBox[{"x", ",", "\"\<e\>\""}], "]"}], ",", " ", 
       RowBox[{"eFormQ", "[", 
        RowBox[{"x", ",", "\"\<E\>\""}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eFormQ", "[", 
      RowBox[{
       RowBox[{"x_", "?", "StringQ"}], ",", 
       RowBox[{"sep_", "?", "StringQ"}]}], "]"}], ":=", " ", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"x", ",", 
       RowBox[{"RegularExpression", "[", 
        RowBox[{"mantissaForm", "<>", "sep", "<>", "exponentForm"}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eFormQ", "[", "x___", "]"}], ":=", "False"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FortranEFormQ", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", " ", 
     RowBox[{"Or", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"eFormQ", "[", 
          RowBox[{"x", ",", "#"}], "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{
         "\"\<d\>\"", ",", "\"\<D\>\"", ",", "\"\<q\>\"", ",", "\"\<Q\>\""}], 
         "}"}]}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FortranEFormQ", "[", "x___", "]"}], ":=", " ", "False"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"numericalFormQ", "[", 
      RowBox[{"x_", "?", "StringQ"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"mantissaFormQ", "[", "x", "]"}], "\[Or]", 
      RowBox[{"exponentFormQ", "[", "x", "]"}], "\[Or]", 
      RowBox[{"eFormQ", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"numericalFormQ", "[", "x_", "]"}], ":=", " ", 
     RowBox[{"NumberQ", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"numberFormQ", "[", "x_", "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"mantissaFormQ", "[", "x", "]"}], "\[Or]", 
      RowBox[{"exponentFormQ", "[", "x", "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerFormQ", "[", "x_", "]"}], ":=", " ", 
     RowBox[{"exponentFormQ", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isanumber", "[", "x_", "]"}], ":=", " ", 
     RowBox[{
      RowBox[{"numberFormQ", "[", "x", "]"}], " ", "\[Or]", " ", 
      RowBox[{"eFormQ", "[", "x", "]"}]}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"notanumber", "[", "x_", "]"}], ":=", " ", 
     RowBox[{"!", 
      RowBox[{"isanumber", "[", "x", "]"}]}]}], ";"}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eForm2MantissaExponent", "[", 
      RowBox[{"x_", "?", "eFormQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m", ",", "e", ",", "p", ",", "p1", ",", "p2", ",", 
         RowBox[{"sep", "=", "\"\<e\>\""}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"p", "=", 
         RowBox[{"StringPosition", "[", 
          RowBox[{"x", ",", "sep"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "p", "]"}], "\[Equal]", "0"}], ",", " ", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
             RowBox[{
             "\"\< eForm2MantissaExponent: separator \>\"", "//", 
              "boldBlack"}], ",", 
             RowBox[{"sep", "//", "boldBlue"}], ",", 
             RowBox[{"\"\< not found in string \>\"", "//", "boldBlack"}], 
             ",", 
             RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "p", "]"}], "\[NotEqual]", " ", "1"}], ",", 
          " ", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
             RowBox[{
             "\"\< eForm2MantissaExponent: separator \>\"", "//", 
              "boldBlack"}], ",", 
             RowBox[{"sep", "//", "boldBlue"}], ",", 
             RowBox[{
             "\"\< found in multiple locations in string \>\"", "//", 
              "boldBlack"}], ",", 
             RowBox[{"x", "//", "boldBlue"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"p", "=", 
         RowBox[{"First", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"p1", ",", "p2"}], "}"}], "=", "p"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", "=", 
         RowBox[{"StringTake", "[", 
          RowBox[{"x", ",", 
           RowBox[{"p1", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"e", "=", 
         RowBox[{"StringDrop", "[", 
          RowBox[{"x", ",", "p2"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"m", ",", "e"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"eForm2MantissaExponent", "[", 
      RowBox[{"x_", "?", "FortranEFormQ"}], "]"}], ":=", " ", 
     RowBox[{"eForm2MantissaExponent", "[", 
      RowBox[{"FortranEFormToEform", "[", "x", "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eForm2MantissaExponent", "[", "x___", "]"}], ":=", " ", 
    RowBox[{"Print", "[", 
     RowBox[{
      RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
      RowBox[{
      "\"\< eForm2MantissaExponent: invalid argumment:  \>\"", "//", 
       "boldBlack"}], ",", "x", ",", 
      RowBox[{"\"\< is not a string in e-format \>\"", "//", "boldBlack"}]}], 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEForm", "[", "\"\<Indeterminate\>\"", "]"}], ":=", " ", 
     "Indeterminate"}], ";"}], " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"convert", " ", "rationals", " ", "to", " ", "reals", " ", 
     RowBox[{"v", ".", " ", "2.7"}], ".5"}], " ", "*)"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEForm", "[", 
      RowBox[{"x_", "?", "rationalNumberFormQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"v", "=", " ", 
         RowBox[{"getEForm", "[", 
          RowBox[{"ToString", "[", 
           RowBox[{"InputForm", "[", 
            RowBox[{"1.0", "*", 
             RowBox[{"ToExpression", "[", "x", "]"}]}], "]"}], "]"}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "v", "]"}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], ";"}], " ", "\[IndentingNewLine]", " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEForm", "[", 
      RowBox[{"x_", "?", "mantissaFormQ"}], "]"}], ":=", " ", 
     RowBox[{"ToExpression", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEForm", "[", 
      RowBox[{"xin_", "?", "eFormQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"e", ",", "x", ",", "y", ",", "m", ",", "exp"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"x", "=", 
         RowBox[{"StringReplace", "[", 
          RowBox[{"xin", ",", 
           RowBox[{"\"\<E\>\"", "\[Rule]", " ", "\"\<e\>\""}]}], "]"}]}], ";",
         " ", "\[IndentingNewLine]", 
        RowBox[{"e", "=", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"StringPosition", "[", 
             RowBox[{"x", ",", "\"\<e\>\""}], "]"}], "//", "Flatten"}], "//", 
           "Union"}], "//", "First"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"m", "=", 
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"x", ",", 
            RowBox[{"e", "-", "1"}]}], "]"}], "//", "ToExpression"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"exp", "=", 
         RowBox[{
          RowBox[{"StringDrop", "[", 
           RowBox[{"x", ",", "e"}], "]"}], "//", "ToExpression"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"y", "=", 
         RowBox[{"m", "*", 
          RowBox[{"10", "^", "exp"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Head", "[", "y", "]"}], "===", "Rational"}], ",", " ", 
          RowBox[{"y", "=", 
           RowBox[{"1.", "*", "y"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "y", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FortranEFormToEform", "[", 
      RowBox[{"x_", "?", "FortranEFormQ"}], "]"}], ":=", " ", 
     RowBox[{"StringReplace", "[", "\[IndentingNewLine]", 
      RowBox[{"x", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<E\>\"", "\[Rule]", " ", "\"\<e\>\""}], ",", 
         RowBox[{"\"\<d\>\"", "\[Rule]", " ", "\"\<e\>\""}], ",", 
         RowBox[{"\"\<D\>\"", "\[Rule]", " ", "\"\<e\>\""}], ",", 
         RowBox[{"\"\<Q\>\"", "\[Rule]", " ", "\"\<e\>\""}], ",", 
         RowBox[{"\"\<q\>\"", "\[Rule]", " ", "\"\<e\>\""}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FortranEFormToEform", "[", "x___", "]"}], ":=", " ", "x"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getEForm", "[", 
     RowBox[{"x_", "?", "SNFormQ"}], "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "y", "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"y", "=", 
        RowBox[{"ToExpression", "[", "x", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"y", "=", 
        RowBox[{"1.0", "*", "y"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"y", "=", 
        RowBox[{"deFortranize", "[", "y", "]"}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "y", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEForm", "[", "\"\<INF\>\"", "]"}], ":=", " ", "Infinity"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getEForm", "[", "x___", "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"y", "=", "Indeterminate"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"FortranEFormQ", "[", "x", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "=", 
            RowBox[{"FortranEFormToEform", "[", "x", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Print", "[", 
            RowBox[{
             RowBox[{"\"\<Error:\>\"", "//", "boldRed"}], ",", 
             RowBox[{"\"\< getEForm: the expression \>\"", "//", "boldRed"}], 
             ",", 
             RowBox[{"x", "//", "boldBlue"}], ",", 
             RowBox[{
             "\"\< appears to be a FORTRAN scientific notation that is not \
supported by MathML. Scientific notation in MathML only permits the lower \
case \\\"e\\\" to be used as the exponential separator. Attempting recovery \
as \>\"", "//", "boldBlack"}], ",", " ", 
             RowBox[{"y", "//", "boldBlue"}]}], " ", "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"y", "=", 
            RowBox[{"getEForm", "[", "y", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "y", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "At", " ", "this", " ", "point", " ", "assume", " ", "its", " ", 
          "some", " ", "form", " ", "of", " ", "string", " ", "number", " ", 
          "and", " ", "try", " ", "to", " ", "convert"}], "  ", "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\< getEForm: the expression \>\"", "//", "boldRed"}], 
          ",", " ", 
          RowBox[{"x", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< is not a valid string numeric expression and was replaced \
with \>\"", "//", "boldBlack"}], ",", " ", 
          RowBox[{"y", "//", "boldBlue"}], ",", " ", 
          RowBox[{
          "\"\< \\nPlease check to make sure all numbers in scientific \
notation were expressed as real numbers, e.g., 3.0*10^-16 rather than \
rationals, e.g., 3*10^-16\>\"", "//", "boldBlack"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "y", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQA2IQrfPCOOtVwEvHeMk4MF1xuFx5e8VLx9RHsuog2uRu
pBWI/h9jYQuiWeZ/cwTRVvNNnUF0QsG5NhCtFvawE0TH9Yj2g+gPD8pngWiH
3OQFILptfs9iEJ3du/zBDpC+jd3PQPSyhP2hO4E044GiCBBt9uZMPIj23i2Z
DqLrUiYVg2it36WVIDqTd1E3iFbobOkB0X0WyWtA9KP1y8D09duxm0G0TG7Q
VhBtEtV5CUS7ZBdeB9F6pubvQPSm5AimXUD6SA0fN4jms5MG0+1qYaIg+vqS
jeIgesceoXoQvSdctBlERxrtXAiim0r3LAHRBs/6Qz8nvHJcVrc8FkRHiYTl
gmiDRL1iEA0AZNy6qQ==
  "]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getEFormV4", "[", "str_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "s", ",", "p", ",", "np", ",", "ns", ",", "v", ",", " ", 
      "maybeFortran"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ToString", "[", "str", "]"}], "==", 
         RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], ")"}], 
       ",", " ", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"v", "=", 
         RowBox[{"StringReplace", "[", 
          RowBox[{"v", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<\\\"\>\"", "\[Rule]", " ", "\"\<\>\""}], "}"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "v", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"maybeFortran", "[", "x_", "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "c", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"c", "=", 
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"Characters", "[", "x", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<E\>\"", ",", "\"\<d\>\"", ",", "\"\<D\>\"", ",", 
              "\"\<q\>\"", ",", "\"\<Q\>\""}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{
           RowBox[{"Length", "[", "c", "]"}], "\[Equal]", "1"}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"maybeFortran", "[", 
        RowBox[{"ToString", "[", "str", "]"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\< getEFormV4: The expression \>\"", "//", "boldBlack"}],
           ",", 
          RowBox[{"str", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< appears to be a Fortran-formatted scientific notation, which \
is not permitted in MathML. Scientific notation requires the use of the \
character \\\"e\\\" to delimit the exponent and does not allow \
\\\"E\\\",\\\"d\\\",\\\"D\\\",\\\"q\\\",or\\\"Q\\\".\>\"", "//", 
           "boldBlack"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "str", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"s", "=", 
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"ToString", "[", "str", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<e\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<E\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<d\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", 
            RowBox[{"\"\<D\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", 
            RowBox[{"\"\<q\>\"", "\[Rule]", " ", "\"\<,\>\""}], ",", " ", 
            RowBox[{"\"\<Q\>\"", "\[Rule]", " ", "\"\<,\>\""}]}], "}"}]}], 
         "]"}]}], ";"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"s", "=", 
      RowBox[{"StringReplace", "[", 
       RowBox[{
        RowBox[{"ToString", "[", "str", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<e\>\"", "\[Rule]", " ", "\"\<,\>\""}], "}"}]}], "]"}]}],
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"q", ",", " ", 
       RowBox[{
       "Q", " ", "is", " ", "Fortran", " ", "quadruple", " ", "precision"}]}],
       " ", "*)"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"This", " ", 
       RowBox[{"won", "'"}], "t", " ", "catch", " ", "all", " ", "errors"}], 
      " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{"p", "=", 
      RowBox[{"StringPosition", "[", 
       RowBox[{"s", ",", "\"\<,\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"np", "=", 
      RowBox[{"Length", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ns", "=", 
      RowBox[{"StringLength", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"p", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
     StyleBox[
      RowBox[{"(*", " ", 
       RowBox[{"check", " ", "for", " ", "too", " ", "many", " ", 
        RowBox[{"e", "'"}], "s", " ", "or", " ", "exponents", " ", 
        RowBox[{"(", "mantissas", ")"}], " ", 
        RowBox[{"w", "/", "o"}], " ", "mantissas", " ", 
        RowBox[{"(", "exponents", ")"}]}], " ", "*)"}],
      FontWeight->"Plain"], 
     StyleBox["\[IndentingNewLine]",
      FontWeight->"Plain"], 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"np", ">", " ", "1"}], " ", "\[Or]", " ", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"p", ",", "1"}], "]"}], " ", "\[Or]", " ", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"p", ",", "ns"}], "]"}]}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\<getEFormV4: The value \>\"", "//", "boldBlack"}], ",", 
          
          RowBox[{"str", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< does not appear to be a correctly formated value, and was \
replaced with \>\"", "//", "boldBlack"}], ",", 
          RowBox[{
           RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}], "//", 
           "boldRed"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "$SBML$IndeterminateValue", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"s", " ", "=", " ", 
      RowBox[{"\"\<{\>\"", "<>", "s", "<>", "\"\<}\>\""}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"s", "=", 
      RowBox[{"ToExpression", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"s", " ", "=", " ", 
      RowBox[{"PadRight", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", "s", "]"}], ",", "2", ",", "0"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     StyleBox[
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "check", " ", "for", " ", "aEb", " ", "where", " ", "either", " ", 
         "a", " ", "or", " ", "b", " ", "or", " ", "non"}], "-", "numeric"}], 
       " ", "*)"}],
      FontWeight->"Plain"], 
     StyleBox[" ",
      FontWeight->"Plain"], 
     StyleBox["\[IndentingNewLine]",
      FontWeight->"Plain"], 
     RowBox[{"If", "[", " ", 
      RowBox[{
       RowBox[{"!", " ", 
        RowBox[{"Apply", "[", 
         RowBox[{"And", ",", 
          RowBox[{"Map", "[", 
           RowBox[{"NumberQ", ",", "s"}], "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"\"\<Error: \>\"", "//", "boldRed"}], ",", 
          RowBox[{"\"\<getEFormV4: The value \>\"", "//", "boldBlack"}], ",", 
          
          RowBox[{"str", "//", "boldBlue"}], ",", 
          RowBox[{
          "\"\< does not appear to be a correctly formated value, and was \
replaced with \>\"", "//", "boldBlack"}], ",", 
          RowBox[{
           RowBox[{"ToString", "[", "$SBML$IndeterminateValue", "]"}], "//", 
           "boldRed"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "$SBML$IndeterminateValue", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "Multiply", " ", "1.0", " ", "so", " ", "that", " ", "5", "e"}], "-", 
        "3"}], " ", "=", " ", 
       RowBox[{"0.005", " ", "and", " ", "not", " ", 
        RowBox[{"1", "/", "200"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"s", " ", "=", 
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "*", 
       RowBox[{"(", 
        RowBox[{"10", "^", 
         RowBox[{"s", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"s", "\[Equal]", 
        RowBox[{"Round", "[", "s", "]"}]}], ",", " ", 
       RowBox[{"Return", "[", 
        RowBox[{"Round", "[", "s", "]"}], "]"}]}], "]"}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "keep", " ", "as", " ", "an", " ", "integer", " ", "added", " ", "2.3", 
       ".36"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", "$SBML$Rationals"}], ",", " ", 
       RowBox[{"s", "=", 
        RowBox[{"1.0", "*", "s"}]}]}], "]"}], ";", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "force", " ", "to", " ", "be", " ", "real", " ", "and", " ", "not", " ",
        "a", " ", "fraction"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "s", "]"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["deFortranize", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deFortranize", "[", 
    RowBox[{"s_", "?", "StringQ"}], "]"}], ":=", " ", 
   RowBox[{"fromEForm", "[", "s", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"deFortranize", "[", 
     RowBox[{"x_", "?", "NumberQ"}], "]"}], ":=", " ", 
    RowBox[{"1.0", "*", "x"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deFortranize", "[", "x_", "]"}], ":=", " ", "x"}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4187355957030563`*^9, 3.418735608128161*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["mathSBMLHelpReference", "Subsection"],

Cell["this has been replaced by Help[context]", "Text",
 CellChangeTimes->{{3.425408072870626*^9, 3.4254080787397823`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"mathSBMLHelpReference", "[", 
      RowBox[{"opt___", "?", "OptionQ"}], "]"}], ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "usg", ",", "usgstr", ",", "pdfusg", ",", "\[IndentingNewLine]", 
         RowBox[{"predef", "=", 
          RowBox[{"{", 
           RowBox[{
           "\"\<mass\>\"", ",", "\"\<uui\>\"", ",", "\"\<uur\>\"", ",", 
            "\"\<uuhr\>\"", ",", "\"\<isouur\>\"", ",", "\"\<hilli\>\"", ",", 
            "\"\<hillr\>\"", ",", "\"\<hillmr\>\"", ",", "\"\<hillmmr\>\"", 
            ",", "\"\<usii\>\"", ",", "\"\<usir\>\"", ",", "\"\<uai\>\"", 
            ",", "\"\<ucii\>\"", ",", "\"\<ucir\>\"", ",", "\"\<unii\>\"", 
            ",", "\"\<unir\>\"", ",", "\"\<uuci\>\"", ",", "\"\<uucr\>\"", 
            ",", "\"\<umi\>\"", ",", "\"\<umr\>\"", ",", "\"\<uaii\>\"", ",", 
            "\"\<uar\>\"", ",", "\"\<ucti\>\"", ",", "\"\<uctr\>\"", ",", 
            "\"\<umai\>\"", ",", "\"\<umar\>\"", ",", "\"\<uhmi\>\"", ",", 
            "\"\<uhmr\>\"", ",", "\"\<ualii\>\"", ",", "\"\<ordubr\>\"", ",", 
            "\"\<ordbur\>\"", ",", "\"\<ordbbr\>\"", ",", "\"\<ppbr\>\""}], 
           "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"modelBuilder", "=", 
          RowBox[{"{", 
           RowBox[{
           "\"\<addCompartment\>\"", ",", " ", "\"\<addEvent\>\"", ",", " ", 
            "\"\<addFunction\>\"", ",", "\"\<addParameter\>\"", ",", 
            "\"\<addReaction\>\"", ",", " ", "\"\<addRule\>\"", ",", 
            "\"\<addSpecies\>\"", ",", "\[IndentingNewLine]", 
            "\"\<annotationToSBML\>\"", ",", " ", 
            "\"\<annotationToSymbolicSBML\>\"", ",", "\[IndentingNewLine]", 
            "\"\<compartmentToSBML\>\"", ",", 
            "\"\<compartmentToSymbolicSBML\>\"", ",", "\"\<eventToSBML\>\"", 
            ",", "\"\<eventToSymbolicSBML\>\"", ",", "\"\<functionToSBML\>\"",
             ",", "\"\<functionToSymbolicSBML\>\"", ",", " ", 
            "\"\<InfixToMathML\>\"", ",", " ", "\"\<loadModelBuilder\>\"", 
            ",", "\"\<loadSimulator\>\"", ",", "\"\<MathMLToInfix\>\"", ",", 
            "\"\<modifyCompartment\>\"", ",", "\"\<modifyEvent\>\"", ",", 
            "\"\<modifyFunction\>\"", ",", "\"\<modifyModel\>\"", ",", 
            "\"\<modifyParameter\>\"", ",", "\"\<modifyReaction\>\"", ",", 
            "\"\<modifyRule\>\"", ",", " ", "\"\<modifySpecies\>\"", ",", 
            "\"\<newModel\>\"", ",", "\"\<parameterToSBML\>\"", ",", 
            "\"\<parameterToSymbolicSBML\>\"", ",", "\"\<reactionToSBML\>\"", 
            ",", "\"\<reactionToSymbolicSBML\>\"", ",", 
            "\"\<removeCompartment\>\"", ",", "\"\<removeEvent\>\"", ",", 
            " ", "\"\<removeFunction\>\"", ",", " ", 
            "\"\<removeParameter\>\"", ",", " ", "\"\<removeReaction\>\"", 
            ",", "\"\<removeRule\>\"", ",", " ", "\"\<removeSpecies\>\"", 
            ",", "\"\<ruleToSBML\>\"", ",", "\"\<ruleToSymbolicSBML\>\"", 
            ",", "\"\<setAnnotationNamespace\>\"", ",", 
            "\"\<setAnnotationPackage\>\"", ",", "\"\<showModel\>\"", ",", 
            " ", "\"\<speciesToSBML\>\"", ",", 
            "\"\<speciesToSymbolicSBML\>\"", ",", "\"\<unitToSBML\>\"", ",", 
            " ", "\"\<unitToSymbolicSBML\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", "mbusg"}], "}"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{
        RowBox[{"usg", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#", ",", 
              RowBox[{"ToExpression", "[", 
               RowBox[{"#", "<>", "\"\<::usage\>\""}], "]"}]}], "}"}], "&"}], 
           ",", 
           RowBox[{"Names", "[", "\"\<MathSBML`*\>\"", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"usgstr", "=", 
         RowBox[{"Select", "[", 
          RowBox[{"usg", ",", 
           RowBox[{
            RowBox[{"StringQ", "[", 
             RowBox[{"Last", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pdfusg", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#", ",", 
              RowBox[{"ToExpression", "[", 
               RowBox[{"#", "<>", "\"\<::usage\>\""}], "]"}]}], "}"}], "&"}], 
           ",", "predef"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"mbusg", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#", ",", 
              RowBox[{"ToExpression", "[", 
               RowBox[{"#", "<>", "\"\<::usage\>\""}], "]"}]}], "}"}], "&"}], 
           ",", "modelBuilder"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Global`pdf", "/.", 
            RowBox[{"{", "opt", "}"}]}], "/.", 
           RowBox[{"{", 
            RowBox[{"Global`pdf", "\[Rule]", " ", "False"}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"usgstr", " ", "=", " ", "pdfusg"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Global`modelBuilder", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"{", 
              RowBox[{"Global`modelBuilder", "\[Rule]", " ", "False"}], 
              "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"usgstr", " ", "=", " ", "mbusg"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"usgstr", " ", "=", 
              RowBox[{"Complement", "[", " ", 
               RowBox[{
                RowBox[{"Complement", "[", 
                 RowBox[{"usgstr", ",", " ", "pdfusg"}], "]"}], ",", 
                "mbusg"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MyStylePrint", "[", 
              RowBox[{
               RowBox[{"First", "[", "#", "]"}], ",", "\"\<Section\>\""}], 
              "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Print", "[", 
              RowBox[{"Last", "[", "#", "]"}], "]"}]}], ")"}], "&"}], ",", 
          "usgstr"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388261823193028*^9, 3.388261823552256*^9}, {
  3.425408062958235*^9, 3.425408067775694*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Jacob", "Subsection"],

Cell[TextData[{
 "compute Jacobian Matrix ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"D", "(", 
     RowBox[{"f1", ",", "f2", ",", "f3", ",", "..."}], ")"}], 
    RowBox[{"D", "(", 
     RowBox[{"var1", ",", " ", "var2", ",", "..."}], ")"}]], TraditionalForm]]]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Jacob", "[", 
    RowBox[{
     RowBox[{"f_", "?", "ListQ"}], ",", " ", 
     RowBox[{"vars_", "?", "ListQ"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"row", ",", "J"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"row", "[", "x_", "]"}], ":=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{"x", ",", "#"}], "]"}], "&"}], ",", " ", "vars"}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"J", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"row", ",", "f"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "J", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],

Cell["Additional Includes", "Section",
 CellChangeTimes->{{3.5049737445264583`*^9, 3.5049737475856333`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "[", "\"\<MathSBML-SBMLWrite-Special-Formats.m\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Get", "[", "\"\<MathSBML-Level1-Predefined.m\>\"", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{"Get", "[", "\"\<MathSBML-Level2.m\>\"", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Get", "[", "\"\<MathSBML-Computation.m\>\"", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<MathSBML-MathML.m\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<MathSBML-Visualization.m\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Get", "[", "\"\<MathSBML-Simulation.m\>\"", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<MathSBML-ModelBuilder.m\>\"", "]"}], ";", " ", 
  RowBox[{"Get", "[", "\"\<MathSBML-Help.m\>\"", "]"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5049737510928335`*^9, 3.5049737722260427`*^9}, {
  3.5049739837701426`*^9, 3.5049739995870466`*^9}, {3.5049745089631815`*^9, 
  3.5049745260661597`*^9}, {3.5049746701544013`*^9, 3.5049746773068104`*^9}, {
  3.504974831207613*^9, 3.5049748472255287`*^9}, {3.5049750092717977`*^9, 
  3.5049750172352533`*^9}, {3.504975146700658*^9, 3.5049751634396152`*^9}, {
  3.5049805237302065`*^9, 3.504980526833384*^9}}],

Cell[CellGroupData[{

Cell["Closing Message; end of package load", "Section"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Names", "[", "\"\<FLAGS`ECHOLOAD\>\"", "]"}], "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MathSBML`Private`msgflag", "=", 
      RowBox[{"ToExpression", "[", "\"\<FLAGS`ECHOLOAD\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MathSBML`Private`msgflag", "=", "True"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"VR", "=", 
   RowBox[{"\"\< (Version \>\"", "<>", 
    RowBox[{"ToString", "[", "$VersionNumber", "]"}], "<>", 
    "\"\<, Release \>\"", "<>", 
    RowBox[{"ToString", "[", "$ReleaseNumber", "]"}], "<>", "\"\<)\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"rightnow", "=", 
    RowBox[{"DateString", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Day\>\"", ",", "\"\< \>\"", ",", "\"\<MonthName\>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\<Year\>\"", ",", " ", "\"\< at \>\"", ",", 
       " ", "\"\<Hour24\>\"", ",", "\"\<:\>\"", ",", " ", "\"\<Minute\>\"", 
       ",", " ", "\"\< \>\"", ",", " ", "\"\<TimeZone\>\""}], "}"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"closing$message", "=", 
    RowBox[{"\"\<MathSBML Version \>\"", "<>", 
     RowBox[{"ToString", "[", "$MathSBML$Version", "]"}], "<>", 
     "\"\< using Mathematica Version \>\"", "<>", "$Version", "<>", "VR", 
     "<>", "\"\< loaded \>\"", "<>", "rightnow"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"MathSBML`Private`msgflag", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"TEMP$FIRST", " ", "\[Or]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "TEMP$FIRST"}], " ", "\[And]", " ", 
          RowBox[{"!", 
           RowBox[{"Equal", "[", 
            RowBox[{
             RowBox[{"ToString", "[", "$MathSBML$Version", "]"}], ",", " ", 
             "TEMP$OLDVERSION"}], "]"}]}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"MyStyleForm", "[", 
          RowBox[{"closing$message", ",", " ", 
           RowBox[{"FontWeight", "\[Rule]", " ", "Bold"}], ",", " ", 
           RowBox[{"FontColor", "\[Rule]", " ", "Black"}]}], "]"}], "]"}], 
        ";"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"MyStyleForm", "[", 
          RowBox[{
           RowBox[{"closing$message", "<>", "\"\<(--reloaded--)\>\""}], ",", 
           " ", 
           RowBox[{"FontWeight", "\[Rule]", " ", "Bold"}], ",", " ", 
           RowBox[{"FontColor", "\[Rule]", " ", "Black"}]}], "]"}], "]"}], 
        ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"!", "TEMP$FIRST"}], " ", "\[And]", " ", 
      RowBox[{"!", 
       RowBox[{"Equal", "[", 
        RowBox[{
         RowBox[{"ToString", "[", "$MathSBML$Version", "]"}], ",", " ", 
         "TEMP$OLDVERSION"}], "]"}]}]}], ",", 
     RowBox[{"Print", "[", "\[IndentingNewLine]", 
      RowBox[{"MyStyleForm", "[", 
       RowBox[{
        RowBox[{
        "\"\<MathSBML: warning: loading a different version of MathSBML may \
cause unexpected results.\\ncurrent version of MathSBML: \>\"", "<>", 
         RowBox[{"ToString", "[", "$MathSBML$Version", "]"}], "<>", 
         "\"\<\\nprevious version of MathSBML:\>\"", "<>", 
         "TEMP$OLDVERSION"}], ",", 
        RowBox[{"FontWeight", "\[Rule]", " ", "Bold"}], ",", " ", 
        RowBox[{"FontColor", "\[Rule]", " ", "Red"}]}], "]"}], 
      "\[IndentingNewLine]", "]"}]}], "]"}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"MathSBML`Private`msgflag", ",", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{
       "\"\<Please report MathSBML issues to the MathSBML Tracker, (Please \
include the above text) at \>\"", "//", "boldBlack"}], ",", " ", 
       RowBox[{
        RowBox[{
        "Hyperlink", "[", 
         "\"\<http://sourceforge.net/tracker/?atid=984327&group_id=71971&func=\
browse\>\"", "]"}], "//", "boldBlue"}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FLAGS`ECHOLOAD", "=", "MathSBML`Private`msgflag"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "MathSBML`Private`msgflag", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"End", "[", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Remove", "[", "TEMP$OLDVERSION", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Remove", "[", "TEMP$FIRST", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Remove", "[", "rightnow", "]"}], ";"}], " ", 
  "\[IndentingNewLine]", " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.388263076249687*^9, 3.388263076518239*^9}, {
   3.397049890180806*^9, 3.39704993896141*^9}, 3.397054238153966*^9, 
   3.397395266953327*^9, {3.397395386478854*^9, 3.397395447673761*^9}, {
   3.397867680416461*^9, 3.397867719433579*^9}, {3.424634084702002*^9, 
   3.424634189391104*^9}, {3.424634239602238*^9, 3.424634255740952*^9}, {
   3.424645972982183*^9, 3.424646017188652*^9}, {3.424646048102563*^9, 
   3.42464607639441*^9}, {3.4254073024230623`*^9, 3.425407314890635*^9}, {
   3.425427274070978*^9, 3.425427310845048*^9}, {3.506452500152091*^9, 
   3.506452510843308*^9}, {3.506452594775988*^9, 3.5064526245318937`*^9}, {
   3.506452739221965*^9, 3.506452748578082*^9}, {3.506452784964525*^9, 
   3.506452857121687*^9}, {3.50645293893188*^9, 3.5064529559151573`*^9}}]
}, Closed]]
},
AutoGeneratedPackage->Automatic,
WindowToolbars->"RulerBar",
CellGrouping->Manual,
WindowSize->{810, 910},
WindowMargins->{{Automatic, 178}, {21, Automatic}},
ShowSelection->True,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.25, 1.25 Inherited],
FrontEndVersion->"8.0 for Linux x86 (64-bit) (October 10, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "PastelColor.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3257158727-7477535"->{
  Cell[505407, 11335, 5065, 126, 1233, "Print",
   CellTags->"Info3257158727-7477535"]},
 "Info3256286500-5179116"->{
  Cell[690186, 15601, 1931, 31, 135, "Print",
   CellTags->"Info3256286500-5179116"]},
 "Info3256546383-6026381"->{
  Cell[722641, 16351, 3256, 51, 135, "Print",
   CellTags->"Info3256546383-6026381"]},
 "Info3256282477-7549864"->{
  Cell[744210, 16825, 425, 6, 135, "Print",
   CellTags->"Info3256282477-7549864"]},
 "Info3255928776-1829731"->{
  Cell[791340, 17916, 149, 2, 135, "Print",
   CellTags->"Info3255928776-1829731"]},
 "Info3255930175-4878462"->{
  Cell[792738, 17970, 331, 4, 135, "Print",
   CellTags->"Info3255930175-4878462"]},
 "Info3262060788-4630726"->{
  Cell[793641, 17997, 721, 9, 135, "Print",
   CellTags->"Info3262060788-4630726"]},
 "Info3255938083-7703112"->{
  Cell[866821, 19836, 411, 6, 135, "Print",
   CellTags->"Info3255938083-7703112"]},
 "Info3255931439-3412749"->{
  Cell[869349, 19905, 424, 6, 135, "Print",
   CellTags->"Info3255931439-3412749"]},
 "Info3255938946-3395504"->{
  Cell[897289, 20599, 221, 3, 82, "Print",
   CellTags->"Info3255938946-3395504"]},
 "Info3255944522-8077337"->{
  Cell[901010, 20690, 313, 5, 135, "Print",
   CellTags->"Info3255944522-8077337"]},
 "Info3255944711-8989918"->{
  Cell[903293, 20748, 299, 5, 135, "Print",
   CellTags->"Info3255944711-8989918"]},
 "Info3256972896-8649170"->{
  Cell[907952, 20882, 351, 5, 135, "Print",
   CellTags->"Info3256972896-8649170"]},
 "Info3256109559-6977851"->{
  Cell[918650, 21152, 493, 7, 135, "Print",
   CellTags->"Info3256109559-6977851"]},
 "Info3257154725-3925981"->{
  Cell[924649, 21280, 242, 6, 95, "Text",
   CellTags->"Info3257154725-3925981"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3257158727-7477535", 970968, 22427},
 {"Info3256286500-5179116", 971086, 22430},
 {"Info3256546383-6026381", 971202, 22433},
 {"Info3256282477-7549864", 971318, 22436},
 {"Info3255928776-1829731", 971432, 22439},
 {"Info3255930175-4878462", 971546, 22442},
 {"Info3262060788-4630726", 971660, 22445},
 {"Info3255938083-7703112", 971774, 22448},
 {"Info3255931439-3412749", 971888, 22451},
 {"Info3255938946-3395504", 972002, 22454},
 {"Info3255944522-8077337", 972115, 22457},
 {"Info3255944711-8989918", 972229, 22460},
 {"Info3256972896-8649170", 972343, 22463},
 {"Info3256109559-6977851", 972457, 22466},
 {"Info3257154725-3925981", 972571, 22469}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 224, 7, 85, "Title"],
Cell[CellGroupData[{
Cell[794, 31, 105, 1, 96, "Section"],
Cell[902, 34, 2783, 50, 856, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3722, 89, 122, 1, 96, "Section"],
Cell[3847, 92, 7710, 159, 970, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[11594, 256, 31, 0, 58, "Section"],
Cell[11628, 258, 52346, 868, 15594, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[64011, 1131, 45, 0, 58, "Section"],
Cell[CellGroupData[{
Cell[64081, 1135, 53, 0, 72, "Subsection"],
Cell[64137, 1137, 1603, 42, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[65777, 1184, 36, 0, 56, "Subsection"],
Cell[65816, 1186, 92, 1, 77, "Input"],
Cell[65911, 1189, 16367, 393, 5906, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[82303, 1586, 3399, 52, 2046, "Input",
 InitializationCell->True],
Cell[85705, 1640, 19432, 295, 7277, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[105186, 1941, 104, 1, 56, "Subsection"],
Cell[105293, 1944, 527, 10, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[105857, 1959, 39, 0, 56, "Subsection"],
Cell[105899, 1961, 1614, 29, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[107550, 1995, 31, 0, 56, "Subsection"],
Cell[107584, 1997, 1213, 19, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[108834, 2021, 46, 0, 56, "Subsection"],
Cell[108883, 2023, 241, 6, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[109161, 2034, 51, 0, 56, "Subsection"],
Cell[109215, 2036, 4712, 77, 135, "Input",
 InitializationCell->True],
Cell[113930, 2115, 772, 10, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[114739, 2130, 37, 0, 56, "Subsection"],
Cell[114779, 2132, 8491, 198, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[123307, 2335, 36, 0, 56, "Subsection"],
Cell[123346, 2337, 1613, 32, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[124996, 2374, 54, 0, 56, "Subsection"],
Cell[125053, 2376, 559, 11, 135, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[125637, 2391, 1072, 21, 135, "Input",
 InitializationCell->True],
Cell[126712, 2414, 344, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[127093, 2423, 568, 10, 135, "Input",
 InitializationCell->True],
Cell[127664, 2435, 330, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[128031, 2444, 607, 11, 135, "Input",
 InitializationCell->True],
Cell[128641, 2457, 333, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[129011, 2466, 340, 7, 135, "Input",
 InitializationCell->True],
Cell[129354, 2475, 173, 2, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[129564, 2482, 842, 14, 135, "Input",
 InitializationCell->True],
Cell[130409, 2498, 400, 5, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[130846, 2508, 1267, 20, 135, "Input",
 InitializationCell->True],
Cell[132116, 2530, 603, 7, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[132756, 2542, 2291, 36, 135, "Input",
 InitializationCell->True],
Cell[135050, 2580, 1036, 14, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[136123, 2599, 511, 9, 135, "Input",
 InitializationCell->True],
Cell[136637, 2610, 262, 3, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[136936, 2618, 796, 13, 135, "Input",
 InitializationCell->True],
Cell[137735, 2633, 351, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[138123, 2642, 595, 10, 135, "Input",
 InitializationCell->True],
Cell[138721, 2654, 265, 3, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[139023, 2662, 450, 9, 135, "Input",
 InitializationCell->True],
Cell[139476, 2673, 252, 3, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[139765, 2681, 778, 13, 135, "Input",
 InitializationCell->True],
Cell[140546, 2696, 352, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[140935, 2705, 554, 9, 135, "Input",
 InitializationCell->True],
Cell[141492, 2716, 294, 3, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[141823, 2724, 870, 14, 135, "Input",
 InitializationCell->True],
Cell[142696, 2740, 423, 5, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[143156, 2750, 499, 9, 135, "Input",
 InitializationCell->True],
Cell[143658, 2761, 278, 3, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[143973, 2769, 794, 13, 135, "Input",
 InitializationCell->True],
Cell[144770, 2784, 373, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[145180, 2793, 593, 10, 135, "Input",
 InitializationCell->True],
Cell[145776, 2805, 314, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[146127, 2814, 888, 14, 135, "Input",
 InitializationCell->True],
Cell[147018, 2830, 409, 5, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[147464, 2840, 540, 10, 135, "Input",
 InitializationCell->True],
Cell[148007, 2852, 271, 3, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[148315, 2860, 826, 13, 135, "Input",
 InitializationCell->True],
Cell[149144, 2875, 364, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[149545, 2884, 624, 11, 135, "Input",
 InitializationCell->True],
Cell[150172, 2897, 306, 3, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[150515, 2905, 920, 15, 135, "Input",
 InitializationCell->True],
Cell[151438, 2922, 404, 5, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[151879, 2932, 671, 12, 135, "Input",
 InitializationCell->True],
Cell[152553, 2946, 333, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[152923, 2955, 965, 15, 135, "Input",
 InitializationCell->True],
Cell[153891, 2972, 429, 5, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[154357, 2982, 662, 12, 135, "Input",
 InitializationCell->True],
Cell[155022, 2996, 371, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[155430, 3005, 961, 15, 135, "Input",
 InitializationCell->True],
Cell[156394, 3022, 476, 6, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[156907, 3033, 671, 12, 135, "Input",
 InitializationCell->True],
Cell[157581, 3047, 350, 4, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[157968, 3056, 919, 15, 135, "Input",
 InitializationCell->True],
Cell[158890, 3073, 449, 6, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[159376, 3084, 919, 14, 135, "Input",
 InitializationCell->True],
Cell[160298, 3100, 443, 5, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[160778, 3110, 1422, 22, 135, "Input",
 InitializationCell->True],
Cell[162203, 3134, 706, 10, 135, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[162946, 3149, 1112, 17, 135, "Input",
 InitializationCell->True],
Cell[164061, 3168, 548, 7, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[164658, 3181, 46, 0, 56, "Subsection"],
Cell[164707, 3183, 252, 8, 135, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[164984, 3195, 33, 0, 135, "Subsubsection"],
Cell[165020, 3197, 840, 15, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[165897, 3217, 39, 0, 135, "Subsubsection"],
Cell[165939, 3219, 5976, 94, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[171952, 3318, 38, 0, 135, "Subsubsection"],
Cell[171993, 3320, 3487, 74, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[175517, 3399, 42, 0, 135, "Subsubsection"],
Cell[CellGroupData[{
Cell[175584, 3403, 281, 7, 135, "Input",
 InitializationCell->True],
Cell[175868, 3412, 153, 2, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[176070, 3420, 39, 0, 135, "Subsubsection"],
Cell[176112, 3422, 3156, 49, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[179305, 3476, 35, 0, 135, "Subsubsection"],
Cell[179343, 3478, 1186, 19, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[180566, 3502, 42, 0, 135, "Subsubsection"],
Cell[CellGroupData[{
Cell[180633, 3506, 2243, 39, 135, "Input",
 InitializationCell->True],
Cell[182879, 3547, 506, 6, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[183434, 3559, 48, 0, 135, "Subsubsection"],
Cell[CellGroupData[{
Cell[183507, 3563, 294, 6, 135, "Input",
 InitializationCell->True],
Cell[183804, 3571, 193, 2, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[184046, 3579, 46, 0, 135, "Subsubsection"],
Cell[CellGroupData[{
Cell[184117, 3583, 333, 8, 135, "Input",
 InitializationCell->True],
Cell[184453, 3593, 161, 2, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[184663, 3601, 40, 0, 135, "Subsubsection"],
Cell[184706, 3603, 1720, 30, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[186463, 3638, 35, 0, 135, "Subsubsection"],
Cell[186501, 3640, 2462, 41, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[189000, 3686, 41, 0, 135, "Subsubsection"],
Cell[CellGroupData[{
Cell[189066, 3690, 274, 6, 135, "Input",
 InitializationCell->True],
Cell[189343, 3698, 180, 2, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[189572, 3706, 36, 0, 135, "Subsubsection"],
Cell[189611, 3708, 3680, 55, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[193328, 3768, 38, 0, 135, "Subsubsection"],
Cell[CellGroupData[{
Cell[193391, 3772, 3042, 70, 135, "Input",
 InitializationCell->True],
Cell[196436, 3844, 197, 2, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[196682, 3852, 63, 0, 135, "Subsubsection"],
Cell[196748, 3854, 10496, 258, 135, "Input",
 InitializationCell->True],
Cell[207247, 4114, 1253, 29, 135, "Input",
 InitializationCell->True],
Cell[208503, 4145, 1144, 29, 135, "Input",
 InitializationCell->True],
Cell[209650, 4176, 1616, 42, 135, "Input",
 InitializationCell->True],
Cell[211269, 4220, 1781, 43, 135, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[213075, 4267, 22554, 507, 135, "Input",
 InitializationCell->True],
Cell[235632, 4776, 77, 0, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[235758, 4782, 59, 0, 135, "Subsubsection"],
Cell[235820, 4784, 450, 11, 135, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[236319, 4801, 104, 2, 40, "Subsubsection"],
Cell[236426, 4805, 274, 9, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[236737, 4819, 43, 0, 40, "Subsubsection"],
Cell[236783, 4821, 5002, 96, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[241822, 4922, 67, 0, 40, "Subsubsection"],
Cell[241892, 4924, 1277, 41, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[243206, 4970, 38, 0, 56, "Subsection"],
Cell[CellGroupData[{
Cell[243269, 4974, 196, 5, 72, "Input",
 InitializationCell->True],
Cell[243468, 4981, 112, 1, 135, "Output"]
}, Closed]],
Cell[243595, 4985, 1901, 45, 368, "Input",
 InitializationCell->True],
Cell[245499, 5032, 419, 10, 141, "Input",
 InitializationCell->True],
Cell[245921, 5044, 3364, 55, 627, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[249310, 5103, 40, 0, 75, "Subsection"],
Cell[249353, 5105, 882, 17, 135, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[250284, 5128, 41, 0, 40, "Subsubsection"],
Cell[250328, 5130, 1093, 18, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[251458, 5153, 44, 0, 56, "Subsection"],
Cell[251505, 5155, 1681, 29, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[253223, 5189, 28, 0, 56, "Subsection"],
Cell[253254, 5191, 1898, 59, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[255189, 5255, 99, 1, 56, "Subsection"],
Cell[255291, 5258, 304, 7, 72, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[255632, 5270, 40, 0, 56, "Subsection"],
Cell[255675, 5272, 594, 10, 135, "Input",
 InitializationCell->True],
Cell[256272, 5284, 1876, 47, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[258185, 5336, 41, 0, 56, "Subsection"],
Cell[258229, 5338, 1872, 35, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[260138, 5378, 111, 1, 56, "Subsection"],
Cell[260252, 5381, 2616, 69, 1488, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[262917, 5456, 100, 1, 58, "Section"],
Cell[263020, 5459, 119, 3, 77, "Input",
 InitializationCell->True],
Cell[263142, 5464, 512, 13, 116, "Input",
 InitializationCell->True],
Cell[263657, 5479, 292, 9, 116, "Input",
 InitializationCell->True]
}, Closed]],
Cell[263964, 5491, 107, 1, 58, "Section"],
Cell[264074, 5494, 473, 11, 91, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[264572, 5509, 47, 0, 96, "Section"],
Cell[CellGroupData[{
Cell[264644, 5513, 63, 0, 72, "Subsection"],
Cell[264710, 5515, 206, 6, 135, "Input",
 InitializationCell->True],
Cell[264919, 5523, 4824, 114, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[269780, 5642, 45, 0, 56, "Subsection"],
Cell[269828, 5644, 227, 7, 135, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[270080, 5655, 35, 0, 135, "Subsubsection"],
Cell[270118, 5657, 179, 4, 135, "Text"],
Cell[270300, 5663, 819, 23, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[271156, 5691, 39, 0, 135, "Subsubsection"],
Cell[271198, 5693, 125, 3, 135, "Text"],
Cell[271326, 5698, 1600, 41, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[272963, 5744, 44, 0, 135, "Subsubsection"],
Cell[273010, 5746, 411, 7, 135, "Text"],
Cell[273424, 5755, 3403, 80, 135, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[276876, 5841, 47, 0, 40, "Subsubsection"],
Cell[276926, 5843, 686, 16, 135, "Text"],
Cell[277615, 5861, 5387, 125, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[283039, 5991, 46, 0, 56, "Subsection"],
Cell[283088, 5993, 214, 4, 135, "Text"],
Cell[283305, 5999, 326, 9, 135, "Input",
 InitializationCell->True],
Cell[283634, 6010, 3677, 84, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[287348, 6099, 34, 0, 56, "Subsection"],
Cell[287385, 6101, 132, 1, 135, "Text"],
Cell[287520, 6104, 306, 8, 135, "Input",
 InitializationCell->True],
Cell[287829, 6114, 3301, 75, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[291167, 6194, 34, 0, 56, "Subsection"],
Cell[291204, 6196, 3573, 86, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[294814, 6287, 28, 0, 56, "Subsection"],
Cell[294845, 6289, 47, 0, 135, "Text"],
Cell[294895, 6291, 195, 6, 135, "Input",
 InitializationCell->True],
Cell[295093, 6299, 307, 8, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[295437, 6312, 32, 0, 56, "Subsection"],
Cell[295472, 6314, 127, 3, 135, "Text"],
Cell[295602, 6319, 362, 11, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[296001, 6335, 35, 0, 56, "Subsection"],
Cell[296039, 6337, 3648, 100, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[299724, 6442, 33, 0, 56, "Subsection"],
Cell[299760, 6444, 336, 6, 135, "Text"],
Cell[300099, 6452, 542, 16, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[300678, 6473, 47, 0, 56, "Subsection"],
Cell[300728, 6475, 2497, 71, 135, "Input",
 InitializationCell->True],
Cell[303228, 6548, 769, 19, 135, "Input",
 InitializationCell->True],
Cell[304000, 6569, 808, 23, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[304845, 6597, 38, 0, 56, "Subsection"],
Cell[304886, 6599, 205, 6, 135, "Input",
 InitializationCell->True],
Cell[305094, 6607, 1667, 35, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[306798, 6647, 36, 0, 56, "Subsection"],
Cell[CellGroupData[{
Cell[306859, 6651, 480, 11, 135, "Text"],
Cell[307342, 6664, 203, 6, 135, "Input",
 InitializationCell->True],
Cell[307548, 6672, 11417, 272, 135, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[319014, 6950, 40, 0, 40, "Subsubsection"],
Cell[319057, 6952, 204, 6, 78, "Input",
 InitializationCell->True],
Cell[319264, 6960, 3396, 82, 783, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[322697, 7047, 37, 0, 56, "Subsection"],
Cell[CellGroupData[{
Cell[322759, 7051, 204, 6, 135, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[322988, 7061, 57, 0, 135, "Text"],
Cell[323048, 7063, 4449, 108, 135, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[327558, 7178, 29, 0, 56, "Subsection"],
Cell[327590, 7180, 196, 6, 76, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[327811, 7190, 15088, 344, 4497, "Input",
 InitializationCell->True],
Cell[342902, 7536, 382, 7, 70, "Message"],
Cell[343287, 7545, 34, 0, 76, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[343370, 7551, 34, 0, 56, "Subsection"],
Cell[343407, 7553, 1306, 36, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[344750, 7594, 35, 0, 56, "Subsection"],
Cell[344788, 7596, 17285, 360, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[362110, 7961, 37, 0, 56, "Subsection"],
Cell[362150, 7963, 204, 6, 135, "Input",
 InitializationCell->True],
Cell[362357, 7971, 2706, 66, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[365100, 8042, 37, 0, 56, "Subsection"],
Cell[365140, 8044, 204, 6, 135, "Input",
 InitializationCell->True],
Cell[365347, 8052, 3239, 75, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[368623, 8132, 42, 0, 56, "Subsection"],
Cell[368668, 8134, 210, 6, 78, "Input",
 InitializationCell->True],
Cell[368881, 8142, 5245, 121, 1526, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[374163, 8268, 37, 0, 56, "Subsection"],
Cell[374203, 8270, 2370, 55, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[376610, 8330, 48, 0, 56, "Subsection"],
Cell[376661, 8332, 1751, 41, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[378449, 8378, 29, 0, 56, "Subsection"],
Cell[378481, 8380, 196, 6, 135, "Input",
 InitializationCell->True],
Cell[378680, 8388, 1457, 37, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[380174, 8430, 41, 0, 56, "Subsection"],
Cell[380218, 8432, 50, 0, 135, "Text"],
Cell[380271, 8434, 1721, 45, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[382029, 8484, 32, 0, 56, "Subsection"],
Cell[382064, 8486, 850, 23, 260, "Text"],
Cell[382917, 8511, 199, 6, 78, "Input",
 InitializationCell->True],
Cell[383119, 8519, 3526, 87, 1018, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[386682, 8611, 46, 0, 56, "Subsection"],
Cell[386731, 8613, 254, 7, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[387022, 8625, 43, 0, 56, "Subsection"],
Cell[387068, 8627, 209, 8, 135, "Text"],
Cell[387280, 8637, 95757, 2139, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[483074, 10781, 32, 0, 56, "Subsection"],
Cell[483109, 10783, 474, 10, 266, "Text"],
Cell[483586, 10795, 199, 6, 78, "Input",
 InitializationCell->True],
Cell[483788, 10803, 6166, 136, 1760, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[489991, 10944, 51, 0, 56, "Subsection"],
Cell[490045, 10946, 344, 7, 135, "Text"],
Cell[490392, 10955, 14937, 373, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[505366, 11333, 38, 0, 56, "Subsection"],
Cell[505407, 11335, 5065, 126, 1233, "Print",
 CellTags->"Info3257158727-7477535"],
Cell[510475, 11463, 97462, 2181, 24026, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[607974, 13649, 38, 0, 56, "Subsection"],
Cell[608015, 13651, 205, 6, 72, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[608245, 13661, 57, 0, 57, "Subsubsection"],
Cell[608305, 13663, 17563, 391, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[625905, 14059, 64, 0, 46, "Subsubsection"],
Cell[625972, 14061, 2569, 66, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[628578, 14132, 37, 0, 46, "Subsubsection"],
Cell[628618, 14134, 278, 5, 135, "Text"],
Cell[628899, 14141, 5454, 125, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[634390, 14271, 40, 0, 46, "Subsubsection"],
Cell[634433, 14273, 50942, 1193, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[685412, 15471, 59, 0, 46, "Subsubsection"],
Cell[685474, 15473, 1185, 30, 135, "Input",
 InitializationCell->True],
Cell[686662, 15505, 2850, 67, 135, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[689561, 15578, 41, 0, 56, "Subsection"],
Cell[689605, 15580, 502, 14, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[690144, 15599, 39, 0, 56, "Subsection"],
Cell[690186, 15601, 1931, 31, 135, "Print",
 CellTags->"Info3256286500-5179116"],
Cell[692120, 15634, 11161, 255, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[703318, 15894, 34, 0, 56, "Subsection"],
Cell[703355, 15896, 19210, 448, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[722602, 16349, 36, 0, 56, "Subsection"],
Cell[722641, 16351, 3256, 51, 135, "Print",
 CellTags->"Info3256546383-6026381"],
Cell[725900, 16404, 18229, 414, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[744166, 16823, 41, 0, 56, "Subsection"],
Cell[744210, 16825, 425, 6, 135, "Print",
 CellTags->"Info3256282477-7549864"],
Cell[744638, 16833, 17974, 410, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[762649, 17248, 53, 0, 56, "Subsection"],
Cell[762705, 17250, 2805, 75, 135, "Input",
 InitializationCell->True],
Cell[765513, 17327, 4794, 121, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[770344, 17453, 34, 0, 56, "Subsection"],
Cell[770381, 17455, 20424, 435, 4246, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[790842, 17895, 34, 0, 56, "Subsection"],
Cell[790879, 17897, 382, 12, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[791298, 17914, 39, 0, 56, "Subsection"],
Cell[791340, 17916, 149, 2, 135, "Print",
 CellTags->"Info3255928776-1829731"],
Cell[791492, 17920, 406, 11, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[791935, 17936, 43, 0, 58, "Subsection"],
Cell[791981, 17938, 262, 8, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[792280, 17951, 35, 0, 58, "Subsection"],
Cell[792318, 17953, 344, 10, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[792699, 17968, 36, 0, 58, "Subsection"],
Cell[792738, 17970, 331, 4, 135, "Print",
 CellTags->"Info3255930175-4878462"],
Cell[793072, 17976, 445, 13, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[793554, 17994, 84, 1, 58, "Subsection"],
Cell[793641, 17997, 721, 9, 135, "Print",
 CellTags->"Info3262060788-4630726"],
Cell[794365, 18008, 769, 13, 135, "Input"],
Cell[795137, 18023, 6664, 169, 135, "Input",
 InitializationCell->True],
Cell[801804, 18194, 6086, 166, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[807927, 18365, 113, 3, 58, "Subsection"],
Cell[808043, 18370, 176, 4, 135, "Text"],
Cell[808222, 18376, 5271, 146, 135, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[813518, 18526, 3023, 87, 135, "Input",
 InitializationCell->True],
Cell[816544, 18615, 54, 1, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[816647, 18622, 38, 0, 58, "Subsection"],
Cell[816688, 18624, 11961, 309, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[828686, 18938, 44, 0, 58, "Subsection"],
Cell[828733, 18940, 107, 3, 135, "Text"],
Cell[828843, 18945, 5818, 139, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[834698, 19089, 38, 0, 56, "Subsection"],
Cell[CellGroupData[{
Cell[834761, 19093, 31003, 702, 135, "Input",
 InitializationCell->True],
Cell[865767, 19797, 54, 1, 135, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[865870, 19804, 34, 0, 56, "Subsection"],
Cell[865907, 19806, 827, 23, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[866771, 19834, 47, 0, 56, "Subsection"],
Cell[866821, 19836, 411, 6, 135, "Print",
 CellTags->"Info3255938083-7703112"],
Cell[867235, 19844, 2032, 54, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[869304, 19903, 42, 0, 56, "Subsection"],
Cell[869349, 19905, 424, 6, 135, "Print",
 CellTags->"Info3255931439-3412749"],
Cell[869776, 19913, 1862, 44, 135, "Input",
 InitializationCell->True],
Cell[871641, 19959, 1186, 30, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[872864, 19994, 33, 0, 56, "Subsection"],
Cell[CellGroupData[{
Cell[872922, 19998, 55, 0, 135, "Subsubsection"],
Cell[872980, 20000, 28, 0, 135, "Text"]
}, Closed]],
Cell[873023, 20003, 7667, 178, 135, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[880715, 20185, 54, 0, 135, "Subsubsection"],
Cell[CellGroupData[{
Cell[880794, 20189, 11222, 268, 135, "Input",
 InitializationCell->True],
Cell[892019, 20459, 54, 1, 135, "Output"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[892134, 20467, 33, 0, 56, "Subsection"],
Cell[892170, 20469, 132, 3, 135, "Text"],
Cell[892305, 20474, 4912, 118, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[897254, 20597, 32, 0, 56, "Subsection"],
Cell[897289, 20599, 221, 3, 82, "Print",
 CellTags->"Info3255938946-3395504"],
Cell[897513, 20604, 3423, 79, 1057, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[900973, 20688, 34, 0, 56, "Subsection"],
Cell[901010, 20690, 313, 5, 135, "Print",
 CellTags->"Info3255944522-8077337"],
Cell[901326, 20697, 1894, 44, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[903257, 20746, 33, 0, 56, "Subsection"],
Cell[903293, 20748, 299, 5, 135, "Print",
 CellTags->"Info3255944711-8989918"],
Cell[903595, 20755, 877, 20, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[904509, 20780, 47, 0, 56, "Subsection"],
Cell[904559, 20782, 1185, 32, 135, "Input",
 InitializationCell->True],
Cell[905747, 20816, 2133, 59, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[907917, 20880, 32, 0, 56, "Subsection"],
Cell[907952, 20882, 351, 5, 135, "Print",
 CellTags->"Info3256972896-8649170"],
Cell[908306, 20889, 3734, 89, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[912077, 20983, 38, 0, 56, "Subsection"],
Cell[912118, 20985, 139, 3, 135, "Text"],
Cell[912260, 20990, 6075, 147, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[918372, 21142, 38, 0, 56, "Subsection"],
Cell[918413, 21144, 234, 6, 135, "Text"],
Cell[918650, 21152, 493, 7, 135, "Print",
 CellTags->"Info3256109559-6977851"],
Cell[919146, 21161, 5432, 112, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[924615, 21278, 31, 0, 56, "Subsection"],
Cell[924649, 21280, 242, 6, 95, "Text",
 CellTags->"Info3257154725-3925981"],
Cell[924894, 21288, 1107, 20, 726, "Text"],
Cell[926004, 21310, 695, 20, 221, "Input",
 InitializationCell->True],
Cell[926702, 21332, 17079, 425, 5001, "Input",
 InitializationCell->True],
Cell[943784, 21759, 9689, 232, 2845, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[953510, 21996, 37, 0, 40, "Subsubsection"],
Cell[953550, 21998, 591, 17, 135, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[954178, 22020, 43, 0, 53, "Subsection"],
Cell[954224, 22022, 123, 1, 62, "Text"],
Cell[954350, 22025, 6906, 143, 1140, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[961293, 22173, 27, 0, 53, "Subsection"],
Cell[961323, 22175, 287, 9, 135, "Text"],
Cell[961613, 22186, 851, 25, 135, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[962491, 22215, 108, 1, 58, "Section"],
Cell[962602, 22218, 1470, 35, 229, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[964097, 22257, 55, 0, 96, "Section"],
Cell[964155, 22259, 6221, 148, 1407, "Input",
 InitializationCell->True]
}, Closed]]
}
]
*)

(* End of internal cache information *)
